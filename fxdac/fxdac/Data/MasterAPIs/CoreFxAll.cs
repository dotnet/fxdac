[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("Microsoft.CSharp")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("Microsoft.CSharp")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("Microsoft.CSharp")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace Microsoft.CSharp.RuntimeBinder {
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public static partial class Binder {
    public static System.Runtime.CompilerServices.CallSiteBinder BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags flags, System.Linq.Expressions.ExpressionType operation, System.Type context, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo> argumentInfo) { return default(System.Runtime.CompilerServices.CallSiteBinder); }
    public static System.Runtime.CompilerServices.CallSiteBinder Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags flags, System.Type type, System.Type context) { return default(System.Runtime.CompilerServices.CallSiteBinder); }
    public static System.Runtime.CompilerServices.CallSiteBinder GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags flags, System.Type context, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo> argumentInfo) { return default(System.Runtime.CompilerServices.CallSiteBinder); }
    public static System.Runtime.CompilerServices.CallSiteBinder GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags flags, string name, System.Type context, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo> argumentInfo) { return default(System.Runtime.CompilerServices.CallSiteBinder); }
    public static System.Runtime.CompilerServices.CallSiteBinder Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags flags, System.Type context, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo> argumentInfo) { return default(System.Runtime.CompilerServices.CallSiteBinder); }
    public static System.Runtime.CompilerServices.CallSiteBinder InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags flags, System.Type context, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo> argumentInfo) { return default(System.Runtime.CompilerServices.CallSiteBinder); }
    public static System.Runtime.CompilerServices.CallSiteBinder InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags flags, string name, System.Collections.Generic.IEnumerable<System.Type> typeArguments, System.Type context, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo> argumentInfo) { return default(System.Runtime.CompilerServices.CallSiteBinder); }
    public static System.Runtime.CompilerServices.CallSiteBinder IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags flags, string name, System.Type context) { return default(System.Runtime.CompilerServices.CallSiteBinder); }
    public static System.Runtime.CompilerServices.CallSiteBinder SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags flags, System.Type context, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo> argumentInfo) { return default(System.Runtime.CompilerServices.CallSiteBinder); }
    public static System.Runtime.CompilerServices.CallSiteBinder SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags flags, string name, System.Type context, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo> argumentInfo) { return default(System.Runtime.CompilerServices.CallSiteBinder); }
    public static System.Runtime.CompilerServices.CallSiteBinder UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags flags, System.Linq.Expressions.ExpressionType operation, System.Type context, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo> argumentInfo) { return default(System.Runtime.CompilerServices.CallSiteBinder); }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class CSharpArgumentInfo {
    internal CSharpArgumentInfo() { }
    public static Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo Create(Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags flags, string name) { return default(Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo); }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.FlagsAttribute]
  public enum CSharpArgumentInfoFlags {
    Constant = 2,
    IsOut = 16,
    IsRef = 8,
    IsStaticType = 32,
    NamedArgument = 4,
    None = 0,
    UseCompileTimeType = 1,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.FlagsAttribute]
  public enum CSharpBinderFlags {
    BinaryOperationLogical = 8,
    CheckedContext = 1,
    ConvertArrayIndex = 32,
    ConvertExplicit = 16,
    InvokeSimpleName = 2,
    InvokeSpecialName = 4,
    None = 0,
    ResultDiscarded = 256,
    ResultIndexed = 64,
    ValueFromCompoundAssignment = 128,
  }
  public partial class RuntimeBinderException : System.Exception {
    public RuntimeBinderException() { }
    public RuntimeBinderException(string message) { }
    public RuntimeBinderException(string message, System.Exception innerException) { }
  }
  public partial class RuntimeBinderInternalCompilerException : System.Exception {
    public RuntimeBinderInternalCompilerException() { }
    public RuntimeBinderInternalCompilerException(string message) { }
    public RuntimeBinderInternalCompilerException(string message, System.Exception innerException) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("Microsoft.VisualBasic")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("Microsoft.VisualBasic")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("Microsoft.VisualBasic")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace Microsoft.VisualBasic {
  public enum CallType {
    Get = 2,
    Let = 4,
    Method = 1,
    Set = 8,
  }
  [Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute]
  public sealed partial class Constants {
    internal Constants() { }
    public const string vbBack = "\b";
    public const string vbCr = "\r";
    public const string vbCrLf = "\r\n";
    public const string vbFormFeed = "\f";
    public const string vbLf = "\n";
    [System.ObsoleteAttribute("For a carriage return and line feed, use vbCrLf.  For the current platform's newline, use System.Environment.NewLine.")]
    public const string vbNewLine = "\r\n";
    public const string vbNullChar = "\0";
    public const string vbNullString = null;
    public const string vbTab = "\t";
    public const string vbVerticalTab = "\v";
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4), AllowMultiple=false, Inherited=false)]
  public sealed partial class HideModuleNameAttribute : System.Attribute {
    public HideModuleNameAttribute() { }
  }
  [Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute]
  public sealed partial class Strings {
    internal Strings() { }
    public static int AscW(char String) { return default(int); }
    public static int AscW(string String) { return default(int); }
    public static char ChrW(int CharCode) { return default(char); }
  }
}
namespace Microsoft.VisualBasic.CompilerServices {
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class Conversions {
    internal Conversions() { }
    public static object ChangeType(object Expression, System.Type TargetType) { return default(object); }
    public static bool ToBoolean(object Value) { return default(bool); }
    public static bool ToBoolean(string Value) { return default(bool); }
    public static byte ToByte(object Value) { return default(byte); }
    public static byte ToByte(string Value) { return default(byte); }
    public static char ToChar(object Value) { return default(char); }
    public static char ToChar(string Value) { return default(char); }
    public static char[] ToCharArrayRankOne(object Value) { return default(char[]); }
    public static char[] ToCharArrayRankOne(string Value) { return default(char[]); }
    public static System.DateTime ToDate(object Value) { return default(System.DateTime); }
    public static System.DateTime ToDate(string Value) { return default(System.DateTime); }
    public static decimal ToDecimal(bool Value) { return default(decimal); }
    public static decimal ToDecimal(object Value) { return default(decimal); }
    public static decimal ToDecimal(string Value) { return default(decimal); }
    public static double ToDouble(object Value) { return default(double); }
    public static double ToDouble(string Value) { return default(double); }
    public static T ToGenericParameter<T>(object Value) { return default(T); }
    public static int ToInteger(object Value) { return default(int); }
    public static int ToInteger(string Value) { return default(int); }
    public static long ToLong(object Value) { return default(long); }
    public static long ToLong(string Value) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(object Value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(string Value) { return default(sbyte); }
    public static short ToShort(object Value) { return default(short); }
    public static short ToShort(string Value) { return default(short); }
    public static float ToSingle(object Value) { return default(float); }
    public static float ToSingle(string Value) { return default(float); }
    public static string ToString(bool Value) { return default(string); }
    public static string ToString(byte Value) { return default(string); }
    public static string ToString(char Value) { return default(string); }
    public static string ToString(System.DateTime Value) { return default(string); }
    public static string ToString(decimal Value) { return default(string); }
    public static string ToString(double Value) { return default(string); }
    public static string ToString(short Value) { return default(string); }
    public static string ToString(int Value) { return default(string); }
    public static string ToString(long Value) { return default(string); }
    public static string ToString(object Value) { return default(string); }
    public static string ToString(float Value) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(uint Value) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(ulong Value) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInteger(object Value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInteger(string Value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToULong(object Value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToULong(string Value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUShort(object Value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUShort(string Value) { return default(ushort); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4), AllowMultiple=false, Inherited=false)]
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class DesignerGeneratedAttribute : System.Attribute {
    public DesignerGeneratedAttribute() { }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class IncompleteInitialization : System.Exception {
    public IncompleteInitialization() { }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class NewLateBinding {
    internal NewLateBinding() { }
    public static object LateCall(object Instance, System.Type Type, string MemberName, object[] Arguments, string[] ArgumentNames, System.Type[] TypeArguments, bool[] CopyBack, bool IgnoreReturn) { return default(object); }
    public static object LateGet(object Instance, System.Type Type, string MemberName, object[] Arguments, string[] ArgumentNames, System.Type[] TypeArguments, bool[] CopyBack) { return default(object); }
    public static object LateIndexGet(object Instance, object[] Arguments, string[] ArgumentNames) { return default(object); }
    public static void LateIndexSet(object Instance, object[] Arguments, string[] ArgumentNames) { }
    public static void LateIndexSetComplex(object Instance, object[] Arguments, string[] ArgumentNames, bool OptimisticSet, bool RValueBase) { }
    public static void LateSet(object Instance, System.Type Type, string MemberName, object[] Arguments, string[] ArgumentNames, System.Type[] TypeArguments) { }
    public static void LateSet(object Instance, System.Type Type, string MemberName, object[] Arguments, string[] ArgumentNames, System.Type[] TypeArguments, bool OptimisticSet, bool RValueBase, Microsoft.VisualBasic.CallType CallType) { }
    public static void LateSetComplex(object Instance, System.Type Type, string MemberName, object[] Arguments, string[] ArgumentNames, System.Type[] TypeArguments, bool OptimisticSet, bool RValueBase) { }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class ObjectFlowControl {
    internal ObjectFlowControl() { }
    public static void CheckForSyncLockOnValueType(object Expression) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public sealed partial class ForLoopControl {
      internal ForLoopControl() { }
      public static bool ForLoopInitObj(object Counter, object Start, object Limit, object StepValue, ref object LoopForResult, ref object CounterResult) { return default(bool); }
      public static bool ForNextCheckDec(decimal count, decimal limit, decimal StepValue) { return default(bool); }
      public static bool ForNextCheckObj(object Counter, object LoopObj, ref object CounterResult) { return default(bool); }
      public static bool ForNextCheckR4(float count, float limit, float StepValue) { return default(bool); }
      public static bool ForNextCheckR8(double count, double limit, double StepValue) { return default(bool); }
    }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class Operators {
    internal Operators() { }
    public static object AddObject(object Left, object Right) { return default(object); }
    public static object AndObject(object Left, object Right) { return default(object); }
    public static object CompareObjectEqual(object Left, object Right, bool TextCompare) { return default(object); }
    public static object CompareObjectGreater(object Left, object Right, bool TextCompare) { return default(object); }
    public static object CompareObjectGreaterEqual(object Left, object Right, bool TextCompare) { return default(object); }
    public static object CompareObjectLess(object Left, object Right, bool TextCompare) { return default(object); }
    public static object CompareObjectLessEqual(object Left, object Right, bool TextCompare) { return default(object); }
    public static object CompareObjectNotEqual(object Left, object Right, bool TextCompare) { return default(object); }
    public static int CompareString(string Left, string Right, bool TextCompare) { return default(int); }
    public static object ConcatenateObject(object Left, object Right) { return default(object); }
    public static bool ConditionalCompareObjectEqual(object Left, object Right, bool TextCompare) { return default(bool); }
    public static bool ConditionalCompareObjectGreater(object Left, object Right, bool TextCompare) { return default(bool); }
    public static bool ConditionalCompareObjectGreaterEqual(object Left, object Right, bool TextCompare) { return default(bool); }
    public static bool ConditionalCompareObjectLess(object Left, object Right, bool TextCompare) { return default(bool); }
    public static bool ConditionalCompareObjectLessEqual(object Left, object Right, bool TextCompare) { return default(bool); }
    public static bool ConditionalCompareObjectNotEqual(object Left, object Right, bool TextCompare) { return default(bool); }
    public static object DivideObject(object Left, object Right) { return default(object); }
    public static object ExponentObject(object Left, object Right) { return default(object); }
    public static object IntDivideObject(object Left, object Right) { return default(object); }
    public static object LeftShiftObject(object Operand, object Amount) { return default(object); }
    public static object ModObject(object Left, object Right) { return default(object); }
    public static object MultiplyObject(object Left, object Right) { return default(object); }
    public static object NegateObject(object Operand) { return default(object); }
    public static object NotObject(object Operand) { return default(object); }
    public static object OrObject(object Left, object Right) { return default(object); }
    public static object PlusObject(object Operand) { return default(object); }
    public static object RightShiftObject(object Operand, object Amount) { return default(object); }
    public static object SubtractObject(object Left, object Right) { return default(object); }
    public static object XorObject(object Left, object Right) { return default(object); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2048), Inherited=false, AllowMultiple=false)]
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class OptionCompareAttribute : System.Attribute {
    public OptionCompareAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4), Inherited=false, AllowMultiple=false)]
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class OptionTextAttribute : System.Attribute {
    public OptionTextAttribute() { }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class ProjectData {
    internal ProjectData() { }
    [System.Security.SecuritySafeCriticalAttribute]
    public static void ClearProjectError() { }
    [System.Security.SecuritySafeCriticalAttribute]
    public static void SetProjectError(System.Exception ex) { }
    [System.Security.SecuritySafeCriticalAttribute]
    public static void SetProjectError(System.Exception ex, int lErl) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4), Inherited=false, AllowMultiple=false)]
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class StandardModuleAttribute : System.Attribute {
    public StandardModuleAttribute() { }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class StaticLocalInitFlag {
    public short State;
    public StaticLocalInitFlag() { }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class Utils {
    internal Utils() { }
    public static System.Array CopyArray(System.Array arySrc, System.Array aryDest) { return default(System.Array); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("Microsoft.Win32.Primitives")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("Microsoft.Win32.Primitives")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("Microsoft.Win32.Primitives")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.ComponentModel {
  public partial class Win32Exception : System.Exception {
    public Win32Exception() { }
    public Win32Exception(int error) { }
    public Win32Exception(int error, string message) { }
    public Win32Exception(string message) { }
    public Win32Exception(string message, System.Exception innerException) { }
    public int NativeErrorCode { get { return default(int); } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("Microsoft.Win32.Registry")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("Microsoft.Win32.Registry")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("Microsoft.Win32.Registry")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace Microsoft.Win32 {
  public static partial class Registry {
    public static readonly Microsoft.Win32.RegistryKey ClassesRoot;
    public static readonly Microsoft.Win32.RegistryKey CurrentConfig;
    public static readonly Microsoft.Win32.RegistryKey CurrentUser;
    public static readonly Microsoft.Win32.RegistryKey LocalMachine;
    public static readonly Microsoft.Win32.RegistryKey PerformanceData;
    public static readonly Microsoft.Win32.RegistryKey Users;
    public static object GetValue(string keyName, string valueName, object defaultValue) { return default(object); }
    public static void SetValue(string keyName, string valueName, object value) { }
    public static void SetValue(string keyName, string valueName, object value, Microsoft.Win32.RegistryValueKind valueKind) { }
  }
  public enum RegistryHive {
    ClassesRoot = -2147483648,
    CurrentConfig = -2147483643,
    CurrentUser = -2147483647,
    LocalMachine = -2147483646,
    PerformanceData = -2147483644,
    Users = -2147483645,
  }
  public sealed partial class RegistryKey : System.IDisposable {
    internal RegistryKey() { }
    public Microsoft.Win32.SafeHandles.SafeRegistryHandle Handle { [System.Security.SecurityCriticalAttribute]get { return default(Microsoft.Win32.SafeHandles.SafeRegistryHandle); } }
    public string Name { get { return default(string); } }
    public int SubKeyCount { get { return default(int); } }
    public int ValueCount { get { return default(int); } }
    public Microsoft.Win32.RegistryView View { get { return default(Microsoft.Win32.RegistryView); } }
    public Microsoft.Win32.RegistryKey CreateSubKey(string subkey) { return default(Microsoft.Win32.RegistryKey); }
    public Microsoft.Win32.RegistryKey CreateSubKey(string subkey, bool writable) { return default(Microsoft.Win32.RegistryKey); }
    public Microsoft.Win32.RegistryKey CreateSubKey(string subkey, bool writable, Microsoft.Win32.RegistryOptions options) { return default(Microsoft.Win32.RegistryKey); }
    public void DeleteSubKey(string subkey) { }
    public void DeleteSubKey(string subkey, bool throwOnMissingSubKey) { }
    public void DeleteSubKeyTree(string subkey) { }
    public void DeleteSubKeyTree(string subkey, bool throwOnMissingSubKey) { }
    public void DeleteValue(string name) { }
    public void DeleteValue(string name, bool throwOnMissingValue) { }
    public void Dispose() { }
    public void Flush() { }
    [System.Security.SecurityCriticalAttribute]
    public static Microsoft.Win32.RegistryKey FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle handle) { return default(Microsoft.Win32.RegistryKey); }
    [System.Security.SecurityCriticalAttribute]
    public static Microsoft.Win32.RegistryKey FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle handle, Microsoft.Win32.RegistryView view) { return default(Microsoft.Win32.RegistryKey); }
    public string[] GetSubKeyNames() { return default(string[]); }
    public object GetValue(string name) { return default(object); }
    public object GetValue(string name, object defaultValue) { return default(object); }
    public object GetValue(string name, object defaultValue, Microsoft.Win32.RegistryValueOptions options) { return default(object); }
    public Microsoft.Win32.RegistryValueKind GetValueKind(string name) { return default(Microsoft.Win32.RegistryValueKind); }
    public string[] GetValueNames() { return default(string[]); }
    public static Microsoft.Win32.RegistryKey OpenBaseKey(Microsoft.Win32.RegistryHive hKey, Microsoft.Win32.RegistryView view) { return default(Microsoft.Win32.RegistryKey); }
    public Microsoft.Win32.RegistryKey OpenSubKey(string name) { return default(Microsoft.Win32.RegistryKey); }
    public Microsoft.Win32.RegistryKey OpenSubKey(string name, bool writable) { return default(Microsoft.Win32.RegistryKey); }
    public Microsoft.Win32.RegistryKey OpenSubKey(string name, System.Security.AccessControl.RegistryRights rights) { return default(Microsoft.Win32.RegistryKey); }
    public void SetValue(string name, object value) { }
    public void SetValue(string name, object value, Microsoft.Win32.RegistryValueKind valueKind) { }
    public override string ToString() { return default(string); }
  }
  [System.FlagsAttribute]
  public enum RegistryOptions {
    None = 0,
    Volatile = 1,
  }
  public enum RegistryValueKind {
    Binary = 3,
    DWord = 4,
    ExpandString = 2,
    MultiString = 7,
    None = -1,
    QWord = 11,
    String = 1,
    Unknown = 0,
  }
  [System.FlagsAttribute]
  public enum RegistryValueOptions {
    DoNotExpandEnvironmentNames = 1,
    None = 0,
  }
  public enum RegistryView {
    Default = 0,
    Registry32 = 512,
    Registry64 = 256,
  }
}
namespace Microsoft.Win32.SafeHandles {
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class SafeRegistryHandle : System.Runtime.InteropServices.SafeHandle {
    [System.Security.SecurityCriticalAttribute]
    public SafeRegistryHandle(System.IntPtr preexistingHandle, bool ownsHandle) : base (default(System.IntPtr), default(bool)) { }
    public override bool IsInvalid { [System.Security.SecurityCriticalAttribute]get { return default(bool); } }
    [System.Security.SecurityCriticalAttribute]
    protected override bool ReleaseHandle() { return default(bool); }
  }
}
namespace System.Security.AccessControl {
  [System.FlagsAttribute]
  public enum RegistryRights {
    ChangePermissions = 262144,
    CreateLink = 32,
    CreateSubKey = 4,
    Delete = 65536,
    EnumerateSubKeys = 8,
    ExecuteKey = 131097,
    FullControl = 983103,
    Notify = 16,
    QueryValues = 1,
    ReadKey = 131097,
    ReadPermissions = 131072,
    SetValue = 2,
    TakeOwnership = 524288,
    WriteKey = 131078,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("Microsoft.Win32.Registry.AccessControl")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("Microsoft.Win32.Registry.AccessControl")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("Microsoft.Win32.Registry.AccessControl")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace Microsoft.Win32 {
  [System.Security.SecurityCriticalAttribute]
  public static partial class RegistryAclExtensions {
    public static System.Security.AccessControl.RegistrySecurity GetAccessControl(this Microsoft.Win32.RegistryKey key) { return default(System.Security.AccessControl.RegistrySecurity); }
    public static System.Security.AccessControl.RegistrySecurity GetAccessControl(this Microsoft.Win32.RegistryKey key, System.Security.AccessControl.AccessControlSections includeSections) { return default(System.Security.AccessControl.RegistrySecurity); }
    public static void SetAccessControl(this Microsoft.Win32.RegistryKey key, System.Security.AccessControl.RegistrySecurity registrySecurity) { }
  }
}
namespace System.Security.AccessControl {
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class RegistryAccessRule : System.Security.AccessControl.AccessRule {
    public RegistryAccessRule(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public RegistryAccessRule(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public RegistryAccessRule(string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public RegistryAccessRule(string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public System.Security.AccessControl.RegistryRights RegistryRights { get { return default(System.Security.AccessControl.RegistryRights); } }
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class RegistryAuditRule : System.Security.AccessControl.AuditRule {
    public RegistryAuditRule(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public RegistryAuditRule(string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public System.Security.AccessControl.RegistryRights RegistryRights { get { return default(System.Security.AccessControl.RegistryRights); } }
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class RegistrySecurity : System.Security.AccessControl.NativeObjectSecurity {
    public RegistrySecurity() : base (default(bool), default(System.Security.AccessControl.ResourceType)) { }
    public override System.Type AccessRightType { get { return default(System.Type); } }
    public override System.Type AccessRuleType { get { return default(System.Type); } }
    public override System.Type AuditRuleType { get { return default(System.Type); } }
    public override System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type) { return default(System.Security.AccessControl.AccessRule); }
    public void AddAccessRule(System.Security.AccessControl.RegistryAccessRule rule) { }
    public void AddAuditRule(System.Security.AccessControl.RegistryAuditRule rule) { }
    public override System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags) { return default(System.Security.AccessControl.AuditRule); }
    public bool RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule rule) { return default(bool); }
    public void RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule rule) { }
    public void RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule rule) { }
    public bool RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule rule) { return default(bool); }
    public void RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule rule) { }
    public void RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule rule) { }
    public void ResetAccessRule(System.Security.AccessControl.RegistryAccessRule rule) { }
    public void SetAccessRule(System.Security.AccessControl.RegistryAccessRule rule) { }
    public void SetAuditRule(System.Security.AccessControl.RegistryAuditRule rule) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.AppContext")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.AppContext")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.AppContext")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System {
  public static partial class AppContext {
    public static string BaseDirectory { get { return default(string); } }
    public static string TargetFrameworkName { get { return default(string); } }
    public static object GetData(string name) { return default(object); }
    public static void SetSwitch(string switchName, bool isEnabled) { }
    public static bool TryGetSwitch(string switchName, out bool isEnabled) { isEnabled = default(bool); return default(bool); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Collections")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Collections")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Collections")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Collections {
  public sealed partial class BitArray : System.Collections.ICollection, System.Collections.IEnumerable {
    public BitArray(bool[] values) { }
    public BitArray(byte[] bytes) { }
    public BitArray(System.Collections.BitArray bits) { }
    public BitArray(int length) { }
    public BitArray(int length, bool defaultValue) { }
    public BitArray(int[] values) { }
    public bool this[int index] { get { return default(bool); } set { } }
    public int Length { get { return default(int); } set { } }
    int System.Collections.ICollection.Count { get { return default(int); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public System.Collections.BitArray And(System.Collections.BitArray value) { return default(System.Collections.BitArray); }
    public bool Get(int index) { return default(bool); }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public System.Collections.BitArray Not() { return default(System.Collections.BitArray); }
    public System.Collections.BitArray Or(System.Collections.BitArray value) { return default(System.Collections.BitArray); }
    public void Set(int index, bool value) { }
    public void SetAll(bool value) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    public System.Collections.BitArray Xor(System.Collections.BitArray value) { return default(System.Collections.BitArray); }
  }
  public static partial class StructuralComparisons {
    public static System.Collections.IComparer StructuralComparer { get { return default(System.Collections.IComparer); } }
    public static System.Collections.IEqualityComparer StructuralEqualityComparer { get { return default(System.Collections.IEqualityComparer); } }
  }
}
namespace System.Collections.Generic {
  public abstract partial class Comparer<T> : System.Collections.Generic.IComparer<T>, System.Collections.IComparer {
    protected Comparer() { }
    public static System.Collections.Generic.Comparer<T> Default { get { return default(System.Collections.Generic.Comparer<T>); } }
    public abstract int Compare(T x, T y);
    public static System.Collections.Generic.Comparer<T> Create(System.Comparison<T> comparison) { return default(System.Collections.Generic.Comparer<T>); }
    int System.Collections.IComparer.Compare(object x, object y) { return default(int); }
  }
  public partial class Dictionary<TKey, TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    public Dictionary() { }
    public Dictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary) { }
    public Dictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Collections.Generic.IEqualityComparer<TKey> comparer) { }
    public Dictionary(System.Collections.Generic.IEqualityComparer<TKey> comparer) { }
    public Dictionary(int capacity) { }
    public Dictionary(int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer) { }
    public System.Collections.Generic.IEqualityComparer<TKey> Comparer { get { return default(System.Collections.Generic.IEqualityComparer<TKey>); } }
    public int Count { get { return default(int); } }
    public TValue this[TKey key] { get { return default(TValue); } set { } }
    public System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection Keys { get { return default(System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection); } }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get { return default(bool); } }
    System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get { return default(System.Collections.Generic.ICollection<TKey>); } }
    System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get { return default(System.Collections.Generic.ICollection<TValue>); } }
    System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get { return default(System.Collections.Generic.IEnumerable<TKey>); } }
    System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get { return default(System.Collections.Generic.IEnumerable<TValue>); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IDictionary.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IDictionary.IsReadOnly { get { return default(bool); } }
    object System.Collections.IDictionary.this[object key] { get { return default(object); } set { } }
    System.Collections.ICollection System.Collections.IDictionary.Keys { get { return default(System.Collections.ICollection); } }
    System.Collections.ICollection System.Collections.IDictionary.Values { get { return default(System.Collections.ICollection); } }
    public System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection Values { get { return default(System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection); } }
    public void Add(TKey key, TValue value) { }
    public void Clear() { }
    public bool ContainsKey(TKey key) { return default(bool); }
    public bool ContainsValue(TValue value) { return default(bool); }
    public System.Collections.Generic.Dictionary<TKey, TValue>.Enumerator GetEnumerator() { return default(System.Collections.Generic.Dictionary<TKey, TValue>.Enumerator); }
    public bool Remove(TKey key) { return default(bool); }
    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair) { }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair) { return default(bool); }
    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[] array, int index) { }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair) { return default(bool); }
    System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    void System.Collections.IDictionary.Add(object key, object value) { }
    bool System.Collections.IDictionary.Contains(object key) { return default(bool); }
    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    void System.Collections.IDictionary.Remove(object key) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public bool TryGetValue(TKey key, out TValue value) { value = default(TValue); return default(bool); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator, System.IDisposable {
      public System.Collections.Generic.KeyValuePair<TKey, TValue> Current { get { return default(System.Collections.Generic.KeyValuePair<TKey, TValue>); } }
      System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.Entry { get { return default(System.Collections.DictionaryEntry); } }
      object System.Collections.IDictionaryEnumerator.Key { get { return default(object); } }
      object System.Collections.IDictionaryEnumerator.Value { get { return default(object); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public void Dispose() { }
      public bool MoveNext() { return default(bool); }
      void System.Collections.IEnumerator.Reset() { }
    }
    public sealed partial class KeyCollection : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IReadOnlyCollection<TKey>, System.Collections.ICollection, System.Collections.IEnumerable {
      public KeyCollection(System.Collections.Generic.Dictionary<TKey, TValue> dictionary) { }
      public int Count { get { return default(int); } }
      bool System.Collections.Generic.ICollection<TKey>.IsReadOnly { get { return default(bool); } }
      bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
      object System.Collections.ICollection.SyncRoot { get { return default(object); } }
      public void CopyTo(TKey[] array, int index) { }
      public System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection.Enumerator GetEnumerator() { return default(System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection.Enumerator); }
      void System.Collections.Generic.ICollection<TKey>.Add(TKey item) { }
      void System.Collections.Generic.ICollection<TKey>.Clear() { }
      bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item) { return default(bool); }
      bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item) { return default(bool); }
      System.Collections.Generic.IEnumerator<TKey> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<TKey>); }
      void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
      System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
      [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
      public partial struct Enumerator : System.Collections.Generic.IEnumerator<TKey>, System.Collections.IEnumerator, System.IDisposable {
        public TKey Current { get { return default(TKey); } }
        object System.Collections.IEnumerator.Current { get { return default(object); } }
        public void Dispose() { }
        public bool MoveNext() { return default(bool); }
        void System.Collections.IEnumerator.Reset() { }
      }
    }
    public sealed partial class ValueCollection : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.Generic.IReadOnlyCollection<TValue>, System.Collections.ICollection, System.Collections.IEnumerable {
      public ValueCollection(System.Collections.Generic.Dictionary<TKey, TValue> dictionary) { }
      public int Count { get { return default(int); } }
      bool System.Collections.Generic.ICollection<TValue>.IsReadOnly { get { return default(bool); } }
      bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
      object System.Collections.ICollection.SyncRoot { get { return default(object); } }
      public void CopyTo(TValue[] array, int index) { }
      public System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection.Enumerator GetEnumerator() { return default(System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection.Enumerator); }
      void System.Collections.Generic.ICollection<TValue>.Add(TValue item) { }
      void System.Collections.Generic.ICollection<TValue>.Clear() { }
      bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item) { return default(bool); }
      bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item) { return default(bool); }
      System.Collections.Generic.IEnumerator<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<TValue>); }
      void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
      System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
      [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
      public partial struct Enumerator : System.Collections.Generic.IEnumerator<TValue>, System.Collections.IEnumerator, System.IDisposable {
        public TValue Current { get { return default(TValue); } }
        object System.Collections.IEnumerator.Current { get { return default(object); } }
        public void Dispose() { }
        public bool MoveNext() { return default(bool); }
        void System.Collections.IEnumerator.Reset() { }
      }
    }
  }
  public abstract partial class EqualityComparer<T> : System.Collections.Generic.IEqualityComparer<T>, System.Collections.IEqualityComparer {
    protected EqualityComparer() { }
    public static System.Collections.Generic.EqualityComparer<T> Default { get { return default(System.Collections.Generic.EqualityComparer<T>); } }
    public abstract bool Equals(T x, T y);
    public abstract int GetHashCode(T obj);
    bool System.Collections.IEqualityComparer.Equals(object x, object y) { return default(bool); }
    int System.Collections.IEqualityComparer.GetHashCode(object obj) { return default(int); }
  }
  public partial class HashSet<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.ISet<T>, System.Collections.IEnumerable {
    public HashSet() { }
    public HashSet(System.Collections.Generic.IEnumerable<T> collection) { }
    public HashSet(System.Collections.Generic.IEnumerable<T> collection, System.Collections.Generic.IEqualityComparer<T> comparer) { }
    public HashSet(System.Collections.Generic.IEqualityComparer<T> comparer) { }
    public System.Collections.Generic.IEqualityComparer<T> Comparer { get { return default(System.Collections.Generic.IEqualityComparer<T>); } }
    public int Count { get { return default(int); } }
    bool System.Collections.Generic.ICollection<T>.IsReadOnly { get { return default(bool); } }
    public bool Add(T item) { return default(bool); }
    public void Clear() { }
    public bool Contains(T item) { return default(bool); }
    public void CopyTo(T[] array) { }
    public void CopyTo(T[] array, int arrayIndex) { }
    public void CopyTo(T[] array, int arrayIndex, int count) { }
    public void ExceptWith(System.Collections.Generic.IEnumerable<T> other) { }
    public System.Collections.Generic.HashSet<T>.Enumerator GetEnumerator() { return default(System.Collections.Generic.HashSet<T>.Enumerator); }
    public void IntersectWith(System.Collections.Generic.IEnumerable<T> other) { }
    public bool IsProperSubsetOf(System.Collections.Generic.IEnumerable<T> other) { return default(bool); }
    public bool IsProperSupersetOf(System.Collections.Generic.IEnumerable<T> other) { return default(bool); }
    public bool IsSubsetOf(System.Collections.Generic.IEnumerable<T> other) { return default(bool); }
    public bool IsSupersetOf(System.Collections.Generic.IEnumerable<T> other) { return default(bool); }
    public bool Overlaps(System.Collections.Generic.IEnumerable<T> other) { return default(bool); }
    public bool Remove(T item) { return default(bool); }
    public int RemoveWhere(System.Predicate<T> match) { return default(int); }
    public bool SetEquals(System.Collections.Generic.IEnumerable<T> other) { return default(bool); }
    public void SymmetricExceptWith(System.Collections.Generic.IEnumerable<T> other) { }
    void System.Collections.Generic.ICollection<T>.Add(T item) { }
    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public void TrimExcess() { }
    public void UnionWith(System.Collections.Generic.IEnumerable<T> other) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable {
      public T Current { get { return default(T); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public void Dispose() { }
      public bool MoveNext() { return default(bool); }
      void System.Collections.IEnumerator.Reset() { }
    }
  }
  public partial class LinkedList<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.ICollection, System.Collections.IEnumerable {
    public LinkedList() { }
    public LinkedList(System.Collections.Generic.IEnumerable<T> collection) { }
    public int Count { get { return default(int); } }
    public System.Collections.Generic.LinkedListNode<T> First { get { return default(System.Collections.Generic.LinkedListNode<T>); } }
    public System.Collections.Generic.LinkedListNode<T> Last { get { return default(System.Collections.Generic.LinkedListNode<T>); } }
    bool System.Collections.Generic.ICollection<T>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public System.Collections.Generic.LinkedListNode<T> AddAfter(System.Collections.Generic.LinkedListNode<T> node, T value) { return default(System.Collections.Generic.LinkedListNode<T>); }
    public void AddAfter(System.Collections.Generic.LinkedListNode<T> node, System.Collections.Generic.LinkedListNode<T> newNode) { }
    public System.Collections.Generic.LinkedListNode<T> AddBefore(System.Collections.Generic.LinkedListNode<T> node, T value) { return default(System.Collections.Generic.LinkedListNode<T>); }
    public void AddBefore(System.Collections.Generic.LinkedListNode<T> node, System.Collections.Generic.LinkedListNode<T> newNode) { }
    public System.Collections.Generic.LinkedListNode<T> AddFirst(T value) { return default(System.Collections.Generic.LinkedListNode<T>); }
    public void AddFirst(System.Collections.Generic.LinkedListNode<T> node) { }
    public System.Collections.Generic.LinkedListNode<T> AddLast(T value) { return default(System.Collections.Generic.LinkedListNode<T>); }
    public void AddLast(System.Collections.Generic.LinkedListNode<T> node) { }
    public void Clear() { }
    public bool Contains(T value) { return default(bool); }
    public void CopyTo(T[] array, int index) { }
    public System.Collections.Generic.LinkedListNode<T> Find(T value) { return default(System.Collections.Generic.LinkedListNode<T>); }
    public System.Collections.Generic.LinkedListNode<T> FindLast(T value) { return default(System.Collections.Generic.LinkedListNode<T>); }
    public System.Collections.Generic.LinkedList<T>.Enumerator GetEnumerator() { return default(System.Collections.Generic.LinkedList<T>.Enumerator); }
    public bool Remove(T value) { return default(bool); }
    public void Remove(System.Collections.Generic.LinkedListNode<T> node) { }
    public void RemoveFirst() { }
    public void RemoveLast() { }
    void System.Collections.Generic.ICollection<T>.Add(T value) { }
    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable {
      public T Current { get { return default(T); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public void Dispose() { }
      public bool MoveNext() { return default(bool); }
      void System.Collections.IEnumerator.Reset() { }
    }
  }
  public sealed partial class LinkedListNode<T> {
    public LinkedListNode(T value) { }
    public System.Collections.Generic.LinkedList<T> List { get { return default(System.Collections.Generic.LinkedList<T>); } }
    public System.Collections.Generic.LinkedListNode<T> Next { get { return default(System.Collections.Generic.LinkedListNode<T>); } }
    public System.Collections.Generic.LinkedListNode<T> Previous { get { return default(System.Collections.Generic.LinkedListNode<T>); } }
    public T Value { get { return default(T); } set { } }
  }
  public partial class List<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public List() { }
    public List(System.Collections.Generic.IEnumerable<T> collection) { }
    public List(int capacity) { }
    public int Capacity { get { return default(int); } set { } }
    public int Count { get { return default(int); } }
    public T this[int index] { get { return default(T); } set { } }
    bool System.Collections.Generic.ICollection<T>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(T item) { }
    public void AddRange(System.Collections.Generic.IEnumerable<T> collection) { }
    public System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly() { return default(System.Collections.ObjectModel.ReadOnlyCollection<T>); }
    public int BinarySearch(T item) { return default(int); }
    public int BinarySearch(T item, System.Collections.Generic.IComparer<T> comparer) { return default(int); }
    public int BinarySearch(int index, int count, T item, System.Collections.Generic.IComparer<T> comparer) { return default(int); }
    public void Clear() { }
    public bool Contains(T item) { return default(bool); }
    public void CopyTo(T[] array) { }
    public void CopyTo(T[] array, int arrayIndex) { }
    public void CopyTo(int index, T[] array, int arrayIndex, int count) { }
    public bool Exists(System.Predicate<T> match) { return default(bool); }
    public T Find(System.Predicate<T> match) { return default(T); }
    public System.Collections.Generic.List<T> FindAll(System.Predicate<T> match) { return default(System.Collections.Generic.List<T>); }
    public int FindIndex(int startIndex, int count, System.Predicate<T> match) { return default(int); }
    public int FindIndex(int startIndex, System.Predicate<T> match) { return default(int); }
    public int FindIndex(System.Predicate<T> match) { return default(int); }
    public T FindLast(System.Predicate<T> match) { return default(T); }
    public int FindLastIndex(int startIndex, int count, System.Predicate<T> match) { return default(int); }
    public int FindLastIndex(int startIndex, System.Predicate<T> match) { return default(int); }
    public int FindLastIndex(System.Predicate<T> match) { return default(int); }
    public void ForEach(System.Action<T> action) { }
    public System.Collections.Generic.List<T>.Enumerator GetEnumerator() { return default(System.Collections.Generic.List<T>.Enumerator); }
    public System.Collections.Generic.List<T> GetRange(int index, int count) { return default(System.Collections.Generic.List<T>); }
    public int IndexOf(T item) { return default(int); }
    public int IndexOf(T item, int index) { return default(int); }
    public int IndexOf(T item, int index, int count) { return default(int); }
    public void Insert(int index, T item) { }
    public void InsertRange(int index, System.Collections.Generic.IEnumerable<T> collection) { }
    public int LastIndexOf(T item) { return default(int); }
    public int LastIndexOf(T item, int index) { return default(int); }
    public int LastIndexOf(T item, int index, int count) { return default(int); }
    public bool Remove(T item) { return default(bool); }
    public int RemoveAll(System.Predicate<T> match) { return default(int); }
    public void RemoveAt(int index) { }
    public void RemoveRange(int index, int count) { }
    public void Reverse() { }
    public void Reverse(int index, int count) { }
    public void Sort() { }
    public void Sort(System.Collections.Generic.IComparer<T> comparer) { }
    public void Sort(System.Comparison<T> comparison) { }
    public void Sort(int index, int count, System.Collections.Generic.IComparer<T> comparer) { }
    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object item) { return default(int); }
    bool System.Collections.IList.Contains(object item) { return default(bool); }
    int System.Collections.IList.IndexOf(object item) { return default(int); }
    void System.Collections.IList.Insert(int index, object item) { }
    void System.Collections.IList.Remove(object item) { }
    public T[] ToArray() { return default(T[]); }
    public void TrimExcess() { }
    public bool TrueForAll(System.Predicate<T> match) { return default(bool); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable {
      public T Current { get { return default(T); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public void Dispose() { }
      public bool MoveNext() { return default(bool); }
      void System.Collections.IEnumerator.Reset() { }
    }
  }
  public partial class Queue<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.ICollection, System.Collections.IEnumerable {
    public Queue() { }
    public Queue(System.Collections.Generic.IEnumerable<T> collection) { }
    public Queue(int capacity) { }
    public int Count { get { return default(int); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public void Clear() { }
    public bool Contains(T item) { return default(bool); }
    public void CopyTo(T[] array, int arrayIndex) { }
    public T Dequeue() { return default(T); }
    public void Enqueue(T item) { }
    public System.Collections.Generic.Queue<T>.Enumerator GetEnumerator() { return default(System.Collections.Generic.Queue<T>.Enumerator); }
    public T Peek() { return default(T); }
    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public T[] ToArray() { return default(T[]); }
    public void TrimExcess() { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable {
      public T Current { get { return default(T); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public void Dispose() { }
      public bool MoveNext() { return default(bool); }
      void System.Collections.IEnumerator.Reset() { }
    }
  }
  public partial class SortedDictionary<TKey, TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    public SortedDictionary() { }
    public SortedDictionary(System.Collections.Generic.IComparer<TKey> comparer) { }
    public SortedDictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary) { }
    public SortedDictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Collections.Generic.IComparer<TKey> comparer) { }
    public System.Collections.Generic.IComparer<TKey> Comparer { get { return default(System.Collections.Generic.IComparer<TKey>); } }
    public int Count { get { return default(int); } }
    public TValue this[TKey key] { get { return default(TValue); } set { } }
    public System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection Keys { get { return default(System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection); } }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get { return default(bool); } }
    System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get { return default(System.Collections.Generic.ICollection<TKey>); } }
    System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get { return default(System.Collections.Generic.ICollection<TValue>); } }
    System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get { return default(System.Collections.Generic.IEnumerable<TKey>); } }
    System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get { return default(System.Collections.Generic.IEnumerable<TValue>); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IDictionary.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IDictionary.IsReadOnly { get { return default(bool); } }
    object System.Collections.IDictionary.this[object key] { get { return default(object); } set { } }
    System.Collections.ICollection System.Collections.IDictionary.Keys { get { return default(System.Collections.ICollection); } }
    System.Collections.ICollection System.Collections.IDictionary.Values { get { return default(System.Collections.ICollection); } }
    public System.Collections.Generic.SortedDictionary<TKey, TValue>.ValueCollection Values { get { return default(System.Collections.Generic.SortedDictionary<TKey, TValue>.ValueCollection); } }
    public void Add(TKey key, TValue value) { }
    public void Clear() { }
    public bool ContainsKey(TKey key) { return default(bool); }
    public bool ContainsValue(TValue value) { return default(bool); }
    public void CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[] array, int index) { }
    public System.Collections.Generic.SortedDictionary<TKey, TValue>.Enumerator GetEnumerator() { return default(System.Collections.Generic.SortedDictionary<TKey, TValue>.Enumerator); }
    public bool Remove(TKey key) { return default(bool); }
    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair) { }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair) { return default(bool); }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair) { return default(bool); }
    System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    void System.Collections.IDictionary.Add(object key, object value) { }
    bool System.Collections.IDictionary.Contains(object key) { return default(bool); }
    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    void System.Collections.IDictionary.Remove(object key) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public bool TryGetValue(TKey key, out TValue value) { value = default(TValue); return default(bool); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator, System.IDisposable {
      public System.Collections.Generic.KeyValuePair<TKey, TValue> Current { get { return default(System.Collections.Generic.KeyValuePair<TKey, TValue>); } }
      System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.Entry { get { return default(System.Collections.DictionaryEntry); } }
      object System.Collections.IDictionaryEnumerator.Key { get { return default(object); } }
      object System.Collections.IDictionaryEnumerator.Value { get { return default(object); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public void Dispose() { }
      public bool MoveNext() { return default(bool); }
      void System.Collections.IEnumerator.Reset() { }
    }
    public sealed partial class KeyCollection : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IReadOnlyCollection<TKey>, System.Collections.ICollection, System.Collections.IEnumerable {
      public KeyCollection(System.Collections.Generic.SortedDictionary<TKey, TValue> dictionary) { }
      public int Count { get { return default(int); } }
      bool System.Collections.Generic.ICollection<TKey>.IsReadOnly { get { return default(bool); } }
      bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
      object System.Collections.ICollection.SyncRoot { get { return default(object); } }
      public void CopyTo(TKey[] array, int index) { }
      public System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.Enumerator GetEnumerator() { return default(System.Collections.Generic.SortedDictionary<TKey, TValue>.KeyCollection.Enumerator); }
      void System.Collections.Generic.ICollection<TKey>.Add(TKey item) { }
      void System.Collections.Generic.ICollection<TKey>.Clear() { }
      bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item) { return default(bool); }
      bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item) { return default(bool); }
      System.Collections.Generic.IEnumerator<TKey> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<TKey>); }
      void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
      System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
      [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
      public partial struct Enumerator : System.Collections.Generic.IEnumerator<TKey>, System.Collections.IEnumerator, System.IDisposable {
        public TKey Current { get { return default(TKey); } }
        object System.Collections.IEnumerator.Current { get { return default(object); } }
        public void Dispose() { }
        public bool MoveNext() { return default(bool); }
        void System.Collections.IEnumerator.Reset() { }
      }
    }
    public sealed partial class ValueCollection : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.Generic.IReadOnlyCollection<TValue>, System.Collections.ICollection, System.Collections.IEnumerable {
      public ValueCollection(System.Collections.Generic.SortedDictionary<TKey, TValue> dictionary) { }
      public int Count { get { return default(int); } }
      bool System.Collections.Generic.ICollection<TValue>.IsReadOnly { get { return default(bool); } }
      bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
      object System.Collections.ICollection.SyncRoot { get { return default(object); } }
      public void CopyTo(TValue[] array, int index) { }
      public System.Collections.Generic.SortedDictionary<TKey, TValue>.ValueCollection.Enumerator GetEnumerator() { return default(System.Collections.Generic.SortedDictionary<TKey, TValue>.ValueCollection.Enumerator); }
      void System.Collections.Generic.ICollection<TValue>.Add(TValue item) { }
      void System.Collections.Generic.ICollection<TValue>.Clear() { }
      bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item) { return default(bool); }
      bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item) { return default(bool); }
      System.Collections.Generic.IEnumerator<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<TValue>); }
      void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
      System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
      [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
      public partial struct Enumerator : System.Collections.Generic.IEnumerator<TValue>, System.Collections.IEnumerator, System.IDisposable {
        public TValue Current { get { return default(TValue); } }
        object System.Collections.IEnumerator.Current { get { return default(object); } }
        public void Dispose() { }
        public bool MoveNext() { return default(bool); }
        void System.Collections.IEnumerator.Reset() { }
      }
    }
  }
  public partial class SortedList<TKey, TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    public SortedList() { }
    public SortedList(System.Collections.Generic.IComparer<TKey> comparer) { }
    public SortedList(System.Collections.Generic.IDictionary<TKey, TValue> dictionary) { }
    public SortedList(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Collections.Generic.IComparer<TKey> comparer) { }
    public SortedList(int capacity) { }
    public SortedList(int capacity, System.Collections.Generic.IComparer<TKey> comparer) { }
    public int Capacity { get { return default(int); } set { } }
    public System.Collections.Generic.IComparer<TKey> Comparer { get { return default(System.Collections.Generic.IComparer<TKey>); } }
    public int Count { get { return default(int); } }
    public TValue this[TKey key] { get { return default(TValue); } set { } }
    public System.Collections.Generic.IList<TKey> Keys { get { return default(System.Collections.Generic.IList<TKey>); } }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get { return default(bool); } }
    System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get { return default(System.Collections.Generic.ICollection<TKey>); } }
    System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get { return default(System.Collections.Generic.ICollection<TValue>); } }
    System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get { return default(System.Collections.Generic.IEnumerable<TKey>); } }
    System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get { return default(System.Collections.Generic.IEnumerable<TValue>); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IDictionary.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IDictionary.IsReadOnly { get { return default(bool); } }
    object System.Collections.IDictionary.this[object key] { get { return default(object); } set { } }
    System.Collections.ICollection System.Collections.IDictionary.Keys { get { return default(System.Collections.ICollection); } }
    System.Collections.ICollection System.Collections.IDictionary.Values { get { return default(System.Collections.ICollection); } }
    public System.Collections.Generic.IList<TValue> Values { get { return default(System.Collections.Generic.IList<TValue>); } }
    public void Add(TKey key, TValue value) { }
    public void Clear() { }
    public bool ContainsKey(TKey key) { return default(bool); }
    public bool ContainsValue(TValue value) { return default(bool); }
    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>); }
    public int IndexOfKey(TKey key) { return default(int); }
    public int IndexOfValue(TValue value) { return default(int); }
    public bool Remove(TKey key) { return default(bool); }
    public void RemoveAt(int index) { }
    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair) { }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair) { return default(bool); }
    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) { }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair) { return default(bool); }
    System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex) { }
    void System.Collections.IDictionary.Add(object key, object value) { }
    bool System.Collections.IDictionary.Contains(object key) { return default(bool); }
    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    void System.Collections.IDictionary.Remove(object key) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public void TrimExcess() { }
    public bool TryGetValue(TKey key, out TValue value) { value = default(TValue); return default(bool); }
  }
  public partial class SortedSet<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.ISet<T>, System.Collections.ICollection, System.Collections.IEnumerable {
    public SortedSet() { }
    public SortedSet(System.Collections.Generic.IComparer<T> comparer) { }
    public SortedSet(System.Collections.Generic.IEnumerable<T> collection) { }
    public SortedSet(System.Collections.Generic.IEnumerable<T> collection, System.Collections.Generic.IComparer<T> comparer) { }
    public System.Collections.Generic.IComparer<T> Comparer { get { return default(System.Collections.Generic.IComparer<T>); } }
    public int Count { get { return default(int); } }
    public T Max { get { return default(T); } }
    public T Min { get { return default(T); } }
    bool System.Collections.Generic.ICollection<T>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public bool Add(T item) { return default(bool); }
    public virtual void Clear() { }
    public virtual bool Contains(T item) { return default(bool); }
    public void CopyTo(T[] array) { }
    public void CopyTo(T[] array, int index) { }
    public void CopyTo(T[] array, int index, int count) { }
    public void ExceptWith(System.Collections.Generic.IEnumerable<T> other) { }
    public System.Collections.Generic.SortedSet<T>.Enumerator GetEnumerator() { return default(System.Collections.Generic.SortedSet<T>.Enumerator); }
    public virtual System.Collections.Generic.SortedSet<T> GetViewBetween(T lowerValue, T upperValue) { return default(System.Collections.Generic.SortedSet<T>); }
    public virtual void IntersectWith(System.Collections.Generic.IEnumerable<T> other) { }
    public bool IsProperSubsetOf(System.Collections.Generic.IEnumerable<T> other) { return default(bool); }
    public bool IsProperSupersetOf(System.Collections.Generic.IEnumerable<T> other) { return default(bool); }
    public bool IsSubsetOf(System.Collections.Generic.IEnumerable<T> other) { return default(bool); }
    public bool IsSupersetOf(System.Collections.Generic.IEnumerable<T> other) { return default(bool); }
    public bool Overlaps(System.Collections.Generic.IEnumerable<T> other) { return default(bool); }
    public bool Remove(T item) { return default(bool); }
    public int RemoveWhere(System.Predicate<T> match) { return default(int); }
    public System.Collections.Generic.IEnumerable<T> Reverse() { return default(System.Collections.Generic.IEnumerable<T>); }
    public bool SetEquals(System.Collections.Generic.IEnumerable<T> other) { return default(bool); }
    public void SymmetricExceptWith(System.Collections.Generic.IEnumerable<T> other) { }
    void System.Collections.Generic.ICollection<T>.Add(T item) { }
    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public void UnionWith(System.Collections.Generic.IEnumerable<T> other) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable {
      public T Current { get { return default(T); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public void Dispose() { }
      public bool MoveNext() { return default(bool); }
      void System.Collections.IEnumerator.Reset() { }
    }
  }
  public partial class Stack<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.ICollection, System.Collections.IEnumerable {
    public Stack() { }
    public Stack(System.Collections.Generic.IEnumerable<T> collection) { }
    public Stack(int capacity) { }
    public int Count { get { return default(int); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public void Clear() { }
    public bool Contains(T item) { return default(bool); }
    public void CopyTo(T[] array, int arrayIndex) { }
    public System.Collections.Generic.Stack<T>.Enumerator GetEnumerator() { return default(System.Collections.Generic.Stack<T>.Enumerator); }
    public T Peek() { return default(T); }
    public T Pop() { return default(T); }
    public void Push(T item) { }
    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public T[] ToArray() { return default(T[]); }
    public void TrimExcess() { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable {
      public T Current { get { return default(T); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public void Dispose() { }
      public bool MoveNext() { return default(bool); }
      void System.Collections.IEnumerator.Reset() { }
    }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Collections.Concurrent")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Collections.Concurrent")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Collections.Concurrent")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Collections.Concurrent {
  public partial class BlockingCollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.ICollection, System.Collections.IEnumerable, System.IDisposable {
    public BlockingCollection() { }
    public BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T> collection) { }
    public BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T> collection, int boundedCapacity) { }
    public BlockingCollection(int boundedCapacity) { }
    public int BoundedCapacity { get { return default(int); } }
    public int Count { get { return default(int); } }
    public bool IsAddingCompleted { get { return default(bool); } }
    public bool IsCompleted { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public void Add(T item) { }
    public void Add(T item, System.Threading.CancellationToken cancellationToken) { }
    public static int AddToAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, T item) { return default(int); }
    public static int AddToAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, System.Threading.CancellationToken cancellationToken) { return default(int); }
    public void CompleteAdding() { }
    public void CopyTo(T[] array, int index) { }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable() { return default(System.Collections.Generic.IEnumerable<T>); }
    public System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable(System.Threading.CancellationToken cancellationToken) { return default(System.Collections.Generic.IEnumerable<T>); }
    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public T Take() { return default(T); }
    public T Take(System.Threading.CancellationToken cancellationToken) { return default(T); }
    public static int TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item) { item = default(T); return default(int); }
    public static int TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, System.Threading.CancellationToken cancellationToken) { item = default(T); return default(int); }
    public T[] ToArray() { return default(T[]); }
    public bool TryAdd(T item) { return default(bool); }
    public bool TryAdd(T item, int millisecondsTimeout) { return default(bool); }
    public bool TryAdd(T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) { return default(bool); }
    public bool TryAdd(T item, System.TimeSpan timeout) { return default(bool); }
    public static int TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, T item) { return default(int); }
    public static int TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, int millisecondsTimeout) { return default(int); }
    public static int TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) { return default(int); }
    public static int TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, System.TimeSpan timeout) { return default(int); }
    public bool TryTake(out T item) { item = default(T); return default(bool); }
    public bool TryTake(out T item, int millisecondsTimeout) { item = default(T); return default(bool); }
    public bool TryTake(out T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) { item = default(T); return default(bool); }
    public bool TryTake(out T item, System.TimeSpan timeout) { item = default(T); return default(bool); }
    public static int TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item) { item = default(T); return default(int); }
    public static int TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, int millisecondsTimeout) { item = default(T); return default(int); }
    public static int TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) { item = default(T); return default(int); }
    public static int TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, System.TimeSpan timeout) { item = default(T); return default(int); }
  }
  public partial class ConcurrentBag<T> : System.Collections.Concurrent.IProducerConsumerCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.ICollection, System.Collections.IEnumerable {
    public ConcurrentBag() { }
    public ConcurrentBag(System.Collections.Generic.IEnumerable<T> collection) { }
    public int Count { get { return default(int); } }
    public bool IsEmpty { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public void Add(T item) { }
    public void CopyTo(T[] array, int index) { }
    public System.Collections.Generic.IEnumerator<T> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T item) { return default(bool); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public T[] ToArray() { return default(T[]); }
    public bool TryPeek(out T result) { result = default(T); return default(bool); }
    public bool TryTake(out T result) { result = default(T); return default(bool); }
  }
  public partial class ConcurrentDictionary<TKey, TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    public ConcurrentDictionary() { }
    public ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>> collection) { }
    public ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>> collection, System.Collections.Generic.IEqualityComparer<TKey> comparer) { }
    public ConcurrentDictionary(System.Collections.Generic.IEqualityComparer<TKey> comparer) { }
    public ConcurrentDictionary(int concurrencyLevel, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>> collection, System.Collections.Generic.IEqualityComparer<TKey> comparer) { }
    public ConcurrentDictionary(int concurrencyLevel, int capacity) { }
    public ConcurrentDictionary(int concurrencyLevel, int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer) { }
    public int Count { get { return default(int); } }
    public bool IsEmpty { get { return default(bool); } }
    public TValue this[TKey key] { get { return default(TValue); } set { } }
    public System.Collections.Generic.ICollection<TKey> Keys { get { return default(System.Collections.Generic.ICollection<TKey>); } }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get { return default(bool); } }
    System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get { return default(System.Collections.Generic.IEnumerable<TKey>); } }
    System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get { return default(System.Collections.Generic.IEnumerable<TValue>); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IDictionary.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IDictionary.IsReadOnly { get { return default(bool); } }
    object System.Collections.IDictionary.this[object key] { get { return default(object); } set { } }
    System.Collections.ICollection System.Collections.IDictionary.Keys { get { return default(System.Collections.ICollection); } }
    System.Collections.ICollection System.Collections.IDictionary.Values { get { return default(System.Collections.ICollection); } }
    public System.Collections.Generic.ICollection<TValue> Values { get { return default(System.Collections.Generic.ICollection<TValue>); } }
    public TValue AddOrUpdate(TKey key, TValue addValue, System.Func<TKey, TValue, TValue> updateValueFactory) { return default(TValue); }
    public TValue AddOrUpdate(TKey key, System.Func<TKey, TValue> addValueFactory, System.Func<TKey, TValue, TValue> updateValueFactory) { return default(TValue); }
    public void Clear() { }
    public bool ContainsKey(TKey key) { return default(bool); }
    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>); }
    public TValue GetOrAdd(TKey key, TValue value) { return default(TValue); }
    public TValue GetOrAdd(TKey key, System.Func<TKey, TValue> valueFactory) { return default(TValue); }
    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair) { }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair) { return default(bool); }
    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[] array, int index) { }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair) { return default(bool); }
    void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value) { }
    bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key) { return default(bool); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    void System.Collections.IDictionary.Add(object key, object value) { }
    bool System.Collections.IDictionary.Contains(object key) { return default(bool); }
    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    void System.Collections.IDictionary.Remove(object key) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public System.Collections.Generic.KeyValuePair<TKey, TValue>[] ToArray() { return default(System.Collections.Generic.KeyValuePair<TKey, TValue>[]); }
    public bool TryAdd(TKey key, TValue value) { return default(bool); }
    public bool TryGetValue(TKey key, out TValue value) { value = default(TValue); return default(bool); }
    public bool TryRemove(TKey key, out TValue value) { value = default(TValue); return default(bool); }
    public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue) { return default(bool); }
  }
  public partial class ConcurrentQueue<T> : System.Collections.Concurrent.IProducerConsumerCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.ICollection, System.Collections.IEnumerable {
    public ConcurrentQueue() { }
    public ConcurrentQueue(System.Collections.Generic.IEnumerable<T> collection) { }
    public int Count { get { return default(int); } }
    public bool IsEmpty { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public void CopyTo(T[] array, int index) { }
    public void Enqueue(T item) { }
    public System.Collections.Generic.IEnumerator<T> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T item) { return default(bool); }
    bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(out T item) { item = default(T); return default(bool); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public T[] ToArray() { return default(T[]); }
    public bool TryDequeue(out T result) { result = default(T); return default(bool); }
    public bool TryPeek(out T result) { result = default(T); return default(bool); }
  }
  public partial class ConcurrentStack<T> : System.Collections.Concurrent.IProducerConsumerCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.ICollection, System.Collections.IEnumerable {
    public ConcurrentStack() { }
    public ConcurrentStack(System.Collections.Generic.IEnumerable<T> collection) { }
    public int Count { get { return default(int); } }
    public bool IsEmpty { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public void Clear() { }
    public void CopyTo(T[] array, int index) { }
    public System.Collections.Generic.IEnumerator<T> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    public void Push(T item) { }
    public void PushRange(T[] items) { }
    public void PushRange(T[] items, int startIndex, int count) { }
    bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T item) { return default(bool); }
    bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(out T item) { item = default(T); return default(bool); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public T[] ToArray() { return default(T[]); }
    public bool TryPeek(out T result) { result = default(T); return default(bool); }
    public bool TryPop(out T result) { result = default(T); return default(bool); }
    public int TryPopRange(T[] items) { return default(int); }
    public int TryPopRange(T[] items, int startIndex, int count) { return default(int); }
  }
  [System.FlagsAttribute]
  public enum EnumerablePartitionerOptions {
    NoBuffering = 1,
    None = 0,
  }
  public partial interface IProducerConsumerCollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.ICollection, System.Collections.IEnumerable {
    void CopyTo(T[] array, int index);
    T[] ToArray();
    bool TryAdd(T item);
    bool TryTake(out T item);
  }
  public abstract partial class OrderablePartitioner<TSource> : System.Collections.Concurrent.Partitioner<TSource> {
    protected OrderablePartitioner(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized) { }
    public bool KeysNormalized { get { return default(bool); } }
    public bool KeysOrderedAcrossPartitions { get { return default(bool); } }
    public bool KeysOrderedInEachPartition { get { return default(bool); } }
    public override System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions() { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public virtual System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<long, TSource>> GetOrderableDynamicPartitions() { return default(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<long, TSource>>); }
    public abstract System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<long, TSource>>> GetOrderablePartitions(int partitionCount);
    public override System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions(int partitionCount) { return default(System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>); }
  }
  public static partial class Partitioner {
    public static System.Collections.Concurrent.OrderablePartitioner<System.Tuple<int, int>> Create(int fromInclusive, int toExclusive) { return default(System.Collections.Concurrent.OrderablePartitioner<System.Tuple<int, int>>); }
    public static System.Collections.Concurrent.OrderablePartitioner<System.Tuple<int, int>> Create(int fromInclusive, int toExclusive, int rangeSize) { return default(System.Collections.Concurrent.OrderablePartitioner<System.Tuple<int, int>>); }
    public static System.Collections.Concurrent.OrderablePartitioner<System.Tuple<long, long>> Create(long fromInclusive, long toExclusive) { return default(System.Collections.Concurrent.OrderablePartitioner<System.Tuple<long, long>>); }
    public static System.Collections.Concurrent.OrderablePartitioner<System.Tuple<long, long>> Create(long fromInclusive, long toExclusive, long rangeSize) { return default(System.Collections.Concurrent.OrderablePartitioner<System.Tuple<long, long>>); }
    public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>(TSource[] array, bool loadBalance) { return default(System.Collections.Concurrent.OrderablePartitioner<TSource>); }
    public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>(System.Collections.Generic.IEnumerable<TSource> source) { return default(System.Collections.Concurrent.OrderablePartitioner<TSource>); }
    public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>(System.Collections.Generic.IEnumerable<TSource> source, System.Collections.Concurrent.EnumerablePartitionerOptions partitionerOptions) { return default(System.Collections.Concurrent.OrderablePartitioner<TSource>); }
    public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>(System.Collections.Generic.IList<TSource> list, bool loadBalance) { return default(System.Collections.Concurrent.OrderablePartitioner<TSource>); }
  }
  public abstract partial class Partitioner<TSource> {
    protected Partitioner() { }
    public virtual bool SupportsDynamicPartitions { get { return default(bool); } }
    public virtual System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions() { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public abstract System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions(int partitionCount);
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Collections.NonGeneric")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Collections.NonGeneric")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Collections.NonGeneric")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Collections {
  public partial class ArrayList : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public ArrayList() { }
    public ArrayList(System.Collections.ICollection c) { }
    public ArrayList(int capacity) { }
    public virtual int Capacity { get { return default(int); } set { } }
    public virtual int Count { get { return default(int); } }
    public virtual bool IsFixedSize { get { return default(bool); } }
    public virtual bool IsReadOnly { get { return default(bool); } }
    public virtual bool IsSynchronized { get { return default(bool); } }
    public virtual object this[int index] { get { return default(object); } set { } }
    public virtual object SyncRoot { get { return default(object); } }
    public static System.Collections.ArrayList Adapter(System.Collections.IList list) { return default(System.Collections.ArrayList); }
    public virtual int Add(object value) { return default(int); }
    public virtual void AddRange(System.Collections.ICollection c) { }
    public virtual int BinarySearch(int index, int count, object value, System.Collections.IComparer comparer) { return default(int); }
    public virtual int BinarySearch(object value) { return default(int); }
    public virtual int BinarySearch(object value, System.Collections.IComparer comparer) { return default(int); }
    public virtual void Clear() { }
    public virtual object Clone() { return default(object); }
    public virtual bool Contains(object item) { return default(bool); }
    public virtual void CopyTo(System.Array array) { }
    public virtual void CopyTo(System.Array array, int arrayIndex) { }
    public virtual void CopyTo(int index, System.Array array, int arrayIndex, int count) { }
    public static System.Collections.ArrayList FixedSize(System.Collections.ArrayList list) { return default(System.Collections.ArrayList); }
    public static System.Collections.IList FixedSize(System.Collections.IList list) { return default(System.Collections.IList); }
    public virtual System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public virtual System.Collections.IEnumerator GetEnumerator(int index, int count) { return default(System.Collections.IEnumerator); }
    public virtual System.Collections.ArrayList GetRange(int index, int count) { return default(System.Collections.ArrayList); }
    public virtual int IndexOf(object value) { return default(int); }
    public virtual int IndexOf(object value, int startIndex) { return default(int); }
    public virtual int IndexOf(object value, int startIndex, int count) { return default(int); }
    public virtual void Insert(int index, object value) { }
    public virtual void InsertRange(int index, System.Collections.ICollection c) { }
    public virtual int LastIndexOf(object value) { return default(int); }
    public virtual int LastIndexOf(object value, int startIndex) { return default(int); }
    public virtual int LastIndexOf(object value, int startIndex, int count) { return default(int); }
    public static System.Collections.ArrayList ReadOnly(System.Collections.ArrayList list) { return default(System.Collections.ArrayList); }
    public static System.Collections.IList ReadOnly(System.Collections.IList list) { return default(System.Collections.IList); }
    public virtual void Remove(object obj) { }
    public virtual void RemoveAt(int index) { }
    public virtual void RemoveRange(int index, int count) { }
    public static System.Collections.ArrayList Repeat(object value, int count) { return default(System.Collections.ArrayList); }
    public virtual void Reverse() { }
    public virtual void Reverse(int index, int count) { }
    public virtual void SetRange(int index, System.Collections.ICollection c) { }
    public virtual void Sort() { }
    public virtual void Sort(System.Collections.IComparer comparer) { }
    public virtual void Sort(int index, int count, System.Collections.IComparer comparer) { }
    public static System.Collections.ArrayList Synchronized(System.Collections.ArrayList list) { return default(System.Collections.ArrayList); }
    public static System.Collections.IList Synchronized(System.Collections.IList list) { return default(System.Collections.IList); }
    public virtual object[] ToArray() { return default(object[]); }
    public virtual System.Array ToArray(System.Type type) { return default(System.Array); }
    public virtual void TrimToSize() { }
  }
  public partial class CaseInsensitiveComparer : System.Collections.IComparer {
    public CaseInsensitiveComparer() { }
    public CaseInsensitiveComparer(System.Globalization.CultureInfo culture) { }
    public static System.Collections.CaseInsensitiveComparer Default { get { return default(System.Collections.CaseInsensitiveComparer); } }
    public static System.Collections.CaseInsensitiveComparer DefaultInvariant { get { return default(System.Collections.CaseInsensitiveComparer); } }
    public int Compare(object a, object b) { return default(int); }
  }
  public abstract partial class CollectionBase : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    protected CollectionBase() { }
    protected CollectionBase(int capacity) { }
    public int Capacity { get { return default(int); } set { } }
    public int Count { get { return default(int); } }
    protected System.Collections.ArrayList InnerList { get { return default(System.Collections.ArrayList); } }
    protected System.Collections.IList List { get { return default(System.Collections.IList); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Clear() { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    protected virtual void OnClear() { }
    protected virtual void OnClearComplete() { }
    protected virtual void OnInsert(int index, object value) { }
    protected virtual void OnInsertComplete(int index, object value) { }
    protected virtual void OnRemove(int index, object value) { }
    protected virtual void OnRemoveComplete(int index, object value) { }
    protected virtual void OnSet(int index, object oldValue, object newValue) { }
    protected virtual void OnSetComplete(int index, object oldValue, object newValue) { }
    protected virtual void OnValidate(object value) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
  }
  public sealed partial class Comparer : System.Collections.IComparer {
    public static readonly System.Collections.Comparer Default;
    public static readonly System.Collections.Comparer DefaultInvariant;
    public Comparer(System.Globalization.CultureInfo culture) { }
    public int Compare(object a, object b) { return default(int); }
  }
  public abstract partial class DictionaryBase : System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    protected DictionaryBase() { }
    public int Count { get { return default(int); } }
    protected System.Collections.IDictionary Dictionary { get { return default(System.Collections.IDictionary); } }
    protected System.Collections.Hashtable InnerHashtable { get { return default(System.Collections.Hashtable); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IDictionary.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IDictionary.IsReadOnly { get { return default(bool); } }
    object System.Collections.IDictionary.this[object key] { get { return default(object); } set { } }
    System.Collections.ICollection System.Collections.IDictionary.Keys { get { return default(System.Collections.ICollection); } }
    System.Collections.ICollection System.Collections.IDictionary.Values { get { return default(System.Collections.ICollection); } }
    public void Clear() { }
    public void CopyTo(System.Array array, int index) { }
    public System.Collections.IDictionaryEnumerator GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    protected virtual void OnClear() { }
    protected virtual void OnClearComplete() { }
    protected virtual object OnGet(object key, object currentValue) { return default(object); }
    protected virtual void OnInsert(object key, object value) { }
    protected virtual void OnInsertComplete(object key, object value) { }
    protected virtual void OnRemove(object key, object value) { }
    protected virtual void OnRemoveComplete(object key, object value) { }
    protected virtual void OnSet(object key, object oldValue, object newValue) { }
    protected virtual void OnSetComplete(object key, object oldValue, object newValue) { }
    protected virtual void OnValidate(object key, object value) { }
    void System.Collections.IDictionary.Add(object key, object value) { }
    bool System.Collections.IDictionary.Contains(object key) { return default(bool); }
    void System.Collections.IDictionary.Remove(object key) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public partial class Hashtable : System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    public Hashtable() { }
    public Hashtable(System.Collections.IDictionary d) { }
    public Hashtable(System.Collections.IDictionary d, System.Collections.IEqualityComparer equalityComparer) { }
    public Hashtable(System.Collections.IDictionary d, float loadFactor) { }
    public Hashtable(System.Collections.IDictionary d, float loadFactor, System.Collections.IEqualityComparer equalityComparer) { }
    public Hashtable(System.Collections.IEqualityComparer equalityComparer) { }
    public Hashtable(int capacity) { }
    public Hashtable(int capacity, System.Collections.IEqualityComparer equalityComparer) { }
    public Hashtable(int capacity, float loadFactor) { }
    public Hashtable(int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer) { }
    public virtual int Count { get { return default(int); } }
    protected System.Collections.IEqualityComparer EqualityComparer { get { return default(System.Collections.IEqualityComparer); } }
    public virtual bool IsFixedSize { get { return default(bool); } }
    public virtual bool IsReadOnly { get { return default(bool); } }
    public virtual bool IsSynchronized { get { return default(bool); } }
    public virtual object this[object key] { get { return default(object); } set { } }
    public virtual System.Collections.ICollection Keys { get { return default(System.Collections.ICollection); } }
    public virtual object SyncRoot { get { return default(object); } }
    public virtual System.Collections.ICollection Values { get { return default(System.Collections.ICollection); } }
    public virtual void Add(object key, object value) { }
    public virtual void Clear() { }
    public virtual object Clone() { return default(object); }
    public virtual bool Contains(object key) { return default(bool); }
    public virtual bool ContainsKey(object key) { return default(bool); }
    public virtual bool ContainsValue(object value) { return default(bool); }
    public virtual void CopyTo(System.Array array, int arrayIndex) { }
    public virtual System.Collections.IDictionaryEnumerator GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    protected virtual int GetHash(object key) { return default(int); }
    protected virtual bool KeyEquals(object item, object key) { return default(bool); }
    public virtual void Remove(object key) { }
    public static System.Collections.Hashtable Synchronized(System.Collections.Hashtable table) { return default(System.Collections.Hashtable); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public partial class Queue : System.Collections.ICollection, System.Collections.IEnumerable {
    public Queue() { }
    public Queue(System.Collections.ICollection col) { }
    public Queue(int capacity) { }
    public Queue(int capacity, float growFactor) { }
    public virtual int Count { get { return default(int); } }
    public virtual bool IsSynchronized { get { return default(bool); } }
    public virtual object SyncRoot { get { return default(object); } }
    public virtual void Clear() { }
    public virtual object Clone() { return default(object); }
    public virtual bool Contains(object obj) { return default(bool); }
    public virtual void CopyTo(System.Array array, int index) { }
    public virtual object Dequeue() { return default(object); }
    public virtual void Enqueue(object obj) { }
    public virtual System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public virtual object Peek() { return default(object); }
    public static System.Collections.Queue Synchronized(System.Collections.Queue queue) { return default(System.Collections.Queue); }
    public virtual object[] ToArray() { return default(object[]); }
    public virtual void TrimToSize() { }
  }
  public abstract partial class ReadOnlyCollectionBase : System.Collections.ICollection, System.Collections.IEnumerable {
    protected ReadOnlyCollectionBase() { }
    public virtual int Count { get { return default(int); } }
    protected System.Collections.ArrayList InnerList { get { return default(System.Collections.ArrayList); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public virtual System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
  }
  public partial class SortedList : System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    public SortedList() { }
    public SortedList(System.Collections.IComparer comparer) { }
    public SortedList(System.Collections.IComparer comparer, int capacity) { }
    public SortedList(System.Collections.IDictionary d) { }
    public SortedList(System.Collections.IDictionary d, System.Collections.IComparer comparer) { }
    public SortedList(int initialCapacity) { }
    public virtual int Capacity { get { return default(int); } set { } }
    public virtual int Count { get { return default(int); } }
    public virtual bool IsFixedSize { get { return default(bool); } }
    public virtual bool IsReadOnly { get { return default(bool); } }
    public virtual bool IsSynchronized { get { return default(bool); } }
    public virtual object this[object key] { get { return default(object); } set { } }
    public virtual System.Collections.ICollection Keys { get { return default(System.Collections.ICollection); } }
    public virtual object SyncRoot { get { return default(object); } }
    public virtual System.Collections.ICollection Values { get { return default(System.Collections.ICollection); } }
    public virtual void Add(object key, object value) { }
    public virtual void Clear() { }
    public virtual object Clone() { return default(object); }
    public virtual bool Contains(object key) { return default(bool); }
    public virtual bool ContainsKey(object key) { return default(bool); }
    public virtual bool ContainsValue(object value) { return default(bool); }
    public virtual void CopyTo(System.Array array, int arrayIndex) { }
    public virtual object GetByIndex(int index) { return default(object); }
    public virtual System.Collections.IDictionaryEnumerator GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    public virtual object GetKey(int index) { return default(object); }
    public virtual System.Collections.IList GetKeyList() { return default(System.Collections.IList); }
    public virtual System.Collections.IList GetValueList() { return default(System.Collections.IList); }
    public virtual int IndexOfKey(object key) { return default(int); }
    public virtual int IndexOfValue(object value) { return default(int); }
    public virtual void Remove(object key) { }
    public virtual void RemoveAt(int index) { }
    public virtual void SetByIndex(int index, object value) { }
    public static System.Collections.SortedList Synchronized(System.Collections.SortedList list) { return default(System.Collections.SortedList); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public virtual void TrimToSize() { }
  }
  public partial class Stack : System.Collections.ICollection, System.Collections.IEnumerable {
    public Stack() { }
    public Stack(System.Collections.ICollection col) { }
    public Stack(int initialCapacity) { }
    public virtual int Count { get { return default(int); } }
    public virtual bool IsSynchronized { get { return default(bool); } }
    public virtual object SyncRoot { get { return default(object); } }
    public virtual void Clear() { }
    public virtual object Clone() { return default(object); }
    public virtual bool Contains(object obj) { return default(bool); }
    public virtual void CopyTo(System.Array array, int index) { }
    public virtual System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public virtual object Peek() { return default(object); }
    public virtual object Pop() { return default(object); }
    public virtual void Push(object obj) { }
    public static System.Collections.Stack Synchronized(System.Collections.Stack stack) { return default(System.Collections.Stack); }
    public virtual object[] ToArray() { return default(object[]); }
  }
}
namespace System.Collections.Specialized {
  public partial class CollectionsUtil {
    public CollectionsUtil() { }
    public static System.Collections.Hashtable CreateCaseInsensitiveHashtable() { return default(System.Collections.Hashtable); }
    public static System.Collections.Hashtable CreateCaseInsensitiveHashtable(System.Collections.IDictionary d) { return default(System.Collections.Hashtable); }
    public static System.Collections.Hashtable CreateCaseInsensitiveHashtable(int capacity) { return default(System.Collections.Hashtable); }
    public static System.Collections.SortedList CreateCaseInsensitiveSortedList() { return default(System.Collections.SortedList); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Collections.Specialized")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Collections.Specialized")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Collections.Specialized")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Collections.Specialized {
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct BitVector32 {
    public BitVector32(System.Collections.Specialized.BitVector32 value) { throw new System.NotImplementedException(); }
    public BitVector32(int data) { throw new System.NotImplementedException(); }
    public int Data { get { return default(int); } }
    public int this[System.Collections.Specialized.BitVector32.Section section] { get { return default(int); } set { } }
    public bool this[int bit] { get { return default(bool); } set { } }
    public static int CreateMask() { return default(int); }
    public static int CreateMask(int previous) { return default(int); }
    public static System.Collections.Specialized.BitVector32.Section CreateSection(short maxValue) { return default(System.Collections.Specialized.BitVector32.Section); }
    public static System.Collections.Specialized.BitVector32.Section CreateSection(short maxValue, System.Collections.Specialized.BitVector32.Section previous) { return default(System.Collections.Specialized.BitVector32.Section); }
    public override bool Equals(object o) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public override string ToString() { return default(string); }
    public static string ToString(System.Collections.Specialized.BitVector32 value) { return default(string); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Section {
      public short Mask { get { return default(short); } }
      public short Offset { get { return default(short); } }
      public bool Equals(System.Collections.Specialized.BitVector32.Section obj) { return default(bool); }
      public override bool Equals(object o) { return default(bool); }
      public override int GetHashCode() { return default(int); }
      public static bool operator ==(System.Collections.Specialized.BitVector32.Section a, System.Collections.Specialized.BitVector32.Section b) { return default(bool); }
      public static bool operator !=(System.Collections.Specialized.BitVector32.Section a, System.Collections.Specialized.BitVector32.Section b) { return default(bool); }
      public override string ToString() { return default(string); }
      public static string ToString(System.Collections.Specialized.BitVector32.Section value) { return default(string); }
    }
  }
  public partial class HybridDictionary : System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    public HybridDictionary() { }
    public HybridDictionary(bool caseInsensitive) { }
    public HybridDictionary(int initialSize) { }
    public HybridDictionary(int initialSize, bool caseInsensitive) { }
    public int Count { get { return default(int); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public object this[object key] { get { return default(object); } set { } }
    public System.Collections.ICollection Keys { get { return default(System.Collections.ICollection); } }
    public object SyncRoot { get { return default(object); } }
    public System.Collections.ICollection Values { get { return default(System.Collections.ICollection); } }
    public void Add(object key, object value) { }
    public void Clear() { }
    public bool Contains(object key) { return default(bool); }
    public void CopyTo(System.Array array, int index) { }
    public System.Collections.IDictionaryEnumerator GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    public void Remove(object key) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public partial interface IOrderedDictionary : System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    object this[int index] { get; set; }
    new System.Collections.IDictionaryEnumerator GetEnumerator();
    void Insert(int index, object key, object value);
    void RemoveAt(int index);
  }
  public partial class ListDictionary : System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    public ListDictionary() { }
    public ListDictionary(System.Collections.IComparer comparer) { }
    public int Count { get { return default(int); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public object this[object key] { get { return default(object); } set { } }
    public System.Collections.ICollection Keys { get { return default(System.Collections.ICollection); } }
    public object SyncRoot { get { return default(object); } }
    public System.Collections.ICollection Values { get { return default(System.Collections.ICollection); } }
    public void Add(object key, object value) { }
    public void Clear() { }
    public bool Contains(object key) { return default(bool); }
    public void CopyTo(System.Array array, int index) { }
    public System.Collections.IDictionaryEnumerator GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    public void Remove(object key) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public abstract partial class NameObjectCollectionBase : System.Collections.ICollection, System.Collections.IEnumerable {
    protected NameObjectCollectionBase() { }
    protected NameObjectCollectionBase(System.Collections.IEqualityComparer equalityComparer) { }
    protected NameObjectCollectionBase(int capacity) { }
    protected NameObjectCollectionBase(int capacity, System.Collections.IEqualityComparer equalityComparer) { }
    public virtual int Count { get { return default(int); } }
    protected bool IsReadOnly { get { return default(bool); } set { } }
    public virtual System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get { return default(System.Collections.Specialized.NameObjectCollectionBase.KeysCollection); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    protected void BaseAdd(string name, object value) { }
    protected void BaseClear() { }
    protected object BaseGet(int index) { return default(object); }
    protected object BaseGet(string name) { return default(object); }
    protected string[] BaseGetAllKeys() { return default(string[]); }
    protected object[] BaseGetAllValues() { return default(object[]); }
    protected object[] BaseGetAllValues(System.Type type) { return default(object[]); }
    protected string BaseGetKey(int index) { return default(string); }
    protected bool BaseHasKeys() { return default(bool); }
    protected void BaseRemove(string name) { }
    protected void BaseRemoveAt(int index) { }
    protected void BaseSet(int index, object value) { }
    protected void BaseSet(string name, object value) { }
    public virtual System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    public partial class KeysCollection : System.Collections.ICollection, System.Collections.IEnumerable {
      internal KeysCollection() { }
      public int Count { get { return default(int); } }
      public string this[int index] { get { return default(string); } }
      bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
      object System.Collections.ICollection.SyncRoot { get { return default(object); } }
      public virtual string Get(int index) { return default(string); }
      public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
      void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    }
  }
  public partial class NameValueCollection : System.Collections.Specialized.NameObjectCollectionBase {
    public NameValueCollection() { }
    public NameValueCollection(System.Collections.IEqualityComparer equalityComparer) { }
    public NameValueCollection(System.Collections.Specialized.NameValueCollection col) { }
    public NameValueCollection(int capacity) { }
    public NameValueCollection(int capacity, System.Collections.IEqualityComparer equalityComparer) { }
    public NameValueCollection(int capacity, System.Collections.Specialized.NameValueCollection col) { }
    public virtual string[] AllKeys { get { return default(string[]); } }
    public string this[int index] { get { return default(string); } }
    public string this[string name] { get { return default(string); } set { } }
    public void Add(System.Collections.Specialized.NameValueCollection c) { }
    public virtual void Add(string name, string value) { }
    public virtual void Clear() { }
    public void CopyTo(System.Array dest, int index) { }
    public virtual string Get(int index) { return default(string); }
    public virtual string Get(string name) { return default(string); }
    public virtual string GetKey(int index) { return default(string); }
    public virtual string[] GetValues(int index) { return default(string[]); }
    public virtual string[] GetValues(string name) { return default(string[]); }
    public bool HasKeys() { return default(bool); }
    protected void InvalidateCachedArrays() { }
    public virtual void Remove(string name) { }
    public virtual void Set(string name, string value) { }
  }
  public partial class OrderedDictionary : System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable, System.Collections.Specialized.IOrderedDictionary {
    public OrderedDictionary() { }
    public OrderedDictionary(System.Collections.IEqualityComparer comparer) { }
    public OrderedDictionary(int capacity) { }
    public OrderedDictionary(int capacity, System.Collections.IEqualityComparer comparer) { }
    public int Count { get { return default(int); } }
    public bool IsReadOnly { get { return default(bool); } }
    public object this[int index] { get { return default(object); } set { } }
    public object this[object key] { get { return default(object); } set { } }
    public System.Collections.ICollection Keys { get { return default(System.Collections.ICollection); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IDictionary.IsFixedSize { get { return default(bool); } }
    public System.Collections.ICollection Values { get { return default(System.Collections.ICollection); } }
    public void Add(object key, object value) { }
    public System.Collections.Specialized.OrderedDictionary AsReadOnly() { return default(System.Collections.Specialized.OrderedDictionary); }
    public void Clear() { }
    public bool Contains(object key) { return default(bool); }
    public void CopyTo(System.Array array, int index) { }
    public virtual System.Collections.IDictionaryEnumerator GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    public void Insert(int index, object key, object value) { }
    public void Remove(object key) { }
    public void RemoveAt(int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public partial class StringCollection : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public StringCollection() { }
    public int Count { get { return default(int); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public string this[int index] { get { return default(string); } set { } }
    public object SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(string value) { return default(int); }
    public void AddRange(string[] value) { }
    public void Clear() { }
    public bool Contains(string value) { return default(bool); }
    public void CopyTo(string[] array, int index) { }
    public System.Collections.Specialized.StringEnumerator GetEnumerator() { return default(System.Collections.Specialized.StringEnumerator); }
    public int IndexOf(string value) { return default(int); }
    public void Insert(int index, string value) { }
    public void Remove(string value) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
  }
  public partial class StringDictionary : System.Collections.IEnumerable {
    public StringDictionary() { }
    public virtual int Count { get { return default(int); } }
    public virtual bool IsSynchronized { get { return default(bool); } }
    public virtual string this[string key] { get { return default(string); } set { } }
    public virtual System.Collections.ICollection Keys { get { return default(System.Collections.ICollection); } }
    public virtual object SyncRoot { get { return default(object); } }
    public virtual System.Collections.ICollection Values { get { return default(System.Collections.ICollection); } }
    public virtual void Add(string key, string value) { }
    public virtual void Clear() { }
    public virtual bool ContainsKey(string key) { return default(bool); }
    public virtual bool ContainsValue(string value) { return default(bool); }
    public virtual void CopyTo(System.Array array, int index) { }
    public virtual System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public virtual void Remove(string key) { }
  }
  public partial class StringEnumerator {
    internal StringEnumerator() { }
    public string Current { get { return default(string); } }
    public bool MoveNext() { return default(bool); }
    public void Reset() { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.ComponentModel")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.ComponentModel")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.ComponentModel")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System {
  public partial interface IServiceProvider {
    object GetService(System.Type serviceType);
  }
}
namespace System.ComponentModel {
  public partial class CancelEventArgs : System.EventArgs {
    public CancelEventArgs() { }
    public CancelEventArgs(bool cancel) { }
    public bool Cancel { get { return default(bool); } set { } }
  }
  public partial interface IChangeTracking {
    bool IsChanged { get; }
    void AcceptChanges();
  }
  public partial interface IEditableObject {
    void BeginEdit();
    void CancelEdit();
    void EndEdit();
  }
  public partial interface IRevertibleChangeTracking : System.ComponentModel.IChangeTracking {
    void RejectChanges();
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.ComponentModel.Annotations")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.ComponentModel.Annotations")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.ComponentModel.Annotations")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.ComponentModel.DataAnnotations {
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=false, Inherited=true)]
  [System.ObsoleteAttribute("This attribute is no longer in use and will be ignored if applied.")]
  public sealed partial class AssociationAttribute : System.Attribute {
    public AssociationAttribute(string name, string thisKey, string otherKey) { }
    public bool IsForeignKey { get { return default(bool); } set { } }
    public string Name { get { return default(string); } }
    public string OtherKey { get { return default(string); } }
    public System.Collections.Generic.IEnumerable<string> OtherKeyMembers { get { return default(System.Collections.Generic.IEnumerable<string>); } }
    public string ThisKey { get { return default(string); } }
    public System.Collections.Generic.IEnumerable<string> ThisKeyMembers { get { return default(System.Collections.Generic.IEnumerable<string>); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(128), AllowMultiple=false)]
  public partial class CompareAttribute : System.ComponentModel.DataAnnotations.ValidationAttribute {
    public CompareAttribute(string otherProperty) { }
    public string OtherProperty { get { return default(string); } }
    public string OtherPropertyDisplayName { get { return default(string); } }
    public override bool RequiresValidationContext { get { return default(bool); } }
    public override string FormatErrorMessage(string name) { return default(string); }
    protected override System.ComponentModel.DataAnnotations.ValidationResult IsValid(object value, System.ComponentModel.DataAnnotations.ValidationContext validationContext) { return default(System.ComponentModel.DataAnnotations.ValidationResult); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=false, Inherited=true)]
  public sealed partial class ConcurrencyCheckAttribute : System.Attribute {
    public ConcurrencyCheckAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2432), AllowMultiple=false)]
  public sealed partial class CreditCardAttribute : System.ComponentModel.DataAnnotations.DataTypeAttribute {
    public CreditCardAttribute() : base (default(System.ComponentModel.DataAnnotations.DataType)) { }
    public override bool IsValid(object value) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2500), AllowMultiple=true)]
  public sealed partial class CustomValidationAttribute : System.ComponentModel.DataAnnotations.ValidationAttribute {
    public CustomValidationAttribute(System.Type validatorType, string method) { }
    public string Method { get { return default(string); } }
    public System.Type ValidatorType { get { return default(System.Type); } }
    public override string FormatErrorMessage(string name) { return default(string); }
    protected override System.ComponentModel.DataAnnotations.ValidationResult IsValid(object value, System.ComponentModel.DataAnnotations.ValidationContext validationContext) { return default(System.ComponentModel.DataAnnotations.ValidationResult); }
  }
  public enum DataType {
    CreditCard = 14,
    Currency = 6,
    Custom = 0,
    Date = 2,
    DateTime = 1,
    Duration = 4,
    EmailAddress = 10,
    Html = 8,
    ImageUrl = 13,
    MultilineText = 9,
    Password = 11,
    PhoneNumber = 5,
    PostalCode = 15,
    Text = 7,
    Time = 3,
    Upload = 16,
    Url = 12,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2496), AllowMultiple=false)]
  public partial class DataTypeAttribute : System.ComponentModel.DataAnnotations.ValidationAttribute {
    public DataTypeAttribute(System.ComponentModel.DataAnnotations.DataType dataType) { }
    public DataTypeAttribute(string customDataType) { }
    public string CustomDataType { get { return default(string); } }
    public System.ComponentModel.DataAnnotations.DataType DataType { get { return default(System.ComponentModel.DataAnnotations.DataType); } }
    public System.ComponentModel.DataAnnotations.DisplayFormatAttribute DisplayFormat { get { return default(System.ComponentModel.DataAnnotations.DisplayFormatAttribute); } protected set { } }
    public virtual string GetDataTypeName() { return default(string); }
    public override bool IsValid(object value) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2496), AllowMultiple=false)]
  public sealed partial class DisplayAttribute : System.Attribute {
    public DisplayAttribute() { }
    public bool AutoGenerateField { get { return default(bool); } set { } }
    public bool AutoGenerateFilter { get { return default(bool); } set { } }
    public string Description { get { return default(string); } set { } }
    public string GroupName { get { return default(string); } set { } }
    public string Name { get { return default(string); } set { } }
    public int Order { get { return default(int); } set { } }
    public string Prompt { get { return default(string); } set { } }
    public System.Type ResourceType { get { return default(System.Type); } set { } }
    public string ShortName { get { return default(string); } set { } }
    public System.Nullable<bool> GetAutoGenerateField() { return default(System.Nullable<bool>); }
    public System.Nullable<bool> GetAutoGenerateFilter() { return default(System.Nullable<bool>); }
    public string GetDescription() { return default(string); }
    public string GetGroupName() { return default(string); }
    public string GetName() { return default(string); }
    public System.Nullable<int> GetOrder() { return default(System.Nullable<int>); }
    public string GetPrompt() { return default(string); }
    public string GetShortName() { return default(string); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4), Inherited=true, AllowMultiple=false)]
  public partial class DisplayColumnAttribute : System.Attribute {
    public DisplayColumnAttribute(string displayColumn) { }
    public DisplayColumnAttribute(string displayColumn, string sortColumn) { }
    public DisplayColumnAttribute(string displayColumn, string sortColumn, bool sortDescending) { }
    public string DisplayColumn { get { return default(string); } }
    public string SortColumn { get { return default(string); } }
    public bool SortDescending { get { return default(bool); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=false)]
  public partial class DisplayFormatAttribute : System.Attribute {
    public DisplayFormatAttribute() { }
    public bool ApplyFormatInEditMode { get { return default(bool); } set { } }
    public bool ConvertEmptyStringToNull { get { return default(bool); } set { } }
    public string DataFormatString { get { return default(string); } set { } }
    public bool HtmlEncode { get { return default(bool); } set { } }
    public string NullDisplayText { get { return default(string); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=false, Inherited=true)]
  public sealed partial class EditableAttribute : System.Attribute {
    public EditableAttribute(bool allowEdit) { }
    public bool AllowEdit { get { return default(bool); } }
    public bool AllowInitialValue { get { return default(bool); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2432), AllowMultiple=false)]
  public sealed partial class EmailAddressAttribute : System.ComponentModel.DataAnnotations.DataTypeAttribute {
    public EmailAddressAttribute() : base (default(System.ComponentModel.DataAnnotations.DataType)) { }
    public override bool IsValid(object value) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2496), AllowMultiple=false)]
  public sealed partial class EnumDataTypeAttribute : System.ComponentModel.DataAnnotations.DataTypeAttribute {
    public EnumDataTypeAttribute(System.Type enumType) : base (default(System.ComponentModel.DataAnnotations.DataType)) { }
    public System.Type EnumType { get { return default(System.Type); } }
    public override bool IsValid(object value) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2432), AllowMultiple=false)]
  public sealed partial class FileExtensionsAttribute : System.ComponentModel.DataAnnotations.DataTypeAttribute {
    public FileExtensionsAttribute() : base (default(System.ComponentModel.DataAnnotations.DataType)) { }
    public string Extensions { get { return default(string); } set { } }
    public override string FormatErrorMessage(string name) { return default(string); }
    public override bool IsValid(object value) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=false)]
  [System.ObsoleteAttribute("This attribute is no longer in use and will be ignored if applied.")]
  public sealed partial class FilterUIHintAttribute : System.Attribute {
    public FilterUIHintAttribute(string filterUIHint) { }
    public FilterUIHintAttribute(string filterUIHint, string presentationLayer) { }
    public FilterUIHintAttribute(string filterUIHint, string presentationLayer, params object[] controlParameters) { }
    public System.Collections.Generic.IDictionary<string, object> ControlParameters { get { return default(System.Collections.Generic.IDictionary<string, object>); } }
    public string FilterUIHint { get { return default(string); } }
    public string PresentationLayer { get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public partial interface IValidatableObject {
    System.Collections.Generic.IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(System.ComponentModel.DataAnnotations.ValidationContext validationContext);
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=false, Inherited=true)]
  public sealed partial class KeyAttribute : System.Attribute {
    public KeyAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2432), AllowMultiple=false)]
  public partial class MaxLengthAttribute : System.ComponentModel.DataAnnotations.ValidationAttribute {
    public MaxLengthAttribute() { }
    public MaxLengthAttribute(int length) { }
    public int Length { get { return default(int); } }
    public override string FormatErrorMessage(string name) { return default(string); }
    public override bool IsValid(object value) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2432), AllowMultiple=false)]
  public partial class MinLengthAttribute : System.ComponentModel.DataAnnotations.ValidationAttribute {
    public MinLengthAttribute(int length) { }
    public int Length { get { return default(int); } }
    public override string FormatErrorMessage(string name) { return default(string); }
    public override bool IsValid(object value) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2432), AllowMultiple=false)]
  public sealed partial class PhoneAttribute : System.ComponentModel.DataAnnotations.DataTypeAttribute {
    public PhoneAttribute() : base (default(System.ComponentModel.DataAnnotations.DataType)) { }
    public override bool IsValid(object value) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2432), AllowMultiple=false)]
  public partial class RangeAttribute : System.ComponentModel.DataAnnotations.ValidationAttribute {
    public RangeAttribute(double minimum, double maximum) { }
    public RangeAttribute(int minimum, int maximum) { }
    public RangeAttribute(System.Type type, string minimum, string maximum) { }
    public object Maximum { get { return default(object); } }
    public object Minimum { get { return default(object); } }
    public System.Type OperandType { get { return default(System.Type); } }
    public override string FormatErrorMessage(string name) { return default(string); }
    public override bool IsValid(object value) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2432), AllowMultiple=false)]
  public partial class RegularExpressionAttribute : System.ComponentModel.DataAnnotations.ValidationAttribute {
    public RegularExpressionAttribute(string pattern) { }
    public int MatchTimeoutInMilliseconds { get { return default(int); } set { } }
    public string Pattern { get { return default(string); } }
    public override string FormatErrorMessage(string name) { return default(string); }
    public override bool IsValid(object value) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2432), AllowMultiple=false)]
  public partial class RequiredAttribute : System.ComponentModel.DataAnnotations.ValidationAttribute {
    public RequiredAttribute() { }
    public bool AllowEmptyStrings { get { return default(bool); } set { } }
    public override bool IsValid(object value) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=false)]
  public partial class ScaffoldColumnAttribute : System.Attribute {
    public ScaffoldColumnAttribute(bool scaffold) { }
    public bool Scaffold { get { return default(bool); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2432), AllowMultiple=false)]
  public partial class StringLengthAttribute : System.ComponentModel.DataAnnotations.ValidationAttribute {
    public StringLengthAttribute(int maximumLength) { }
    public int MaximumLength { get { return default(int); } }
    public int MinimumLength { get { return default(int); } set { } }
    public override string FormatErrorMessage(string name) { return default(string); }
    public override bool IsValid(object value) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=false, Inherited=true)]
  public sealed partial class TimestampAttribute : System.Attribute {
    public TimestampAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=true)]
  public partial class UIHintAttribute : System.Attribute {
    public UIHintAttribute(string uiHint) { }
    public UIHintAttribute(string uiHint, string presentationLayer) { }
    public UIHintAttribute(string uiHint, string presentationLayer, params object[] controlParameters) { }
    public System.Collections.Generic.IDictionary<string, object> ControlParameters { get { return default(System.Collections.Generic.IDictionary<string, object>); } }
    public string PresentationLayer { get { return default(string); } }
    public string UIHint { get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2432), AllowMultiple=false)]
  public sealed partial class UrlAttribute : System.ComponentModel.DataAnnotations.DataTypeAttribute {
    public UrlAttribute() : base (default(System.ComponentModel.DataAnnotations.DataType)) { }
    public override bool IsValid(object value) { return default(bool); }
  }
  public abstract partial class ValidationAttribute : System.Attribute {
    protected ValidationAttribute() { }
    protected ValidationAttribute(System.Func<string> errorMessageAccessor) { }
    protected ValidationAttribute(string errorMessage) { }
    public string ErrorMessage { get { return default(string); } set { } }
    public string ErrorMessageResourceName { get { return default(string); } set { } }
    public System.Type ErrorMessageResourceType { get { return default(System.Type); } set { } }
    protected string ErrorMessageString { get { return default(string); } }
    public virtual bool RequiresValidationContext { get { return default(bool); } }
    public virtual string FormatErrorMessage(string name) { return default(string); }
    public System.ComponentModel.DataAnnotations.ValidationResult GetValidationResult(object value, System.ComponentModel.DataAnnotations.ValidationContext validationContext) { return default(System.ComponentModel.DataAnnotations.ValidationResult); }
    public virtual bool IsValid(object value) { return default(bool); }
    protected virtual System.ComponentModel.DataAnnotations.ValidationResult IsValid(object value, System.ComponentModel.DataAnnotations.ValidationContext validationContext) { return default(System.ComponentModel.DataAnnotations.ValidationResult); }
    public void Validate(object value, System.ComponentModel.DataAnnotations.ValidationContext validationContext) { }
    public void Validate(object value, string name) { }
  }
  public sealed partial class ValidationContext : System.IServiceProvider {
    public ValidationContext(object instance) { }
    public ValidationContext(object instance, System.Collections.Generic.IDictionary<object, object> items) { }
    public ValidationContext(object instance, System.IServiceProvider serviceProvider, System.Collections.Generic.IDictionary<object, object> items) { }
    public string DisplayName { get { return default(string); } set { } }
    public System.Collections.Generic.IDictionary<object, object> Items { get { return default(System.Collections.Generic.IDictionary<object, object>); } }
    public string MemberName { get { return default(string); } set { } }
    public object ObjectInstance { get { return default(object); } }
    public System.Type ObjectType { get { return default(System.Type); } }
    public object GetService(System.Type serviceType) { return default(object); }
    public void InitializeServiceProvider(System.Func<System.Type, object> serviceProvider) { }
  }
  public partial class ValidationException : System.Exception {
    public ValidationException() { }
    public ValidationException(System.ComponentModel.DataAnnotations.ValidationResult validationResult, System.ComponentModel.DataAnnotations.ValidationAttribute validatingAttribute, object value) { }
    public ValidationException(string message) { }
    public ValidationException(string errorMessage, System.ComponentModel.DataAnnotations.ValidationAttribute validatingAttribute, object value) { }
    public ValidationException(string message, System.Exception innerException) { }
    public System.ComponentModel.DataAnnotations.ValidationAttribute ValidationAttribute { get { return default(System.ComponentModel.DataAnnotations.ValidationAttribute); } }
    public System.ComponentModel.DataAnnotations.ValidationResult ValidationResult { get { return default(System.ComponentModel.DataAnnotations.ValidationResult); } }
    public object Value { get { return default(object); } }
  }
  public partial class ValidationResult {
    public static readonly System.ComponentModel.DataAnnotations.ValidationResult Success;
    protected ValidationResult(System.ComponentModel.DataAnnotations.ValidationResult validationResult) { }
    public ValidationResult(string errorMessage) { }
    public ValidationResult(string errorMessage, System.Collections.Generic.IEnumerable<string> memberNames) { }
    public string ErrorMessage { get { return default(string); } set { } }
    public System.Collections.Generic.IEnumerable<string> MemberNames { get { return default(System.Collections.Generic.IEnumerable<string>); } }
    public override string ToString() { return default(string); }
  }
  public static partial class Validator {
    public static bool TryValidateObject(object instance, System.ComponentModel.DataAnnotations.ValidationContext validationContext, System.Collections.Generic.ICollection<System.ComponentModel.DataAnnotations.ValidationResult> validationResults) { return default(bool); }
    public static bool TryValidateObject(object instance, System.ComponentModel.DataAnnotations.ValidationContext validationContext, System.Collections.Generic.ICollection<System.ComponentModel.DataAnnotations.ValidationResult> validationResults, bool validateAllProperties) { return default(bool); }
    public static bool TryValidateProperty(object value, System.ComponentModel.DataAnnotations.ValidationContext validationContext, System.Collections.Generic.ICollection<System.ComponentModel.DataAnnotations.ValidationResult> validationResults) { return default(bool); }
    public static bool TryValidateValue(object value, System.ComponentModel.DataAnnotations.ValidationContext validationContext, System.Collections.Generic.ICollection<System.ComponentModel.DataAnnotations.ValidationResult> validationResults, System.Collections.Generic.IEnumerable<System.ComponentModel.DataAnnotations.ValidationAttribute> validationAttributes) { return default(bool); }
    public static void ValidateObject(object instance, System.ComponentModel.DataAnnotations.ValidationContext validationContext) { }
    public static void ValidateObject(object instance, System.ComponentModel.DataAnnotations.ValidationContext validationContext, bool validateAllProperties) { }
    public static void ValidateProperty(object value, System.ComponentModel.DataAnnotations.ValidationContext validationContext) { }
    public static void ValidateValue(object value, System.ComponentModel.DataAnnotations.ValidationContext validationContext, System.Collections.Generic.IEnumerable<System.ComponentModel.DataAnnotations.ValidationAttribute> validationAttributes) { }
  }
}
namespace System.ComponentModel.DataAnnotations.Schema {
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=false)]
  public partial class ColumnAttribute : System.Attribute {
    public ColumnAttribute() { }
    public ColumnAttribute(string name) { }
    public string Name { get { return default(string); } }
    public int Order { get { return default(int); } set { } }
    public string TypeName { get { return default(string); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4), AllowMultiple=false)]
  public partial class ComplexTypeAttribute : System.Attribute {
    public ComplexTypeAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=false)]
  public partial class DatabaseGeneratedAttribute : System.Attribute {
    public DatabaseGeneratedAttribute(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption databaseGeneratedOption) { }
    public System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption DatabaseGeneratedOption { get { return default(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption); } }
  }
  public enum DatabaseGeneratedOption {
    Computed = 2,
    Identity = 1,
    None = 0,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=false)]
  public partial class ForeignKeyAttribute : System.Attribute {
    public ForeignKeyAttribute(string name) { }
    public string Name { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=false)]
  public partial class InversePropertyAttribute : System.Attribute {
    public InversePropertyAttribute(string property) { }
    public string Property { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(388), AllowMultiple=false)]
  public partial class NotMappedAttribute : System.Attribute {
    public NotMappedAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4), AllowMultiple=false)]
  public partial class TableAttribute : System.Attribute {
    public TableAttribute(string name) { }
    public string Name { get { return default(string); } }
    public string Schema { get { return default(string); } set { } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.ComponentModel.EventBasedAsync")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.ComponentModel.EventBasedAsync")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.ComponentModel.EventBasedAsync")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.ComponentModel {
  public partial class AsyncCompletedEventArgs : System.EventArgs {
    public AsyncCompletedEventArgs(System.Exception error, bool cancelled, object userState) { }
    public bool Cancelled { get { return default(bool); } }
    public System.Exception Error { get { return default(System.Exception); } }
    public object UserState { get { return default(object); } }
    protected void RaiseExceptionIfNecessary() { }
  }
  public delegate void AsyncCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
  public sealed partial class AsyncOperation {
    internal AsyncOperation() { }
    public System.Threading.SynchronizationContext SynchronizationContext { get { return default(System.Threading.SynchronizationContext); } }
    public object UserSuppliedState { get { return default(object); } }
    ~AsyncOperation() { }
    public void OperationCompleted() { }
    public void Post(System.Threading.SendOrPostCallback d, object arg) { }
    public void PostOperationCompleted(System.Threading.SendOrPostCallback d, object arg) { }
  }
  public static partial class AsyncOperationManager {
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    public static System.Threading.SynchronizationContext SynchronizationContext { get { return default(System.Threading.SynchronizationContext); } set { } }
    public static System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) { return default(System.ComponentModel.AsyncOperation); }
  }
  public partial class BackgroundWorker : System.IDisposable {
    public BackgroundWorker() { }
    public bool CancellationPending { get { return default(bool); } }
    public bool IsBusy { get { return default(bool); } }
    [System.ComponentModel.DefaultValueAttribute(false)]
    public bool WorkerReportsProgress { get { return default(bool); } set { } }
    [System.ComponentModel.DefaultValueAttribute(false)]
    public bool WorkerSupportsCancellation { get { return default(bool); } set { } }
    public event System.ComponentModel.DoWorkEventHandler DoWork { add { } remove { } }
    public event System.ComponentModel.ProgressChangedEventHandler ProgressChanged { add { } remove { } }
    public event System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted { add { } remove { } }
    public void CancelAsync() { }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    protected virtual void OnDoWork(System.ComponentModel.DoWorkEventArgs e) { }
    protected virtual void OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs e) { }
    protected virtual void OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs e) { }
    public void ReportProgress(int percentProgress) { }
    public void ReportProgress(int percentProgress, object userState) { }
    public void RunWorkerAsync() { }
    public void RunWorkerAsync(object argument) { }
  }
  public partial class DoWorkEventArgs : System.EventArgs {
    public DoWorkEventArgs(object argument) { }
    public object Argument { get { return default(object); } }
    public bool Cancel { get { return default(bool); } set { } }
    public object Result { get { return default(object); } set { } }
  }
  public delegate void DoWorkEventHandler(object sender, System.ComponentModel.DoWorkEventArgs e);
  public partial class ProgressChangedEventArgs : System.EventArgs {
    public ProgressChangedEventArgs(int progressPercentage, object userState) { }
    public int ProgressPercentage { get { return default(int); } }
    public object UserState { get { return default(object); } }
  }
  public delegate void ProgressChangedEventHandler(object sender, System.ComponentModel.ProgressChangedEventArgs e);
  public partial class RunWorkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    public RunWorkerCompletedEventArgs(object result, System.Exception error, bool cancelled) : base (default(System.Exception), default(bool), default(object)) { }
    public object Result { get { return default(object); } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public new object UserState { get { return default(object); } }
  }
  public delegate void RunWorkerCompletedEventHandler(object sender, System.ComponentModel.RunWorkerCompletedEventArgs e);
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.ComponentModel.Primitives")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.ComponentModel.Primitives")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.ComponentModel.Primitives")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.ComponentModel {
  public sealed partial class BrowsableAttribute : System.Attribute {
    public static readonly System.ComponentModel.BrowsableAttribute Default;
    public static readonly System.ComponentModel.BrowsableAttribute No;
    public static readonly System.ComponentModel.BrowsableAttribute Yes;
    public BrowsableAttribute(bool browsable) { }
    public bool Browsable { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public partial class CategoryAttribute : System.Attribute {
    public CategoryAttribute() { }
    public CategoryAttribute(string category) { }
    public static System.ComponentModel.CategoryAttribute Action { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public static System.ComponentModel.CategoryAttribute Appearance { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public static System.ComponentModel.CategoryAttribute Asynchronous { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public static System.ComponentModel.CategoryAttribute Behavior { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public string Category { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
    public static System.ComponentModel.CategoryAttribute Data { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public static System.ComponentModel.CategoryAttribute Default { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public static System.ComponentModel.CategoryAttribute Design { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public static System.ComponentModel.CategoryAttribute DragDrop { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public static System.ComponentModel.CategoryAttribute Focus { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public static System.ComponentModel.CategoryAttribute Format { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public static System.ComponentModel.CategoryAttribute Key { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public static System.ComponentModel.CategoryAttribute Layout { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public static System.ComponentModel.CategoryAttribute Mouse { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public static System.ComponentModel.CategoryAttribute WindowStyle { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CategoryAttribute); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    protected virtual string GetLocalizedString(string value) { return default(string); }
  }
  public partial class ComponentCollection {
    internal ComponentCollection() { }
  }
  public partial class DescriptionAttribute : System.Attribute {
    public static readonly System.ComponentModel.DescriptionAttribute Default;
    public DescriptionAttribute() { }
    public DescriptionAttribute(string description) { }
    public virtual string Description { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
    protected string DescriptionValue { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public sealed partial class DesignerCategoryAttribute : System.Attribute {
    public static readonly System.ComponentModel.DesignerCategoryAttribute Component;
    public static readonly System.ComponentModel.DesignerCategoryAttribute Default;
    public static readonly System.ComponentModel.DesignerCategoryAttribute Form;
    public static readonly System.ComponentModel.DesignerCategoryAttribute Generic;
    public DesignerCategoryAttribute() { }
    public DesignerCategoryAttribute(string category) { }
    public string Category { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public enum DesignerSerializationVisibility {
    Content = 2,
    Hidden = 0,
    Visible = 1,
  }
  public sealed partial class DesignerSerializationVisibilityAttribute : System.Attribute {
    public static readonly System.ComponentModel.DesignerSerializationVisibilityAttribute Content;
    public static readonly System.ComponentModel.DesignerSerializationVisibilityAttribute Default;
    public static readonly System.ComponentModel.DesignerSerializationVisibilityAttribute Hidden;
    public static readonly System.ComponentModel.DesignerSerializationVisibilityAttribute Visible;
    public DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility visibility) { }
    public System.ComponentModel.DesignerSerializationVisibility Visibility { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.DesignerSerializationVisibility); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public sealed partial class DesignOnlyAttribute : System.Attribute {
    public static readonly System.ComponentModel.DesignOnlyAttribute Default;
    public static readonly System.ComponentModel.DesignOnlyAttribute No;
    public static readonly System.ComponentModel.DesignOnlyAttribute Yes;
    public DesignOnlyAttribute(bool isDesignOnly) { }
    public bool IsDesignOnly { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public partial class DisplayNameAttribute : System.Attribute {
    public static readonly System.ComponentModel.DisplayNameAttribute Default;
    public DisplayNameAttribute() { }
    public DisplayNameAttribute(string displayName) { }
    public virtual string DisplayName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
    protected string DisplayNameValue { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public sealed partial class EventHandlerList : System.IDisposable {
    public EventHandlerList() { }
    public System.Delegate this[object key] { get { return default(System.Delegate); } set { } }
    public void AddHandler(object key, System.Delegate value) { }
    public void AddHandlers(System.ComponentModel.EventHandlerList listToAddFrom) { }
    public void Dispose() { }
    public void RemoveHandler(object key, System.Delegate value) { }
  }
  public partial interface IComponent : System.IDisposable {
    System.ComponentModel.ISite Site { get; set; }
    event System.EventHandler Disposed;
  }
  public partial interface IContainer : System.IDisposable {
    System.ComponentModel.ComponentCollection Components { get; }
    void Add(System.ComponentModel.IComponent component);
    void Add(System.ComponentModel.IComponent component, string name);
    void Remove(System.ComponentModel.IComponent component);
  }
  public sealed partial class ImmutableObjectAttribute : System.Attribute {
    public static readonly System.ComponentModel.ImmutableObjectAttribute Default;
    public static readonly System.ComponentModel.ImmutableObjectAttribute No;
    public static readonly System.ComponentModel.ImmutableObjectAttribute Yes;
    public ImmutableObjectAttribute(bool immutable) { }
    public bool Immutable { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public sealed partial class InitializationEventAttribute : System.Attribute {
    public InitializationEventAttribute(string eventName) { }
    public string EventName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
  }
  public partial interface ISite : System.IServiceProvider {
    System.ComponentModel.IComponent Component { get; }
    System.ComponentModel.IContainer Container { get; }
    bool DesignMode { get; }
    string Name { get; set; }
  }
  public sealed partial class LocalizableAttribute : System.Attribute {
    public static readonly System.ComponentModel.LocalizableAttribute Default;
    public static readonly System.ComponentModel.LocalizableAttribute No;
    public static readonly System.ComponentModel.LocalizableAttribute Yes;
    public LocalizableAttribute(bool isLocalizable) { }
    public bool IsLocalizable { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public sealed partial class MergablePropertyAttribute : System.Attribute {
    public static readonly System.ComponentModel.MergablePropertyAttribute Default;
    public static readonly System.ComponentModel.MergablePropertyAttribute No;
    public static readonly System.ComponentModel.MergablePropertyAttribute Yes;
    public MergablePropertyAttribute(bool allowMerge) { }
    public bool AllowMerge { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public sealed partial class NotifyParentPropertyAttribute : System.Attribute {
    public static readonly System.ComponentModel.NotifyParentPropertyAttribute Default;
    public static readonly System.ComponentModel.NotifyParentPropertyAttribute No;
    public static readonly System.ComponentModel.NotifyParentPropertyAttribute Yes;
    public NotifyParentPropertyAttribute(bool notifyParent) { }
    public bool NotifyParent { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public sealed partial class ParenthesizePropertyNameAttribute : System.Attribute {
    public static readonly System.ComponentModel.ParenthesizePropertyNameAttribute Default;
    public ParenthesizePropertyNameAttribute() { }
    public ParenthesizePropertyNameAttribute(bool needParenthesis) { }
    public bool NeedParenthesis { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public override bool Equals(object o) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public sealed partial class ReadOnlyAttribute : System.Attribute {
    public static readonly System.ComponentModel.ReadOnlyAttribute Default;
    public static readonly System.ComponentModel.ReadOnlyAttribute No;
    public static readonly System.ComponentModel.ReadOnlyAttribute Yes;
    public ReadOnlyAttribute(bool isReadOnly) { }
    public bool IsReadOnly { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public enum RefreshProperties {
    All = 1,
    None = 0,
    Repaint = 2,
  }
  public sealed partial class RefreshPropertiesAttribute : System.Attribute {
    public static readonly System.ComponentModel.RefreshPropertiesAttribute All;
    public static readonly System.ComponentModel.RefreshPropertiesAttribute Default;
    public static readonly System.ComponentModel.RefreshPropertiesAttribute Repaint;
    public RefreshPropertiesAttribute(System.ComponentModel.RefreshProperties refresh) { }
    public System.ComponentModel.RefreshProperties RefreshProperties { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.RefreshProperties); } }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.ComponentModel.TypeConverter")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.ComponentModel.TypeConverter")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.ComponentModel.TypeConverter")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System {
  public partial class UriTypeConverter : System.ComponentModel.TypeConverter {
    public UriTypeConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
}
namespace System.ComponentModel {
  public partial class ArrayConverter : System.ComponentModel.CollectionConverter {
    public ArrayConverter() { }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
  }
  public partial class AttributeCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    public static readonly System.ComponentModel.AttributeCollection Empty;
    protected AttributeCollection() { }
    public AttributeCollection(params System.Attribute[] attributes) { }
    protected virtual System.Attribute[] Attributes { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Attribute[]); } }
    public int Count { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } }
    public virtual System.Attribute this[int index] { get { return default(System.Attribute); } }
    public virtual System.Attribute this[System.Type attributeType] { get { return default(System.Attribute); } }
    bool System.Collections.ICollection.IsSynchronized { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(object); } }
    public bool Contains(System.Attribute attribute) { return default(bool); }
    public bool Contains(System.Attribute[] attributes) { return default(bool); }
    public void CopyTo(System.Array array, int index) { }
    public static System.ComponentModel.AttributeCollection FromExisting(System.ComponentModel.AttributeCollection existing, params System.Attribute[] newAttributes) { return default(System.ComponentModel.AttributeCollection); }
    protected System.Attribute GetDefaultAttribute(System.Type attributeType) { return default(System.Attribute); }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public bool Matches(System.Attribute attribute) { return default(bool); }
    public bool Matches(System.Attribute[] attributes) { return default(bool); }
  }
  public partial class AttributeProviderAttribute : System.Attribute {
    public AttributeProviderAttribute(string typeName) { }
    public AttributeProviderAttribute(string typeName, string propertyName) { }
    public AttributeProviderAttribute(System.Type type) { }
    public string PropertyName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
    public string TypeName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
  }
  public abstract partial class BaseNumberConverter : System.ComponentModel.TypeConverter {
    protected BaseNumberConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type t) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public partial class BooleanConverter : System.ComponentModel.TypeConverter {
    public BooleanConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { return default(System.ComponentModel.TypeConverter.StandardValuesCollection); }
    public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
    public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
  }
  public partial class ByteConverter : System.ComponentModel.BaseNumberConverter {
    public ByteConverter() { }
  }
  public delegate void CancelEventHandler(object sender, System.ComponentModel.CancelEventArgs e);
  public partial class CharConverter : System.ComponentModel.TypeConverter {
    public CharConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public enum CollectionChangeAction {
    Add = 1,
    Refresh = 3,
    Remove = 2,
  }
  public partial class CollectionChangeEventArgs : System.EventArgs {
    public CollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction action, object element) { }
    public virtual System.ComponentModel.CollectionChangeAction Action { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.CollectionChangeAction); } }
    public virtual object Element { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(object); } }
  }
  public delegate void CollectionChangeEventHandler(object sender, System.ComponentModel.CollectionChangeEventArgs e);
  public partial class CollectionConverter : System.ComponentModel.TypeConverter {
    public CollectionConverter() { }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
  }
  public abstract partial class CustomTypeDescriptor : System.ComponentModel.ICustomTypeDescriptor {
    protected CustomTypeDescriptor() { }
    protected CustomTypeDescriptor(System.ComponentModel.ICustomTypeDescriptor parent) { }
    public virtual System.ComponentModel.AttributeCollection GetAttributes() { return default(System.ComponentModel.AttributeCollection); }
    public virtual string GetClassName() { return default(string); }
    public virtual string GetComponentName() { return default(string); }
    public virtual System.ComponentModel.TypeConverter GetConverter() { return default(System.ComponentModel.TypeConverter); }
    public virtual System.ComponentModel.EventDescriptor GetDefaultEvent() { return default(System.ComponentModel.EventDescriptor); }
    public virtual System.ComponentModel.PropertyDescriptor GetDefaultProperty() { return default(System.ComponentModel.PropertyDescriptor); }
    public virtual object GetEditor(System.Type editorBaseType) { return default(object); }
    public virtual System.ComponentModel.EventDescriptorCollection GetEvents() { return default(System.ComponentModel.EventDescriptorCollection); }
    public virtual System.ComponentModel.EventDescriptorCollection GetEvents(System.Attribute[] attributes) { return default(System.ComponentModel.EventDescriptorCollection); }
    public virtual System.ComponentModel.PropertyDescriptorCollection GetProperties() { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public virtual System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Attribute[] attributes) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public virtual object GetPropertyOwner(System.ComponentModel.PropertyDescriptor pd) { return default(object); }
  }
  public partial class DateTimeConverter : System.ComponentModel.TypeConverter {
    public DateTimeConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public partial class DateTimeOffsetConverter : System.ComponentModel.TypeConverter {
    public DateTimeOffsetConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public partial class DecimalConverter : System.ComponentModel.BaseNumberConverter {
    public DecimalConverter() { }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class DefaultEventAttribute : System.Attribute {
    public static readonly System.ComponentModel.DefaultEventAttribute Default;
    public DefaultEventAttribute(string name) { }
    public string Name { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public sealed partial class DefaultPropertyAttribute : System.Attribute {
    public static readonly System.ComponentModel.DefaultPropertyAttribute Default;
    public DefaultPropertyAttribute(string name) { }
    public string Name { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public partial class DoubleConverter : System.ComponentModel.BaseNumberConverter {
    public DoubleConverter() { }
  }
  public partial class EnumConverter : System.ComponentModel.TypeConverter {
    public EnumConverter(System.Type type) { }
    protected virtual System.Collections.IComparer Comparer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Collections.IComparer); } }
    protected System.Type EnumType { get { return default(System.Type); } }
    protected System.ComponentModel.TypeConverter.StandardValuesCollection Values { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.TypeConverter.StandardValuesCollection); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
    public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { return default(System.ComponentModel.TypeConverter.StandardValuesCollection); }
    public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
    public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
    public override bool IsValid(System.ComponentModel.ITypeDescriptorContext context, object value) { return default(bool); }
  }
  public abstract partial class EventDescriptor : System.ComponentModel.MemberDescriptor {
    protected EventDescriptor(System.ComponentModel.MemberDescriptor descr) : base (default(System.ComponentModel.MemberDescriptor)) { }
    protected EventDescriptor(System.ComponentModel.MemberDescriptor descr, System.Attribute[] attrs) : base (default(System.ComponentModel.MemberDescriptor)) { }
    protected EventDescriptor(string name, System.Attribute[] attrs) : base (default(System.ComponentModel.MemberDescriptor)) { }
    public abstract System.Type ComponentType { get; }
    public abstract System.Type EventType { get; }
    public abstract bool IsMulticast { get; }
    public abstract void AddEventHandler(object component, System.Delegate value);
    public abstract void RemoveEventHandler(object component, System.Delegate value);
  }
  public partial class EventDescriptorCollection : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public static readonly System.ComponentModel.EventDescriptorCollection Empty;
    public EventDescriptorCollection(System.ComponentModel.EventDescriptor[] events) { }
    public EventDescriptorCollection(System.ComponentModel.EventDescriptor[] events, bool readOnly) { }
    public int Count { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } }
    public virtual System.ComponentModel.EventDescriptor this[int index] { get { return default(System.ComponentModel.EventDescriptor); } }
    public virtual System.ComponentModel.EventDescriptor this[string name] { get { return default(System.ComponentModel.EventDescriptor); } }
    bool System.Collections.ICollection.IsSynchronized { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.ComponentModel.EventDescriptor value) { return default(int); }
    public void Clear() { }
    public bool Contains(System.ComponentModel.EventDescriptor value) { return default(bool); }
    public virtual System.ComponentModel.EventDescriptor Find(string name, bool ignoreCase) { return default(System.ComponentModel.EventDescriptor); }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.ComponentModel.EventDescriptor value) { return default(int); }
    public void Insert(int index, System.ComponentModel.EventDescriptor value) { }
    protected void InternalSort(System.Collections.IComparer sorter) { }
    protected void InternalSort(string[] names) { }
    public void Remove(System.ComponentModel.EventDescriptor value) { }
    public void RemoveAt(int index) { }
    public virtual System.ComponentModel.EventDescriptorCollection Sort() { return default(System.ComponentModel.EventDescriptorCollection); }
    public virtual System.ComponentModel.EventDescriptorCollection Sort(System.Collections.IComparer comparer) { return default(System.ComponentModel.EventDescriptorCollection); }
    public virtual System.ComponentModel.EventDescriptorCollection Sort(string[] names) { return default(System.ComponentModel.EventDescriptorCollection); }
    public virtual System.ComponentModel.EventDescriptorCollection Sort(string[] names, System.Collections.IComparer comparer) { return default(System.ComponentModel.EventDescriptorCollection); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
  }
  public sealed partial class ExtenderProvidedPropertyAttribute : System.Attribute {
    public ExtenderProvidedPropertyAttribute() { }
    public System.ComponentModel.PropertyDescriptor ExtenderProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.PropertyDescriptor); } }
    public System.ComponentModel.IExtenderProvider Provider { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.IExtenderProvider); } }
    public System.Type ReceiverType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Type); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public partial class GuidConverter : System.ComponentModel.TypeConverter {
    public GuidConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public partial class HandledEventArgs : System.EventArgs {
    public HandledEventArgs() { }
    public HandledEventArgs(bool defaultHandledValue) { }
    public bool Handled { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
  }
  public delegate void HandledEventHandler(object sender, System.ComponentModel.HandledEventArgs e);
  public partial interface ICustomTypeDescriptor {
    System.ComponentModel.AttributeCollection GetAttributes();
    string GetClassName();
    string GetComponentName();
    System.ComponentModel.TypeConverter GetConverter();
    System.ComponentModel.EventDescriptor GetDefaultEvent();
    System.ComponentModel.PropertyDescriptor GetDefaultProperty();
    object GetEditor(System.Type editorBaseType);
    System.ComponentModel.EventDescriptorCollection GetEvents();
    System.ComponentModel.EventDescriptorCollection GetEvents(System.Attribute[] attributes);
    System.ComponentModel.PropertyDescriptorCollection GetProperties();
    System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Attribute[] attributes);
    object GetPropertyOwner(System.ComponentModel.PropertyDescriptor pd);
  }
  public partial interface IExtenderProvider {
    bool CanExtend(object extendee);
  }
  public partial interface IListSource {
    bool ContainsListCollection { get; }
    System.Collections.IList GetList();
  }
  public partial class Int16Converter : System.ComponentModel.BaseNumberConverter {
    public Int16Converter() { }
  }
  public partial class Int32Converter : System.ComponentModel.BaseNumberConverter {
    public Int32Converter() { }
  }
  public partial class Int64Converter : System.ComponentModel.BaseNumberConverter {
    public Int64Converter() { }
  }
  public partial class InvalidAsynchronousStateException : System.ArgumentException {
    public InvalidAsynchronousStateException() { }
    public InvalidAsynchronousStateException(string message) { }
    public InvalidAsynchronousStateException(string message, System.Exception innerException) { }
  }
  public partial interface ITypeDescriptorContext : System.IServiceProvider {
    System.ComponentModel.IContainer Container { get; }
    object Instance { get; }
    System.ComponentModel.PropertyDescriptor PropertyDescriptor { get; }
    void OnComponentChanged();
    bool OnComponentChanging();
  }
  public partial interface ITypedList {
    System.ComponentModel.PropertyDescriptorCollection GetItemProperties(System.ComponentModel.PropertyDescriptor[] listAccessors);
    string GetListName(System.ComponentModel.PropertyDescriptor[] listAccessors);
  }
  public abstract partial class MemberDescriptor {
    protected MemberDescriptor(System.ComponentModel.MemberDescriptor descr) { }
    protected MemberDescriptor(System.ComponentModel.MemberDescriptor oldMemberDescriptor, System.Attribute[] newAttributes) { }
    protected MemberDescriptor(string name) { }
    protected MemberDescriptor(string name, System.Attribute[] attributes) { }
    protected virtual System.Attribute[] AttributeArray { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Attribute[]); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    public virtual System.ComponentModel.AttributeCollection Attributes { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.AttributeCollection); } }
    public virtual string Category { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
    public virtual string Description { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
    public virtual bool DesignTimeOnly { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public virtual string DisplayName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
    public virtual bool IsBrowsable { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public virtual string Name { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
    protected virtual int NameHashCode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } }
    protected virtual System.ComponentModel.AttributeCollection CreateAttributeCollection() { return default(System.ComponentModel.AttributeCollection); }
    public override bool Equals(object obj) { return default(bool); }
    protected virtual void FillAttributes(System.Collections.IList attributeList) { }
    protected static System.Reflection.MethodInfo FindMethod(System.Type componentClass, string name, System.Type[] args, System.Type returnType) { return default(System.Reflection.MethodInfo); }
    protected static System.Reflection.MethodInfo FindMethod(System.Type componentClass, string name, System.Type[] args, System.Type returnType, bool publicOnly) { return default(System.Reflection.MethodInfo); }
    public override int GetHashCode() { return default(int); }
    protected virtual object GetInvocationTarget(System.Type type, object instance) { return default(object); }
    protected static System.ComponentModel.ISite GetSite(object component) { return default(System.ComponentModel.ISite); }
  }
  public partial class MultilineStringConverter : System.ComponentModel.TypeConverter {
    public MultilineStringConverter() { }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
  }
  public partial class NullableConverter : System.ComponentModel.TypeConverter {
    public NullableConverter(System.Type type) { }
    public System.Type NullableType { get { return default(System.Type); } }
    public System.Type UnderlyingType { get { return default(System.Type); } }
    public System.ComponentModel.TypeConverter UnderlyingTypeConverter { get { return default(System.ComponentModel.TypeConverter); } }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
    public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) { return default(object); }
    public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
    public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { return default(System.ComponentModel.TypeConverter.StandardValuesCollection); }
    public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
    public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
    public override bool IsValid(System.ComponentModel.ITypeDescriptorContext context, object value) { return default(bool); }
  }
  public abstract partial class PropertyDescriptor : System.ComponentModel.MemberDescriptor {
    protected PropertyDescriptor(System.ComponentModel.MemberDescriptor descr) : base (default(System.ComponentModel.MemberDescriptor)) { }
    protected PropertyDescriptor(System.ComponentModel.MemberDescriptor descr, System.Attribute[] attrs) : base (default(System.ComponentModel.MemberDescriptor)) { }
    protected PropertyDescriptor(string name, System.Attribute[] attrs) : base (default(System.ComponentModel.MemberDescriptor)) { }
    public abstract System.Type ComponentType { get; }
    public virtual System.ComponentModel.TypeConverter Converter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.ComponentModel.TypeConverter); } }
    public virtual bool IsLocalizable { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public abstract bool IsReadOnly { get; }
    public abstract System.Type PropertyType { get; }
    public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get { return default(System.ComponentModel.DesignerSerializationVisibility); } }
    public virtual bool SupportsChangeEvents { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public virtual void AddValueChanged(object component, System.EventHandler handler) { }
    public abstract bool CanResetValue(object component);
    protected object CreateInstance(System.Type type) { return default(object); }
    public override bool Equals(object obj) { return default(bool); }
    protected override void FillAttributes(System.Collections.IList attributeList) { }
    public System.ComponentModel.PropertyDescriptorCollection GetChildProperties() { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public System.ComponentModel.PropertyDescriptorCollection GetChildProperties(System.Attribute[] filter) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public System.ComponentModel.PropertyDescriptorCollection GetChildProperties(object instance) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public virtual System.ComponentModel.PropertyDescriptorCollection GetChildProperties(object instance, System.Attribute[] filter) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public virtual object GetEditor(System.Type editorBaseType) { return default(object); }
    public override int GetHashCode() { return default(int); }
    protected override object GetInvocationTarget(System.Type type, object instance) { return default(object); }
    protected System.Type GetTypeFromName(string typeName) { return default(System.Type); }
    public abstract object GetValue(object component);
    protected internal System.EventHandler GetValueChangedHandler(object component) { return default(System.EventHandler); }
    protected virtual void OnValueChanged(object component, System.EventArgs e) { }
    public virtual void RemoveValueChanged(object component, System.EventHandler handler) { }
    public abstract void ResetValue(object component);
    public abstract void SetValue(object component, object value);
    public abstract bool ShouldSerializeValue(object component);
  }
  public partial class PropertyDescriptorCollection : System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable, System.Collections.IList {
    public static readonly System.ComponentModel.PropertyDescriptorCollection Empty;
    public PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor[] properties) { }
    public PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor[] properties, bool readOnly) { }
    public int Count { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } }
    public virtual System.ComponentModel.PropertyDescriptor this[int index] { get { return default(System.ComponentModel.PropertyDescriptor); } }
    public virtual System.ComponentModel.PropertyDescriptor this[string name] { get { return default(System.ComponentModel.PropertyDescriptor); } }
    bool System.Collections.ICollection.IsSynchronized { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(object); } }
    bool System.Collections.IDictionary.IsFixedSize { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    bool System.Collections.IDictionary.IsReadOnly { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    object System.Collections.IDictionary.this[object key] { get { return default(object); } set { } }
    System.Collections.ICollection System.Collections.IDictionary.Keys { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Collections.ICollection); } }
    System.Collections.ICollection System.Collections.IDictionary.Values { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Collections.ICollection); } }
    bool System.Collections.IList.IsFixedSize { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.ComponentModel.PropertyDescriptor value) { return default(int); }
    public void Clear() { }
    public bool Contains(System.ComponentModel.PropertyDescriptor value) { return default(bool); }
    public void CopyTo(System.Array array, int index) { }
    public virtual System.ComponentModel.PropertyDescriptor Find(string name, bool ignoreCase) { return default(System.ComponentModel.PropertyDescriptor); }
    public virtual System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.ComponentModel.PropertyDescriptor value) { return default(int); }
    public void Insert(int index, System.ComponentModel.PropertyDescriptor value) { }
    protected void InternalSort(System.Collections.IComparer sorter) { }
    protected void InternalSort(string[] names) { }
    public void Remove(System.ComponentModel.PropertyDescriptor value) { }
    public void RemoveAt(int index) { }
    public virtual System.ComponentModel.PropertyDescriptorCollection Sort() { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public virtual System.ComponentModel.PropertyDescriptorCollection Sort(System.Collections.IComparer comparer) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public virtual System.ComponentModel.PropertyDescriptorCollection Sort(string[] names) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public virtual System.ComponentModel.PropertyDescriptorCollection Sort(string[] names, System.Collections.IComparer comparer) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    void System.Collections.IDictionary.Add(object key, object value) { }
    bool System.Collections.IDictionary.Contains(object key) { return default(bool); }
    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    void System.Collections.IDictionary.Remove(object key) { }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
  }
  public sealed partial class ProvidePropertyAttribute : System.Attribute {
    public ProvidePropertyAttribute(string propertyName, string receiverTypeName) { }
    public ProvidePropertyAttribute(string propertyName, System.Type receiverType) { }
    public string PropertyName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
    public string ReceiverTypeName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public partial class RefreshEventArgs : System.EventArgs {
    public RefreshEventArgs(object componentChanged) { }
    public RefreshEventArgs(System.Type typeChanged) { }
    public object ComponentChanged { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(object); } }
    public System.Type TypeChanged { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Type); } }
  }
  public delegate void RefreshEventHandler(System.ComponentModel.RefreshEventArgs e);
  public partial class SByteConverter : System.ComponentModel.BaseNumberConverter {
    public SByteConverter() { }
  }
  public partial class SingleConverter : System.ComponentModel.BaseNumberConverter {
    public SingleConverter() { }
  }
  public partial class StringConverter : System.ComponentModel.TypeConverter {
    public StringConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
  }
  public partial class TimeSpanConverter : System.ComponentModel.TypeConverter {
    public TimeSpanConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public partial class TypeConverter {
    public TypeConverter() { }
    public virtual bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public bool CanConvertFrom(System.Type sourceType) { return default(bool); }
    public virtual bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public bool CanConvertTo(System.Type destinationType) { return default(bool); }
    public virtual object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public object ConvertFrom(object value) { return default(object); }
    public object ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext context, string text) { return default(object); }
    public object ConvertFromInvariantString(string text) { return default(object); }
    public object ConvertFromString(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, string text) { return default(object); }
    public object ConvertFromString(System.ComponentModel.ITypeDescriptorContext context, string text) { return default(object); }
    public object ConvertFromString(string text) { return default(object); }
    public virtual object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
    public object ConvertTo(object value, System.Type destinationType) { return default(object); }
    public string ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext context, object value) { return default(string); }
    public string ConvertToInvariantString(object value) { return default(string); }
    public string ConvertToString(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(string); }
    public string ConvertToString(System.ComponentModel.ITypeDescriptorContext context, object value) { return default(string); }
    public string ConvertToString(object value) { return default(string); }
    public object CreateInstance(System.Collections.IDictionary propertyValues) { return default(object); }
    public virtual object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) { return default(object); }
    protected System.Exception GetConvertFromException(object value) { return default(System.Exception); }
    protected System.Exception GetConvertToException(object value, System.Type destinationType) { return default(System.Exception); }
    public bool GetCreateInstanceSupported() { return default(bool); }
    public virtual bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
    public System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public virtual System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public System.ComponentModel.PropertyDescriptorCollection GetProperties(object value) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public bool GetPropertiesSupported() { return default(bool); }
    public virtual bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
    public System.Collections.ICollection GetStandardValues() { return default(System.Collections.ICollection); }
    public virtual System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { return default(System.ComponentModel.TypeConverter.StandardValuesCollection); }
    public bool GetStandardValuesExclusive() { return default(bool); }
    public virtual bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
    public bool GetStandardValuesSupported() { return default(bool); }
    public virtual bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
    public virtual bool IsValid(System.ComponentModel.ITypeDescriptorContext context, object value) { return default(bool); }
    public bool IsValid(object value) { return default(bool); }
    protected System.ComponentModel.PropertyDescriptorCollection SortProperties(System.ComponentModel.PropertyDescriptorCollection props, string[] names) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    protected abstract partial class SimplePropertyDescriptor : System.ComponentModel.PropertyDescriptor {
      protected SimplePropertyDescriptor(System.Type componentType, string name, System.Type propertyType) : base (default(System.ComponentModel.MemberDescriptor)) { }
      protected SimplePropertyDescriptor(System.Type componentType, string name, System.Type propertyType, System.Attribute[] attributes) : base (default(System.ComponentModel.MemberDescriptor)) { }
      public override System.Type ComponentType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Type); } }
      public override bool IsReadOnly { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
      public override System.Type PropertyType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Type); } }
      public override bool CanResetValue(object component) { return default(bool); }
      public override void ResetValue(object component) { }
      public override bool ShouldSerializeValue(object component) { return default(bool); }
    }
    public partial class StandardValuesCollection : System.Collections.ICollection, System.Collections.IEnumerable {
      public StandardValuesCollection(System.Collections.ICollection values) { }
      public int Count { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } }
      public object this[int index] { get { return default(object); } }
      bool System.Collections.ICollection.IsSynchronized { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
      object System.Collections.ICollection.SyncRoot { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(object); } }
      public void CopyTo(System.Array array, int index) { }
      public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(32767))]
  public sealed partial class TypeConverterAttribute : System.Attribute {
    public static readonly System.ComponentModel.TypeConverterAttribute Default;
    public TypeConverterAttribute() { }
    public TypeConverterAttribute(string typeName) { }
    public TypeConverterAttribute(System.Type type) { }
    public string ConverterTypeName { get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public abstract partial class TypeDescriptionProvider {
    protected TypeDescriptionProvider() { }
    protected TypeDescriptionProvider(System.ComponentModel.TypeDescriptionProvider parent) { }
    public virtual object CreateInstance(System.IServiceProvider provider, System.Type objectType, System.Type[] argTypes, object[] args) { return default(object); }
    public virtual System.Collections.IDictionary GetCache(object instance) { return default(System.Collections.IDictionary); }
    public virtual System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance) { return default(System.ComponentModel.ICustomTypeDescriptor); }
    protected internal virtual System.ComponentModel.IExtenderProvider[] GetExtenderProviders(object instance) { return default(System.ComponentModel.IExtenderProvider[]); }
    public virtual string GetFullComponentName(object component) { return default(string); }
    public System.Type GetReflectionType(object instance) { return default(System.Type); }
    public System.Type GetReflectionType(System.Type objectType) { return default(System.Type); }
    public virtual System.Type GetReflectionType(System.Type objectType, object instance) { return default(System.Type); }
    public virtual System.Type GetRuntimeType(System.Type reflectionType) { return default(System.Type); }
    public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(object instance) { return default(System.ComponentModel.ICustomTypeDescriptor); }
    public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(System.Type objectType) { return default(System.ComponentModel.ICustomTypeDescriptor); }
    public virtual System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(System.Type objectType, object instance) { return default(System.ComponentModel.ICustomTypeDescriptor); }
    public virtual bool IsSupportedType(System.Type type) { return default(bool); }
  }
  public sealed partial class TypeDescriptionProviderAttribute : System.Attribute {
    public TypeDescriptionProviderAttribute(string typeName) { }
    public TypeDescriptionProviderAttribute(System.Type type) { }
    public string TypeName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } }
  }
  public sealed partial class TypeDescriptor {
    internal TypeDescriptor() { }
    public static System.Type InterfaceType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Type); } }
    public static event System.ComponentModel.RefreshEventHandler Refreshed { add { } remove { } }
    public static System.ComponentModel.TypeDescriptionProvider AddAttributes(object instance, params System.Attribute[] attributes) { return default(System.ComponentModel.TypeDescriptionProvider); }
    public static System.ComponentModel.TypeDescriptionProvider AddAttributes(System.Type type, params System.Attribute[] attributes) { return default(System.ComponentModel.TypeDescriptionProvider); }
    public static void AddEditorTable(System.Type editorBaseType, System.Collections.Hashtable table) { }
    public static void AddProvider(System.ComponentModel.TypeDescriptionProvider provider, object instance) { }
    public static void AddProvider(System.ComponentModel.TypeDescriptionProvider provider, System.Type type) { }
    public static void AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider provider, object instance) { }
    public static void AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider provider, System.Type type) { }
    public static void CreateAssociation(object primary, object secondary) { }
    public static System.ComponentModel.EventDescriptor CreateEvent(System.Type componentType, System.ComponentModel.EventDescriptor oldEventDescriptor, params System.Attribute[] attributes) { return default(System.ComponentModel.EventDescriptor); }
    public static System.ComponentModel.EventDescriptor CreateEvent(System.Type componentType, string name, System.Type type, params System.Attribute[] attributes) { return default(System.ComponentModel.EventDescriptor); }
    public static object CreateInstance(System.IServiceProvider provider, System.Type objectType, System.Type[] argTypes, object[] args) { return default(object); }
    public static System.ComponentModel.PropertyDescriptor CreateProperty(System.Type componentType, System.ComponentModel.PropertyDescriptor oldPropertyDescriptor, params System.Attribute[] attributes) { return default(System.ComponentModel.PropertyDescriptor); }
    public static System.ComponentModel.PropertyDescriptor CreateProperty(System.Type componentType, string name, System.Type type, params System.Attribute[] attributes) { return default(System.ComponentModel.PropertyDescriptor); }
    public static object GetAssociation(System.Type type, object primary) { return default(object); }
    public static System.ComponentModel.AttributeCollection GetAttributes(object component) { return default(System.ComponentModel.AttributeCollection); }
    public static System.ComponentModel.AttributeCollection GetAttributes(object component, bool noCustomTypeDesc) { return default(System.ComponentModel.AttributeCollection); }
    public static System.ComponentModel.AttributeCollection GetAttributes(System.Type componentType) { return default(System.ComponentModel.AttributeCollection); }
    public static string GetClassName(object component) { return default(string); }
    public static string GetClassName(object component, bool noCustomTypeDesc) { return default(string); }
    public static string GetClassName(System.Type componentType) { return default(string); }
    public static string GetComponentName(object component) { return default(string); }
    public static string GetComponentName(object component, bool noCustomTypeDesc) { return default(string); }
    public static System.ComponentModel.TypeConverter GetConverter(object component) { return default(System.ComponentModel.TypeConverter); }
    public static System.ComponentModel.TypeConverter GetConverter(object component, bool noCustomTypeDesc) { return default(System.ComponentModel.TypeConverter); }
    public static System.ComponentModel.TypeConverter GetConverter(System.Type type) { return default(System.ComponentModel.TypeConverter); }
    public static System.ComponentModel.EventDescriptor GetDefaultEvent(object component) { return default(System.ComponentModel.EventDescriptor); }
    public static System.ComponentModel.EventDescriptor GetDefaultEvent(object component, bool noCustomTypeDesc) { return default(System.ComponentModel.EventDescriptor); }
    public static System.ComponentModel.EventDescriptor GetDefaultEvent(System.Type componentType) { return default(System.ComponentModel.EventDescriptor); }
    public static System.ComponentModel.PropertyDescriptor GetDefaultProperty(object component) { return default(System.ComponentModel.PropertyDescriptor); }
    public static System.ComponentModel.PropertyDescriptor GetDefaultProperty(object component, bool noCustomTypeDesc) { return default(System.ComponentModel.PropertyDescriptor); }
    public static System.ComponentModel.PropertyDescriptor GetDefaultProperty(System.Type componentType) { return default(System.ComponentModel.PropertyDescriptor); }
    public static object GetEditor(object component, System.Type editorBaseType) { return default(object); }
    public static object GetEditor(object component, System.Type editorBaseType, bool noCustomTypeDesc) { return default(object); }
    public static object GetEditor(System.Type type, System.Type editorBaseType) { return default(object); }
    public static System.ComponentModel.EventDescriptorCollection GetEvents(object component) { return default(System.ComponentModel.EventDescriptorCollection); }
    public static System.ComponentModel.EventDescriptorCollection GetEvents(object component, System.Attribute[] attributes) { return default(System.ComponentModel.EventDescriptorCollection); }
    public static System.ComponentModel.EventDescriptorCollection GetEvents(object component, System.Attribute[] attributes, bool noCustomTypeDesc) { return default(System.ComponentModel.EventDescriptorCollection); }
    public static System.ComponentModel.EventDescriptorCollection GetEvents(object component, bool noCustomTypeDesc) { return default(System.ComponentModel.EventDescriptorCollection); }
    public static System.ComponentModel.EventDescriptorCollection GetEvents(System.Type componentType) { return default(System.ComponentModel.EventDescriptorCollection); }
    public static System.ComponentModel.EventDescriptorCollection GetEvents(System.Type componentType, System.Attribute[] attributes) { return default(System.ComponentModel.EventDescriptorCollection); }
    public static string GetFullComponentName(object component) { return default(string); }
    public static System.ComponentModel.PropertyDescriptorCollection GetProperties(object component) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public static System.ComponentModel.PropertyDescriptorCollection GetProperties(object component, System.Attribute[] attributes) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public static System.ComponentModel.PropertyDescriptorCollection GetProperties(object component, System.Attribute[] attributes, bool noCustomTypeDesc) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public static System.ComponentModel.PropertyDescriptorCollection GetProperties(object component, bool noCustomTypeDesc) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public static System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Type componentType) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public static System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Type componentType, System.Attribute[] attributes) { return default(System.ComponentModel.PropertyDescriptorCollection); }
    public static System.ComponentModel.TypeDescriptionProvider GetProvider(object instance) { return default(System.ComponentModel.TypeDescriptionProvider); }
    public static System.ComponentModel.TypeDescriptionProvider GetProvider(System.Type type) { return default(System.ComponentModel.TypeDescriptionProvider); }
    public static System.Type GetReflectionType(object instance) { return default(System.Type); }
    public static System.Type GetReflectionType(System.Type type) { return default(System.Type); }
    public static void Refresh(object component) { }
    public static void Refresh(System.Reflection.Assembly assembly) { }
    public static void Refresh(System.Reflection.Module module) { }
    public static void Refresh(System.Type type) { }
    public static void RemoveAssociation(object primary, object secondary) { }
    public static void RemoveAssociations(object primary) { }
    public static void RemoveProvider(System.ComponentModel.TypeDescriptionProvider provider, object instance) { }
    public static void RemoveProvider(System.ComponentModel.TypeDescriptionProvider provider, System.Type type) { }
    public static void RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider provider, object instance) { }
    public static void RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider provider, System.Type type) { }
    public static void SortDescriptorArray(System.Collections.IList infos) { }
  }
  public abstract partial class TypeListConverter : System.ComponentModel.TypeConverter {
    protected TypeListConverter(System.Type[] types) { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
    public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { return default(System.ComponentModel.TypeConverter.StandardValuesCollection); }
    public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
    public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
  }
  public partial class UInt16Converter : System.ComponentModel.BaseNumberConverter {
    public UInt16Converter() { }
  }
  public partial class UInt32Converter : System.ComponentModel.BaseNumberConverter {
    public UInt32Converter() { }
  }
  public partial class UInt64Converter : System.ComponentModel.BaseNumberConverter {
    public UInt64Converter() { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Console")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Console")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Console")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System {
  public static partial class Console {
    public static System.ConsoleColor BackgroundColor { get { return default(System.ConsoleColor); } set { } }
    public static int BufferHeight { get { return default(int); } set { } }
    public static int BufferWidth { get { return default(int); } set { } }
    public static bool CapsLock { get { return default(bool); } }
    public static int CursorLeft { get { return default(int); } set { } }
    public static int CursorSize { get { return default(int); } set { } }
    public static int CursorTop { get { return default(int); } set { } }
    public static bool CursorVisible { get { return default(bool); } set { } }
    public static System.IO.TextWriter Error { get { return default(System.IO.TextWriter); } }
    public static System.ConsoleColor ForegroundColor { get { return default(System.ConsoleColor); } set { } }
    public static System.IO.TextReader In { get { return default(System.IO.TextReader); } }
    public static System.Text.Encoding InputEncoding { get { return default(System.Text.Encoding); } set { } }
    public static bool IsErrorRedirected { get { return default(bool); } }
    public static bool IsInputRedirected { get { return default(bool); } }
    public static bool IsOutputRedirected { get { return default(bool); } }
    public static bool KeyAvailable { get { return default(bool); } }
    public static int LargestWindowHeight { get { return default(int); } }
    public static int LargestWindowWidth { get { return default(int); } }
    public static bool NumberLock { get { return default(bool); } }
    public static System.IO.TextWriter Out { get { return default(System.IO.TextWriter); } }
    public static System.Text.Encoding OutputEncoding { get { return default(System.Text.Encoding); } set { } }
    public static string Title { get { return default(string); } set { } }
    public static bool TreatControlCAsInput { get { return default(bool); } set { } }
    public static int WindowHeight { get { return default(int); } set { } }
    public static int WindowLeft { get { return default(int); } set { } }
    public static int WindowTop { get { return default(int); } set { } }
    public static int WindowWidth { get { return default(int); } set { } }
    public static event System.ConsoleCancelEventHandler CancelKeyPress { add { } remove { } }
    public static void Beep() { }
    public static void Beep(int frequency, int duration) { }
    public static void Clear() { }
    public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop) { }
    public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, System.ConsoleColor sourceForeColor, System.ConsoleColor sourceBackColor) { }
    public static System.IO.Stream OpenStandardError() { return default(System.IO.Stream); }
    public static System.IO.Stream OpenStandardInput() { return default(System.IO.Stream); }
    public static System.IO.Stream OpenStandardOutput() { return default(System.IO.Stream); }
    public static int Read() { return default(int); }
    public static System.ConsoleKeyInfo ReadKey() { return default(System.ConsoleKeyInfo); }
    public static System.ConsoleKeyInfo ReadKey(bool intercept) { return default(System.ConsoleKeyInfo); }
    public static string ReadLine() { return default(string); }
    public static void ResetColor() { }
    public static void SetBufferSize(int width, int height) { }
    public static void SetCursorPosition(int left, int top) { }
    public static void SetError(System.IO.TextWriter newError) { }
    public static void SetIn(System.IO.TextReader newIn) { }
    public static void SetOut(System.IO.TextWriter newOut) { }
    public static void SetWindowPosition(int left, int top) { }
    public static void SetWindowSize(int width, int height) { }
    public static void Write(bool value) { }
    public static void Write(char value) { }
    public static void Write(char[] buffer) { }
    public static void Write(char[] buffer, int index, int count) { }
    public static void Write(decimal value) { }
    public static void Write(double value) { }
    public static void Write(int value) { }
    public static void Write(long value) { }
    public static void Write(object value) { }
    public static void Write(float value) { }
    public static void Write(string value) { }
    public static void Write(string format, object arg0) { }
    public static void Write(string format, object arg0, object arg1) { }
    public static void Write(string format, object arg0, object arg1, object arg2) { }
    public static void Write(string format, params object[] arg) { }
    [System.CLSCompliantAttribute(false)]
    public static void Write(uint value) { }
    [System.CLSCompliantAttribute(false)]
    public static void Write(ulong value) { }
    public static void WriteLine() { }
    public static void WriteLine(bool value) { }
    public static void WriteLine(char value) { }
    public static void WriteLine(char[] buffer) { }
    public static void WriteLine(char[] buffer, int index, int count) { }
    public static void WriteLine(decimal value) { }
    public static void WriteLine(double value) { }
    public static void WriteLine(int value) { }
    public static void WriteLine(long value) { }
    public static void WriteLine(object value) { }
    public static void WriteLine(float value) { }
    public static void WriteLine(string value) { }
    public static void WriteLine(string format, object arg0) { }
    public static void WriteLine(string format, object arg0, object arg1) { }
    public static void WriteLine(string format, object arg0, object arg1, object arg2) { }
    public static void WriteLine(string format, params object[] arg) { }
    [System.CLSCompliantAttribute(false)]
    public static void WriteLine(uint value) { }
    [System.CLSCompliantAttribute(false)]
    public static void WriteLine(ulong value) { }
  }
  public sealed partial class ConsoleCancelEventArgs : System.EventArgs {
    internal ConsoleCancelEventArgs() { }
    public bool Cancel { get { return default(bool); } set { } }
    public System.ConsoleSpecialKey SpecialKey { get { return default(System.ConsoleSpecialKey); } }
  }
  public delegate void ConsoleCancelEventHandler(object sender, System.ConsoleCancelEventArgs e);
  public enum ConsoleColor {
    Black = 0,
    Blue = 9,
    Cyan = 11,
    DarkBlue = 1,
    DarkCyan = 3,
    DarkGray = 8,
    DarkGreen = 2,
    DarkMagenta = 5,
    DarkRed = 4,
    DarkYellow = 6,
    Gray = 7,
    Green = 10,
    Magenta = 13,
    Red = 12,
    White = 15,
    Yellow = 14,
  }
  public enum ConsoleKey {
    A = 65,
    Add = 107,
    B = 66,
    Backspace = 8,
    C = 67,
    Clear = 12,
    D = 68,
    D0 = 48,
    D1 = 49,
    D2 = 50,
    D3 = 51,
    D4 = 52,
    D5 = 53,
    D6 = 54,
    D7 = 55,
    D8 = 56,
    D9 = 57,
    Decimal = 110,
    Delete = 46,
    Divide = 111,
    DownArrow = 40,
    E = 69,
    End = 35,
    Enter = 13,
    Escape = 27,
    Execute = 43,
    F = 70,
    F1 = 112,
    F10 = 121,
    F11 = 122,
    F12 = 123,
    F13 = 124,
    F14 = 125,
    F15 = 126,
    F16 = 127,
    F17 = 128,
    F18 = 129,
    F19 = 130,
    F2 = 113,
    F20 = 131,
    F21 = 132,
    F22 = 133,
    F23 = 134,
    F24 = 135,
    F3 = 114,
    F4 = 115,
    F5 = 116,
    F6 = 117,
    F7 = 118,
    F8 = 119,
    F9 = 120,
    G = 71,
    H = 72,
    Help = 47,
    Home = 36,
    I = 73,
    Insert = 45,
    J = 74,
    K = 75,
    L = 76,
    LeftArrow = 37,
    M = 77,
    Multiply = 106,
    N = 78,
    NumPad0 = 96,
    NumPad1 = 97,
    NumPad2 = 98,
    NumPad3 = 99,
    NumPad4 = 100,
    NumPad5 = 101,
    NumPad6 = 102,
    NumPad7 = 103,
    NumPad8 = 104,
    NumPad9 = 105,
    O = 79,
    Oem1 = 186,
    Oem2 = 191,
    Oem3 = 192,
    Oem4 = 219,
    Oem5 = 220,
    Oem6 = 221,
    Oem7 = 222,
    Oem8 = 223,
    OemClear = 254,
    OemComma = 188,
    OemMinus = 189,
    OemPeriod = 190,
    OemPlus = 187,
    P = 80,
    PageDown = 34,
    PageUp = 33,
    Pause = 19,
    Print = 42,
    PrintScreen = 44,
    Q = 81,
    R = 82,
    RightArrow = 39,
    S = 83,
    Select = 41,
    Separator = 108,
    Sleep = 95,
    Spacebar = 32,
    Subtract = 109,
    T = 84,
    Tab = 9,
    U = 85,
    UpArrow = 38,
    V = 86,
    W = 87,
    X = 88,
    Y = 89,
    Z = 90,
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Size=1)]
  public partial struct ConsoleKeyInfo {
    public ConsoleKeyInfo(char keyChar, System.ConsoleKey key, bool shift, bool alt, bool control) { throw new System.NotImplementedException(); }
    public System.ConsoleKey Key { get { return default(System.ConsoleKey); } }
    public char KeyChar { get { return default(char); } }
    public System.ConsoleModifiers Modifiers { get { return default(System.ConsoleModifiers); } }
    public bool Equals(System.ConsoleKeyInfo obj) { return default(bool); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.ConsoleKeyInfo a, System.ConsoleKeyInfo b) { return default(bool); }
    public static bool operator !=(System.ConsoleKeyInfo a, System.ConsoleKeyInfo b) { return default(bool); }
  }
  [System.FlagsAttribute]
  public enum ConsoleModifiers {
    Alt = 1,
    Control = 4,
    Shift = 2,
  }
  public enum ConsoleSpecialKey {
    ControlBreak = 1,
    ControlC = 0,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Data.Common")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Data.Common")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Data.Common")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System {
  public sealed partial class DBNull {
    internal DBNull() { }
    public static readonly System.DBNull Value;
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
}
namespace System.Data {
  [System.FlagsAttribute]
  public enum CommandBehavior {
    CloseConnection = 32,
    Default = 0,
    KeyInfo = 4,
    SchemaOnly = 2,
    SequentialAccess = 16,
    SingleResult = 1,
    SingleRow = 8,
  }
  public enum CommandType {
    StoredProcedure = 4,
    TableDirect = 512,
    Text = 1,
  }
  [System.FlagsAttribute]
  public enum ConnectionState {
    Broken = 16,
    Closed = 0,
    Connecting = 2,
    Executing = 4,
    Fetching = 8,
    Open = 1,
  }
  public enum DataRowVersion {
    Default = 1536,
  }
  public partial class DataTable {
    internal DataTable() { }
  }
  public enum DbType {
    AnsiString = 0,
    AnsiStringFixedLength = 22,
    Binary = 1,
    Boolean = 3,
    Byte = 2,
    Currency = 4,
    Date = 5,
    DateTime = 6,
    DateTime2 = 26,
    DateTimeOffset = 27,
    Decimal = 7,
    Double = 8,
    Guid = 9,
    Int16 = 10,
    Int32 = 11,
    Int64 = 12,
    Object = 13,
    SByte = 14,
    Single = 15,
    String = 16,
    StringFixedLength = 23,
    Time = 17,
    UInt16 = 18,
    UInt32 = 19,
    UInt64 = 20,
    VarNumeric = 21,
    Xml = 25,
  }
  public partial interface IDataParameter {
    System.Data.DbType DbType { get; set; }
    System.Data.ParameterDirection Direction { get; set; }
    bool IsNullable { get; }
    string ParameterName { get; set; }
    string SourceColumn { get; set; }
    System.Data.DataRowVersion SourceVersion { get; set; }
    object Value { get; set; }
  }
  public partial interface IDataParameterCollection : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    object this[string parameterName] { get; set; }
    bool Contains(string parameterName);
    int IndexOf(string parameterName);
    void RemoveAt(string parameterName);
  }
  public partial interface IDataReader : System.Data.IDataRecord, System.IDisposable {
    int Depth { get; }
    bool IsClosed { get; }
    int RecordsAffected { get; }
    void Close();
    System.Data.DataTable GetSchemaTable();
    bool NextResult();
    bool Read();
  }
  public partial interface IDataRecord {
    int FieldCount { get; }
    object this[int i] { get; }
    object this[string name] { get; }
    bool GetBoolean(int i);
    byte GetByte(int i);
    long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length);
    char GetChar(int i);
    long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length);
    System.Data.IDataReader GetData(int i);
    string GetDataTypeName(int i);
    System.DateTime GetDateTime(int i);
    decimal GetDecimal(int i);
    double GetDouble(int i);
    System.Type GetFieldType(int i);
    float GetFloat(int i);
    System.Guid GetGuid(int i);
    short GetInt16(int i);
    int GetInt32(int i);
    long GetInt64(int i);
    string GetName(int i);
    int GetOrdinal(string name);
    string GetString(int i);
    object GetValue(int i);
    int GetValues(object[] values);
    bool IsDBNull(int i);
  }
  public partial interface IDbCommand : System.IDisposable {
    string CommandText { get; set; }
    int CommandTimeout { get; set; }
    System.Data.CommandType CommandType { get; set; }
    System.Data.IDbConnection Connection { get; set; }
    System.Data.IDataParameterCollection Parameters { get; }
    System.Data.IDbTransaction Transaction { get; set; }
    System.Data.UpdateRowSource UpdatedRowSource { get; set; }
    void Cancel();
    System.Data.IDbDataParameter CreateParameter();
    int ExecuteNonQuery();
    System.Data.IDataReader ExecuteReader();
    System.Data.IDataReader ExecuteReader(System.Data.CommandBehavior behavior);
    object ExecuteScalar();
    void Prepare();
  }
  public partial interface IDbConnection : System.IDisposable {
    string ConnectionString { get; set; }
    int ConnectionTimeout { get; }
    string Database { get; }
    System.Data.ConnectionState State { get; }
    System.Data.IDbTransaction BeginTransaction();
    System.Data.IDbTransaction BeginTransaction(System.Data.IsolationLevel il);
    void ChangeDatabase(string databaseName);
    void Close();
    System.Data.IDbCommand CreateCommand();
    void Open();
  }
  public partial interface IDbDataParameter : System.Data.IDataParameter {
    byte Precision { get; set; }
    byte Scale { get; set; }
    int Size { get; set; }
  }
  public partial interface IDbTransaction : System.IDisposable {
    System.Data.IDbConnection Connection { get; }
    System.Data.IsolationLevel IsolationLevel { get; }
    void Commit();
    void Rollback();
  }
  public enum IsolationLevel {
    Chaos = 16,
    ReadCommitted = 4096,
    ReadUncommitted = 256,
    RepeatableRead = 65536,
    Serializable = 1048576,
    Snapshot = 16777216,
    Unspecified = -1,
  }
  public enum ParameterDirection {
    Input = 1,
    InputOutput = 3,
    Output = 2,
    ReturnValue = 6,
  }
  public sealed partial class StateChangeEventArgs : System.EventArgs {
    public StateChangeEventArgs(System.Data.ConnectionState originalState, System.Data.ConnectionState currentState) { }
    public System.Data.ConnectionState CurrentState { get { return default(System.Data.ConnectionState); } }
    public System.Data.ConnectionState OriginalState { get { return default(System.Data.ConnectionState); } }
  }
  public delegate void StateChangeEventHandler(object sender, System.Data.StateChangeEventArgs e);
  public enum UpdateRowSource {
    Both = 3,
    FirstReturnedRecord = 2,
    None = 0,
    OutputParameters = 1,
  }
}
namespace System.Data.Common {
  public abstract partial class DbColumn {
    protected DbColumn() { }
    public System.Nullable<bool> AllowDBNull { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<bool>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public string BaseCatalogName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public string BaseColumnName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public string BaseSchemaName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public string BaseServerName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public string BaseTableName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public string ColumnName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public System.Nullable<int> ColumnOrdinal { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<int>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public System.Nullable<int> ColumnSize { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<int>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public System.Type DataType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Type); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public string DataTypeName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public System.Nullable<bool> IsAliased { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<bool>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public System.Nullable<bool> IsAutoIncrement { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<bool>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public System.Nullable<bool> IsExpression { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<bool>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public System.Nullable<bool> IsHidden { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<bool>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public System.Nullable<bool> IsIdentity { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<bool>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public System.Nullable<bool> IsKey { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<bool>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public System.Nullable<bool> IsLong { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<bool>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public System.Nullable<bool> IsReadOnly { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<bool>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public System.Nullable<bool> IsUnique { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<bool>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public virtual object this[string property] { get { return default(object); } }
    public System.Nullable<int> NumericPrecision { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<int>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public System.Nullable<int> NumericScale { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Nullable<int>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
    public string UdtAssemblyQualifiedName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
  }
  public abstract partial class DbCommand : System.Data.IDbCommand, System.IDisposable {
    protected DbCommand() { }
    public abstract string CommandText { get; set; }
    public abstract int CommandTimeout { get; set; }
    public abstract System.Data.CommandType CommandType { get; set; }
    public System.Data.Common.DbConnection Connection { get { return default(System.Data.Common.DbConnection); } set { } }
    protected abstract System.Data.Common.DbConnection DbConnection { get; set; }
    protected abstract System.Data.Common.DbParameterCollection DbParameterCollection { get; }
    protected abstract System.Data.Common.DbTransaction DbTransaction { get; set; }
    public abstract bool DesignTimeVisible { get; set; }
    public System.Data.Common.DbParameterCollection Parameters { get { return default(System.Data.Common.DbParameterCollection); } }
    System.Data.IDbConnection System.Data.IDbCommand.Connection { get { return default(System.Data.IDbConnection); } set { } }
    System.Data.IDataParameterCollection System.Data.IDbCommand.Parameters { get { return default(System.Data.IDataParameterCollection); } }
    System.Data.IDbTransaction System.Data.IDbCommand.Transaction { get { return default(System.Data.IDbTransaction); } set { } }
    public System.Data.Common.DbTransaction Transaction { get { return default(System.Data.Common.DbTransaction); } set { } }
    public abstract System.Data.UpdateRowSource UpdatedRowSource { get; set; }
    public abstract void Cancel();
    protected abstract System.Data.Common.DbParameter CreateDbParameter();
    public System.Data.Common.DbParameter CreateParameter() { return default(System.Data.Common.DbParameter); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    protected abstract System.Data.Common.DbDataReader ExecuteDbDataReader(System.Data.CommandBehavior behavior);
    protected virtual System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteDbDataReaderAsync(System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Data.Common.DbDataReader>); }
    public abstract int ExecuteNonQuery();
    public System.Threading.Tasks.Task<int> ExecuteNonQueryAsync() { return default(System.Threading.Tasks.Task<int>); }
    public virtual System.Threading.Tasks.Task<int> ExecuteNonQueryAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<int>); }
    public System.Data.Common.DbDataReader ExecuteReader() { return default(System.Data.Common.DbDataReader); }
    public System.Data.Common.DbDataReader ExecuteReader(System.Data.CommandBehavior behavior) { return default(System.Data.Common.DbDataReader); }
    public System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteReaderAsync() { return default(System.Threading.Tasks.Task<System.Data.Common.DbDataReader>); }
    public System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteReaderAsync(System.Data.CommandBehavior behavior) { return default(System.Threading.Tasks.Task<System.Data.Common.DbDataReader>); }
    public System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteReaderAsync(System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Data.Common.DbDataReader>); }
    public System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteReaderAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Data.Common.DbDataReader>); }
    public abstract object ExecuteScalar();
    public System.Threading.Tasks.Task<object> ExecuteScalarAsync() { return default(System.Threading.Tasks.Task<object>); }
    public virtual System.Threading.Tasks.Task<object> ExecuteScalarAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<object>); }
    public abstract void Prepare();
    System.Data.IDbDataParameter System.Data.IDbCommand.CreateParameter() { return default(System.Data.IDbDataParameter); }
    System.Data.IDataReader System.Data.IDbCommand.ExecuteReader() { return default(System.Data.IDataReader); }
    System.Data.IDataReader System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior behavior) { return default(System.Data.IDataReader); }
  }
  public abstract partial class DbConnection : System.Data.IDbConnection, System.IDisposable {
    protected DbConnection() { }
    public abstract string ConnectionString { get; set; }
    public virtual int ConnectionTimeout { get { return default(int); } }
    public abstract string Database { get; }
    public abstract string DataSource { get; }
    public abstract string ServerVersion { get; }
    public abstract System.Data.ConnectionState State { get; }
    public virtual event System.Data.StateChangeEventHandler StateChange { add { } remove { } }
    protected abstract System.Data.Common.DbTransaction BeginDbTransaction(System.Data.IsolationLevel isolationLevel);
    public System.Data.Common.DbTransaction BeginTransaction() { return default(System.Data.Common.DbTransaction); }
    public System.Data.Common.DbTransaction BeginTransaction(System.Data.IsolationLevel isolationLevel) { return default(System.Data.Common.DbTransaction); }
    public abstract void ChangeDatabase(string databaseName);
    public abstract void Close();
    public System.Data.Common.DbCommand CreateCommand() { return default(System.Data.Common.DbCommand); }
    protected abstract System.Data.Common.DbCommand CreateDbCommand();
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    protected virtual void OnStateChange(System.Data.StateChangeEventArgs stateChange) { }
    public abstract void Open();
    public System.Threading.Tasks.Task OpenAsync() { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task OpenAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    System.Data.IDbTransaction System.Data.IDbConnection.BeginTransaction() { return default(System.Data.IDbTransaction); }
    System.Data.IDbTransaction System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel isolationLevel) { return default(System.Data.IDbTransaction); }
    System.Data.IDbCommand System.Data.IDbConnection.CreateCommand() { return default(System.Data.IDbCommand); }
  }
  public partial class DbConnectionStringBuilder : System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    public DbConnectionStringBuilder() { }
    public string ConnectionString { get { return default(string); } set { } }
    public virtual int Count { get { return default(int); } }
    public virtual object this[string keyword] { get { return default(object); } set { } }
    public virtual System.Collections.ICollection Keys { get { return default(System.Collections.ICollection); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IDictionary.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IDictionary.IsReadOnly { get { return default(bool); } }
    object System.Collections.IDictionary.this[object keyword] { get { return default(object); } set { } }
    public virtual System.Collections.ICollection Values { get { return default(System.Collections.ICollection); } }
    public void Add(string keyword, object value) { }
    public static void AppendKeyValuePair(System.Text.StringBuilder builder, string keyword, string value) { }
    public virtual void Clear() { }
    public virtual bool ContainsKey(string keyword) { return default(bool); }
    public virtual bool EquivalentTo(System.Data.Common.DbConnectionStringBuilder connectionStringBuilder) { return default(bool); }
    public virtual bool Remove(string keyword) { return default(bool); }
    public virtual bool ShouldSerialize(string keyword) { return default(bool); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    void System.Collections.IDictionary.Add(object keyword, object value) { }
    bool System.Collections.IDictionary.Contains(object keyword) { return default(bool); }
    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    void System.Collections.IDictionary.Remove(object keyword) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public override string ToString() { return default(string); }
    public virtual bool TryGetValue(string keyword, out object value) { value = default(object); return default(bool); }
  }
  public abstract partial class DbDataReader : System.Collections.IEnumerable, System.Data.IDataReader, System.Data.IDataRecord, System.IDisposable {
    protected DbDataReader() { }
    public abstract int Depth { get; }
    public abstract int FieldCount { get; }
    public abstract bool HasRows { get; }
    public abstract bool IsClosed { get; }
    public abstract object this[int ordinal] { get; }
    public abstract object this[string name] { get; }
    public abstract int RecordsAffected { get; }
    public virtual int VisibleFieldCount { get { return default(int); } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public abstract bool GetBoolean(int ordinal);
    public abstract byte GetByte(int ordinal);
    public abstract long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length);
    public abstract char GetChar(int ordinal);
    public abstract long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length);
    public System.Data.Common.DbDataReader GetData(int ordinal) { return default(System.Data.Common.DbDataReader); }
    public abstract string GetDataTypeName(int ordinal);
    public abstract System.DateTime GetDateTime(int ordinal);
    protected virtual System.Data.Common.DbDataReader GetDbDataReader(int ordinal) { return default(System.Data.Common.DbDataReader); }
    public abstract decimal GetDecimal(int ordinal);
    public abstract double GetDouble(int ordinal);
    public abstract System.Collections.IEnumerator GetEnumerator();
    public abstract System.Type GetFieldType(int ordinal);
    public virtual T GetFieldValue<T>(int ordinal) { return default(T); }
    public System.Threading.Tasks.Task<T> GetFieldValueAsync<T>(int ordinal) { return default(System.Threading.Tasks.Task<T>); }
    public virtual System.Threading.Tasks.Task<T> GetFieldValueAsync<T>(int ordinal, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<T>); }
    public abstract float GetFloat(int ordinal);
    public abstract System.Guid GetGuid(int ordinal);
    public abstract short GetInt16(int ordinal);
    public abstract int GetInt32(int ordinal);
    public abstract long GetInt64(int ordinal);
    public abstract string GetName(int ordinal);
    public abstract int GetOrdinal(string name);
    public virtual System.Type GetProviderSpecificFieldType(int ordinal) { return default(System.Type); }
    public virtual object GetProviderSpecificValue(int ordinal) { return default(object); }
    public virtual int GetProviderSpecificValues(object[] values) { return default(int); }
    public virtual System.IO.Stream GetStream(int ordinal) { return default(System.IO.Stream); }
    public abstract string GetString(int ordinal);
    public virtual System.IO.TextReader GetTextReader(int ordinal) { return default(System.IO.TextReader); }
    public abstract object GetValue(int ordinal);
    public abstract int GetValues(object[] values);
    public abstract bool IsDBNull(int ordinal);
    public System.Threading.Tasks.Task<bool> IsDBNullAsync(int ordinal) { return default(System.Threading.Tasks.Task<bool>); }
    public virtual System.Threading.Tasks.Task<bool> IsDBNullAsync(int ordinal, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<bool>); }
    public abstract bool NextResult();
    public System.Threading.Tasks.Task<bool> NextResultAsync() { return default(System.Threading.Tasks.Task<bool>); }
    public virtual System.Threading.Tasks.Task<bool> NextResultAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<bool>); }
    public abstract bool Read();
    public System.Threading.Tasks.Task<bool> ReadAsync() { return default(System.Threading.Tasks.Task<bool>); }
    public virtual System.Threading.Tasks.Task<bool> ReadAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<bool>); }
    void System.Data.IDataReader.Close() { }
    System.Data.DataTable System.Data.IDataReader.GetSchemaTable() { return default(System.Data.DataTable); }
    System.Data.IDataReader System.Data.IDataRecord.GetData(int ordinal) { return default(System.Data.IDataReader); }
  }
  public static partial class DbDataReaderExtensions {
    public static bool CanGetColumnSchema(this System.Data.Common.DbDataReader reader) { return default(bool); }
    public static System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Common.DbColumn> GetColumnSchema(this System.Data.Common.DbDataReader reader) { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Common.DbColumn>); }
  }
  public abstract partial class DbDataRecord : System.Data.IDataRecord {
    protected DbDataRecord() { }
    public abstract int FieldCount { get; }
    public abstract object this[int i] { get; }
    public abstract object this[string name] { get; }
    public abstract bool GetBoolean(int i);
    public abstract byte GetByte(int i);
    public abstract long GetBytes(int i, long dataIndex, byte[] buffer, int bufferIndex, int length);
    public abstract char GetChar(int i);
    public abstract long GetChars(int i, long dataIndex, char[] buffer, int bufferIndex, int length);
    public System.Data.IDataReader GetData(int i) { return default(System.Data.IDataReader); }
    public abstract string GetDataTypeName(int i);
    public abstract System.DateTime GetDateTime(int i);
    protected virtual System.Data.Common.DbDataReader GetDbDataReader(int i) { return default(System.Data.Common.DbDataReader); }
    public abstract decimal GetDecimal(int i);
    public abstract double GetDouble(int i);
    public abstract System.Type GetFieldType(int i);
    public abstract float GetFloat(int i);
    public abstract System.Guid GetGuid(int i);
    public abstract short GetInt16(int i);
    public abstract int GetInt32(int i);
    public abstract long GetInt64(int i);
    public abstract string GetName(int i);
    public abstract int GetOrdinal(string name);
    public abstract string GetString(int i);
    public abstract object GetValue(int i);
    public abstract int GetValues(object[] values);
    public abstract bool IsDBNull(int i);
  }
  public partial class DbEnumerator : System.Collections.IEnumerator {
    public DbEnumerator(System.Data.IDataReader reader, bool closeReader) { }
    public object Current { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(object); } }
    public bool MoveNext() { return default(bool); }
    public void Reset() { }
  }
  public abstract partial class DbException : System.Exception {
    protected DbException() { }
    protected DbException(string message) { }
    protected DbException(string message, System.Exception innerException) { }
  }
  public abstract partial class DbParameter : System.Data.IDataParameter, System.Data.IDbDataParameter {
    protected DbParameter() { }
    public abstract System.Data.DbType DbType { get; set; }
    public abstract System.Data.ParameterDirection Direction { get; set; }
    public abstract bool IsNullable { get; set; }
    public abstract string ParameterName { get; set; }
    public virtual byte Precision { get { return default(byte); } set { } }
    public virtual byte Scale { get { return default(byte); } set { } }
    public abstract int Size { get; set; }
    public abstract string SourceColumn { get; set; }
    public abstract bool SourceColumnNullMapping { get; set; }
    System.Data.DataRowVersion System.Data.IDataParameter.SourceVersion { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Data.DataRowVersion); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    byte System.Data.IDbDataParameter.Precision { get { return default(byte); } set { } }
    byte System.Data.IDbDataParameter.Scale { get { return default(byte); } set { } }
    public abstract object Value { get; set; }
    public abstract void ResetDbType();
  }
  public abstract partial class DbParameterCollection : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Data.IDataParameterCollection {
    protected DbParameterCollection() { }
    public abstract int Count { get; }
    public System.Data.Common.DbParameter this[int index] { get { return default(System.Data.Common.DbParameter); } set { } }
    public System.Data.Common.DbParameter this[string parameterName] { get { return default(System.Data.Common.DbParameter); } set { } }
    public abstract object SyncRoot { get; }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    object System.Data.IDataParameterCollection.this[string parameterName] { get { return default(object); } set { } }
    public abstract int Add(object value);
    public abstract void AddRange(System.Array values);
    public abstract void Clear();
    public abstract bool Contains(object value);
    public abstract bool Contains(string value);
    public abstract void CopyTo(System.Array array, int index);
    public abstract System.Collections.IEnumerator GetEnumerator();
    protected abstract System.Data.Common.DbParameter GetParameter(int index);
    protected abstract System.Data.Common.DbParameter GetParameter(string parameterName);
    public abstract int IndexOf(object value);
    public abstract int IndexOf(string parameterName);
    public abstract void Insert(int index, object value);
    public abstract void Remove(object value);
    public abstract void RemoveAt(int index);
    public abstract void RemoveAt(string parameterName);
    protected abstract void SetParameter(int index, System.Data.Common.DbParameter value);
    protected abstract void SetParameter(string parameterName, System.Data.Common.DbParameter value);
  }
  public abstract partial class DbProviderFactory {
    protected DbProviderFactory() { }
    public virtual System.Data.Common.DbCommand CreateCommand() { return default(System.Data.Common.DbCommand); }
    public virtual System.Data.Common.DbConnection CreateConnection() { return default(System.Data.Common.DbConnection); }
    public virtual System.Data.Common.DbConnectionStringBuilder CreateConnectionStringBuilder() { return default(System.Data.Common.DbConnectionStringBuilder); }
    public virtual System.Data.Common.DbParameter CreateParameter() { return default(System.Data.Common.DbParameter); }
  }
  public abstract partial class DbTransaction : System.Data.IDbTransaction, System.IDisposable {
    protected DbTransaction() { }
    public System.Data.Common.DbConnection Connection { get { return default(System.Data.Common.DbConnection); } }
    protected abstract System.Data.Common.DbConnection DbConnection { get; }
    public abstract System.Data.IsolationLevel IsolationLevel { get; }
    System.Data.IDbConnection System.Data.IDbTransaction.Connection { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Data.IDbConnection); } }
    public abstract void Commit();
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public abstract void Rollback();
  }
  public partial interface IDbColumnSchemaGenerator {
    System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Common.DbColumn> GetColumnSchema();
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Data.SqlClient")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Data.SqlClient")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Data.SqlClient")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace Microsoft.SqlServer.Server {
  public partial class SqlDataRecord {
    public SqlDataRecord(params Microsoft.SqlServer.Server.SqlMetaData[] metaData) { }
    public virtual int FieldCount { get { return default(int); } }
    public virtual object this[int ordinal] { get { return default(object); } }
    public virtual object this[string name] { get { return default(object); } }
    public virtual bool GetBoolean(int ordinal) { return default(bool); }
    public virtual byte GetByte(int ordinal) { return default(byte); }
    public virtual long GetBytes(int ordinal, long fieldOffset, byte[] buffer, int bufferOffset, int length) { return default(long); }
    public virtual char GetChar(int ordinal) { return default(char); }
    public virtual long GetChars(int ordinal, long fieldOffset, char[] buffer, int bufferOffset, int length) { return default(long); }
    public virtual string GetDataTypeName(int ordinal) { return default(string); }
    public virtual System.DateTime GetDateTime(int ordinal) { return default(System.DateTime); }
    public virtual System.DateTimeOffset GetDateTimeOffset(int ordinal) { return default(System.DateTimeOffset); }
    public virtual decimal GetDecimal(int ordinal) { return default(decimal); }
    public virtual double GetDouble(int ordinal) { return default(double); }
    public virtual System.Type GetFieldType(int ordinal) { return default(System.Type); }
    public virtual float GetFloat(int ordinal) { return default(float); }
    public virtual System.Guid GetGuid(int ordinal) { return default(System.Guid); }
    public virtual short GetInt16(int ordinal) { return default(short); }
    public virtual int GetInt32(int ordinal) { return default(int); }
    public virtual long GetInt64(int ordinal) { return default(long); }
    public virtual string GetName(int ordinal) { return default(string); }
    public virtual int GetOrdinal(string name) { return default(int); }
    public virtual System.Data.SqlTypes.SqlBinary GetSqlBinary(int ordinal) { return default(System.Data.SqlTypes.SqlBinary); }
    public virtual System.Data.SqlTypes.SqlBoolean GetSqlBoolean(int ordinal) { return default(System.Data.SqlTypes.SqlBoolean); }
    public virtual System.Data.SqlTypes.SqlByte GetSqlByte(int ordinal) { return default(System.Data.SqlTypes.SqlByte); }
    public virtual System.Data.SqlTypes.SqlBytes GetSqlBytes(int ordinal) { return default(System.Data.SqlTypes.SqlBytes); }
    public virtual System.Data.SqlTypes.SqlChars GetSqlChars(int ordinal) { return default(System.Data.SqlTypes.SqlChars); }
    public virtual System.Data.SqlTypes.SqlDateTime GetSqlDateTime(int ordinal) { return default(System.Data.SqlTypes.SqlDateTime); }
    public virtual System.Data.SqlTypes.SqlDecimal GetSqlDecimal(int ordinal) { return default(System.Data.SqlTypes.SqlDecimal); }
    public virtual System.Data.SqlTypes.SqlDouble GetSqlDouble(int ordinal) { return default(System.Data.SqlTypes.SqlDouble); }
    public virtual System.Type GetSqlFieldType(int ordinal) { return default(System.Type); }
    public virtual System.Data.SqlTypes.SqlGuid GetSqlGuid(int ordinal) { return default(System.Data.SqlTypes.SqlGuid); }
    public virtual System.Data.SqlTypes.SqlInt16 GetSqlInt16(int ordinal) { return default(System.Data.SqlTypes.SqlInt16); }
    public virtual System.Data.SqlTypes.SqlInt32 GetSqlInt32(int ordinal) { return default(System.Data.SqlTypes.SqlInt32); }
    public virtual System.Data.SqlTypes.SqlInt64 GetSqlInt64(int ordinal) { return default(System.Data.SqlTypes.SqlInt64); }
    public virtual Microsoft.SqlServer.Server.SqlMetaData GetSqlMetaData(int ordinal) { return default(Microsoft.SqlServer.Server.SqlMetaData); }
    public virtual System.Data.SqlTypes.SqlMoney GetSqlMoney(int ordinal) { return default(System.Data.SqlTypes.SqlMoney); }
    public virtual System.Data.SqlTypes.SqlSingle GetSqlSingle(int ordinal) { return default(System.Data.SqlTypes.SqlSingle); }
    public virtual System.Data.SqlTypes.SqlString GetSqlString(int ordinal) { return default(System.Data.SqlTypes.SqlString); }
    public virtual object GetSqlValue(int ordinal) { return default(object); }
    public virtual int GetSqlValues(object[] values) { return default(int); }
    public virtual System.Data.SqlTypes.SqlXml GetSqlXml(int ordinal) { return default(System.Data.SqlTypes.SqlXml); }
    public virtual string GetString(int ordinal) { return default(string); }
    public virtual System.TimeSpan GetTimeSpan(int ordinal) { return default(System.TimeSpan); }
    public virtual object GetValue(int ordinal) { return default(object); }
    public virtual int GetValues(object[] values) { return default(int); }
    public virtual bool IsDBNull(int ordinal) { return default(bool); }
    public virtual void SetBoolean(int ordinal, bool value) { }
    public virtual void SetByte(int ordinal, byte value) { }
    public virtual void SetBytes(int ordinal, long fieldOffset, byte[] buffer, int bufferOffset, int length) { }
    public virtual void SetChar(int ordinal, char value) { }
    public virtual void SetChars(int ordinal, long fieldOffset, char[] buffer, int bufferOffset, int length) { }
    public virtual void SetDateTime(int ordinal, System.DateTime value) { }
    public virtual void SetDateTimeOffset(int ordinal, System.DateTimeOffset value) { }
    public virtual void SetDBNull(int ordinal) { }
    public virtual void SetDecimal(int ordinal, decimal value) { }
    public virtual void SetDouble(int ordinal, double value) { }
    public virtual void SetFloat(int ordinal, float value) { }
    public virtual void SetGuid(int ordinal, System.Guid value) { }
    public virtual void SetInt16(int ordinal, short value) { }
    public virtual void SetInt32(int ordinal, int value) { }
    public virtual void SetInt64(int ordinal, long value) { }
    public virtual void SetSqlBinary(int ordinal, System.Data.SqlTypes.SqlBinary value) { }
    public virtual void SetSqlBoolean(int ordinal, System.Data.SqlTypes.SqlBoolean value) { }
    public virtual void SetSqlByte(int ordinal, System.Data.SqlTypes.SqlByte value) { }
    public virtual void SetSqlBytes(int ordinal, System.Data.SqlTypes.SqlBytes value) { }
    public virtual void SetSqlChars(int ordinal, System.Data.SqlTypes.SqlChars value) { }
    public virtual void SetSqlDateTime(int ordinal, System.Data.SqlTypes.SqlDateTime value) { }
    public virtual void SetSqlDecimal(int ordinal, System.Data.SqlTypes.SqlDecimal value) { }
    public virtual void SetSqlDouble(int ordinal, System.Data.SqlTypes.SqlDouble value) { }
    public virtual void SetSqlGuid(int ordinal, System.Data.SqlTypes.SqlGuid value) { }
    public virtual void SetSqlInt16(int ordinal, System.Data.SqlTypes.SqlInt16 value) { }
    public virtual void SetSqlInt32(int ordinal, System.Data.SqlTypes.SqlInt32 value) { }
    public virtual void SetSqlInt64(int ordinal, System.Data.SqlTypes.SqlInt64 value) { }
    public virtual void SetSqlMoney(int ordinal, System.Data.SqlTypes.SqlMoney value) { }
    public virtual void SetSqlSingle(int ordinal, System.Data.SqlTypes.SqlSingle value) { }
    public virtual void SetSqlString(int ordinal, System.Data.SqlTypes.SqlString value) { }
    public virtual void SetSqlXml(int ordinal, System.Data.SqlTypes.SqlXml value) { }
    public virtual void SetString(int ordinal, string value) { }
    public virtual void SetTimeSpan(int ordinal, System.TimeSpan value) { }
    public virtual void SetValue(int ordinal, object value) { }
    public virtual int SetValues(params object[] values) { return default(int); }
  }
  public sealed partial class SqlMetaData {
    public SqlMetaData(string name, System.Data.SqlDbType dbType) { }
    public SqlMetaData(string name, System.Data.SqlDbType dbType, bool useServerDefault, bool isUniqueKey, System.Data.SqlClient.SortOrder columnSortOrder, int sortOrdinal) { }
    public SqlMetaData(string name, System.Data.SqlDbType dbType, byte precision, byte scale) { }
    public SqlMetaData(string name, System.Data.SqlDbType dbType, byte precision, byte scale, bool useServerDefault, bool isUniqueKey, System.Data.SqlClient.SortOrder columnSortOrder, int sortOrdinal) { }
    public SqlMetaData(string name, System.Data.SqlDbType dbType, long maxLength) { }
    public SqlMetaData(string name, System.Data.SqlDbType dbType, long maxLength, bool useServerDefault, bool isUniqueKey, System.Data.SqlClient.SortOrder columnSortOrder, int sortOrdinal) { }
    public SqlMetaData(string name, System.Data.SqlDbType dbType, long maxLength, byte precision, byte scale, long locale, System.Data.SqlTypes.SqlCompareOptions compareOptions, System.Type userDefinedType) { }
    public SqlMetaData(string name, System.Data.SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, System.Data.SqlTypes.SqlCompareOptions compareOptions, System.Type userDefinedType, bool useServerDefault, bool isUniqueKey, System.Data.SqlClient.SortOrder columnSortOrder, int sortOrdinal) { }
    public SqlMetaData(string name, System.Data.SqlDbType dbType, long maxLength, long locale, System.Data.SqlTypes.SqlCompareOptions compareOptions) { }
    public SqlMetaData(string name, System.Data.SqlDbType dbType, long maxLength, long locale, System.Data.SqlTypes.SqlCompareOptions compareOptions, bool useServerDefault, bool isUniqueKey, System.Data.SqlClient.SortOrder columnSortOrder, int sortOrdinal) { }
    public SqlMetaData(string name, System.Data.SqlDbType dbType, string database, string owningSchema, string objectName) { }
    public SqlMetaData(string name, System.Data.SqlDbType dbType, string database, string owningSchema, string objectName, bool useServerDefault, bool isUniqueKey, System.Data.SqlClient.SortOrder columnSortOrder, int sortOrdinal) { }
    public System.Data.SqlTypes.SqlCompareOptions CompareOptions { get { return default(System.Data.SqlTypes.SqlCompareOptions); } }
    public bool IsUniqueKey { get { return default(bool); } }
    public long LocaleId { get { return default(long); } }
    public static long Max { get { return default(long); } }
    public long MaxLength { get { return default(long); } }
    public string Name { get { return default(string); } }
    public byte Precision { get { return default(byte); } }
    public byte Scale { get { return default(byte); } }
    public System.Data.SqlClient.SortOrder SortOrder { get { return default(System.Data.SqlClient.SortOrder); } }
    public int SortOrdinal { get { return default(int); } }
    public System.Data.SqlDbType SqlDbType { get { return default(System.Data.SqlDbType); } }
    public string TypeName { get { return default(string); } }
    public bool UseServerDefault { get { return default(bool); } }
    public string XmlSchemaCollectionDatabase { get { return default(string); } }
    public string XmlSchemaCollectionName { get { return default(string); } }
    public string XmlSchemaCollectionOwningSchema { get { return default(string); } }
    public bool Adjust(bool value) { return default(bool); }
    public byte Adjust(byte value) { return default(byte); }
    public byte[] Adjust(byte[] value) { return default(byte[]); }
    public char Adjust(char value) { return default(char); }
    public char[] Adjust(char[] value) { return default(char[]); }
    public System.Data.SqlTypes.SqlBinary Adjust(System.Data.SqlTypes.SqlBinary value) { return default(System.Data.SqlTypes.SqlBinary); }
    public System.Data.SqlTypes.SqlBoolean Adjust(System.Data.SqlTypes.SqlBoolean value) { return default(System.Data.SqlTypes.SqlBoolean); }
    public System.Data.SqlTypes.SqlByte Adjust(System.Data.SqlTypes.SqlByte value) { return default(System.Data.SqlTypes.SqlByte); }
    public System.Data.SqlTypes.SqlBytes Adjust(System.Data.SqlTypes.SqlBytes value) { return default(System.Data.SqlTypes.SqlBytes); }
    public System.Data.SqlTypes.SqlChars Adjust(System.Data.SqlTypes.SqlChars value) { return default(System.Data.SqlTypes.SqlChars); }
    public System.Data.SqlTypes.SqlDateTime Adjust(System.Data.SqlTypes.SqlDateTime value) { return default(System.Data.SqlTypes.SqlDateTime); }
    public System.Data.SqlTypes.SqlDecimal Adjust(System.Data.SqlTypes.SqlDecimal value) { return default(System.Data.SqlTypes.SqlDecimal); }
    public System.Data.SqlTypes.SqlDouble Adjust(System.Data.SqlTypes.SqlDouble value) { return default(System.Data.SqlTypes.SqlDouble); }
    public System.Data.SqlTypes.SqlGuid Adjust(System.Data.SqlTypes.SqlGuid value) { return default(System.Data.SqlTypes.SqlGuid); }
    public System.Data.SqlTypes.SqlInt16 Adjust(System.Data.SqlTypes.SqlInt16 value) { return default(System.Data.SqlTypes.SqlInt16); }
    public System.Data.SqlTypes.SqlInt32 Adjust(System.Data.SqlTypes.SqlInt32 value) { return default(System.Data.SqlTypes.SqlInt32); }
    public System.Data.SqlTypes.SqlInt64 Adjust(System.Data.SqlTypes.SqlInt64 value) { return default(System.Data.SqlTypes.SqlInt64); }
    public System.Data.SqlTypes.SqlMoney Adjust(System.Data.SqlTypes.SqlMoney value) { return default(System.Data.SqlTypes.SqlMoney); }
    public System.Data.SqlTypes.SqlSingle Adjust(System.Data.SqlTypes.SqlSingle value) { return default(System.Data.SqlTypes.SqlSingle); }
    public System.Data.SqlTypes.SqlString Adjust(System.Data.SqlTypes.SqlString value) { return default(System.Data.SqlTypes.SqlString); }
    public System.Data.SqlTypes.SqlXml Adjust(System.Data.SqlTypes.SqlXml value) { return default(System.Data.SqlTypes.SqlXml); }
    public System.DateTime Adjust(System.DateTime value) { return default(System.DateTime); }
    public System.DateTimeOffset Adjust(System.DateTimeOffset value) { return default(System.DateTimeOffset); }
    public decimal Adjust(decimal value) { return default(decimal); }
    public double Adjust(double value) { return default(double); }
    public System.Guid Adjust(System.Guid value) { return default(System.Guid); }
    public short Adjust(short value) { return default(short); }
    public int Adjust(int value) { return default(int); }
    public long Adjust(long value) { return default(long); }
    public object Adjust(object value) { return default(object); }
    public float Adjust(float value) { return default(float); }
    public string Adjust(string value) { return default(string); }
    public System.TimeSpan Adjust(System.TimeSpan value) { return default(System.TimeSpan); }
    public static Microsoft.SqlServer.Server.SqlMetaData InferFromValue(object value, string name) { return default(Microsoft.SqlServer.Server.SqlMetaData); }
  }
}
namespace System.Data {
  public enum SqlDbType {
    BigInt = 0,
    Binary = 1,
    Bit = 2,
    Char = 3,
    Date = 31,
    DateTime = 4,
    DateTime2 = 33,
    DateTimeOffset = 34,
    Decimal = 5,
    Float = 6,
    Image = 7,
    Int = 8,
    Money = 9,
    NChar = 10,
    NText = 11,
    NVarChar = 12,
    Real = 13,
    SmallDateTime = 15,
    SmallInt = 16,
    SmallMoney = 17,
    Structured = 30,
    Text = 18,
    Time = 32,
    Timestamp = 19,
    TinyInt = 20,
    Udt = 29,
    UniqueIdentifier = 14,
    VarBinary = 21,
    VarChar = 22,
    Variant = 23,
    Xml = 25,
  }
  public sealed partial class StatementCompletedEventArgs : System.EventArgs {
    public StatementCompletedEventArgs(int recordCount) { }
    public int RecordCount { get { return default(int); } }
  }
  public delegate void StatementCompletedEventHandler(object sender, System.Data.StatementCompletedEventArgs e);
}
namespace System.Data.SqlClient {
  public enum ApplicationIntent {
    ReadOnly = 1,
    ReadWrite = 0,
  }
  public enum SortOrder {
    Ascending = 0,
    Descending = 1,
    Unspecified = -1,
  }
  public sealed partial class SqlBulkCopy : System.IDisposable {
    public SqlBulkCopy(System.Data.SqlClient.SqlConnection connection) { }
    public SqlBulkCopy(System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction) { }
    public SqlBulkCopy(string connectionString) { }
    public SqlBulkCopy(string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions) { }
    public int BatchSize { get { return default(int); } set { } }
    public int BulkCopyTimeout { get { return default(int); } set { } }
    public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get { return default(System.Data.SqlClient.SqlBulkCopyColumnMappingCollection); } }
    public string DestinationTableName { get { return default(string); } set { } }
    public bool EnableStreaming { get { return default(bool); } set { } }
    public int NotifyAfter { get { return default(int); } set { } }
    public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied { add { } remove { } }
    public void Close() { }
    void System.IDisposable.Dispose() { }
    public void WriteToServer(System.Data.Common.DbDataReader reader) { }
    public System.Threading.Tasks.Task WriteToServerAsync(System.Data.Common.DbDataReader reader) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task WriteToServerAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
  }
  public sealed partial class SqlBulkCopyColumnMapping {
    public SqlBulkCopyColumnMapping() { }
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, int destinationOrdinal) { }
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, string destinationColumn) { }
    public SqlBulkCopyColumnMapping(string sourceColumn, int destinationOrdinal) { }
    public SqlBulkCopyColumnMapping(string sourceColumn, string destinationColumn) { }
    public string DestinationColumn { get { return default(string); } set { } }
    public int DestinationOrdinal { get { return default(int); } set { } }
    public string SourceColumn { get { return default(string); } set { } }
    public int SourceOrdinal { get { return default(int); } set { } }
  }
  public sealed partial class SqlBulkCopyColumnMappingCollection : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    internal SqlBulkCopyColumnMappingCollection() { }
    public int Count { get { return default(int); } }
    public System.Data.SqlClient.SqlBulkCopyColumnMapping this[int index] { get { return default(System.Data.SqlClient.SqlBulkCopyColumnMapping); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public System.Data.SqlClient.SqlBulkCopyColumnMapping Add(System.Data.SqlClient.SqlBulkCopyColumnMapping bulkCopyColumnMapping) { return default(System.Data.SqlClient.SqlBulkCopyColumnMapping); }
    public System.Data.SqlClient.SqlBulkCopyColumnMapping Add(int sourceColumnIndex, int destinationColumnIndex) { return default(System.Data.SqlClient.SqlBulkCopyColumnMapping); }
    public System.Data.SqlClient.SqlBulkCopyColumnMapping Add(int sourceColumnIndex, string destinationColumn) { return default(System.Data.SqlClient.SqlBulkCopyColumnMapping); }
    public System.Data.SqlClient.SqlBulkCopyColumnMapping Add(string sourceColumn, int destinationColumnIndex) { return default(System.Data.SqlClient.SqlBulkCopyColumnMapping); }
    public System.Data.SqlClient.SqlBulkCopyColumnMapping Add(string sourceColumn, string destinationColumn) { return default(System.Data.SqlClient.SqlBulkCopyColumnMapping); }
    public void Clear() { }
    public bool Contains(System.Data.SqlClient.SqlBulkCopyColumnMapping value) { return default(bool); }
    public void CopyTo(System.Data.SqlClient.SqlBulkCopyColumnMapping[] array, int index) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Data.SqlClient.SqlBulkCopyColumnMapping value) { return default(int); }
    public void Insert(int index, System.Data.SqlClient.SqlBulkCopyColumnMapping value) { }
    public void Remove(System.Data.SqlClient.SqlBulkCopyColumnMapping value) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
  }
  [System.FlagsAttribute]
  public enum SqlBulkCopyOptions {
    CheckConstraints = 2,
    Default = 0,
    FireTriggers = 16,
    KeepIdentity = 1,
    KeepNulls = 8,
    TableLock = 4,
    UseInternalTransaction = 32,
  }
  public sealed partial class SqlClientFactory : System.Data.Common.DbProviderFactory {
    internal SqlClientFactory() { }
    public static readonly System.Data.SqlClient.SqlClientFactory Instance;
    public override System.Data.Common.DbCommand CreateCommand() { return default(System.Data.Common.DbCommand); }
    public override System.Data.Common.DbConnection CreateConnection() { return default(System.Data.Common.DbConnection); }
    public override System.Data.Common.DbConnectionStringBuilder CreateConnectionStringBuilder() { return default(System.Data.Common.DbConnectionStringBuilder); }
    public override System.Data.Common.DbParameter CreateParameter() { return default(System.Data.Common.DbParameter); }
  }
  public sealed partial class SqlCommand : System.Data.Common.DbCommand {
    public SqlCommand() { }
    public SqlCommand(string cmdText) { }
    public SqlCommand(string cmdText, System.Data.SqlClient.SqlConnection connection) { }
    public SqlCommand(string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction) { }
    public override string CommandText { get { return default(string); } set { } }
    public override int CommandTimeout { get { return default(int); } set { } }
    public override System.Data.CommandType CommandType { get { return default(System.Data.CommandType); } set { } }
    public new System.Data.SqlClient.SqlConnection Connection { get { return default(System.Data.SqlClient.SqlConnection); } set { } }
    protected override System.Data.Common.DbConnection DbConnection { get { return default(System.Data.Common.DbConnection); } set { } }
    protected override System.Data.Common.DbParameterCollection DbParameterCollection { get { return default(System.Data.Common.DbParameterCollection); } }
    protected override System.Data.Common.DbTransaction DbTransaction { get { return default(System.Data.Common.DbTransaction); } set { } }
    public override bool DesignTimeVisible { get { return default(bool); } set { } }
    public new System.Data.SqlClient.SqlParameterCollection Parameters { get { return default(System.Data.SqlClient.SqlParameterCollection); } }
    public new System.Data.SqlClient.SqlTransaction Transaction { get { return default(System.Data.SqlClient.SqlTransaction); } set { } }
    public override System.Data.UpdateRowSource UpdatedRowSource { get { return default(System.Data.UpdateRowSource); } set { } }
    public event System.Data.StatementCompletedEventHandler StatementCompleted { add { } remove { } }
    public override void Cancel() { }
    protected override System.Data.Common.DbParameter CreateDbParameter() { return default(System.Data.Common.DbParameter); }
    public new System.Data.SqlClient.SqlParameter CreateParameter() { return default(System.Data.SqlClient.SqlParameter); }
    protected override void Dispose(bool disposing) { }
    protected override System.Data.Common.DbDataReader ExecuteDbDataReader(System.Data.CommandBehavior behavior) { return default(System.Data.Common.DbDataReader); }
    protected override System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteDbDataReaderAsync(System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Data.Common.DbDataReader>); }
    public override int ExecuteNonQuery() { return default(int); }
    public override System.Threading.Tasks.Task<int> ExecuteNonQueryAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<int>); }
    public new System.Data.SqlClient.SqlDataReader ExecuteReader() { return default(System.Data.SqlClient.SqlDataReader); }
    public new System.Data.SqlClient.SqlDataReader ExecuteReader(System.Data.CommandBehavior behavior) { return default(System.Data.SqlClient.SqlDataReader); }
    public new System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader> ExecuteReaderAsync() { return default(System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader>); }
    public new System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader> ExecuteReaderAsync(System.Data.CommandBehavior behavior) { return default(System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader>); }
    public new System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader> ExecuteReaderAsync(System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader>); }
    public new System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader> ExecuteReaderAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader>); }
    public override object ExecuteScalar() { return default(object); }
    public override System.Threading.Tasks.Task<object> ExecuteScalarAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<object>); }
    public System.Xml.XmlReader ExecuteXmlReader() { return default(System.Xml.XmlReader); }
    public System.Threading.Tasks.Task<System.Xml.XmlReader> ExecuteXmlReaderAsync() { return default(System.Threading.Tasks.Task<System.Xml.XmlReader>); }
    public System.Threading.Tasks.Task<System.Xml.XmlReader> ExecuteXmlReaderAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Xml.XmlReader>); }
    public override void Prepare() { }
  }
  public sealed partial class SqlConnection : System.Data.Common.DbConnection {
    public SqlConnection() { }
    public SqlConnection(string connectionString) { }
    public System.Guid ClientConnectionId { get { return default(System.Guid); } }
    public override string ConnectionString { get { return default(string); } set { } }
    public override int ConnectionTimeout { get { return default(int); } }
    public override string Database { get { return default(string); } }
    public override string DataSource { get { return default(string); } }
    public bool FireInfoMessageEventOnUserErrors { get { return default(bool); } set { } }
    public int PacketSize { get { return default(int); } }
    public override string ServerVersion { get { return default(string); } }
    public override System.Data.ConnectionState State { get { return default(System.Data.ConnectionState); } }
    public bool StatisticsEnabled { get { return default(bool); } set { } }
    public string WorkstationId { get { return default(string); } }
    public event System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage { add { } remove { } }
    protected override System.Data.Common.DbTransaction BeginDbTransaction(System.Data.IsolationLevel isolationLevel) { return default(System.Data.Common.DbTransaction); }
    public new System.Data.SqlClient.SqlTransaction BeginTransaction() { return default(System.Data.SqlClient.SqlTransaction); }
    public new System.Data.SqlClient.SqlTransaction BeginTransaction(System.Data.IsolationLevel iso) { return default(System.Data.SqlClient.SqlTransaction); }
    public System.Data.SqlClient.SqlTransaction BeginTransaction(System.Data.IsolationLevel iso, string transactionName) { return default(System.Data.SqlClient.SqlTransaction); }
    public System.Data.SqlClient.SqlTransaction BeginTransaction(string transactionName) { return default(System.Data.SqlClient.SqlTransaction); }
    public override void ChangeDatabase(string database) { }
    public static void ClearAllPools() { }
    public static void ClearPool(System.Data.SqlClient.SqlConnection connection) { }
    public override void Close() { }
    public new System.Data.SqlClient.SqlCommand CreateCommand() { return default(System.Data.SqlClient.SqlCommand); }
    protected override System.Data.Common.DbCommand CreateDbCommand() { return default(System.Data.Common.DbCommand); }
    protected override void Dispose(bool disposing) { }
    public override void Open() { }
    public override System.Threading.Tasks.Task OpenAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public void ResetStatistics() { }
    public System.Collections.IDictionary RetrieveStatistics() { return default(System.Collections.IDictionary); }
  }
  public sealed partial class SqlConnectionStringBuilder : System.Data.Common.DbConnectionStringBuilder {
    public SqlConnectionStringBuilder() { }
    public SqlConnectionStringBuilder(string connectionString) { }
    public System.Data.SqlClient.ApplicationIntent ApplicationIntent { get { return default(System.Data.SqlClient.ApplicationIntent); } set { } }
    public string ApplicationName { get { return default(string); } set { } }
    public string AttachDBFilename { get { return default(string); } set { } }
    public int ConnectRetryCount { get { return default(int); } set { } }
    public int ConnectRetryInterval { get { return default(int); } set { } }
    public int ConnectTimeout { get { return default(int); } set { } }
    public string CurrentLanguage { get { return default(string); } set { } }
    public string DataSource { get { return default(string); } set { } }
    public bool Encrypt { get { return default(bool); } set { } }
    public string FailoverPartner { get { return default(string); } set { } }
    public string InitialCatalog { get { return default(string); } set { } }
    public bool IntegratedSecurity { get { return default(bool); } set { } }
    public override object this[string keyword] { get { return default(object); } set { } }
    public override System.Collections.ICollection Keys { get { return default(System.Collections.ICollection); } }
    public int LoadBalanceTimeout { get { return default(int); } set { } }
    public int MaxPoolSize { get { return default(int); } set { } }
    public int MinPoolSize { get { return default(int); } set { } }
    public bool MultipleActiveResultSets { get { return default(bool); } set { } }
    public bool MultiSubnetFailover { get { return default(bool); } set { } }
    public int PacketSize { get { return default(int); } set { } }
    public string Password { get { return default(string); } set { } }
    public bool PersistSecurityInfo { get { return default(bool); } set { } }
    public bool Pooling { get { return default(bool); } set { } }
    public bool Replication { get { return default(bool); } set { } }
    public bool TrustServerCertificate { get { return default(bool); } set { } }
    public string TypeSystemVersion { get { return default(string); } set { } }
    public string UserID { get { return default(string); } set { } }
    public bool UserInstance { get { return default(bool); } set { } }
    public override System.Collections.ICollection Values { get { return default(System.Collections.ICollection); } }
    public string WorkstationID { get { return default(string); } set { } }
    public override void Clear() { }
    public override bool ContainsKey(string keyword) { return default(bool); }
    public override bool Remove(string keyword) { return default(bool); }
    public override bool ShouldSerialize(string keyword) { return default(bool); }
    public override bool TryGetValue(string keyword, out object value) { value = default(object); return default(bool); }
  }
  public partial class SqlDataReader : System.Data.Common.DbDataReader, System.IDisposable {
    internal SqlDataReader() { }
    protected System.Data.SqlClient.SqlConnection Connection { get { return default(System.Data.SqlClient.SqlConnection); } }
    public override int Depth { get { return default(int); } }
    public override int FieldCount { get { return default(int); } }
    public override bool HasRows { get { return default(bool); } }
    public override bool IsClosed { get { return default(bool); } }
    public override object this[int i] { get { return default(object); } }
    public override object this[string name] { get { return default(object); } }
    public override int RecordsAffected { get { return default(int); } }
    public override int VisibleFieldCount { get { return default(int); } }
    public override bool GetBoolean(int i) { return default(bool); }
    public override byte GetByte(int i) { return default(byte); }
    public override long GetBytes(int i, long dataIndex, byte[] buffer, int bufferIndex, int length) { return default(long); }
    public override char GetChar(int i) { return default(char); }
    public override long GetChars(int i, long dataIndex, char[] buffer, int bufferIndex, int length) { return default(long); }
    public override string GetDataTypeName(int i) { return default(string); }
    public override System.DateTime GetDateTime(int i) { return default(System.DateTime); }
    public virtual System.DateTimeOffset GetDateTimeOffset(int i) { return default(System.DateTimeOffset); }
    public override decimal GetDecimal(int i) { return default(decimal); }
    public override double GetDouble(int i) { return default(double); }
    public override System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public override System.Type GetFieldType(int i) { return default(System.Type); }
    public override T GetFieldValue<T>(int i) { return default(T); }
    public override System.Threading.Tasks.Task<T> GetFieldValueAsync<T>(int i, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<T>); }
    public override float GetFloat(int i) { return default(float); }
    public override System.Guid GetGuid(int i) { return default(System.Guid); }
    public override short GetInt16(int i) { return default(short); }
    public override int GetInt32(int i) { return default(int); }
    public override long GetInt64(int i) { return default(long); }
    public override string GetName(int i) { return default(string); }
    public override int GetOrdinal(string name) { return default(int); }
    public override System.Type GetProviderSpecificFieldType(int i) { return default(System.Type); }
    public override object GetProviderSpecificValue(int i) { return default(object); }
    public override int GetProviderSpecificValues(object[] values) { return default(int); }
    public virtual System.Data.SqlTypes.SqlBinary GetSqlBinary(int i) { return default(System.Data.SqlTypes.SqlBinary); }
    public virtual System.Data.SqlTypes.SqlBoolean GetSqlBoolean(int i) { return default(System.Data.SqlTypes.SqlBoolean); }
    public virtual System.Data.SqlTypes.SqlByte GetSqlByte(int i) { return default(System.Data.SqlTypes.SqlByte); }
    public virtual System.Data.SqlTypes.SqlBytes GetSqlBytes(int i) { return default(System.Data.SqlTypes.SqlBytes); }
    public virtual System.Data.SqlTypes.SqlChars GetSqlChars(int i) { return default(System.Data.SqlTypes.SqlChars); }
    public virtual System.Data.SqlTypes.SqlDateTime GetSqlDateTime(int i) { return default(System.Data.SqlTypes.SqlDateTime); }
    public virtual System.Data.SqlTypes.SqlDecimal GetSqlDecimal(int i) { return default(System.Data.SqlTypes.SqlDecimal); }
    public virtual System.Data.SqlTypes.SqlDouble GetSqlDouble(int i) { return default(System.Data.SqlTypes.SqlDouble); }
    public virtual System.Data.SqlTypes.SqlGuid GetSqlGuid(int i) { return default(System.Data.SqlTypes.SqlGuid); }
    public virtual System.Data.SqlTypes.SqlInt16 GetSqlInt16(int i) { return default(System.Data.SqlTypes.SqlInt16); }
    public virtual System.Data.SqlTypes.SqlInt32 GetSqlInt32(int i) { return default(System.Data.SqlTypes.SqlInt32); }
    public virtual System.Data.SqlTypes.SqlInt64 GetSqlInt64(int i) { return default(System.Data.SqlTypes.SqlInt64); }
    public virtual System.Data.SqlTypes.SqlMoney GetSqlMoney(int i) { return default(System.Data.SqlTypes.SqlMoney); }
    public virtual System.Data.SqlTypes.SqlSingle GetSqlSingle(int i) { return default(System.Data.SqlTypes.SqlSingle); }
    public virtual System.Data.SqlTypes.SqlString GetSqlString(int i) { return default(System.Data.SqlTypes.SqlString); }
    public virtual object GetSqlValue(int i) { return default(object); }
    public virtual int GetSqlValues(object[] values) { return default(int); }
    public virtual System.Data.SqlTypes.SqlXml GetSqlXml(int i) { return default(System.Data.SqlTypes.SqlXml); }
    public override System.IO.Stream GetStream(int i) { return default(System.IO.Stream); }
    public override string GetString(int i) { return default(string); }
    public override System.IO.TextReader GetTextReader(int i) { return default(System.IO.TextReader); }
    public virtual System.TimeSpan GetTimeSpan(int i) { return default(System.TimeSpan); }
    public override object GetValue(int i) { return default(object); }
    public override int GetValues(object[] values) { return default(int); }
    public virtual System.Xml.XmlReader GetXmlReader(int i) { return default(System.Xml.XmlReader); }
    public override bool IsDBNull(int i) { return default(bool); }
    public override System.Threading.Tasks.Task<bool> IsDBNullAsync(int i, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<bool>); }
    public override bool NextResult() { return default(bool); }
    public override System.Threading.Tasks.Task<bool> NextResultAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<bool>); }
    public override bool Read() { return default(bool); }
    public override System.Threading.Tasks.Task<bool> ReadAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<bool>); }
  }
  public sealed partial class SqlError {
    internal SqlError() { }
    public byte Class { get { return default(byte); } }
    public int LineNumber { get { return default(int); } }
    public string Message { get { return default(string); } }
    public int Number { get { return default(int); } }
    public string Procedure { get { return default(string); } }
    public string Server { get { return default(string); } }
    public string Source { get { return default(string); } }
    public byte State { get { return default(byte); } }
    public override string ToString() { return default(string); }
  }
  public sealed partial class SqlErrorCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    internal SqlErrorCollection() { }
    public int Count { get { return default(int); } }
    public System.Data.SqlClient.SqlError this[int index] { get { return default(System.Data.SqlClient.SqlError); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public void CopyTo(System.Array array, int index) { }
    public void CopyTo(System.Data.SqlClient.SqlError[] array, int index) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public sealed partial class SqlException : System.Data.Common.DbException {
    internal SqlException() { }
    public byte Class { get { return default(byte); } }
    public System.Guid ClientConnectionId { get { return default(System.Guid); } }
    public System.Data.SqlClient.SqlErrorCollection Errors { get { return default(System.Data.SqlClient.SqlErrorCollection); } }
    public int LineNumber { get { return default(int); } }
    public int Number { get { return default(int); } }
    public string Procedure { get { return default(string); } }
    public string Server { get { return default(string); } }
    public override string Source { get { return default(string); } }
    public byte State { get { return default(byte); } }
    public override string ToString() { return default(string); }
  }
  public sealed partial class SqlInfoMessageEventArgs : System.EventArgs {
    internal SqlInfoMessageEventArgs() { }
    public System.Data.SqlClient.SqlErrorCollection Errors { get { return default(System.Data.SqlClient.SqlErrorCollection); } }
    public string Message { get { return default(string); } }
    public string Source { get { return default(string); } }
    public override string ToString() { return default(string); }
  }
  public delegate void SqlInfoMessageEventHandler(object sender, System.Data.SqlClient.SqlInfoMessageEventArgs e);
  public sealed partial class SqlParameter : System.Data.Common.DbParameter {
    public SqlParameter() { }
    public SqlParameter(string parameterName, System.Data.SqlDbType dbType) { }
    public SqlParameter(string parameterName, System.Data.SqlDbType dbType, int size) { }
    public SqlParameter(string parameterName, System.Data.SqlDbType dbType, int size, string sourceColumn) { }
    public SqlParameter(string parameterName, object value) { }
    public System.Data.SqlTypes.SqlCompareOptions CompareInfo { get { return default(System.Data.SqlTypes.SqlCompareOptions); } set { } }
    public override System.Data.DbType DbType { get { return default(System.Data.DbType); } set { } }
    public override System.Data.ParameterDirection Direction { get { return default(System.Data.ParameterDirection); } set { } }
    public override bool IsNullable { get { return default(bool); } set { } }
    public int LocaleId { get { return default(int); } set { } }
    public int Offset { get { return default(int); } set { } }
    public override string ParameterName { get { return default(string); } set { } }
    public new byte Precision { get { return default(byte); } set { } }
    public new byte Scale { get { return default(byte); } set { } }
    public override int Size { get { return default(int); } set { } }
    public override string SourceColumn { get { return default(string); } set { } }
    public override bool SourceColumnNullMapping { get { return default(bool); } set { } }
    public System.Data.SqlDbType SqlDbType { get { return default(System.Data.SqlDbType); } set { } }
    public object SqlValue { get { return default(object); } set { } }
    public string TypeName { get { return default(string); } set { } }
    public override object Value { get { return default(object); } set { } }
    public string XmlSchemaCollectionDatabase { get { return default(string); } set { } }
    public string XmlSchemaCollectionName { get { return default(string); } set { } }
    public string XmlSchemaCollectionOwningSchema { get { return default(string); } set { } }
    public override void ResetDbType() { }
    public void ResetSqlDbType() { }
    public override string ToString() { return default(string); }
  }
  public sealed partial class SqlParameterCollection : System.Data.Common.DbParameterCollection {
    internal SqlParameterCollection() { }
    public override int Count { get { return default(int); } }
    public new System.Data.SqlClient.SqlParameter this[int index] { get { return default(System.Data.SqlClient.SqlParameter); } set { } }
    public new System.Data.SqlClient.SqlParameter this[string parameterName] { get { return default(System.Data.SqlClient.SqlParameter); } set { } }
    public override object SyncRoot { get { return default(object); } }
    public System.Data.SqlClient.SqlParameter Add(System.Data.SqlClient.SqlParameter value) { return default(System.Data.SqlClient.SqlParameter); }
    public override int Add(object value) { return default(int); }
    public System.Data.SqlClient.SqlParameter Add(string parameterName, System.Data.SqlDbType sqlDbType) { return default(System.Data.SqlClient.SqlParameter); }
    public System.Data.SqlClient.SqlParameter Add(string parameterName, System.Data.SqlDbType sqlDbType, int size) { return default(System.Data.SqlClient.SqlParameter); }
    public override void AddRange(System.Array values) { }
    public void AddRange(System.Data.SqlClient.SqlParameter[] values) { }
    public System.Data.SqlClient.SqlParameter AddWithValue(string parameterName, object value) { return default(System.Data.SqlClient.SqlParameter); }
    public override void Clear() { }
    public bool Contains(System.Data.SqlClient.SqlParameter value) { return default(bool); }
    public override bool Contains(object value) { return default(bool); }
    public override bool Contains(string value) { return default(bool); }
    public override void CopyTo(System.Array array, int index) { }
    public void CopyTo(System.Data.SqlClient.SqlParameter[] array, int index) { }
    public override System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    protected override System.Data.Common.DbParameter GetParameter(int index) { return default(System.Data.Common.DbParameter); }
    protected override System.Data.Common.DbParameter GetParameter(string parameterName) { return default(System.Data.Common.DbParameter); }
    public int IndexOf(System.Data.SqlClient.SqlParameter value) { return default(int); }
    public override int IndexOf(object value) { return default(int); }
    public override int IndexOf(string parameterName) { return default(int); }
    public void Insert(int index, System.Data.SqlClient.SqlParameter value) { }
    public override void Insert(int index, object value) { }
    public void Remove(System.Data.SqlClient.SqlParameter value) { }
    public override void Remove(object value) { }
    public override void RemoveAt(int index) { }
    public override void RemoveAt(string parameterName) { }
    protected override void SetParameter(int index, System.Data.Common.DbParameter value) { }
    protected override void SetParameter(string parameterName, System.Data.Common.DbParameter value) { }
  }
  public partial class SqlRowsCopiedEventArgs : System.EventArgs {
    public SqlRowsCopiedEventArgs(long rowsCopied) { }
    public bool Abort { get { return default(bool); } set { } }
    public long RowsCopied { get { return default(long); } }
  }
  public delegate void SqlRowsCopiedEventHandler(object sender, System.Data.SqlClient.SqlRowsCopiedEventArgs e);
  public sealed partial class SqlTransaction : System.Data.Common.DbTransaction {
    internal SqlTransaction() { }
    public new System.Data.SqlClient.SqlConnection Connection { get { return default(System.Data.SqlClient.SqlConnection); } }
    protected override System.Data.Common.DbConnection DbConnection { get { return default(System.Data.Common.DbConnection); } }
    public override System.Data.IsolationLevel IsolationLevel { get { return default(System.Data.IsolationLevel); } }
    public override void Commit() { }
    protected override void Dispose(bool disposing) { }
    public override void Rollback() { }
    public void Rollback(string transactionName) { }
    public void Save(string savePointName) { }
  }
}
namespace System.Data.SqlTypes {
  public partial interface INullable {
    bool IsNull { get; }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SqlBinary : System.Data.SqlTypes.INullable, System.IComparable {
    public static readonly System.Data.SqlTypes.SqlBinary Null;
    public SqlBinary(byte[] value) { throw new System.NotImplementedException(); }
    public bool IsNull { get { return default(bool); } }
    public byte this[int index] { get { return default(byte); } }
    public int Length { get { return default(int); } }
    public byte[] Value { get { return default(byte[]); } }
    public static System.Data.SqlTypes.SqlBinary Add(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBinary); }
    public int CompareTo(System.Data.SqlTypes.SqlBinary value) { return default(int); }
    public int CompareTo(object value) { return default(int); }
    public static System.Data.SqlTypes.SqlBinary Concat(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBinary); }
    public static System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBinary operator +(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBinary); }
    public static System.Data.SqlTypes.SqlBoolean operator ==(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator byte[] (System.Data.SqlTypes.SqlBinary x) { return default(byte[]); }
    public static explicit operator System.Data.SqlTypes.SqlBinary (System.Data.SqlTypes.SqlGuid x) { return default(System.Data.SqlTypes.SqlBinary); }
    public static System.Data.SqlTypes.SqlBoolean operator >(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator >=(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static implicit operator System.Data.SqlTypes.SqlBinary (byte[] x) { return default(System.Data.SqlTypes.SqlBinary); }
    public static System.Data.SqlTypes.SqlBoolean operator !=(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <=(System.Data.SqlTypes.SqlBinary x, System.Data.SqlTypes.SqlBinary y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public System.Data.SqlTypes.SqlGuid ToSqlGuid() { return default(System.Data.SqlTypes.SqlGuid); }
    public override string ToString() { return default(string); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SqlBoolean : System.Data.SqlTypes.INullable, System.IComparable {
    public static readonly System.Data.SqlTypes.SqlBoolean False;
    public static readonly System.Data.SqlTypes.SqlBoolean Null;
    public static readonly System.Data.SqlTypes.SqlBoolean One;
    public static readonly System.Data.SqlTypes.SqlBoolean True;
    public static readonly System.Data.SqlTypes.SqlBoolean Zero;
    public SqlBoolean(bool value) { throw new System.NotImplementedException(); }
    public SqlBoolean(int value) { throw new System.NotImplementedException(); }
    public byte ByteValue { get { return default(byte); } }
    public bool IsFalse { get { return default(bool); } }
    public bool IsNull { get { return default(bool); } }
    public bool IsTrue { get { return default(bool); } }
    public bool Value { get { return default(bool); } }
    public static System.Data.SqlTypes.SqlBoolean And(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public int CompareTo(System.Data.SqlTypes.SqlBoolean value) { return default(int); }
    public int CompareTo(object value) { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThanOrEquals(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean OnesComplement(System.Data.SqlTypes.SqlBoolean x) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator &(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator |(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator ==(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator ^(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator bool (System.Data.SqlTypes.SqlBoolean x) { return default(bool); }
    public static explicit operator System.Data.SqlTypes.SqlBoolean (System.Data.SqlTypes.SqlByte x) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlBoolean (System.Data.SqlTypes.SqlDecimal x) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlBoolean (System.Data.SqlTypes.SqlDouble x) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlBoolean (System.Data.SqlTypes.SqlInt16 x) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlBoolean (System.Data.SqlTypes.SqlInt32 x) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlBoolean (System.Data.SqlTypes.SqlInt64 x) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlBoolean (System.Data.SqlTypes.SqlMoney x) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlBoolean (System.Data.SqlTypes.SqlSingle x) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlBoolean (System.Data.SqlTypes.SqlString x) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static bool operator false(System.Data.SqlTypes.SqlBoolean x) { return default(bool); }
    public static System.Data.SqlTypes.SqlBoolean operator >(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator >=(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static implicit operator System.Data.SqlTypes.SqlBoolean (bool x) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator !=(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <=(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator !(System.Data.SqlTypes.SqlBoolean x) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator ~(System.Data.SqlTypes.SqlBoolean x) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static bool operator true(System.Data.SqlTypes.SqlBoolean x) { return default(bool); }
    public static System.Data.SqlTypes.SqlBoolean Or(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean Parse(string s) { return default(System.Data.SqlTypes.SqlBoolean); }
    public System.Data.SqlTypes.SqlByte ToSqlByte() { return default(System.Data.SqlTypes.SqlByte); }
    public System.Data.SqlTypes.SqlDecimal ToSqlDecimal() { return default(System.Data.SqlTypes.SqlDecimal); }
    public System.Data.SqlTypes.SqlDouble ToSqlDouble() { return default(System.Data.SqlTypes.SqlDouble); }
    public System.Data.SqlTypes.SqlInt16 ToSqlInt16() { return default(System.Data.SqlTypes.SqlInt16); }
    public System.Data.SqlTypes.SqlInt32 ToSqlInt32() { return default(System.Data.SqlTypes.SqlInt32); }
    public System.Data.SqlTypes.SqlInt64 ToSqlInt64() { return default(System.Data.SqlTypes.SqlInt64); }
    public System.Data.SqlTypes.SqlMoney ToSqlMoney() { return default(System.Data.SqlTypes.SqlMoney); }
    public System.Data.SqlTypes.SqlSingle ToSqlSingle() { return default(System.Data.SqlTypes.SqlSingle); }
    public System.Data.SqlTypes.SqlString ToSqlString() { return default(System.Data.SqlTypes.SqlString); }
    public override string ToString() { return default(string); }
    public static System.Data.SqlTypes.SqlBoolean Xor(System.Data.SqlTypes.SqlBoolean x, System.Data.SqlTypes.SqlBoolean y) { return default(System.Data.SqlTypes.SqlBoolean); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SqlByte : System.Data.SqlTypes.INullable, System.IComparable {
    public static readonly System.Data.SqlTypes.SqlByte MaxValue;
    public static readonly System.Data.SqlTypes.SqlByte MinValue;
    public static readonly System.Data.SqlTypes.SqlByte Null;
    public static readonly System.Data.SqlTypes.SqlByte Zero;
    public SqlByte(byte value) { throw new System.NotImplementedException(); }
    public bool IsNull { get { return default(bool); } }
    public byte Value { get { return default(byte); } }
    public static System.Data.SqlTypes.SqlByte Add(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlByte BitwiseAnd(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlByte BitwiseOr(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public int CompareTo(System.Data.SqlTypes.SqlByte value) { return default(int); }
    public int CompareTo(object value) { return default(int); }
    public static System.Data.SqlTypes.SqlByte Divide(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlByte Mod(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlByte Modulus(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlByte Multiply(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlByte OnesComplement(System.Data.SqlTypes.SqlByte x) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlByte operator +(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlByte operator &(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlByte operator |(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlByte operator /(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlBoolean operator ==(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlByte operator ^(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static explicit operator System.Data.SqlTypes.SqlByte (System.Data.SqlTypes.SqlBoolean x) { return default(System.Data.SqlTypes.SqlByte); }
    public static explicit operator byte (System.Data.SqlTypes.SqlByte x) { return default(byte); }
    public static explicit operator System.Data.SqlTypes.SqlByte (System.Data.SqlTypes.SqlDecimal x) { return default(System.Data.SqlTypes.SqlByte); }
    public static explicit operator System.Data.SqlTypes.SqlByte (System.Data.SqlTypes.SqlDouble x) { return default(System.Data.SqlTypes.SqlByte); }
    public static explicit operator System.Data.SqlTypes.SqlByte (System.Data.SqlTypes.SqlInt16 x) { return default(System.Data.SqlTypes.SqlByte); }
    public static explicit operator System.Data.SqlTypes.SqlByte (System.Data.SqlTypes.SqlInt32 x) { return default(System.Data.SqlTypes.SqlByte); }
    public static explicit operator System.Data.SqlTypes.SqlByte (System.Data.SqlTypes.SqlInt64 x) { return default(System.Data.SqlTypes.SqlByte); }
    public static explicit operator System.Data.SqlTypes.SqlByte (System.Data.SqlTypes.SqlMoney x) { return default(System.Data.SqlTypes.SqlByte); }
    public static explicit operator System.Data.SqlTypes.SqlByte (System.Data.SqlTypes.SqlSingle x) { return default(System.Data.SqlTypes.SqlByte); }
    public static explicit operator System.Data.SqlTypes.SqlByte (System.Data.SqlTypes.SqlString x) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlBoolean operator >(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator >=(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static implicit operator System.Data.SqlTypes.SqlByte (byte x) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlBoolean operator !=(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <=(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlByte operator %(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlByte operator *(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlByte operator ~(System.Data.SqlTypes.SqlByte x) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlByte operator -(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlByte Parse(string s) { return default(System.Data.SqlTypes.SqlByte); }
    public static System.Data.SqlTypes.SqlByte Subtract(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
    public System.Data.SqlTypes.SqlBoolean ToSqlBoolean() { return default(System.Data.SqlTypes.SqlBoolean); }
    public System.Data.SqlTypes.SqlDecimal ToSqlDecimal() { return default(System.Data.SqlTypes.SqlDecimal); }
    public System.Data.SqlTypes.SqlDouble ToSqlDouble() { return default(System.Data.SqlTypes.SqlDouble); }
    public System.Data.SqlTypes.SqlInt16 ToSqlInt16() { return default(System.Data.SqlTypes.SqlInt16); }
    public System.Data.SqlTypes.SqlInt32 ToSqlInt32() { return default(System.Data.SqlTypes.SqlInt32); }
    public System.Data.SqlTypes.SqlInt64 ToSqlInt64() { return default(System.Data.SqlTypes.SqlInt64); }
    public System.Data.SqlTypes.SqlMoney ToSqlMoney() { return default(System.Data.SqlTypes.SqlMoney); }
    public System.Data.SqlTypes.SqlSingle ToSqlSingle() { return default(System.Data.SqlTypes.SqlSingle); }
    public System.Data.SqlTypes.SqlString ToSqlString() { return default(System.Data.SqlTypes.SqlString); }
    public override string ToString() { return default(string); }
    public static System.Data.SqlTypes.SqlByte Xor(System.Data.SqlTypes.SqlByte x, System.Data.SqlTypes.SqlByte y) { return default(System.Data.SqlTypes.SqlByte); }
  }
  public sealed partial class SqlBytes : System.Data.SqlTypes.INullable {
    public SqlBytes() { }
    public SqlBytes(byte[] buffer) { }
    public SqlBytes(System.Data.SqlTypes.SqlBinary value) { }
    public SqlBytes(System.IO.Stream s) { }
    public byte[] Buffer { get { return default(byte[]); } }
    public bool IsNull { get { return default(bool); } }
    public byte this[long offset] { get { return default(byte); } set { } }
    public long Length { get { return default(long); } }
    public long MaxLength { get { return default(long); } }
    public static System.Data.SqlTypes.SqlBytes Null { get { return default(System.Data.SqlTypes.SqlBytes); } }
    public System.IO.Stream Stream { get { return default(System.IO.Stream); } set { } }
    public byte[] Value { get { return default(byte[]); } }
    public static explicit operator System.Data.SqlTypes.SqlBytes (System.Data.SqlTypes.SqlBinary value) { return default(System.Data.SqlTypes.SqlBytes); }
    public static explicit operator System.Data.SqlTypes.SqlBinary (System.Data.SqlTypes.SqlBytes value) { return default(System.Data.SqlTypes.SqlBinary); }
    public long Read(long offset, byte[] buffer, int offsetInBuffer, int count) { return default(long); }
    public void SetLength(long value) { }
    public void SetNull() { }
    public System.Data.SqlTypes.SqlBinary ToSqlBinary() { return default(System.Data.SqlTypes.SqlBinary); }
    public void Write(long offset, byte[] buffer, int offsetInBuffer, int count) { }
  }
  public sealed partial class SqlChars : System.Data.SqlTypes.INullable {
    public SqlChars() { }
    public SqlChars(char[] buffer) { }
    public SqlChars(System.Data.SqlTypes.SqlString value) { }
    public char[] Buffer { get { return default(char[]); } }
    public bool IsNull { get { return default(bool); } }
    public char this[long offset] { get { return default(char); } set { } }
    public long Length { get { return default(long); } }
    public long MaxLength { get { return default(long); } }
    public static System.Data.SqlTypes.SqlChars Null { get { return default(System.Data.SqlTypes.SqlChars); } }
    public char[] Value { get { return default(char[]); } }
    public static explicit operator System.Data.SqlTypes.SqlString (System.Data.SqlTypes.SqlChars value) { return default(System.Data.SqlTypes.SqlString); }
    public static explicit operator System.Data.SqlTypes.SqlChars (System.Data.SqlTypes.SqlString value) { return default(System.Data.SqlTypes.SqlChars); }
    public long Read(long offset, char[] buffer, int offsetInBuffer, int count) { return default(long); }
    public void SetLength(long value) { }
    public void SetNull() { }
    public System.Data.SqlTypes.SqlString ToSqlString() { return default(System.Data.SqlTypes.SqlString); }
    public void Write(long offset, char[] buffer, int offsetInBuffer, int count) { }
  }
  [System.FlagsAttribute]
  public enum SqlCompareOptions {
    BinarySort = 32768,
    BinarySort2 = 16384,
    IgnoreCase = 1,
    IgnoreKanaType = 8,
    IgnoreNonSpace = 2,
    IgnoreWidth = 16,
    None = 0,
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SqlDateTime : System.Data.SqlTypes.INullable, System.IComparable {
    public static readonly System.Data.SqlTypes.SqlDateTime MaxValue;
    public static readonly System.Data.SqlTypes.SqlDateTime MinValue;
    public static readonly System.Data.SqlTypes.SqlDateTime Null;
    public static readonly int SQLTicksPerHour;
    public static readonly int SQLTicksPerMinute;
    public static readonly int SQLTicksPerSecond;
    public SqlDateTime(System.DateTime value) { throw new System.NotImplementedException(); }
    public SqlDateTime(int dayTicks, int timeTicks) { throw new System.NotImplementedException(); }
    public SqlDateTime(int year, int month, int day) { throw new System.NotImplementedException(); }
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second) { throw new System.NotImplementedException(); }
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second, double millisecond) { throw new System.NotImplementedException(); }
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second, int bilisecond) { throw new System.NotImplementedException(); }
    public int DayTicks { get { return default(int); } }
    public bool IsNull { get { return default(bool); } }
    public int TimeTicks { get { return default(int); } }
    public System.DateTime Value { get { return default(System.DateTime); } }
    public static System.Data.SqlTypes.SqlDateTime Add(System.Data.SqlTypes.SqlDateTime x, System.TimeSpan t) { return default(System.Data.SqlTypes.SqlDateTime); }
    public int CompareTo(System.Data.SqlTypes.SqlDateTime value) { return default(int); }
    public int CompareTo(object value) { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlDateTime x, System.Data.SqlTypes.SqlDateTime y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlDateTime x, System.Data.SqlTypes.SqlDateTime y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime x, System.Data.SqlTypes.SqlDateTime y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlDateTime x, System.Data.SqlTypes.SqlDateTime y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlDateTime x, System.Data.SqlTypes.SqlDateTime y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlDateTime x, System.Data.SqlTypes.SqlDateTime y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlDateTime operator +(System.Data.SqlTypes.SqlDateTime x, System.TimeSpan t) { return default(System.Data.SqlTypes.SqlDateTime); }
    public static System.Data.SqlTypes.SqlBoolean operator ==(System.Data.SqlTypes.SqlDateTime x, System.Data.SqlTypes.SqlDateTime y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.DateTime (System.Data.SqlTypes.SqlDateTime x) { return default(System.DateTime); }
    public static explicit operator System.Data.SqlTypes.SqlDateTime (System.Data.SqlTypes.SqlString x) { return default(System.Data.SqlTypes.SqlDateTime); }
    public static System.Data.SqlTypes.SqlBoolean operator >(System.Data.SqlTypes.SqlDateTime x, System.Data.SqlTypes.SqlDateTime y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator >=(System.Data.SqlTypes.SqlDateTime x, System.Data.SqlTypes.SqlDateTime y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static implicit operator System.Data.SqlTypes.SqlDateTime (System.DateTime value) { return default(System.Data.SqlTypes.SqlDateTime); }
    public static System.Data.SqlTypes.SqlBoolean operator !=(System.Data.SqlTypes.SqlDateTime x, System.Data.SqlTypes.SqlDateTime y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <(System.Data.SqlTypes.SqlDateTime x, System.Data.SqlTypes.SqlDateTime y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <=(System.Data.SqlTypes.SqlDateTime x, System.Data.SqlTypes.SqlDateTime y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlDateTime operator -(System.Data.SqlTypes.SqlDateTime x, System.TimeSpan t) { return default(System.Data.SqlTypes.SqlDateTime); }
    public static System.Data.SqlTypes.SqlDateTime Parse(string s) { return default(System.Data.SqlTypes.SqlDateTime); }
    public static System.Data.SqlTypes.SqlDateTime Subtract(System.Data.SqlTypes.SqlDateTime x, System.TimeSpan t) { return default(System.Data.SqlTypes.SqlDateTime); }
    public System.Data.SqlTypes.SqlString ToSqlString() { return default(System.Data.SqlTypes.SqlString); }
    public override string ToString() { return default(string); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SqlDecimal : System.Data.SqlTypes.INullable, System.IComparable {
    public static readonly byte MaxPrecision;
    public static readonly byte MaxScale;
    public static readonly System.Data.SqlTypes.SqlDecimal MaxValue;
    public static readonly System.Data.SqlTypes.SqlDecimal MinValue;
    public static readonly System.Data.SqlTypes.SqlDecimal Null;
    public SqlDecimal(byte bPrecision, byte bScale, bool fPositive, int data1, int data2, int data3, int data4) { throw new System.NotImplementedException(); }
    public SqlDecimal(byte bPrecision, byte bScale, bool fPositive, int[] bits) { throw new System.NotImplementedException(); }
    public SqlDecimal(decimal value) { throw new System.NotImplementedException(); }
    public SqlDecimal(double dVal) { throw new System.NotImplementedException(); }
    public SqlDecimal(int value) { throw new System.NotImplementedException(); }
    public SqlDecimal(long value) { throw new System.NotImplementedException(); }
    public byte[] BinData { get { return default(byte[]); } }
    public int[] Data { get { return default(int[]); } }
    public bool IsNull { get { return default(bool); } }
    public bool IsPositive { get { return default(bool); } }
    public byte Precision { get { return default(byte); } }
    public byte Scale { get { return default(byte); } }
    public decimal Value { get { return default(decimal); } }
    public static System.Data.SqlTypes.SqlDecimal Abs(System.Data.SqlTypes.SqlDecimal n) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlDecimal Add(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlDecimal AdjustScale(System.Data.SqlTypes.SqlDecimal n, int digits, bool fRound) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlDecimal Ceiling(System.Data.SqlTypes.SqlDecimal n) { return default(System.Data.SqlTypes.SqlDecimal); }
    public int CompareTo(System.Data.SqlTypes.SqlDecimal value) { return default(int); }
    public int CompareTo(object value) { return default(int); }
    public static System.Data.SqlTypes.SqlDecimal ConvertToPrecScale(System.Data.SqlTypes.SqlDecimal n, int precision, int scale) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlDecimal Divide(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public override bool Equals(object value) { return default(bool); }
    public static System.Data.SqlTypes.SqlDecimal Floor(System.Data.SqlTypes.SqlDecimal n) { return default(System.Data.SqlTypes.SqlDecimal); }
    public override int GetHashCode() { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlDecimal Multiply(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlDecimal operator +(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlDecimal operator /(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlBoolean operator ==(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlDecimal (System.Data.SqlTypes.SqlBoolean x) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static explicit operator decimal (System.Data.SqlTypes.SqlDecimal x) { return default(decimal); }
    public static explicit operator System.Data.SqlTypes.SqlDecimal (System.Data.SqlTypes.SqlDouble x) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static explicit operator System.Data.SqlTypes.SqlDecimal (System.Data.SqlTypes.SqlSingle x) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static explicit operator System.Data.SqlTypes.SqlDecimal (System.Data.SqlTypes.SqlString x) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static explicit operator System.Data.SqlTypes.SqlDecimal (double x) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlBoolean operator >(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator >=(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static implicit operator System.Data.SqlTypes.SqlDecimal (System.Data.SqlTypes.SqlByte x) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static implicit operator System.Data.SqlTypes.SqlDecimal (System.Data.SqlTypes.SqlInt16 x) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static implicit operator System.Data.SqlTypes.SqlDecimal (System.Data.SqlTypes.SqlInt32 x) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static implicit operator System.Data.SqlTypes.SqlDecimal (System.Data.SqlTypes.SqlInt64 x) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static implicit operator System.Data.SqlTypes.SqlDecimal (System.Data.SqlTypes.SqlMoney x) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static implicit operator System.Data.SqlTypes.SqlDecimal (decimal x) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static implicit operator System.Data.SqlTypes.SqlDecimal (long x) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlBoolean operator !=(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <=(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlDecimal operator *(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlDecimal operator -(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlDecimal operator -(System.Data.SqlTypes.SqlDecimal x) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlDecimal Parse(string s) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlDecimal Power(System.Data.SqlTypes.SqlDecimal n, double exp) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlDecimal Round(System.Data.SqlTypes.SqlDecimal n, int position) { return default(System.Data.SqlTypes.SqlDecimal); }
    public static System.Data.SqlTypes.SqlInt32 Sign(System.Data.SqlTypes.SqlDecimal n) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlDecimal Subtract(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y) { return default(System.Data.SqlTypes.SqlDecimal); }
    public double ToDouble() { return default(double); }
    public System.Data.SqlTypes.SqlBoolean ToSqlBoolean() { return default(System.Data.SqlTypes.SqlBoolean); }
    public System.Data.SqlTypes.SqlByte ToSqlByte() { return default(System.Data.SqlTypes.SqlByte); }
    public System.Data.SqlTypes.SqlDouble ToSqlDouble() { return default(System.Data.SqlTypes.SqlDouble); }
    public System.Data.SqlTypes.SqlInt16 ToSqlInt16() { return default(System.Data.SqlTypes.SqlInt16); }
    public System.Data.SqlTypes.SqlInt32 ToSqlInt32() { return default(System.Data.SqlTypes.SqlInt32); }
    public System.Data.SqlTypes.SqlInt64 ToSqlInt64() { return default(System.Data.SqlTypes.SqlInt64); }
    public System.Data.SqlTypes.SqlMoney ToSqlMoney() { return default(System.Data.SqlTypes.SqlMoney); }
    public System.Data.SqlTypes.SqlSingle ToSqlSingle() { return default(System.Data.SqlTypes.SqlSingle); }
    public System.Data.SqlTypes.SqlString ToSqlString() { return default(System.Data.SqlTypes.SqlString); }
    public override string ToString() { return default(string); }
    public static System.Data.SqlTypes.SqlDecimal Truncate(System.Data.SqlTypes.SqlDecimal n, int position) { return default(System.Data.SqlTypes.SqlDecimal); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SqlDouble : System.Data.SqlTypes.INullable, System.IComparable {
    public static readonly System.Data.SqlTypes.SqlDouble MaxValue;
    public static readonly System.Data.SqlTypes.SqlDouble MinValue;
    public static readonly System.Data.SqlTypes.SqlDouble Null;
    public static readonly System.Data.SqlTypes.SqlDouble Zero;
    public SqlDouble(double value) { throw new System.NotImplementedException(); }
    public bool IsNull { get { return default(bool); } }
    public double Value { get { return default(double); } }
    public static System.Data.SqlTypes.SqlDouble Add(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlDouble); }
    public int CompareTo(System.Data.SqlTypes.SqlDouble value) { return default(int); }
    public int CompareTo(object value) { return default(int); }
    public static System.Data.SqlTypes.SqlDouble Divide(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlDouble); }
    public static System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlDouble Multiply(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlDouble); }
    public static System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlDouble operator +(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlDouble); }
    public static System.Data.SqlTypes.SqlDouble operator /(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlDouble); }
    public static System.Data.SqlTypes.SqlBoolean operator ==(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlDouble (System.Data.SqlTypes.SqlBoolean x) { return default(System.Data.SqlTypes.SqlDouble); }
    public static explicit operator double (System.Data.SqlTypes.SqlDouble x) { return default(double); }
    public static explicit operator System.Data.SqlTypes.SqlDouble (System.Data.SqlTypes.SqlString x) { return default(System.Data.SqlTypes.SqlDouble); }
    public static System.Data.SqlTypes.SqlBoolean operator >(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator >=(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static implicit operator System.Data.SqlTypes.SqlDouble (System.Data.SqlTypes.SqlByte x) { return default(System.Data.SqlTypes.SqlDouble); }
    public static implicit operator System.Data.SqlTypes.SqlDouble (System.Data.SqlTypes.SqlDecimal x) { return default(System.Data.SqlTypes.SqlDouble); }
    public static implicit operator System.Data.SqlTypes.SqlDouble (System.Data.SqlTypes.SqlInt16 x) { return default(System.Data.SqlTypes.SqlDouble); }
    public static implicit operator System.Data.SqlTypes.SqlDouble (System.Data.SqlTypes.SqlInt32 x) { return default(System.Data.SqlTypes.SqlDouble); }
    public static implicit operator System.Data.SqlTypes.SqlDouble (System.Data.SqlTypes.SqlInt64 x) { return default(System.Data.SqlTypes.SqlDouble); }
    public static implicit operator System.Data.SqlTypes.SqlDouble (System.Data.SqlTypes.SqlMoney x) { return default(System.Data.SqlTypes.SqlDouble); }
    public static implicit operator System.Data.SqlTypes.SqlDouble (System.Data.SqlTypes.SqlSingle x) { return default(System.Data.SqlTypes.SqlDouble); }
    public static implicit operator System.Data.SqlTypes.SqlDouble (double x) { return default(System.Data.SqlTypes.SqlDouble); }
    public static System.Data.SqlTypes.SqlBoolean operator !=(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <=(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlDouble operator *(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlDouble); }
    public static System.Data.SqlTypes.SqlDouble operator -(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlDouble); }
    public static System.Data.SqlTypes.SqlDouble operator -(System.Data.SqlTypes.SqlDouble x) { return default(System.Data.SqlTypes.SqlDouble); }
    public static System.Data.SqlTypes.SqlDouble Parse(string s) { return default(System.Data.SqlTypes.SqlDouble); }
    public static System.Data.SqlTypes.SqlDouble Subtract(System.Data.SqlTypes.SqlDouble x, System.Data.SqlTypes.SqlDouble y) { return default(System.Data.SqlTypes.SqlDouble); }
    public System.Data.SqlTypes.SqlBoolean ToSqlBoolean() { return default(System.Data.SqlTypes.SqlBoolean); }
    public System.Data.SqlTypes.SqlByte ToSqlByte() { return default(System.Data.SqlTypes.SqlByte); }
    public System.Data.SqlTypes.SqlDecimal ToSqlDecimal() { return default(System.Data.SqlTypes.SqlDecimal); }
    public System.Data.SqlTypes.SqlInt16 ToSqlInt16() { return default(System.Data.SqlTypes.SqlInt16); }
    public System.Data.SqlTypes.SqlInt32 ToSqlInt32() { return default(System.Data.SqlTypes.SqlInt32); }
    public System.Data.SqlTypes.SqlInt64 ToSqlInt64() { return default(System.Data.SqlTypes.SqlInt64); }
    public System.Data.SqlTypes.SqlMoney ToSqlMoney() { return default(System.Data.SqlTypes.SqlMoney); }
    public System.Data.SqlTypes.SqlSingle ToSqlSingle() { return default(System.Data.SqlTypes.SqlSingle); }
    public System.Data.SqlTypes.SqlString ToSqlString() { return default(System.Data.SqlTypes.SqlString); }
    public override string ToString() { return default(string); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SqlGuid : System.Data.SqlTypes.INullable, System.IComparable {
    public static readonly System.Data.SqlTypes.SqlGuid Null;
    public SqlGuid(byte[] value) { throw new System.NotImplementedException(); }
    public SqlGuid(System.Guid g) { throw new System.NotImplementedException(); }
    public SqlGuid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k) { throw new System.NotImplementedException(); }
    public SqlGuid(string s) { throw new System.NotImplementedException(); }
    public bool IsNull { get { return default(bool); } }
    public System.Guid Value { get { return default(System.Guid); } }
    public int CompareTo(System.Data.SqlTypes.SqlGuid value) { return default(int); }
    public int CompareTo(object value) { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlGuid x, System.Data.SqlTypes.SqlGuid y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlGuid x, System.Data.SqlTypes.SqlGuid y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid x, System.Data.SqlTypes.SqlGuid y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlGuid x, System.Data.SqlTypes.SqlGuid y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlGuid x, System.Data.SqlTypes.SqlGuid y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlGuid x, System.Data.SqlTypes.SqlGuid y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator ==(System.Data.SqlTypes.SqlGuid x, System.Data.SqlTypes.SqlGuid y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlGuid (System.Data.SqlTypes.SqlBinary x) { return default(System.Data.SqlTypes.SqlGuid); }
    public static explicit operator System.Guid (System.Data.SqlTypes.SqlGuid x) { return default(System.Guid); }
    public static explicit operator System.Data.SqlTypes.SqlGuid (System.Data.SqlTypes.SqlString x) { return default(System.Data.SqlTypes.SqlGuid); }
    public static System.Data.SqlTypes.SqlBoolean operator >(System.Data.SqlTypes.SqlGuid x, System.Data.SqlTypes.SqlGuid y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator >=(System.Data.SqlTypes.SqlGuid x, System.Data.SqlTypes.SqlGuid y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static implicit operator System.Data.SqlTypes.SqlGuid (System.Guid x) { return default(System.Data.SqlTypes.SqlGuid); }
    public static System.Data.SqlTypes.SqlBoolean operator !=(System.Data.SqlTypes.SqlGuid x, System.Data.SqlTypes.SqlGuid y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <(System.Data.SqlTypes.SqlGuid x, System.Data.SqlTypes.SqlGuid y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <=(System.Data.SqlTypes.SqlGuid x, System.Data.SqlTypes.SqlGuid y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlGuid Parse(string s) { return default(System.Data.SqlTypes.SqlGuid); }
    public byte[] ToByteArray() { return default(byte[]); }
    public System.Data.SqlTypes.SqlBinary ToSqlBinary() { return default(System.Data.SqlTypes.SqlBinary); }
    public System.Data.SqlTypes.SqlString ToSqlString() { return default(System.Data.SqlTypes.SqlString); }
    public override string ToString() { return default(string); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SqlInt16 : System.Data.SqlTypes.INullable, System.IComparable {
    public static readonly System.Data.SqlTypes.SqlInt16 MaxValue;
    public static readonly System.Data.SqlTypes.SqlInt16 MinValue;
    public static readonly System.Data.SqlTypes.SqlInt16 Null;
    public static readonly System.Data.SqlTypes.SqlInt16 Zero;
    public SqlInt16(short value) { throw new System.NotImplementedException(); }
    public bool IsNull { get { return default(bool); } }
    public short Value { get { return default(short); } }
    public static System.Data.SqlTypes.SqlInt16 Add(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 BitwiseAnd(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 BitwiseOr(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public int CompareTo(System.Data.SqlTypes.SqlInt16 value) { return default(int); }
    public int CompareTo(object value) { return default(int); }
    public static System.Data.SqlTypes.SqlInt16 Divide(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlInt16 Mod(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 Modulus(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 Multiply(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlInt16 OnesComplement(System.Data.SqlTypes.SqlInt16 x) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 operator +(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 operator &(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 operator |(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 operator /(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlBoolean operator ==(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlInt16 operator ^(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static explicit operator System.Data.SqlTypes.SqlInt16 (System.Data.SqlTypes.SqlBoolean x) { return default(System.Data.SqlTypes.SqlInt16); }
    public static explicit operator System.Data.SqlTypes.SqlInt16 (System.Data.SqlTypes.SqlDecimal x) { return default(System.Data.SqlTypes.SqlInt16); }
    public static explicit operator System.Data.SqlTypes.SqlInt16 (System.Data.SqlTypes.SqlDouble x) { return default(System.Data.SqlTypes.SqlInt16); }
    public static explicit operator short (System.Data.SqlTypes.SqlInt16 x) { return default(short); }
    public static explicit operator System.Data.SqlTypes.SqlInt16 (System.Data.SqlTypes.SqlInt32 x) { return default(System.Data.SqlTypes.SqlInt16); }
    public static explicit operator System.Data.SqlTypes.SqlInt16 (System.Data.SqlTypes.SqlInt64 x) { return default(System.Data.SqlTypes.SqlInt16); }
    public static explicit operator System.Data.SqlTypes.SqlInt16 (System.Data.SqlTypes.SqlMoney x) { return default(System.Data.SqlTypes.SqlInt16); }
    public static explicit operator System.Data.SqlTypes.SqlInt16 (System.Data.SqlTypes.SqlSingle x) { return default(System.Data.SqlTypes.SqlInt16); }
    public static explicit operator System.Data.SqlTypes.SqlInt16 (System.Data.SqlTypes.SqlString x) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlBoolean operator >(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator >=(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static implicit operator System.Data.SqlTypes.SqlInt16 (System.Data.SqlTypes.SqlByte x) { return default(System.Data.SqlTypes.SqlInt16); }
    public static implicit operator System.Data.SqlTypes.SqlInt16 (short x) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlBoolean operator !=(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <=(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlInt16 operator %(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 operator *(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 operator ~(System.Data.SqlTypes.SqlInt16 x) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 operator -(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 operator -(System.Data.SqlTypes.SqlInt16 x) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 Parse(string s) { return default(System.Data.SqlTypes.SqlInt16); }
    public static System.Data.SqlTypes.SqlInt16 Subtract(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
    public System.Data.SqlTypes.SqlBoolean ToSqlBoolean() { return default(System.Data.SqlTypes.SqlBoolean); }
    public System.Data.SqlTypes.SqlByte ToSqlByte() { return default(System.Data.SqlTypes.SqlByte); }
    public System.Data.SqlTypes.SqlDecimal ToSqlDecimal() { return default(System.Data.SqlTypes.SqlDecimal); }
    public System.Data.SqlTypes.SqlDouble ToSqlDouble() { return default(System.Data.SqlTypes.SqlDouble); }
    public System.Data.SqlTypes.SqlInt32 ToSqlInt32() { return default(System.Data.SqlTypes.SqlInt32); }
    public System.Data.SqlTypes.SqlInt64 ToSqlInt64() { return default(System.Data.SqlTypes.SqlInt64); }
    public System.Data.SqlTypes.SqlMoney ToSqlMoney() { return default(System.Data.SqlTypes.SqlMoney); }
    public System.Data.SqlTypes.SqlSingle ToSqlSingle() { return default(System.Data.SqlTypes.SqlSingle); }
    public System.Data.SqlTypes.SqlString ToSqlString() { return default(System.Data.SqlTypes.SqlString); }
    public override string ToString() { return default(string); }
    public static System.Data.SqlTypes.SqlInt16 Xor(System.Data.SqlTypes.SqlInt16 x, System.Data.SqlTypes.SqlInt16 y) { return default(System.Data.SqlTypes.SqlInt16); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SqlInt32 : System.Data.SqlTypes.INullable, System.IComparable {
    public static readonly System.Data.SqlTypes.SqlInt32 MaxValue;
    public static readonly System.Data.SqlTypes.SqlInt32 MinValue;
    public static readonly System.Data.SqlTypes.SqlInt32 Null;
    public static readonly System.Data.SqlTypes.SqlInt32 Zero;
    public SqlInt32(int value) { throw new System.NotImplementedException(); }
    public bool IsNull { get { return default(bool); } }
    public int Value { get { return default(int); } }
    public static System.Data.SqlTypes.SqlInt32 Add(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 BitwiseAnd(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 BitwiseOr(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public int CompareTo(System.Data.SqlTypes.SqlInt32 value) { return default(int); }
    public int CompareTo(object value) { return default(int); }
    public static System.Data.SqlTypes.SqlInt32 Divide(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlInt32 Mod(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 Modulus(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 Multiply(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlInt32 OnesComplement(System.Data.SqlTypes.SqlInt32 x) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 operator +(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 operator &(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 operator |(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 operator /(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlBoolean operator ==(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlInt32 operator ^(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static explicit operator System.Data.SqlTypes.SqlInt32 (System.Data.SqlTypes.SqlBoolean x) { return default(System.Data.SqlTypes.SqlInt32); }
    public static explicit operator System.Data.SqlTypes.SqlInt32 (System.Data.SqlTypes.SqlDecimal x) { return default(System.Data.SqlTypes.SqlInt32); }
    public static explicit operator System.Data.SqlTypes.SqlInt32 (System.Data.SqlTypes.SqlDouble x) { return default(System.Data.SqlTypes.SqlInt32); }
    public static explicit operator int (System.Data.SqlTypes.SqlInt32 x) { return default(int); }
    public static explicit operator System.Data.SqlTypes.SqlInt32 (System.Data.SqlTypes.SqlInt64 x) { return default(System.Data.SqlTypes.SqlInt32); }
    public static explicit operator System.Data.SqlTypes.SqlInt32 (System.Data.SqlTypes.SqlMoney x) { return default(System.Data.SqlTypes.SqlInt32); }
    public static explicit operator System.Data.SqlTypes.SqlInt32 (System.Data.SqlTypes.SqlSingle x) { return default(System.Data.SqlTypes.SqlInt32); }
    public static explicit operator System.Data.SqlTypes.SqlInt32 (System.Data.SqlTypes.SqlString x) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlBoolean operator >(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator >=(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static implicit operator System.Data.SqlTypes.SqlInt32 (System.Data.SqlTypes.SqlByte x) { return default(System.Data.SqlTypes.SqlInt32); }
    public static implicit operator System.Data.SqlTypes.SqlInt32 (System.Data.SqlTypes.SqlInt16 x) { return default(System.Data.SqlTypes.SqlInt32); }
    public static implicit operator System.Data.SqlTypes.SqlInt32 (int x) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlBoolean operator !=(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <=(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlInt32 operator %(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 operator *(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 operator ~(System.Data.SqlTypes.SqlInt32 x) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 operator -(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 operator -(System.Data.SqlTypes.SqlInt32 x) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 Parse(string s) { return default(System.Data.SqlTypes.SqlInt32); }
    public static System.Data.SqlTypes.SqlInt32 Subtract(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
    public System.Data.SqlTypes.SqlBoolean ToSqlBoolean() { return default(System.Data.SqlTypes.SqlBoolean); }
    public System.Data.SqlTypes.SqlByte ToSqlByte() { return default(System.Data.SqlTypes.SqlByte); }
    public System.Data.SqlTypes.SqlDecimal ToSqlDecimal() { return default(System.Data.SqlTypes.SqlDecimal); }
    public System.Data.SqlTypes.SqlDouble ToSqlDouble() { return default(System.Data.SqlTypes.SqlDouble); }
    public System.Data.SqlTypes.SqlInt16 ToSqlInt16() { return default(System.Data.SqlTypes.SqlInt16); }
    public System.Data.SqlTypes.SqlInt64 ToSqlInt64() { return default(System.Data.SqlTypes.SqlInt64); }
    public System.Data.SqlTypes.SqlMoney ToSqlMoney() { return default(System.Data.SqlTypes.SqlMoney); }
    public System.Data.SqlTypes.SqlSingle ToSqlSingle() { return default(System.Data.SqlTypes.SqlSingle); }
    public System.Data.SqlTypes.SqlString ToSqlString() { return default(System.Data.SqlTypes.SqlString); }
    public override string ToString() { return default(string); }
    public static System.Data.SqlTypes.SqlInt32 Xor(System.Data.SqlTypes.SqlInt32 x, System.Data.SqlTypes.SqlInt32 y) { return default(System.Data.SqlTypes.SqlInt32); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SqlInt64 : System.Data.SqlTypes.INullable, System.IComparable {
    public static readonly System.Data.SqlTypes.SqlInt64 MaxValue;
    public static readonly System.Data.SqlTypes.SqlInt64 MinValue;
    public static readonly System.Data.SqlTypes.SqlInt64 Null;
    public static readonly System.Data.SqlTypes.SqlInt64 Zero;
    public SqlInt64(long value) { throw new System.NotImplementedException(); }
    public bool IsNull { get { return default(bool); } }
    public long Value { get { return default(long); } }
    public static System.Data.SqlTypes.SqlInt64 Add(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 BitwiseAnd(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 BitwiseOr(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public int CompareTo(System.Data.SqlTypes.SqlInt64 value) { return default(int); }
    public int CompareTo(object value) { return default(int); }
    public static System.Data.SqlTypes.SqlInt64 Divide(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlInt64 Mod(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 Modulus(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 Multiply(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlInt64 OnesComplement(System.Data.SqlTypes.SqlInt64 x) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 operator +(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 operator &(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 operator |(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 operator /(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlBoolean operator ==(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlInt64 operator ^(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static explicit operator System.Data.SqlTypes.SqlInt64 (System.Data.SqlTypes.SqlBoolean x) { return default(System.Data.SqlTypes.SqlInt64); }
    public static explicit operator System.Data.SqlTypes.SqlInt64 (System.Data.SqlTypes.SqlDecimal x) { return default(System.Data.SqlTypes.SqlInt64); }
    public static explicit operator System.Data.SqlTypes.SqlInt64 (System.Data.SqlTypes.SqlDouble x) { return default(System.Data.SqlTypes.SqlInt64); }
    public static explicit operator long (System.Data.SqlTypes.SqlInt64 x) { return default(long); }
    public static explicit operator System.Data.SqlTypes.SqlInt64 (System.Data.SqlTypes.SqlMoney x) { return default(System.Data.SqlTypes.SqlInt64); }
    public static explicit operator System.Data.SqlTypes.SqlInt64 (System.Data.SqlTypes.SqlSingle x) { return default(System.Data.SqlTypes.SqlInt64); }
    public static explicit operator System.Data.SqlTypes.SqlInt64 (System.Data.SqlTypes.SqlString x) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlBoolean operator >(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator >=(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static implicit operator System.Data.SqlTypes.SqlInt64 (System.Data.SqlTypes.SqlByte x) { return default(System.Data.SqlTypes.SqlInt64); }
    public static implicit operator System.Data.SqlTypes.SqlInt64 (System.Data.SqlTypes.SqlInt16 x) { return default(System.Data.SqlTypes.SqlInt64); }
    public static implicit operator System.Data.SqlTypes.SqlInt64 (System.Data.SqlTypes.SqlInt32 x) { return default(System.Data.SqlTypes.SqlInt64); }
    public static implicit operator System.Data.SqlTypes.SqlInt64 (long x) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlBoolean operator !=(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <=(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlInt64 operator %(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 operator *(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 operator ~(System.Data.SqlTypes.SqlInt64 x) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 operator -(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 operator -(System.Data.SqlTypes.SqlInt64 x) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 Parse(string s) { return default(System.Data.SqlTypes.SqlInt64); }
    public static System.Data.SqlTypes.SqlInt64 Subtract(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
    public System.Data.SqlTypes.SqlBoolean ToSqlBoolean() { return default(System.Data.SqlTypes.SqlBoolean); }
    public System.Data.SqlTypes.SqlByte ToSqlByte() { return default(System.Data.SqlTypes.SqlByte); }
    public System.Data.SqlTypes.SqlDecimal ToSqlDecimal() { return default(System.Data.SqlTypes.SqlDecimal); }
    public System.Data.SqlTypes.SqlDouble ToSqlDouble() { return default(System.Data.SqlTypes.SqlDouble); }
    public System.Data.SqlTypes.SqlInt16 ToSqlInt16() { return default(System.Data.SqlTypes.SqlInt16); }
    public System.Data.SqlTypes.SqlInt32 ToSqlInt32() { return default(System.Data.SqlTypes.SqlInt32); }
    public System.Data.SqlTypes.SqlMoney ToSqlMoney() { return default(System.Data.SqlTypes.SqlMoney); }
    public System.Data.SqlTypes.SqlSingle ToSqlSingle() { return default(System.Data.SqlTypes.SqlSingle); }
    public System.Data.SqlTypes.SqlString ToSqlString() { return default(System.Data.SqlTypes.SqlString); }
    public override string ToString() { return default(string); }
    public static System.Data.SqlTypes.SqlInt64 Xor(System.Data.SqlTypes.SqlInt64 x, System.Data.SqlTypes.SqlInt64 y) { return default(System.Data.SqlTypes.SqlInt64); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SqlMoney : System.Data.SqlTypes.INullable, System.IComparable {
    public static readonly System.Data.SqlTypes.SqlMoney MaxValue;
    public static readonly System.Data.SqlTypes.SqlMoney MinValue;
    public static readonly System.Data.SqlTypes.SqlMoney Null;
    public static readonly System.Data.SqlTypes.SqlMoney Zero;
    public SqlMoney(decimal value) { throw new System.NotImplementedException(); }
    public SqlMoney(double value) { throw new System.NotImplementedException(); }
    public SqlMoney(int value) { throw new System.NotImplementedException(); }
    public SqlMoney(long value) { throw new System.NotImplementedException(); }
    public bool IsNull { get { return default(bool); } }
    public decimal Value { get { return default(decimal); } }
    public static System.Data.SqlTypes.SqlMoney Add(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlMoney); }
    public int CompareTo(System.Data.SqlTypes.SqlMoney value) { return default(int); }
    public int CompareTo(object value) { return default(int); }
    public static System.Data.SqlTypes.SqlMoney Divide(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlMoney); }
    public static System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlMoney Multiply(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlMoney); }
    public static System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlMoney operator +(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlMoney); }
    public static System.Data.SqlTypes.SqlMoney operator /(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlMoney); }
    public static System.Data.SqlTypes.SqlBoolean operator ==(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlMoney (System.Data.SqlTypes.SqlBoolean x) { return default(System.Data.SqlTypes.SqlMoney); }
    public static explicit operator System.Data.SqlTypes.SqlMoney (System.Data.SqlTypes.SqlDecimal x) { return default(System.Data.SqlTypes.SqlMoney); }
    public static explicit operator System.Data.SqlTypes.SqlMoney (System.Data.SqlTypes.SqlDouble x) { return default(System.Data.SqlTypes.SqlMoney); }
    public static explicit operator decimal (System.Data.SqlTypes.SqlMoney x) { return default(decimal); }
    public static explicit operator System.Data.SqlTypes.SqlMoney (System.Data.SqlTypes.SqlSingle x) { return default(System.Data.SqlTypes.SqlMoney); }
    public static explicit operator System.Data.SqlTypes.SqlMoney (System.Data.SqlTypes.SqlString x) { return default(System.Data.SqlTypes.SqlMoney); }
    public static explicit operator System.Data.SqlTypes.SqlMoney (double x) { return default(System.Data.SqlTypes.SqlMoney); }
    public static System.Data.SqlTypes.SqlBoolean operator >(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator >=(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static implicit operator System.Data.SqlTypes.SqlMoney (System.Data.SqlTypes.SqlByte x) { return default(System.Data.SqlTypes.SqlMoney); }
    public static implicit operator System.Data.SqlTypes.SqlMoney (System.Data.SqlTypes.SqlInt16 x) { return default(System.Data.SqlTypes.SqlMoney); }
    public static implicit operator System.Data.SqlTypes.SqlMoney (System.Data.SqlTypes.SqlInt32 x) { return default(System.Data.SqlTypes.SqlMoney); }
    public static implicit operator System.Data.SqlTypes.SqlMoney (System.Data.SqlTypes.SqlInt64 x) { return default(System.Data.SqlTypes.SqlMoney); }
    public static implicit operator System.Data.SqlTypes.SqlMoney (decimal x) { return default(System.Data.SqlTypes.SqlMoney); }
    public static implicit operator System.Data.SqlTypes.SqlMoney (long x) { return default(System.Data.SqlTypes.SqlMoney); }
    public static System.Data.SqlTypes.SqlBoolean operator !=(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <=(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlMoney operator *(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlMoney); }
    public static System.Data.SqlTypes.SqlMoney operator -(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlMoney); }
    public static System.Data.SqlTypes.SqlMoney operator -(System.Data.SqlTypes.SqlMoney x) { return default(System.Data.SqlTypes.SqlMoney); }
    public static System.Data.SqlTypes.SqlMoney Parse(string s) { return default(System.Data.SqlTypes.SqlMoney); }
    public static System.Data.SqlTypes.SqlMoney Subtract(System.Data.SqlTypes.SqlMoney x, System.Data.SqlTypes.SqlMoney y) { return default(System.Data.SqlTypes.SqlMoney); }
    public decimal ToDecimal() { return default(decimal); }
    public double ToDouble() { return default(double); }
    public int ToInt32() { return default(int); }
    public long ToInt64() { return default(long); }
    public System.Data.SqlTypes.SqlBoolean ToSqlBoolean() { return default(System.Data.SqlTypes.SqlBoolean); }
    public System.Data.SqlTypes.SqlByte ToSqlByte() { return default(System.Data.SqlTypes.SqlByte); }
    public System.Data.SqlTypes.SqlDecimal ToSqlDecimal() { return default(System.Data.SqlTypes.SqlDecimal); }
    public System.Data.SqlTypes.SqlDouble ToSqlDouble() { return default(System.Data.SqlTypes.SqlDouble); }
    public System.Data.SqlTypes.SqlInt16 ToSqlInt16() { return default(System.Data.SqlTypes.SqlInt16); }
    public System.Data.SqlTypes.SqlInt32 ToSqlInt32() { return default(System.Data.SqlTypes.SqlInt32); }
    public System.Data.SqlTypes.SqlInt64 ToSqlInt64() { return default(System.Data.SqlTypes.SqlInt64); }
    public System.Data.SqlTypes.SqlSingle ToSqlSingle() { return default(System.Data.SqlTypes.SqlSingle); }
    public System.Data.SqlTypes.SqlString ToSqlString() { return default(System.Data.SqlTypes.SqlString); }
    public override string ToString() { return default(string); }
  }
  public sealed partial class SqlNullValueException : System.Data.SqlTypes.SqlTypeException {
    public SqlNullValueException() { }
    public SqlNullValueException(string message) { }
    public SqlNullValueException(string message, System.Exception e) { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SqlSingle : System.Data.SqlTypes.INullable, System.IComparable {
    public static readonly System.Data.SqlTypes.SqlSingle MaxValue;
    public static readonly System.Data.SqlTypes.SqlSingle MinValue;
    public static readonly System.Data.SqlTypes.SqlSingle Null;
    public static readonly System.Data.SqlTypes.SqlSingle Zero;
    public SqlSingle(double value) { throw new System.NotImplementedException(); }
    public SqlSingle(float value) { throw new System.NotImplementedException(); }
    public bool IsNull { get { return default(bool); } }
    public float Value { get { return default(float); } }
    public static System.Data.SqlTypes.SqlSingle Add(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlSingle); }
    public int CompareTo(System.Data.SqlTypes.SqlSingle value) { return default(int); }
    public int CompareTo(object value) { return default(int); }
    public static System.Data.SqlTypes.SqlSingle Divide(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlSingle); }
    public static System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlSingle Multiply(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlSingle); }
    public static System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlSingle operator +(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlSingle); }
    public static System.Data.SqlTypes.SqlSingle operator /(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlSingle); }
    public static System.Data.SqlTypes.SqlBoolean operator ==(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlSingle (System.Data.SqlTypes.SqlBoolean x) { return default(System.Data.SqlTypes.SqlSingle); }
    public static explicit operator System.Data.SqlTypes.SqlSingle (System.Data.SqlTypes.SqlDouble x) { return default(System.Data.SqlTypes.SqlSingle); }
    public static explicit operator float (System.Data.SqlTypes.SqlSingle x) { return default(float); }
    public static explicit operator System.Data.SqlTypes.SqlSingle (System.Data.SqlTypes.SqlString x) { return default(System.Data.SqlTypes.SqlSingle); }
    public static System.Data.SqlTypes.SqlBoolean operator >(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator >=(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static implicit operator System.Data.SqlTypes.SqlSingle (System.Data.SqlTypes.SqlByte x) { return default(System.Data.SqlTypes.SqlSingle); }
    public static implicit operator System.Data.SqlTypes.SqlSingle (System.Data.SqlTypes.SqlDecimal x) { return default(System.Data.SqlTypes.SqlSingle); }
    public static implicit operator System.Data.SqlTypes.SqlSingle (System.Data.SqlTypes.SqlInt16 x) { return default(System.Data.SqlTypes.SqlSingle); }
    public static implicit operator System.Data.SqlTypes.SqlSingle (System.Data.SqlTypes.SqlInt32 x) { return default(System.Data.SqlTypes.SqlSingle); }
    public static implicit operator System.Data.SqlTypes.SqlSingle (System.Data.SqlTypes.SqlInt64 x) { return default(System.Data.SqlTypes.SqlSingle); }
    public static implicit operator System.Data.SqlTypes.SqlSingle (System.Data.SqlTypes.SqlMoney x) { return default(System.Data.SqlTypes.SqlSingle); }
    public static implicit operator System.Data.SqlTypes.SqlSingle (float x) { return default(System.Data.SqlTypes.SqlSingle); }
    public static System.Data.SqlTypes.SqlBoolean operator !=(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <=(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlSingle operator *(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlSingle); }
    public static System.Data.SqlTypes.SqlSingle operator -(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlSingle); }
    public static System.Data.SqlTypes.SqlSingle operator -(System.Data.SqlTypes.SqlSingle x) { return default(System.Data.SqlTypes.SqlSingle); }
    public static System.Data.SqlTypes.SqlSingle Parse(string s) { return default(System.Data.SqlTypes.SqlSingle); }
    public static System.Data.SqlTypes.SqlSingle Subtract(System.Data.SqlTypes.SqlSingle x, System.Data.SqlTypes.SqlSingle y) { return default(System.Data.SqlTypes.SqlSingle); }
    public System.Data.SqlTypes.SqlBoolean ToSqlBoolean() { return default(System.Data.SqlTypes.SqlBoolean); }
    public System.Data.SqlTypes.SqlByte ToSqlByte() { return default(System.Data.SqlTypes.SqlByte); }
    public System.Data.SqlTypes.SqlDecimal ToSqlDecimal() { return default(System.Data.SqlTypes.SqlDecimal); }
    public System.Data.SqlTypes.SqlDouble ToSqlDouble() { return default(System.Data.SqlTypes.SqlDouble); }
    public System.Data.SqlTypes.SqlInt16 ToSqlInt16() { return default(System.Data.SqlTypes.SqlInt16); }
    public System.Data.SqlTypes.SqlInt32 ToSqlInt32() { return default(System.Data.SqlTypes.SqlInt32); }
    public System.Data.SqlTypes.SqlInt64 ToSqlInt64() { return default(System.Data.SqlTypes.SqlInt64); }
    public System.Data.SqlTypes.SqlMoney ToSqlMoney() { return default(System.Data.SqlTypes.SqlMoney); }
    public System.Data.SqlTypes.SqlString ToSqlString() { return default(System.Data.SqlTypes.SqlString); }
    public override string ToString() { return default(string); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SqlString : System.Data.SqlTypes.INullable, System.IComparable {
    public static readonly int BinarySort;
    public static readonly int BinarySort2;
    public static readonly int IgnoreCase;
    public static readonly int IgnoreKanaType;
    public static readonly int IgnoreNonSpace;
    public static readonly int IgnoreWidth;
    public static readonly System.Data.SqlTypes.SqlString Null;
    public SqlString(int lcid, System.Data.SqlTypes.SqlCompareOptions compareOptions, byte[] data) { throw new System.NotImplementedException(); }
    public SqlString(int lcid, System.Data.SqlTypes.SqlCompareOptions compareOptions, byte[] data, bool fUnicode) { throw new System.NotImplementedException(); }
    public SqlString(int lcid, System.Data.SqlTypes.SqlCompareOptions compareOptions, byte[] data, int index, int count) { throw new System.NotImplementedException(); }
    public SqlString(int lcid, System.Data.SqlTypes.SqlCompareOptions compareOptions, byte[] data, int index, int count, bool fUnicode) { throw new System.NotImplementedException(); }
    public SqlString(string data) { throw new System.NotImplementedException(); }
    public SqlString(string data, int lcid) { throw new System.NotImplementedException(); }
    public SqlString(string data, int lcid, System.Data.SqlTypes.SqlCompareOptions compareOptions) { throw new System.NotImplementedException(); }
    public System.Globalization.CompareInfo CompareInfo { get { return default(System.Globalization.CompareInfo); } }
    public System.Globalization.CultureInfo CultureInfo { get { return default(System.Globalization.CultureInfo); } }
    public bool IsNull { get { return default(bool); } }
    public int LCID { get { return default(int); } }
    public System.Data.SqlTypes.SqlCompareOptions SqlCompareOptions { get { return default(System.Data.SqlTypes.SqlCompareOptions); } }
    public string Value { get { return default(string); } }
    public static System.Data.SqlTypes.SqlString Add(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlString); }
    public System.Data.SqlTypes.SqlString Clone() { return default(System.Data.SqlTypes.SqlString); }
    public static System.Globalization.CompareOptions CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions compareOptions) { return default(System.Globalization.CompareOptions); }
    public int CompareTo(System.Data.SqlTypes.SqlString value) { return default(int); }
    public int CompareTo(object value) { return default(int); }
    public static System.Data.SqlTypes.SqlString Concat(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlString); }
    public static System.Data.SqlTypes.SqlBoolean Equals(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public byte[] GetNonUnicodeBytes() { return default(byte[]); }
    public byte[] GetUnicodeBytes() { return default(byte[]); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean GreaterThanOrEqual(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean LessThanOrEqual(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean NotEquals(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlString operator +(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlString); }
    public static System.Data.SqlTypes.SqlBoolean operator ==(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static explicit operator System.Data.SqlTypes.SqlString (System.Data.SqlTypes.SqlBoolean x) { return default(System.Data.SqlTypes.SqlString); }
    public static explicit operator System.Data.SqlTypes.SqlString (System.Data.SqlTypes.SqlByte x) { return default(System.Data.SqlTypes.SqlString); }
    public static explicit operator System.Data.SqlTypes.SqlString (System.Data.SqlTypes.SqlDateTime x) { return default(System.Data.SqlTypes.SqlString); }
    public static explicit operator System.Data.SqlTypes.SqlString (System.Data.SqlTypes.SqlDecimal x) { return default(System.Data.SqlTypes.SqlString); }
    public static explicit operator System.Data.SqlTypes.SqlString (System.Data.SqlTypes.SqlDouble x) { return default(System.Data.SqlTypes.SqlString); }
    public static explicit operator System.Data.SqlTypes.SqlString (System.Data.SqlTypes.SqlGuid x) { return default(System.Data.SqlTypes.SqlString); }
    public static explicit operator System.Data.SqlTypes.SqlString (System.Data.SqlTypes.SqlInt16 x) { return default(System.Data.SqlTypes.SqlString); }
    public static explicit operator System.Data.SqlTypes.SqlString (System.Data.SqlTypes.SqlInt32 x) { return default(System.Data.SqlTypes.SqlString); }
    public static explicit operator System.Data.SqlTypes.SqlString (System.Data.SqlTypes.SqlInt64 x) { return default(System.Data.SqlTypes.SqlString); }
    public static explicit operator System.Data.SqlTypes.SqlString (System.Data.SqlTypes.SqlMoney x) { return default(System.Data.SqlTypes.SqlString); }
    public static explicit operator System.Data.SqlTypes.SqlString (System.Data.SqlTypes.SqlSingle x) { return default(System.Data.SqlTypes.SqlString); }
    public static explicit operator string (System.Data.SqlTypes.SqlString x) { return default(string); }
    public static System.Data.SqlTypes.SqlBoolean operator >(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator >=(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static implicit operator System.Data.SqlTypes.SqlString (string x) { return default(System.Data.SqlTypes.SqlString); }
    public static System.Data.SqlTypes.SqlBoolean operator !=(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public static System.Data.SqlTypes.SqlBoolean operator <=(System.Data.SqlTypes.SqlString x, System.Data.SqlTypes.SqlString y) { return default(System.Data.SqlTypes.SqlBoolean); }
    public System.Data.SqlTypes.SqlBoolean ToSqlBoolean() { return default(System.Data.SqlTypes.SqlBoolean); }
    public System.Data.SqlTypes.SqlByte ToSqlByte() { return default(System.Data.SqlTypes.SqlByte); }
    public System.Data.SqlTypes.SqlDateTime ToSqlDateTime() { return default(System.Data.SqlTypes.SqlDateTime); }
    public System.Data.SqlTypes.SqlDecimal ToSqlDecimal() { return default(System.Data.SqlTypes.SqlDecimal); }
    public System.Data.SqlTypes.SqlDouble ToSqlDouble() { return default(System.Data.SqlTypes.SqlDouble); }
    public System.Data.SqlTypes.SqlGuid ToSqlGuid() { return default(System.Data.SqlTypes.SqlGuid); }
    public System.Data.SqlTypes.SqlInt16 ToSqlInt16() { return default(System.Data.SqlTypes.SqlInt16); }
    public System.Data.SqlTypes.SqlInt32 ToSqlInt32() { return default(System.Data.SqlTypes.SqlInt32); }
    public System.Data.SqlTypes.SqlInt64 ToSqlInt64() { return default(System.Data.SqlTypes.SqlInt64); }
    public System.Data.SqlTypes.SqlMoney ToSqlMoney() { return default(System.Data.SqlTypes.SqlMoney); }
    public System.Data.SqlTypes.SqlSingle ToSqlSingle() { return default(System.Data.SqlTypes.SqlSingle); }
    public override string ToString() { return default(string); }
  }
  public sealed partial class SqlTruncateException : System.Data.SqlTypes.SqlTypeException {
    public SqlTruncateException() { }
    public SqlTruncateException(string message) { }
    public SqlTruncateException(string message, System.Exception e) { }
  }
  public partial class SqlTypeException : System.Exception {
    public SqlTypeException() { }
    public SqlTypeException(string message) { }
    public SqlTypeException(string message, System.Exception e) { }
  }
  public sealed partial class SqlXml : System.Data.SqlTypes.INullable {
    public SqlXml() { }
    public SqlXml(System.IO.Stream value) { }
    public SqlXml(System.Xml.XmlReader value) { }
    public bool IsNull { get { return default(bool); } }
    public static System.Data.SqlTypes.SqlXml Null { get { return default(System.Data.SqlTypes.SqlXml); } }
    public string Value { get { return default(string); } }
    public System.Xml.XmlReader CreateReader() { return default(System.Xml.XmlReader); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Diagnostics.Contracts")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Diagnostics.Contracts")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Diagnostics.Contracts")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Diagnostics.Contracts {
  public static partial class Contract {
    public static event System.EventHandler<System.Diagnostics.Contracts.ContractFailedEventArgs> ContractFailed { add { } remove { } }
    [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Assert(bool condition) { }
    [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Assert(bool condition, string userMessage) { }
    [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Assume(bool condition) { }
    [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Assume(bool condition, string userMessage) { }
    [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
    public static void EndContractBlock() { }
    [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
    public static void Ensures(bool condition) { }
    [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
    public static void Ensures(bool condition, string userMessage) { }
    [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
    public static void EnsuresOnThrow<TException>(bool condition) where TException : System.Exception { }
    [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
    public static void EnsuresOnThrow<TException>(bool condition, string userMessage) where TException : System.Exception { }
    public static bool Exists(int fromInclusive, int toExclusive, System.Predicate<int> predicate) { return default(bool); }
    public static bool Exists<T>(System.Collections.Generic.IEnumerable<T> collection, System.Predicate<T> predicate) { return default(bool); }
    public static bool ForAll(int fromInclusive, int toExclusive, System.Predicate<int> predicate) { return default(bool); }
    public static bool ForAll<T>(System.Collections.Generic.IEnumerable<T> collection, System.Predicate<T> predicate) { return default(bool); }
    [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
    public static void Invariant(bool condition) { }
    [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
    public static void Invariant(bool condition, string userMessage) { }
    public static T OldValue<T>(T value) { return default(T); }
    [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
    public static void Requires(bool condition) { }
    [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
    public static void Requires(bool condition, string userMessage) { }
    public static void Requires<TException>(bool condition) where TException : System.Exception { }
    public static void Requires<TException>(bool condition, string userMessage) where TException : System.Exception { }
    public static T Result<T>() { return default(T); }
    public static T ValueAtReturn<T>(out T value) { value = default(T); return default(T); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64), AllowMultiple=false)]
  [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
  public sealed partial class ContractAbbreviatorAttribute : System.Attribute {
    public ContractAbbreviatorAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64), AllowMultiple=false)]
  [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
  public sealed partial class ContractArgumentValidatorAttribute : System.Attribute {
    public ContractArgumentValidatorAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(5124), AllowMultiple=false, Inherited=false)]
  [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
  [System.Diagnostics.ConditionalAttribute("DEBUG")]
  public sealed partial class ContractClassAttribute : System.Attribute {
    public ContractClassAttribute(System.Type typeContainingContracts) { }
    public System.Type TypeContainingContracts { get { return default(System.Type); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4), AllowMultiple=false, Inherited=false)]
  [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
  public sealed partial class ContractClassForAttribute : System.Attribute {
    public ContractClassForAttribute(System.Type typeContractsAreFor) { }
    public System.Type TypeContractsAreFor { get { return default(System.Type); } }
  }
  public sealed partial class ContractFailedEventArgs : System.EventArgs {
    public ContractFailedEventArgs(System.Diagnostics.Contracts.ContractFailureKind failureKind, string message, string condition, System.Exception originalException) { }
    public string Condition { get { return default(string); } }
    public System.Diagnostics.Contracts.ContractFailureKind FailureKind { get { return default(System.Diagnostics.Contracts.ContractFailureKind); } }
    public bool Handled { get { return default(bool); } }
    public string Message { get { return default(string); } }
    public System.Exception OriginalException { get { return default(System.Exception); } }
    public bool Unwind { get { return default(bool); } }
    [System.Security.SecurityCriticalAttribute]
    public void SetHandled() { }
    [System.Security.SecurityCriticalAttribute]
    public void SetUnwind() { }
  }
  public enum ContractFailureKind {
    Assert = 4,
    Assume = 5,
    Invariant = 3,
    Postcondition = 1,
    PostconditionOnException = 2,
    Precondition = 0,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64), AllowMultiple=false, Inherited=false)]
  [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
  public sealed partial class ContractInvariantMethodAttribute : System.Attribute {
    public ContractInvariantMethodAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(32767), AllowMultiple=true, Inherited=false)]
  [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
  public sealed partial class ContractOptionAttribute : System.Attribute {
    public ContractOptionAttribute(string category, string setting, bool enabled) { }
    public ContractOptionAttribute(string category, string setting, string value) { }
    public string Category { get { return default(string); } }
    public bool Enabled { get { return default(bool); } }
    public string Setting { get { return default(string); } }
    public string Value { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(256))]
  [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
  public sealed partial class ContractPublicPropertyNameAttribute : System.Attribute {
    public ContractPublicPropertyNameAttribute(string name) { }
    public string Name { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1))]
  public sealed partial class ContractReferenceAssemblyAttribute : System.Attribute {
    public ContractReferenceAssemblyAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(192), AllowMultiple=false, Inherited=true)]
  [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
  public sealed partial class ContractRuntimeIgnoredAttribute : System.Attribute {
    public ContractRuntimeIgnoredAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(237))]
  [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
  public sealed partial class ContractVerificationAttribute : System.Attribute {
    public ContractVerificationAttribute(bool value) { }
    public bool Value { get { return default(bool); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(6884), AllowMultiple=false, Inherited=true)]
  [System.Diagnostics.ConditionalAttribute("CONTRACTS_FULL")]
  public sealed partial class PureAttribute : System.Attribute {
    public PureAttribute() { }
  }
}
namespace System.Runtime.CompilerServices {
  public static partial class ContractHelper {
    public static string RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind failureKind, string userMessage, string conditionText, System.Exception innerException) { return default(string); }
    public static void TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind kind, string displayMessage, string userMessage, string conditionText, System.Exception innerException) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Diagnostics.Debug")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Diagnostics.Debug")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Diagnostics.Debug")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Diagnostics {
  public static partial class Debug {
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Assert(bool condition) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Assert(bool condition, string message) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Assert(bool condition, string message, string detailMessage) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Assert(bool condition, string message, string detailMessageFormat, params object[] args) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Fail(string message) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Fail(string message, string detailMessage) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Write(object value) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Write(object value, string category) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Write(string message) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void Write(string message, string category) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void WriteIf(bool condition, object value) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void WriteIf(bool condition, object value, string category) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void WriteIf(bool condition, string message) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void WriteIf(bool condition, string message, string category) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void WriteLine(object value) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void WriteLine(object value, string category) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void WriteLine(string message) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void WriteLine(string format, params object[] args) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void WriteLine(string message, string category) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void WriteLineIf(bool condition, object value) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void WriteLineIf(bool condition, object value, string category) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void WriteLineIf(bool condition, string message) { }
    [System.Diagnostics.ConditionalAttribute("DEBUG")]
    public static void WriteLineIf(bool condition, string message, string category) { }
  }
  public static partial class Debugger {
    public static bool IsAttached { get { return default(bool); } }
    public static void Break() { }
    public static bool Launch() { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), AllowMultiple=false)]
  public sealed partial class DebuggerBrowsableAttribute : System.Attribute {
    public DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState state) { }
    public System.Diagnostics.DebuggerBrowsableState State { get { return default(System.Diagnostics.DebuggerBrowsableState); } }
  }
  public enum DebuggerBrowsableState {
    Collapsed = 2,
    Never = 0,
    RootHidden = 3,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4509), AllowMultiple=true)]
  public sealed partial class DebuggerDisplayAttribute : System.Attribute {
    public DebuggerDisplayAttribute(string value) { }
    public string Name { get { return default(string); } set { } }
    public System.Type Target { get { return default(System.Type); } set { } }
    public string TargetTypeName { get { return default(string); } set { } }
    public string Type { get { return default(string); } set { } }
    public string Value { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(224), Inherited=false)]
  public sealed partial class DebuggerHiddenAttribute : System.Attribute {
    public DebuggerHiddenAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(236), Inherited=false)]
  public sealed partial class DebuggerNonUserCodeAttribute : System.Attribute {
    public DebuggerNonUserCodeAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(108), Inherited=false)]
  public sealed partial class DebuggerStepThroughAttribute : System.Attribute {
    public DebuggerStepThroughAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(13), AllowMultiple=true)]
  public sealed partial class DebuggerTypeProxyAttribute : System.Attribute {
    public DebuggerTypeProxyAttribute(string typeName) { }
    public DebuggerTypeProxyAttribute(System.Type type) { }
    public string ProxyTypeName { get { return default(string); } }
    public System.Type Target { get { return default(System.Type); } set { } }
    public string TargetTypeName { get { return default(string); } set { } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Diagnostics.FileVersionInfo")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Diagnostics.FileVersionInfo")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Diagnostics.FileVersionInfo")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Diagnostics {
  public sealed partial class FileVersionInfo {
    internal FileVersionInfo() { }
    public string Comments { get { return default(string); } }
    public string CompanyName { get { return default(string); } }
    public int FileBuildPart { get { return default(int); } }
    public string FileDescription { get { return default(string); } }
    public int FileMajorPart { get { return default(int); } }
    public int FileMinorPart { get { return default(int); } }
    public string FileName { get { return default(string); } }
    public int FilePrivatePart { get { return default(int); } }
    public string FileVersion { get { return default(string); } }
    public string InternalName { get { return default(string); } }
    public bool IsDebug { get { return default(bool); } }
    public bool IsPatched { get { return default(bool); } }
    public bool IsPreRelease { get { return default(bool); } }
    public bool IsPrivateBuild { get { return default(bool); } }
    public bool IsSpecialBuild { get { return default(bool); } }
    public string Language { get { return default(string); } }
    public string LegalCopyright { get { return default(string); } }
    public string LegalTrademarks { get { return default(string); } }
    public string OriginalFilename { get { return default(string); } }
    public string PrivateBuild { get { return default(string); } }
    public int ProductBuildPart { get { return default(int); } }
    public int ProductMajorPart { get { return default(int); } }
    public int ProductMinorPart { get { return default(int); } }
    public string ProductName { get { return default(string); } }
    public int ProductPrivatePart { get { return default(int); } }
    public string ProductVersion { get { return default(string); } }
    public string SpecialBuild { get { return default(string); } }
    public static System.Diagnostics.FileVersionInfo GetVersionInfo(string fileName) { return default(System.Diagnostics.FileVersionInfo); }
    public override string ToString() { return default(string); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Diagnostics.Process")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Diagnostics.Process")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Diagnostics.Process")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace Microsoft.Win32.SafeHandles {
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class SafeProcessHandle : System.Runtime.InteropServices.SafeHandle {
    public SafeProcessHandle(System.IntPtr existingHandle, bool ownsHandle) : base (default(System.IntPtr), default(bool)) { }
    public override bool IsInvalid { [System.Security.SecurityCriticalAttribute]get { return default(bool); } }
    protected override bool ReleaseHandle() { return default(bool); }
  }
}
namespace System.Diagnostics {
  public partial class DataReceivedEventArgs : System.EventArgs {
    internal DataReceivedEventArgs() { }
    public string Data { get { return default(string); } }
  }
  public delegate void DataReceivedEventHandler(object sender, System.Diagnostics.DataReceivedEventArgs e);
  public partial class Process : System.IDisposable {
    public Process() { }
    public int BasePriority { get { return default(int); } }
    [System.ComponentModel.DefaultValueAttribute(false)]
    public bool EnableRaisingEvents { get { return default(bool); } set { } }
    public int ExitCode { get { return default(int); } }
    public System.DateTime ExitTime { get { return default(System.DateTime); } }
    public bool HasExited { get { return default(bool); } }
    public int Id { get { return default(int); } }
    public string MachineName { get { return default(string); } }
    public System.Diagnostics.ProcessModule MainModule { get { return default(System.Diagnostics.ProcessModule); } }
    public System.IntPtr MaxWorkingSet { get { return default(System.IntPtr); } set { } }
    public System.IntPtr MinWorkingSet { get { return default(System.IntPtr); } set { } }
    public System.Diagnostics.ProcessModuleCollection Modules { get { return default(System.Diagnostics.ProcessModuleCollection); } }
    public long NonpagedSystemMemorySize64 { get { return default(long); } }
    public long PagedMemorySize64 { get { return default(long); } }
    public long PagedSystemMemorySize64 { get { return default(long); } }
    public long PeakPagedMemorySize64 { get { return default(long); } }
    public long PeakVirtualMemorySize64 { get { return default(long); } }
    public long PeakWorkingSet64 { get { return default(long); } }
    public bool PriorityBoostEnabled { get { return default(bool); } set { } }
    public System.Diagnostics.ProcessPriorityClass PriorityClass { get { return default(System.Diagnostics.ProcessPriorityClass); } set { } }
    public long PrivateMemorySize64 { get { return default(long); } }
    public System.TimeSpan PrivilegedProcessorTime { get { return default(System.TimeSpan); } }
    public string ProcessName { get { return default(string); } }
    public System.IntPtr ProcessorAffinity { get { return default(System.IntPtr); } set { } }
    public Microsoft.Win32.SafeHandles.SafeProcessHandle SafeHandle { get { return default(Microsoft.Win32.SafeHandles.SafeProcessHandle); } }
    public int SessionId { get { return default(int); } }
    public System.IO.StreamReader StandardError { get { return default(System.IO.StreamReader); } }
    public System.IO.StreamWriter StandardInput { get { return default(System.IO.StreamWriter); } }
    public System.IO.StreamReader StandardOutput { get { return default(System.IO.StreamReader); } }
    public System.Diagnostics.ProcessStartInfo StartInfo { get { return default(System.Diagnostics.ProcessStartInfo); } set { } }
    public System.DateTime StartTime { get { return default(System.DateTime); } }
    public System.Diagnostics.ProcessThreadCollection Threads { get { return default(System.Diagnostics.ProcessThreadCollection); } }
    public System.TimeSpan TotalProcessorTime { get { return default(System.TimeSpan); } }
    public System.TimeSpan UserProcessorTime { get { return default(System.TimeSpan); } }
    public long VirtualMemorySize64 { get { return default(long); } }
    public long WorkingSet64 { get { return default(long); } }
    public event System.Diagnostics.DataReceivedEventHandler ErrorDataReceived { add { } remove { } }
    public event System.EventHandler Exited { add { } remove { } }
    public event System.Diagnostics.DataReceivedEventHandler OutputDataReceived { add { } remove { } }
    public void BeginErrorReadLine() { }
    public void BeginOutputReadLine() { }
    public void CancelErrorRead() { }
    public void CancelOutputRead() { }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public static void EnterDebugMode() { }
    public static System.Diagnostics.Process GetCurrentProcess() { return default(System.Diagnostics.Process); }
    public static System.Diagnostics.Process GetProcessById(int processId) { return default(System.Diagnostics.Process); }
    public static System.Diagnostics.Process GetProcessById(int processId, string machineName) { return default(System.Diagnostics.Process); }
    public static System.Diagnostics.Process[] GetProcesses() { return default(System.Diagnostics.Process[]); }
    public static System.Diagnostics.Process[] GetProcesses(string machineName) { return default(System.Diagnostics.Process[]); }
    public static System.Diagnostics.Process[] GetProcessesByName(string processName) { return default(System.Diagnostics.Process[]); }
    public static System.Diagnostics.Process[] GetProcessesByName(string processName, string machineName) { return default(System.Diagnostics.Process[]); }
    public void Kill() { }
    public static void LeaveDebugMode() { }
    protected void OnExited() { }
    public void Refresh() { }
    public bool Start() { return default(bool); }
    public static System.Diagnostics.Process Start(System.Diagnostics.ProcessStartInfo startInfo) { return default(System.Diagnostics.Process); }
    public static System.Diagnostics.Process Start(string fileName) { return default(System.Diagnostics.Process); }
    public static System.Diagnostics.Process Start(string fileName, string arguments) { return default(System.Diagnostics.Process); }
    public void WaitForExit() { }
    public bool WaitForExit(int milliseconds) { return default(bool); }
  }
  public partial class ProcessModule {
    internal ProcessModule() { }
    public System.IntPtr BaseAddress { get { return default(System.IntPtr); } }
    public System.IntPtr EntryPointAddress { get { return default(System.IntPtr); } }
    public string FileName { get { return default(string); } }
    public int ModuleMemorySize { get { return default(int); } }
    public string ModuleName { get { return default(string); } }
    public override string ToString() { return default(string); }
  }
  public partial class ProcessModuleCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    protected ProcessModuleCollection() { }
    public ProcessModuleCollection(System.Diagnostics.ProcessModule[] processModules) { }
    public int Count { get { return default(int); } }
    public System.Diagnostics.ProcessModule this[int index] { get { return default(System.Diagnostics.ProcessModule); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public bool Contains(System.Diagnostics.ProcessModule module) { return default(bool); }
    public void CopyTo(System.Diagnostics.ProcessModule[] array, int index) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Diagnostics.ProcessModule module) { return default(int); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
  }
  public enum ProcessPriorityClass {
    AboveNormal = 32768,
    BelowNormal = 16384,
    High = 128,
    Idle = 64,
    Normal = 32,
    RealTime = 256,
  }
  public sealed partial class ProcessStartInfo {
    public ProcessStartInfo() { }
    public ProcessStartInfo(string fileName) { }
    public ProcessStartInfo(string fileName, string arguments) { }
    public string Arguments { get { return default(string); } set { } }
    public bool CreateNoWindow { get { return default(bool); } set { } }
    public string Domain { get { return default(string); } set { } }
    [System.ComponentModel.DefaultValueAttribute(null)]
    public System.Collections.Generic.IDictionary<string, string> Environment { get { return default(System.Collections.Generic.IDictionary<string, string>); } }
    public string FileName { get { return default(string); } set { } }
    public bool LoadUserProfile { get { return default(bool); } set { } }
    public string PasswordInClearText { get { return default(string); } set { } }
    public bool RedirectStandardError { get { return default(bool); } set { } }
    public bool RedirectStandardInput { get { return default(bool); } set { } }
    public bool RedirectStandardOutput { get { return default(bool); } set { } }
    public System.Text.Encoding StandardErrorEncoding { get { return default(System.Text.Encoding); } set { } }
    public System.Text.Encoding StandardOutputEncoding { get { return default(System.Text.Encoding); } set { } }
    public string UserName { get { return default(string); } set { } }
    public bool UseShellExecute { get { return default(bool); } set { } }
    public string WorkingDirectory { get { return default(string); } set { } }
  }
  public partial class ProcessThread {
    internal ProcessThread() { }
    public int BasePriority { get { return default(int); } }
    public int CurrentPriority { get { return default(int); } }
    public int Id { get { return default(int); } }
    public int IdealProcessor { set { } }
    public bool PriorityBoostEnabled { get { return default(bool); } set { } }
    public System.Diagnostics.ThreadPriorityLevel PriorityLevel { get { return default(System.Diagnostics.ThreadPriorityLevel); } set { } }
    public System.TimeSpan PrivilegedProcessorTime { get { return default(System.TimeSpan); } }
    public System.IntPtr ProcessorAffinity { set { } }
    public System.IntPtr StartAddress { get { return default(System.IntPtr); } }
    public System.DateTime StartTime { get { return default(System.DateTime); } }
    public System.Diagnostics.ThreadState ThreadState { get { return default(System.Diagnostics.ThreadState); } }
    public System.TimeSpan TotalProcessorTime { get { return default(System.TimeSpan); } }
    public System.TimeSpan UserProcessorTime { get { return default(System.TimeSpan); } }
    public System.Diagnostics.ThreadWaitReason WaitReason { get { return default(System.Diagnostics.ThreadWaitReason); } }
    public void ResetIdealProcessor() { }
  }
  public partial class ProcessThreadCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    protected ProcessThreadCollection() { }
    public ProcessThreadCollection(System.Diagnostics.ProcessThread[] processThreads) { }
    public int Count { get { return default(int); } }
    public System.Diagnostics.ProcessThread this[int index] { get { return default(System.Diagnostics.ProcessThread); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public int Add(System.Diagnostics.ProcessThread thread) { return default(int); }
    public bool Contains(System.Diagnostics.ProcessThread thread) { return default(bool); }
    public void CopyTo(System.Diagnostics.ProcessThread[] array, int index) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Diagnostics.ProcessThread thread) { return default(int); }
    public void Insert(int index, System.Diagnostics.ProcessThread thread) { }
    public void Remove(System.Diagnostics.ProcessThread thread) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
  }
  public enum ThreadPriorityLevel {
    AboveNormal = 1,
    BelowNormal = -1,
    Highest = 2,
    Idle = -15,
    Lowest = -2,
    Normal = 0,
    TimeCritical = 15,
  }
  public enum ThreadState {
    Initialized = 0,
    Ready = 1,
    Running = 2,
    Standby = 3,
    Terminated = 4,
    Transition = 6,
    Unknown = 7,
    Wait = 5,
  }
  public enum ThreadWaitReason {
    EventPairHigh = 7,
    EventPairLow = 8,
    ExecutionDelay = 4,
    Executive = 0,
    FreePage = 1,
    LpcReceive = 9,
    LpcReply = 10,
    PageIn = 2,
    PageOut = 12,
    Suspended = 5,
    SystemAllocation = 3,
    Unknown = 13,
    UserRequest = 6,
    VirtualMemory = 11,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Diagnostics.StackTrace")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Diagnostics.StackTrace")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Diagnostics.StackTrace")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Diagnostics {
  public sealed partial class StackFrame {
    internal StackFrame() { }
    public const int OFFSET_UNKNOWN = -1;
    public int GetFileColumnNumber() { return default(int); }
    public int GetFileLineNumber() { return default(int); }
    public string GetFileName() { return default(string); }
    public int GetILOffset() { return default(int); }
    public System.Reflection.MethodBase GetMethod() { return default(System.Reflection.MethodBase); }
    public override string ToString() { return default(string); }
  }
  public static partial class StackFrameExtensions {
    public static System.IntPtr GetNativeImageBase(this System.Diagnostics.StackFrame stackFrame) { return default(System.IntPtr); }
    public static System.IntPtr GetNativeIP(this System.Diagnostics.StackFrame stackFrame) { return default(System.IntPtr); }
    public static bool HasILOffset(this System.Diagnostics.StackFrame stackFrame) { return default(bool); }
    public static bool HasMethod(this System.Diagnostics.StackFrame stackFrame) { return default(bool); }
    public static bool HasNativeImage(this System.Diagnostics.StackFrame stackFrame) { return default(bool); }
    public static bool HasSource(this System.Diagnostics.StackFrame stackFrame) { return default(bool); }
  }
  public sealed partial class StackTrace {
    public StackTrace(System.Exception exception, bool needFileInfo) { }
    public System.Diagnostics.StackFrame[] GetFrames() { return default(System.Diagnostics.StackFrame[]); }
    public override string ToString() { return default(string); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Diagnostics.TextWriterTraceListener")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Diagnostics.TextWriterTraceListener")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Diagnostics.TextWriterTraceListener")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Diagnostics {
  public partial class DelimitedListTraceListener : System.Diagnostics.TextWriterTraceListener {
    public DelimitedListTraceListener(System.IO.Stream stream) { }
    public DelimitedListTraceListener(System.IO.Stream stream, string name) { }
    public DelimitedListTraceListener(System.IO.TextWriter writer) { }
    public DelimitedListTraceListener(System.IO.TextWriter writer, string name) { }
    public string Delimiter { get { return default(string); } set { } }
    public override void TraceData(System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data) { }
    public override void TraceData(System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data) { }
    public override void TraceEvent(System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message) { }
    public override void TraceEvent(System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args) { }
  }
  public partial class TextWriterTraceListener : System.Diagnostics.TraceListener {
    public TextWriterTraceListener() { }
    public TextWriterTraceListener(System.IO.Stream stream) { }
    public TextWriterTraceListener(System.IO.Stream stream, string name) { }
    public TextWriterTraceListener(System.IO.TextWriter writer) { }
    public TextWriterTraceListener(System.IO.TextWriter writer, string name) { }
    public System.IO.TextWriter Writer { get { return default(System.IO.TextWriter); } set { } }
    protected override void Dispose(bool disposing) { }
    public override void Flush() { }
    public override void Write(string message) { }
    public override void WriteLine(string message) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Diagnostics.Tools")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Diagnostics.Tools")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Diagnostics.Tools")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.CodeDom.Compiler {
  [System.AttributeUsageAttribute((System.AttributeTargets)(32767), Inherited=false, AllowMultiple=false)]
  public sealed partial class GeneratedCodeAttribute : System.Attribute {
    public GeneratedCodeAttribute(string tool, string version) { }
    public string Tool { get { return default(string); } }
    public string Version { get { return default(string); } }
  }
}
namespace System.Diagnostics.CodeAnalysis {
  [System.AttributeUsageAttribute((System.AttributeTargets)(32767), Inherited=false, AllowMultiple=true)]
  [System.Diagnostics.ConditionalAttribute("CODE_ANALYSIS")]
  public sealed partial class SuppressMessageAttribute : System.Attribute {
    public SuppressMessageAttribute(string category, string checkId) { }
    public string Category { get { return default(string); } }
    public string CheckId { get { return default(string); } }
    public string Justification { get { return default(string); } set { } }
    public string MessageId { get { return default(string); } set { } }
    public string Scope { get { return default(string); } set { } }
    public string Target { get { return default(string); } set { } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Diagnostics.TraceSource")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Diagnostics.TraceSource")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Diagnostics.TraceSource")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Diagnostics {
  public partial class BooleanSwitch : System.Diagnostics.Switch {
    public BooleanSwitch(string displayName, string description) : base (default(string), default(string)) { }
    public BooleanSwitch(string displayName, string description, string defaultSwitchValue) : base (default(string), default(string)) { }
    public bool Enabled { get { return default(bool); } set { } }
    protected override void OnValueChanged() { }
  }
  public partial class DefaultTraceListener : System.Diagnostics.TraceListener {
    public DefaultTraceListener() { }
    public override void Fail(string message) { }
    public override void Fail(string message, string detailMessage) { }
    public override void Write(string message) { }
    public override void WriteLine(string message) { }
  }
  public partial class EventTypeFilter : System.Diagnostics.TraceFilter {
    public EventTypeFilter(System.Diagnostics.SourceLevels level) { }
    public System.Diagnostics.SourceLevels EventType { get { return default(System.Diagnostics.SourceLevels); } set { } }
    public override bool ShouldTrace(System.Diagnostics.TraceEventCache cache, string source, System.Diagnostics.TraceEventType eventType, int id, string formatOrMessage, object[] args, object data1, object[] data) { return default(bool); }
  }
  public partial class SourceFilter : System.Diagnostics.TraceFilter {
    public SourceFilter(string source) { }
    public string Source { get { return default(string); } set { } }
    public override bool ShouldTrace(System.Diagnostics.TraceEventCache cache, string source, System.Diagnostics.TraceEventType eventType, int id, string formatOrMessage, object[] args, object data1, object[] data) { return default(bool); }
  }
  [System.FlagsAttribute]
  public enum SourceLevels {
    All = -1,
    Critical = 1,
    Error = 3,
    Information = 15,
    Off = 0,
    Verbose = 31,
    Warning = 7,
  }
  public partial class SourceSwitch : System.Diagnostics.Switch {
    public SourceSwitch(string name) : base (default(string), default(string)) { }
    public SourceSwitch(string displayName, string defaultSwitchValue) : base (default(string), default(string)) { }
    public System.Diagnostics.SourceLevels Level { get { return default(System.Diagnostics.SourceLevels); } set { } }
    protected override void OnValueChanged() { }
    public bool ShouldTrace(System.Diagnostics.TraceEventType eventType) { return default(bool); }
  }
  public abstract partial class Switch {
    protected Switch(string displayName, string description) { }
    protected Switch(string displayName, string description, string defaultSwitchValue) { }
    public string Description { get { return default(string); } }
    public string DisplayName { get { return default(string); } }
    protected int SwitchSetting { get { return default(int); } set { } }
    protected string Value { get { return default(string); } set { } }
    protected virtual void OnSwitchSettingChanged() { }
    protected virtual void OnValueChanged() { }
  }
  public sealed partial class Trace {
    internal Trace() { }
    public static bool AutoFlush { get { return default(bool); } set { } }
    public static int IndentLevel { get { return default(int); } set { } }
    public static int IndentSize { get { return default(int); } set { } }
    public static System.Diagnostics.TraceListenerCollection Listeners { get { return default(System.Diagnostics.TraceListenerCollection); } }
    public static bool UseGlobalLock { get { return default(bool); } set { } }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void Assert(bool condition) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void Assert(bool condition, string message) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void Assert(bool condition, string message, string detailMessage) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void Close() { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void Fail(string message) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void Fail(string message, string detailMessage) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void Flush() { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void Indent() { }
    public static void Refresh() { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void TraceError(string message) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void TraceError(string format, params object[] args) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void TraceInformation(string message) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void TraceInformation(string format, params object[] args) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void TraceWarning(string message) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void TraceWarning(string format, params object[] args) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void Unindent() { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void Write(object value) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void Write(object value, string category) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void Write(string message) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void Write(string message, string category) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void WriteIf(bool condition, object value) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void WriteIf(bool condition, object value, string category) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void WriteIf(bool condition, string message) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void WriteIf(bool condition, string message, string category) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void WriteLine(object value) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void WriteLine(object value, string category) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void WriteLine(string message) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void WriteLine(string message, string category) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void WriteLineIf(bool condition, object value) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void WriteLineIf(bool condition, object value, string category) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void WriteLineIf(bool condition, string message) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public static void WriteLineIf(bool condition, string message, string category) { }
  }
  public partial class TraceEventCache {
    public TraceEventCache() { }
    public System.DateTime DateTime { get { return default(System.DateTime); } }
    public int ProcessId { get { return default(int); } }
    public string ThreadId { get { return default(string); } }
    public long Timestamp { get { return default(long); } }
  }
  public enum TraceEventType {
    Critical = 1,
    Error = 2,
    Information = 8,
    Verbose = 16,
    Warning = 4,
  }
  public abstract partial class TraceFilter {
    protected TraceFilter() { }
    public abstract bool ShouldTrace(System.Diagnostics.TraceEventCache cache, string source, System.Diagnostics.TraceEventType eventType, int id, string formatOrMessage, object[] args, object data1, object[] data);
  }
  public enum TraceLevel {
    Error = 1,
    Info = 3,
    Off = 0,
    Verbose = 4,
    Warning = 2,
  }
  public abstract partial class TraceListener : System.IDisposable {
    protected TraceListener() { }
    protected TraceListener(string name) { }
    public System.Diagnostics.TraceFilter Filter { get { return default(System.Diagnostics.TraceFilter); } set { } }
    public int IndentLevel { get { return default(int); } set { } }
    public int IndentSize { get { return default(int); } set { } }
    public virtual bool IsThreadSafe { get { return default(bool); } }
    public virtual string Name { get { return default(string); } set { } }
    protected bool NeedIndent { get { return default(bool); } set { } }
    public System.Diagnostics.TraceOptions TraceOutputOptions { get { return default(System.Diagnostics.TraceOptions); } set { } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public virtual void Fail(string message) { }
    public virtual void Fail(string message, string detailMessage) { }
    public virtual void Flush() { }
    public virtual void TraceData(System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data) { }
    public virtual void TraceData(System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data) { }
    public virtual void TraceEvent(System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id) { }
    public virtual void TraceEvent(System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message) { }
    public virtual void TraceEvent(System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args) { }
    public virtual void Write(object o) { }
    public virtual void Write(object o, string category) { }
    public abstract void Write(string message);
    public virtual void Write(string message, string category) { }
    protected virtual void WriteIndent() { }
    public virtual void WriteLine(object o) { }
    public virtual void WriteLine(object o, string category) { }
    public abstract void WriteLine(string message);
    public virtual void WriteLine(string message, string category) { }
  }
  public partial class TraceListenerCollection : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    internal TraceListenerCollection() { }
    public int Count { get { return default(int); } }
    public System.Diagnostics.TraceListener this[int i] { get { return default(System.Diagnostics.TraceListener); } set { } }
    public System.Diagnostics.TraceListener this[string name] { get { return default(System.Diagnostics.TraceListener); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Diagnostics.TraceListener listener) { return default(int); }
    public void AddRange(System.Diagnostics.TraceListener[] value) { }
    public void AddRange(System.Diagnostics.TraceListenerCollection value) { }
    public void Clear() { }
    public bool Contains(System.Diagnostics.TraceListener listener) { return default(bool); }
    public void CopyTo(System.Diagnostics.TraceListener[] listeners, int index) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Diagnostics.TraceListener listener) { return default(int); }
    public void Insert(int index, System.Diagnostics.TraceListener listener) { }
    public void Remove(System.Diagnostics.TraceListener listener) { }
    public void Remove(string name) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
  }
  [System.FlagsAttribute]
  public enum TraceOptions {
    DateTime = 2,
    None = 0,
    ProcessId = 8,
    ThreadId = 16,
    Timestamp = 4,
  }
  public partial class TraceSource {
    public TraceSource(string name) { }
    public TraceSource(string name, System.Diagnostics.SourceLevels defaultLevel) { }
    public System.Diagnostics.TraceListenerCollection Listeners { get { return default(System.Diagnostics.TraceListenerCollection); } }
    public string Name { get { return default(string); } }
    public System.Diagnostics.SourceSwitch Switch { get { return default(System.Diagnostics.SourceSwitch); } set { } }
    public void Close() { }
    public void Flush() { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public void TraceData(System.Diagnostics.TraceEventType eventType, int id, object data) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public void TraceData(System.Diagnostics.TraceEventType eventType, int id, params object[] data) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public void TraceEvent(System.Diagnostics.TraceEventType eventType, int id) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public void TraceEvent(System.Diagnostics.TraceEventType eventType, int id, string message) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public void TraceEvent(System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public void TraceInformation(string message) { }
    [System.Diagnostics.ConditionalAttribute("TRACE")]
    public void TraceInformation(string format, params object[] args) { }
  }
  public partial class TraceSwitch : System.Diagnostics.Switch {
    public TraceSwitch(string displayName, string description) : base (default(string), default(string)) { }
    public TraceSwitch(string displayName, string description, string defaultSwitchValue) : base (default(string), default(string)) { }
    public System.Diagnostics.TraceLevel Level { get { return default(System.Diagnostics.TraceLevel); } set { } }
    public bool TraceError { get { return default(bool); } }
    public bool TraceInfo { get { return default(bool); } }
    public bool TraceVerbose { get { return default(bool); } }
    public bool TraceWarning { get { return default(bool); } }
    protected override void OnSwitchSettingChanged() { }
    protected override void OnValueChanged() { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Diagnostics.Tracing")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Diagnostics.Tracing")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Diagnostics.Tracing")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Diagnostics.Tracing {
  [System.FlagsAttribute]
  public enum EventActivityOptions {
    Detachable = 8,
    Disable = 2,
    None = 0,
    Recursive = 4,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64))]
  public sealed partial class EventAttribute : System.Attribute {
    public EventAttribute(int eventId) { }
    public System.Diagnostics.Tracing.EventActivityOptions ActivityOptions { get { return default(System.Diagnostics.Tracing.EventActivityOptions); } set { } }
    public System.Diagnostics.Tracing.EventChannel Channel { get { return default(System.Diagnostics.Tracing.EventChannel); } set { } }
    public int EventId { get { return default(int); } }
    public System.Diagnostics.Tracing.EventKeywords Keywords { get { return default(System.Diagnostics.Tracing.EventKeywords); } set { } }
    public System.Diagnostics.Tracing.EventLevel Level { get { return default(System.Diagnostics.Tracing.EventLevel); } set { } }
    public string Message { get { return default(string); } set { } }
    public System.Diagnostics.Tracing.EventOpcode Opcode { get { return default(System.Diagnostics.Tracing.EventOpcode); } set { } }
    public System.Diagnostics.Tracing.EventTags Tags { get { return default(System.Diagnostics.Tracing.EventTags); } set { } }
    public System.Diagnostics.Tracing.EventTask Task { get { return default(System.Diagnostics.Tracing.EventTask); } set { } }
    public byte Version { get { return default(byte); } set { } }
  }
  public enum EventChannel : byte {
    Admin = (byte)16,
    Analytic = (byte)18,
    Debug = (byte)19,
    None = (byte)0,
    Operational = (byte)17,
  }
  public enum EventCommand {
    Disable = -3,
    Enable = -2,
    SendManifest = -1,
    Update = 0,
  }
  public partial class EventCommandEventArgs : System.EventArgs {
    internal EventCommandEventArgs() { }
    public System.Collections.Generic.IDictionary<string, string> Arguments { get { return default(System.Collections.Generic.IDictionary<string, string>); } }
    public System.Diagnostics.Tracing.EventCommand Command { get { return default(System.Diagnostics.Tracing.EventCommand); } }
    public bool DisableEvent(int eventId) { return default(bool); }
    public bool EnableEvent(int eventId) { return default(bool); }
  }
  public partial class EventCounter {
    public EventCounter(string name, System.Diagnostics.Tracing.EventSource eventSource) { }
    public void WriteMetric(float value) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(12), Inherited=false)]
  public partial class EventDataAttribute : System.Attribute {
    public EventDataAttribute() { }
    public string Name { get { return default(string); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(128))]
  public partial class EventFieldAttribute : System.Attribute {
    public EventFieldAttribute() { }
    public System.Diagnostics.Tracing.EventFieldFormat Format { get { return default(System.Diagnostics.Tracing.EventFieldFormat); } set { } }
    public System.Diagnostics.Tracing.EventFieldTags Tags { get { return default(System.Diagnostics.Tracing.EventFieldTags); } set { } }
  }
  public enum EventFieldFormat {
    Boolean = 3,
    Default = 0,
    Hexadecimal = 4,
    HResult = 15,
    Json = 12,
    String = 2,
    Xml = 11,
  }
  [System.FlagsAttribute]
  public enum EventFieldTags {
    None = 0,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(128))]
  public partial class EventIgnoreAttribute : System.Attribute {
    public EventIgnoreAttribute() { }
  }
  [System.FlagsAttribute]
  public enum EventKeywords : long {
    All = (long)-1,
    AuditFailure = (long)4503599627370496,
    AuditSuccess = (long)9007199254740992,
    CorrelationHint = (long)4503599627370496,
    EventLogClassic = (long)36028797018963968,
    None = (long)0,
    Sqm = (long)2251799813685248,
    WdiContext = (long)562949953421312,
    WdiDiagnostic = (long)1125899906842624,
  }
  public enum EventLevel {
    Critical = 1,
    Error = 2,
    Informational = 4,
    LogAlways = 0,
    Verbose = 5,
    Warning = 3,
  }
  public abstract partial class EventListener : System.IDisposable {
    protected EventListener() { }
    public void DisableEvents(System.Diagnostics.Tracing.EventSource eventSource) { }
    public virtual void Dispose() { }
    public void EnableEvents(System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventLevel level) { }
    public void EnableEvents(System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords matchAnyKeyword) { }
    public void EnableEvents(System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords matchAnyKeyword, System.Collections.Generic.IDictionary<string, string> arguments) { }
    protected static int EventSourceIndex(System.Diagnostics.Tracing.EventSource eventSource) { return default(int); }
    protected internal virtual void OnEventSourceCreated(System.Diagnostics.Tracing.EventSource eventSource) { }
    protected internal abstract void OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs eventData);
  }
  [System.FlagsAttribute]
  public enum EventManifestOptions {
    AllCultures = 2,
    AllowEventSourceOverride = 8,
    None = 0,
    OnlyIfNeededForRegistration = 4,
    Strict = 1,
  }
  public enum EventOpcode {
    DataCollectionStart = 3,
    DataCollectionStop = 4,
    Extension = 5,
    Info = 0,
    Receive = 240,
    Reply = 6,
    Resume = 7,
    Send = 9,
    Start = 1,
    Stop = 2,
    Suspend = 8,
  }
  public partial class EventSource : System.IDisposable {
    protected EventSource() { }
    protected EventSource(bool throwOnEventWriteErrors) { }
    protected EventSource(System.Diagnostics.Tracing.EventSourceSettings settings) { }
    protected EventSource(System.Diagnostics.Tracing.EventSourceSettings settings, params string[] traits) { }
    public EventSource(string eventSourceName) { }
    public EventSource(string eventSourceName, System.Diagnostics.Tracing.EventSourceSettings config) { }
    public EventSource(string eventSourceName, System.Diagnostics.Tracing.EventSourceSettings config, params string[] traits) { }
    public System.Exception ConstructionException { get { return default(System.Exception); } }
    public static System.Guid CurrentThreadActivityId { [System.Security.SecuritySafeCriticalAttribute]get { return default(System.Guid); } }
    public System.Guid Guid { get { return default(System.Guid); } }
    public string Name { get { return default(string); } }
    public System.Diagnostics.Tracing.EventSourceSettings Settings { get { return default(System.Diagnostics.Tracing.EventSourceSettings); } }
    public event System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs> EventCommandExecuted { add { } remove { } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    ~EventSource() { }
    public static string GenerateManifest(System.Type eventSourceType, string assemblyPathToIncludeInManifest) { return default(string); }
    public static string GenerateManifest(System.Type eventSourceType, string assemblyPathToIncludeInManifest, System.Diagnostics.Tracing.EventManifestOptions flags) { return default(string); }
    public static System.Guid GetGuid(System.Type eventSourceType) { return default(System.Guid); }
    public static string GetName(System.Type eventSourceType) { return default(string); }
    public static System.Collections.Generic.IEnumerable<System.Diagnostics.Tracing.EventSource> GetSources() { return default(System.Collections.Generic.IEnumerable<System.Diagnostics.Tracing.EventSource>); }
    public string GetTrait(string key) { return default(string); }
    public bool IsEnabled() { return default(bool); }
    public bool IsEnabled(System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords) { return default(bool); }
    public bool IsEnabled(System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords, System.Diagnostics.Tracing.EventChannel channel) { return default(bool); }
    protected virtual void OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs command) { }
    public static void SendCommand(System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventCommand command, System.Collections.Generic.IDictionary<string, string> commandArguments) { }
    public static void SetCurrentThreadActivityId(System.Guid activityId) { }
    public static void SetCurrentThreadActivityId(System.Guid activityId, out System.Guid oldActivityThatWillContinue) { oldActivityThatWillContinue = default(System.Guid); }
    public override string ToString() { return default(string); }
    public void Write(string eventName) { }
    public void Write(string eventName, System.Diagnostics.Tracing.EventSourceOptions options) { }
    public void Write<T>(string eventName, T data) { }
    public void Write<T>(string eventName, System.Diagnostics.Tracing.EventSourceOptions options, T data) { }
    public void Write<T>(string eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, ref T data) { }
    public void Write<T>(string eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, ref System.Guid activityId, ref System.Guid relatedActivityId, ref T data) { }
    protected void WriteEvent(int eventId) { }
    protected void WriteEvent(int eventId, byte[] arg1) { }
    protected void WriteEvent(int eventId, int arg1) { }
    protected void WriteEvent(int eventId, int arg1, int arg2) { }
    protected void WriteEvent(int eventId, int arg1, int arg2, int arg3) { }
    protected void WriteEvent(int eventId, int arg1, string arg2) { }
    protected void WriteEvent(int eventId, long arg1) { }
    protected void WriteEvent(int eventId, long arg1, byte[] arg2) { }
    protected void WriteEvent(int eventId, long arg1, long arg2) { }
    protected void WriteEvent(int eventId, long arg1, long arg2, long arg3) { }
    protected void WriteEvent(int eventId, long arg1, string arg2) { }
    protected void WriteEvent(int eventId, params object[] args) { }
    protected void WriteEvent(int eventId, string arg1) { }
    protected void WriteEvent(int eventId, string arg1, int arg2) { }
    protected void WriteEvent(int eventId, string arg1, int arg2, int arg3) { }
    protected void WriteEvent(int eventId, string arg1, long arg2) { }
    protected void WriteEvent(int eventId, string arg1, string arg2) { }
    protected void WriteEvent(int eventId, string arg1, string arg2, string arg3) { }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    protected unsafe void WriteEventCore(int eventId, int eventDataCount, System.Diagnostics.Tracing.EventSource.EventData* data) { }
    protected void WriteEventWithRelatedActivityId(int eventId, System.Guid relatedActivityId, params object[] args) { }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    protected unsafe void WriteEventWithRelatedActivityIdCore(int eventId, System.Guid* relatedActivityId, int eventDataCount, System.Diagnostics.Tracing.EventSource.EventData* data) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    protected internal partial struct EventData {
      public System.IntPtr DataPointer { get { return default(System.IntPtr); } set { } }
      public int Size { get { return default(int); } set { } }
    }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4))]
  public sealed partial class EventSourceAttribute : System.Attribute {
    public EventSourceAttribute() { }
    public string Guid { get { return default(string); } set { } }
    public string LocalizationResources { get { return default(string); } set { } }
    public string Name { get { return default(string); } set { } }
  }
  public partial class EventSourceException : System.Exception {
    public EventSourceException() { }
    public EventSourceException(string message) { }
    public EventSourceException(string message, System.Exception innerException) { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct EventSourceOptions {
    public System.Diagnostics.Tracing.EventActivityOptions ActivityOptions { get { return default(System.Diagnostics.Tracing.EventActivityOptions); } set { } }
    public System.Diagnostics.Tracing.EventKeywords Keywords { get { return default(System.Diagnostics.Tracing.EventKeywords); } set { } }
    public System.Diagnostics.Tracing.EventLevel Level { get { return default(System.Diagnostics.Tracing.EventLevel); } set { } }
    public System.Diagnostics.Tracing.EventOpcode Opcode { get { return default(System.Diagnostics.Tracing.EventOpcode); } set { } }
    public System.Diagnostics.Tracing.EventTags Tags { get { return default(System.Diagnostics.Tracing.EventTags); } set { } }
  }
  [System.FlagsAttribute]
  public enum EventSourceSettings {
    Default = 0,
    EtwManifestEventFormat = 4,
    EtwSelfDescribingEventFormat = 8,
    ThrowOnEventWriteErrors = 1,
  }
  [System.FlagsAttribute]
  public enum EventTags {
    None = 0,
  }
  public enum EventTask {
    None = 0,
  }
  public partial class EventWrittenEventArgs : System.EventArgs {
    internal EventWrittenEventArgs() { }
    public System.Guid ActivityId { [System.Security.SecurityCriticalAttribute]get { return default(System.Guid); } }
    public System.Diagnostics.Tracing.EventChannel Channel { get { return default(System.Diagnostics.Tracing.EventChannel); } }
    public int EventId { get { return default(int); } }
    public string EventName { get { return default(string); } }
    public System.Diagnostics.Tracing.EventSource EventSource { get { return default(System.Diagnostics.Tracing.EventSource); } }
    public System.Diagnostics.Tracing.EventKeywords Keywords { get { return default(System.Diagnostics.Tracing.EventKeywords); } }
    public System.Diagnostics.Tracing.EventLevel Level { get { return default(System.Diagnostics.Tracing.EventLevel); } }
    public string Message { get { return default(string); } }
    public System.Diagnostics.Tracing.EventOpcode Opcode { get { return default(System.Diagnostics.Tracing.EventOpcode); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<object> Payload { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<object>); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<string> PayloadNames { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<string>); } }
    public System.Guid RelatedActivityId { [System.Security.SecurityCriticalAttribute]get { return default(System.Guid); } }
    public System.Diagnostics.Tracing.EventTags Tags { get { return default(System.Diagnostics.Tracing.EventTags); } }
    public System.Diagnostics.Tracing.EventTask Task { get { return default(System.Diagnostics.Tracing.EventTask); } }
    public byte Version { get { return default(byte); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64))]
  public sealed partial class NonEventAttribute : System.Attribute {
    public NonEventAttribute() { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Dynamic.Runtime")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Dynamic.Runtime")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Dynamic.Runtime")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Dynamic {
  public abstract partial class BinaryOperationBinder : System.Dynamic.DynamicMetaObjectBinder {
    protected BinaryOperationBinder(System.Linq.Expressions.ExpressionType operation) { }
    public System.Linq.Expressions.ExpressionType Operation { get { return default(System.Linq.Expressions.ExpressionType); } }
    public sealed override System.Type ReturnType { get { return default(System.Type); } }
    public sealed override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public System.Dynamic.DynamicMetaObject FallbackBinaryOperation(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject arg) { return default(System.Dynamic.DynamicMetaObject); }
    public abstract System.Dynamic.DynamicMetaObject FallbackBinaryOperation(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject arg, System.Dynamic.DynamicMetaObject errorSuggestion);
  }
  public abstract partial class BindingRestrictions {
    internal BindingRestrictions() { }
    public static readonly System.Dynamic.BindingRestrictions Empty;
    public static System.Dynamic.BindingRestrictions Combine(System.Collections.Generic.IList<System.Dynamic.DynamicMetaObject> contributingObjects) { return default(System.Dynamic.BindingRestrictions); }
    public static System.Dynamic.BindingRestrictions GetExpressionRestriction(System.Linq.Expressions.Expression expression) { return default(System.Dynamic.BindingRestrictions); }
    public static System.Dynamic.BindingRestrictions GetInstanceRestriction(System.Linq.Expressions.Expression expression, object instance) { return default(System.Dynamic.BindingRestrictions); }
    public static System.Dynamic.BindingRestrictions GetTypeRestriction(System.Linq.Expressions.Expression expression, System.Type type) { return default(System.Dynamic.BindingRestrictions); }
    public System.Dynamic.BindingRestrictions Merge(System.Dynamic.BindingRestrictions restrictions) { return default(System.Dynamic.BindingRestrictions); }
    public System.Linq.Expressions.Expression ToExpression() { return default(System.Linq.Expressions.Expression); }
  }
  public sealed partial class CallInfo {
    public CallInfo(int argCount, System.Collections.Generic.IEnumerable<string> argNames) { }
    public CallInfo(int argCount, params string[] argNames) { }
    public int ArgumentCount { get { return default(int); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<string> ArgumentNames { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<string>); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public abstract partial class ConvertBinder : System.Dynamic.DynamicMetaObjectBinder {
    protected ConvertBinder(System.Type type, bool @explicit) { }
    public bool Explicit { get { return default(bool); } }
    public sealed override System.Type ReturnType { get { return default(System.Type); } }
    public System.Type Type { get { return default(System.Type); } }
    public sealed override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public System.Dynamic.DynamicMetaObject FallbackConvert(System.Dynamic.DynamicMetaObject target) { return default(System.Dynamic.DynamicMetaObject); }
    public abstract System.Dynamic.DynamicMetaObject FallbackConvert(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject errorSuggestion);
  }
  public abstract partial class CreateInstanceBinder : System.Dynamic.DynamicMetaObjectBinder {
    protected CreateInstanceBinder(System.Dynamic.CallInfo callInfo) { }
    public System.Dynamic.CallInfo CallInfo { get { return default(System.Dynamic.CallInfo); } }
    public sealed override System.Type ReturnType { get { return default(System.Type); } }
    public sealed override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public System.Dynamic.DynamicMetaObject FallbackCreateInstance(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public abstract System.Dynamic.DynamicMetaObject FallbackCreateInstance(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args, System.Dynamic.DynamicMetaObject errorSuggestion);
  }
  public abstract partial class DeleteIndexBinder : System.Dynamic.DynamicMetaObjectBinder {
    protected DeleteIndexBinder(System.Dynamic.CallInfo callInfo) { }
    public System.Dynamic.CallInfo CallInfo { get { return default(System.Dynamic.CallInfo); } }
    public sealed override System.Type ReturnType { get { return default(System.Type); } }
    public sealed override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public System.Dynamic.DynamicMetaObject FallbackDeleteIndex(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] indexes) { return default(System.Dynamic.DynamicMetaObject); }
    public abstract System.Dynamic.DynamicMetaObject FallbackDeleteIndex(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] indexes, System.Dynamic.DynamicMetaObject errorSuggestion);
  }
  public abstract partial class DeleteMemberBinder : System.Dynamic.DynamicMetaObjectBinder {
    protected DeleteMemberBinder(string name, bool ignoreCase) { }
    public bool IgnoreCase { get { return default(bool); } }
    public string Name { get { return default(string); } }
    public sealed override System.Type ReturnType { get { return default(System.Type); } }
    public sealed override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public System.Dynamic.DynamicMetaObject FallbackDeleteMember(System.Dynamic.DynamicMetaObject target) { return default(System.Dynamic.DynamicMetaObject); }
    public abstract System.Dynamic.DynamicMetaObject FallbackDeleteMember(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject errorSuggestion);
  }
  public partial class DynamicMetaObject {
    public static readonly System.Dynamic.DynamicMetaObject[] EmptyMetaObjects;
    public DynamicMetaObject(System.Linq.Expressions.Expression expression, System.Dynamic.BindingRestrictions restrictions) { }
    public DynamicMetaObject(System.Linq.Expressions.Expression expression, System.Dynamic.BindingRestrictions restrictions, object value) { }
    public System.Linq.Expressions.Expression Expression { get { return default(System.Linq.Expressions.Expression); } }
    public bool HasValue { get { return default(bool); } }
    public System.Type LimitType { get { return default(System.Type); } }
    public System.Dynamic.BindingRestrictions Restrictions { get { return default(System.Dynamic.BindingRestrictions); } }
    public System.Type RuntimeType { get { return default(System.Type); } }
    public object Value { get { return default(object); } }
    public virtual System.Dynamic.DynamicMetaObject BindBinaryOperation(System.Dynamic.BinaryOperationBinder binder, System.Dynamic.DynamicMetaObject arg) { return default(System.Dynamic.DynamicMetaObject); }
    public virtual System.Dynamic.DynamicMetaObject BindConvert(System.Dynamic.ConvertBinder binder) { return default(System.Dynamic.DynamicMetaObject); }
    public virtual System.Dynamic.DynamicMetaObject BindCreateInstance(System.Dynamic.CreateInstanceBinder binder, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public virtual System.Dynamic.DynamicMetaObject BindDeleteIndex(System.Dynamic.DeleteIndexBinder binder, System.Dynamic.DynamicMetaObject[] indexes) { return default(System.Dynamic.DynamicMetaObject); }
    public virtual System.Dynamic.DynamicMetaObject BindDeleteMember(System.Dynamic.DeleteMemberBinder binder) { return default(System.Dynamic.DynamicMetaObject); }
    public virtual System.Dynamic.DynamicMetaObject BindGetIndex(System.Dynamic.GetIndexBinder binder, System.Dynamic.DynamicMetaObject[] indexes) { return default(System.Dynamic.DynamicMetaObject); }
    public virtual System.Dynamic.DynamicMetaObject BindGetMember(System.Dynamic.GetMemberBinder binder) { return default(System.Dynamic.DynamicMetaObject); }
    public virtual System.Dynamic.DynamicMetaObject BindInvoke(System.Dynamic.InvokeBinder binder, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public virtual System.Dynamic.DynamicMetaObject BindInvokeMember(System.Dynamic.InvokeMemberBinder binder, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public virtual System.Dynamic.DynamicMetaObject BindSetIndex(System.Dynamic.SetIndexBinder binder, System.Dynamic.DynamicMetaObject[] indexes, System.Dynamic.DynamicMetaObject value) { return default(System.Dynamic.DynamicMetaObject); }
    public virtual System.Dynamic.DynamicMetaObject BindSetMember(System.Dynamic.SetMemberBinder binder, System.Dynamic.DynamicMetaObject value) { return default(System.Dynamic.DynamicMetaObject); }
    public virtual System.Dynamic.DynamicMetaObject BindUnaryOperation(System.Dynamic.UnaryOperationBinder binder) { return default(System.Dynamic.DynamicMetaObject); }
    public static System.Dynamic.DynamicMetaObject Create(object value, System.Linq.Expressions.Expression expression) { return default(System.Dynamic.DynamicMetaObject); }
    public virtual System.Collections.Generic.IEnumerable<string> GetDynamicMemberNames() { return default(System.Collections.Generic.IEnumerable<string>); }
  }
  public abstract partial class DynamicMetaObjectBinder : System.Runtime.CompilerServices.CallSiteBinder {
    protected DynamicMetaObjectBinder() { }
    public virtual System.Type ReturnType { get { return default(System.Type); } }
    public abstract System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args);
    public sealed override System.Linq.Expressions.Expression Bind(object[] args, System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> parameters, System.Linq.Expressions.LabelTarget returnLabel) { return default(System.Linq.Expressions.Expression); }
    public System.Dynamic.DynamicMetaObject Defer(System.Dynamic.DynamicMetaObject target, params System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public System.Dynamic.DynamicMetaObject Defer(params System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public System.Linq.Expressions.Expression GetUpdateExpression(System.Type type) { return default(System.Linq.Expressions.Expression); }
  }
  public partial class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider {
    protected DynamicObject() { }
    public virtual System.Collections.Generic.IEnumerable<string> GetDynamicMemberNames() { return default(System.Collections.Generic.IEnumerable<string>); }
    public virtual System.Dynamic.DynamicMetaObject GetMetaObject(System.Linq.Expressions.Expression parameter) { return default(System.Dynamic.DynamicMetaObject); }
    public virtual bool TryBinaryOperation(System.Dynamic.BinaryOperationBinder binder, object arg, out object result) { result = default(object); return default(bool); }
    public virtual bool TryConvert(System.Dynamic.ConvertBinder binder, out object result) { result = default(object); return default(bool); }
    public virtual bool TryCreateInstance(System.Dynamic.CreateInstanceBinder binder, object[] args, out object result) { result = default(object); return default(bool); }
    public virtual bool TryDeleteIndex(System.Dynamic.DeleteIndexBinder binder, object[] indexes) { return default(bool); }
    public virtual bool TryDeleteMember(System.Dynamic.DeleteMemberBinder binder) { return default(bool); }
    public virtual bool TryGetIndex(System.Dynamic.GetIndexBinder binder, object[] indexes, out object result) { result = default(object); return default(bool); }
    public virtual bool TryGetMember(System.Dynamic.GetMemberBinder binder, out object result) { result = default(object); return default(bool); }
    public virtual bool TryInvoke(System.Dynamic.InvokeBinder binder, object[] args, out object result) { result = default(object); return default(bool); }
    public virtual bool TryInvokeMember(System.Dynamic.InvokeMemberBinder binder, object[] args, out object result) { result = default(object); return default(bool); }
    public virtual bool TrySetIndex(System.Dynamic.SetIndexBinder binder, object[] indexes, object value) { return default(bool); }
    public virtual bool TrySetMember(System.Dynamic.SetMemberBinder binder, object value) { return default(bool); }
    public virtual bool TryUnaryOperation(System.Dynamic.UnaryOperationBinder binder, out object result) { result = default(object); return default(bool); }
  }
  public sealed partial class ExpandoObject : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>, System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>>, System.Collections.IEnumerable, System.ComponentModel.INotifyPropertyChanged, System.Dynamic.IDynamicMetaObjectProvider {
    public ExpandoObject() { }
    int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count { get { return default(int); } }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get { return default(bool); } }
    object System.Collections.Generic.IDictionary<System.String,System.Object>.this[string key] { get { return default(object); } set { } }
    System.Collections.Generic.ICollection<string> System.Collections.Generic.IDictionary<System.String,System.Object>.Keys { get { return default(System.Collections.Generic.ICollection<string>); } }
    System.Collections.Generic.ICollection<object> System.Collections.Generic.IDictionary<System.String,System.Object>.Values { get { return default(System.Collections.Generic.ICollection<object>); } }
    event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(System.Collections.Generic.KeyValuePair<string, object> item) { }
    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Clear() { }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(System.Collections.Generic.KeyValuePair<string, object> item) { return default(bool); }
    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<string, object>[] array, int arrayIndex) { }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(System.Collections.Generic.KeyValuePair<string, object> item) { return default(bool); }
    void System.Collections.Generic.IDictionary<System.String,System.Object>.Add(string key, object value) { }
    bool System.Collections.Generic.IDictionary<System.String,System.Object>.ContainsKey(string key) { return default(bool); }
    bool System.Collections.Generic.IDictionary<System.String,System.Object>.Remove(string key) { return default(bool); }
    bool System.Collections.Generic.IDictionary<System.String,System.Object>.TryGetValue(string key, out object value) { value = default(object); return default(bool); }
    System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>>); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    System.Dynamic.DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression parameter) { return default(System.Dynamic.DynamicMetaObject); }
  }
  public abstract partial class GetIndexBinder : System.Dynamic.DynamicMetaObjectBinder {
    protected GetIndexBinder(System.Dynamic.CallInfo callInfo) { }
    public System.Dynamic.CallInfo CallInfo { get { return default(System.Dynamic.CallInfo); } }
    public sealed override System.Type ReturnType { get { return default(System.Type); } }
    public sealed override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public System.Dynamic.DynamicMetaObject FallbackGetIndex(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] indexes) { return default(System.Dynamic.DynamicMetaObject); }
    public abstract System.Dynamic.DynamicMetaObject FallbackGetIndex(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] indexes, System.Dynamic.DynamicMetaObject errorSuggestion);
  }
  public abstract partial class GetMemberBinder : System.Dynamic.DynamicMetaObjectBinder {
    protected GetMemberBinder(string name, bool ignoreCase) { }
    public bool IgnoreCase { get { return default(bool); } }
    public string Name { get { return default(string); } }
    public sealed override System.Type ReturnType { get { return default(System.Type); } }
    public sealed override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public System.Dynamic.DynamicMetaObject FallbackGetMember(System.Dynamic.DynamicMetaObject target) { return default(System.Dynamic.DynamicMetaObject); }
    public abstract System.Dynamic.DynamicMetaObject FallbackGetMember(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject errorSuggestion);
  }
  public partial interface IDynamicMetaObjectProvider {
    System.Dynamic.DynamicMetaObject GetMetaObject(System.Linq.Expressions.Expression parameter);
  }
  public partial interface IInvokeOnGetBinder {
    bool InvokeOnGet { get; }
  }
  public abstract partial class InvokeBinder : System.Dynamic.DynamicMetaObjectBinder {
    protected InvokeBinder(System.Dynamic.CallInfo callInfo) { }
    public System.Dynamic.CallInfo CallInfo { get { return default(System.Dynamic.CallInfo); } }
    public sealed override System.Type ReturnType { get { return default(System.Type); } }
    public sealed override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public System.Dynamic.DynamicMetaObject FallbackInvoke(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public abstract System.Dynamic.DynamicMetaObject FallbackInvoke(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args, System.Dynamic.DynamicMetaObject errorSuggestion);
  }
  public abstract partial class InvokeMemberBinder : System.Dynamic.DynamicMetaObjectBinder {
    protected InvokeMemberBinder(string name, bool ignoreCase, System.Dynamic.CallInfo callInfo) { }
    public System.Dynamic.CallInfo CallInfo { get { return default(System.Dynamic.CallInfo); } }
    public bool IgnoreCase { get { return default(bool); } }
    public string Name { get { return default(string); } }
    public sealed override System.Type ReturnType { get { return default(System.Type); } }
    public sealed override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public abstract System.Dynamic.DynamicMetaObject FallbackInvoke(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args, System.Dynamic.DynamicMetaObject errorSuggestion);
    public System.Dynamic.DynamicMetaObject FallbackInvokeMember(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public abstract System.Dynamic.DynamicMetaObject FallbackInvokeMember(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args, System.Dynamic.DynamicMetaObject errorSuggestion);
  }
  public abstract partial class SetIndexBinder : System.Dynamic.DynamicMetaObjectBinder {
    protected SetIndexBinder(System.Dynamic.CallInfo callInfo) { }
    public System.Dynamic.CallInfo CallInfo { get { return default(System.Dynamic.CallInfo); } }
    public sealed override System.Type ReturnType { get { return default(System.Type); } }
    public sealed override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public System.Dynamic.DynamicMetaObject FallbackSetIndex(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] indexes, System.Dynamic.DynamicMetaObject value) { return default(System.Dynamic.DynamicMetaObject); }
    public abstract System.Dynamic.DynamicMetaObject FallbackSetIndex(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] indexes, System.Dynamic.DynamicMetaObject value, System.Dynamic.DynamicMetaObject errorSuggestion);
  }
  public abstract partial class SetMemberBinder : System.Dynamic.DynamicMetaObjectBinder {
    protected SetMemberBinder(string name, bool ignoreCase) { }
    public bool IgnoreCase { get { return default(bool); } }
    public string Name { get { return default(string); } }
    public sealed override System.Type ReturnType { get { return default(System.Type); } }
    public sealed override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public System.Dynamic.DynamicMetaObject FallbackSetMember(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject value) { return default(System.Dynamic.DynamicMetaObject); }
    public abstract System.Dynamic.DynamicMetaObject FallbackSetMember(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject value, System.Dynamic.DynamicMetaObject errorSuggestion);
  }
  public abstract partial class UnaryOperationBinder : System.Dynamic.DynamicMetaObjectBinder {
    protected UnaryOperationBinder(System.Linq.Expressions.ExpressionType operation) { }
    public System.Linq.Expressions.ExpressionType Operation { get { return default(System.Linq.Expressions.ExpressionType); } }
    public sealed override System.Type ReturnType { get { return default(System.Type); } }
    public sealed override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) { return default(System.Dynamic.DynamicMetaObject); }
    public System.Dynamic.DynamicMetaObject FallbackUnaryOperation(System.Dynamic.DynamicMetaObject target) { return default(System.Dynamic.DynamicMetaObject); }
    public abstract System.Dynamic.DynamicMetaObject FallbackUnaryOperation(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject errorSuggestion);
  }
}
namespace System.Linq.Expressions {
  public partial class DynamicExpression : System.Linq.Expressions.Expression, System.Linq.Expressions.IArgumentProvider, System.Linq.Expressions.IDynamicExpression {
    internal DynamicExpression() { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>); } }
    public System.Runtime.CompilerServices.CallSiteBinder Binder { get { return default(System.Runtime.CompilerServices.CallSiteBinder); } }
    public System.Type DelegateType { get { return default(System.Type); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    int System.Linq.Expressions.IArgumentProvider.ArgumentCount { get { return default(int); } }
    public override System.Type Type { get { return default(System.Type); } }
    protected override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.DynamicExpression); }
    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Linq.Expressions.Expression arg0) { return default(System.Linq.Expressions.DynamicExpression); }
    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1) { return default(System.Linq.Expressions.DynamicExpression); }
    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2) { return default(System.Linq.Expressions.DynamicExpression); }
    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3) { return default(System.Linq.Expressions.DynamicExpression); }
    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, params System.Linq.Expressions.Expression[] arguments) { return default(System.Linq.Expressions.DynamicExpression); }
    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.DynamicExpression); }
    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0) { return default(System.Linq.Expressions.DynamicExpression); }
    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1) { return default(System.Linq.Expressions.DynamicExpression); }
    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2) { return default(System.Linq.Expressions.DynamicExpression); }
    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3) { return default(System.Linq.Expressions.DynamicExpression); }
    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, params System.Linq.Expressions.Expression[] arguments) { return default(System.Linq.Expressions.DynamicExpression); }
    System.Linq.Expressions.Expression System.Linq.Expressions.IArgumentProvider.GetArgument(int index) { return default(System.Linq.Expressions.Expression); }
    object System.Linq.Expressions.IDynamicExpression.CreateCallSite() { return default(object); }
    System.Linq.Expressions.Expression System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[] args) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.DynamicExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.DynamicExpression); }
  }
  public abstract partial class DynamicExpressionVisitor : System.Linq.Expressions.ExpressionVisitor {
    protected DynamicExpressionVisitor() { }
    protected virtual System.Linq.Expressions.Expression VisitDynamic(System.Linq.Expressions.DynamicExpression node) { return default(System.Linq.Expressions.Expression); }
  }
}
namespace System.Runtime.CompilerServices {
  public partial class CallSite {
    internal CallSite() { }
    public System.Runtime.CompilerServices.CallSiteBinder Binder { get { return default(System.Runtime.CompilerServices.CallSiteBinder); } }
    public static System.Runtime.CompilerServices.CallSite Create(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder) { return default(System.Runtime.CompilerServices.CallSite); }
  }
  public partial class CallSite<T> : System.Runtime.CompilerServices.CallSite where T : class {
    internal CallSite() { }
    public T Target;
    public T Update { get { return default(T); } }
    public static System.Runtime.CompilerServices.CallSite<T> Create(System.Runtime.CompilerServices.CallSiteBinder binder) { return default(System.Runtime.CompilerServices.CallSite<T>); }
  }
  public abstract partial class CallSiteBinder {
    protected CallSiteBinder() { }
    public static System.Linq.Expressions.LabelTarget UpdateLabel { get { return default(System.Linq.Expressions.LabelTarget); } }
    public abstract System.Linq.Expressions.Expression Bind(object[] args, System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> parameters, System.Linq.Expressions.LabelTarget returnLabel);
    public virtual T BindDelegate<T>(System.Runtime.CompilerServices.CallSite<T> site, object[] args) where T : class { return default(T); }
    protected void CacheTarget<T>(T target) where T : class { }
  }
  public static partial class CallSiteHelpers {
    public static bool IsInternalFrame(System.Reflection.MethodBase mb) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(10636))]
  public sealed partial class DynamicAttribute : System.Attribute {
    public DynamicAttribute() { }
    public DynamicAttribute(bool[] transformFlags) { }
    public System.Collections.Generic.IList<bool> TransformFlags { get { return default(System.Collections.Generic.IList<bool>); } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Globalization")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Globalization")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Globalization")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Globalization {
  public abstract partial class Calendar {
    public const int CurrentEra = 0;
    protected Calendar() { }
    public abstract int[] Eras { get; }
    public bool IsReadOnly { get { return default(bool); } }
    public virtual System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public virtual System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public virtual int TwoDigitYearMax { get { return default(int); } set { } }
    public virtual System.DateTime AddDays(System.DateTime time, int days) { return default(System.DateTime); }
    public virtual System.DateTime AddHours(System.DateTime time, int hours) { return default(System.DateTime); }
    public virtual System.DateTime AddMilliseconds(System.DateTime time, double milliseconds) { return default(System.DateTime); }
    public virtual System.DateTime AddMinutes(System.DateTime time, int minutes) { return default(System.DateTime); }
    public abstract System.DateTime AddMonths(System.DateTime time, int months);
    public virtual System.DateTime AddSeconds(System.DateTime time, int seconds) { return default(System.DateTime); }
    public virtual System.DateTime AddWeeks(System.DateTime time, int weeks) { return default(System.DateTime); }
    public abstract System.DateTime AddYears(System.DateTime time, int years);
    public abstract int GetDayOfMonth(System.DateTime time);
    public abstract System.DayOfWeek GetDayOfWeek(System.DateTime time);
    public abstract int GetDayOfYear(System.DateTime time);
    public virtual int GetDaysInMonth(int year, int month) { return default(int); }
    public abstract int GetDaysInMonth(int year, int month, int era);
    public virtual int GetDaysInYear(int year) { return default(int); }
    public abstract int GetDaysInYear(int year, int era);
    public abstract int GetEra(System.DateTime time);
    public virtual int GetHour(System.DateTime time) { return default(int); }
    public virtual int GetLeapMonth(int year, int era) { return default(int); }
    public virtual double GetMilliseconds(System.DateTime time) { return default(double); }
    public virtual int GetMinute(System.DateTime time) { return default(int); }
    public abstract int GetMonth(System.DateTime time);
    public virtual int GetMonthsInYear(int year) { return default(int); }
    public abstract int GetMonthsInYear(int year, int era);
    public virtual int GetSecond(System.DateTime time) { return default(int); }
    public virtual int GetWeekOfYear(System.DateTime time, System.Globalization.CalendarWeekRule rule, System.DayOfWeek firstDayOfWeek) { return default(int); }
    public abstract int GetYear(System.DateTime time);
    public virtual bool IsLeapDay(int year, int month, int day) { return default(bool); }
    public abstract bool IsLeapDay(int year, int month, int day, int era);
    public virtual bool IsLeapMonth(int year, int month) { return default(bool); }
    public abstract bool IsLeapMonth(int year, int month, int era);
    public virtual bool IsLeapYear(int year) { return default(bool); }
    public abstract bool IsLeapYear(int year, int era);
    public virtual System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond) { return default(System.DateTime); }
    public abstract System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    public virtual int ToFourDigitYear(int year) { return default(int); }
  }
  public enum CalendarWeekRule {
    FirstDay = 0,
    FirstFourDayWeek = 2,
    FirstFullWeek = 1,
  }
  public static partial class CharUnicodeInfo {
    public static double GetNumericValue(char ch) { return default(double); }
    public static double GetNumericValue(string s, int index) { return default(double); }
    public static System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) { return default(System.Globalization.UnicodeCategory); }
    public static System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int index) { return default(System.Globalization.UnicodeCategory); }
  }
  public partial class CompareInfo {
    internal CompareInfo() { }
    public virtual string Name { get { return default(string); } }
    public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2) { return default(int); }
    public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options) { return default(int); }
    public virtual int Compare(string string1, int offset1, string string2, int offset2) { return default(int); }
    public virtual int Compare(string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options) { return default(int); }
    public virtual int Compare(string string1, string string2) { return default(int); }
    public virtual int Compare(string string1, string string2, System.Globalization.CompareOptions options) { return default(int); }
    public override bool Equals(object value) { return default(bool); }
    public static System.Globalization.CompareInfo GetCompareInfo(string name) { return default(System.Globalization.CompareInfo); }
    public override int GetHashCode() { return default(int); }
    public virtual int GetHashCode(string source, System.Globalization.CompareOptions options) { return default(int); }
    public virtual int IndexOf(string source, char value) { return default(int); }
    public virtual int IndexOf(string source, char value, System.Globalization.CompareOptions options) { return default(int); }
    public virtual int IndexOf(string source, char value, int startIndex, System.Globalization.CompareOptions options) { return default(int); }
    public virtual int IndexOf(string source, char value, int startIndex, int count) { return default(int); }
    public virtual int IndexOf(string source, char value, int startIndex, int count, System.Globalization.CompareOptions options) { return default(int); }
    public virtual int IndexOf(string source, string value) { return default(int); }
    public virtual int IndexOf(string source, string value, System.Globalization.CompareOptions options) { return default(int); }
    public virtual int IndexOf(string source, string value, int startIndex, System.Globalization.CompareOptions options) { return default(int); }
    public virtual int IndexOf(string source, string value, int startIndex, int count) { return default(int); }
    public virtual int IndexOf(string source, string value, int startIndex, int count, System.Globalization.CompareOptions options) { return default(int); }
    public virtual bool IsPrefix(string source, string prefix) { return default(bool); }
    public virtual bool IsPrefix(string source, string prefix, System.Globalization.CompareOptions options) { return default(bool); }
    public virtual bool IsSuffix(string source, string suffix) { return default(bool); }
    public virtual bool IsSuffix(string source, string suffix, System.Globalization.CompareOptions options) { return default(bool); }
    public virtual int LastIndexOf(string source, char value) { return default(int); }
    public virtual int LastIndexOf(string source, char value, System.Globalization.CompareOptions options) { return default(int); }
    public virtual int LastIndexOf(string source, char value, int startIndex, System.Globalization.CompareOptions options) { return default(int); }
    public virtual int LastIndexOf(string source, char value, int startIndex, int count) { return default(int); }
    public virtual int LastIndexOf(string source, char value, int startIndex, int count, System.Globalization.CompareOptions options) { return default(int); }
    public virtual int LastIndexOf(string source, string value) { return default(int); }
    public virtual int LastIndexOf(string source, string value, System.Globalization.CompareOptions options) { return default(int); }
    public virtual int LastIndexOf(string source, string value, int startIndex, System.Globalization.CompareOptions options) { return default(int); }
    public virtual int LastIndexOf(string source, string value, int startIndex, int count) { return default(int); }
    public virtual int LastIndexOf(string source, string value, int startIndex, int count, System.Globalization.CompareOptions options) { return default(int); }
    public override string ToString() { return default(string); }
  }
  [System.FlagsAttribute]
  public enum CompareOptions {
    IgnoreCase = 1,
    IgnoreKanaType = 8,
    IgnoreNonSpace = 2,
    IgnoreSymbols = 4,
    IgnoreWidth = 16,
    None = 0,
    Ordinal = 1073741824,
    OrdinalIgnoreCase = 268435456,
    StringSort = 536870912,
  }
  public partial class CultureInfo : System.IFormatProvider {
    public CultureInfo(string name) { }
    public virtual System.Globalization.Calendar Calendar { get { return default(System.Globalization.Calendar); } }
    public virtual System.Globalization.CompareInfo CompareInfo { get { return default(System.Globalization.CompareInfo); } }
    public static System.Globalization.CultureInfo CurrentCulture { get { return default(System.Globalization.CultureInfo); } set { } }
    public static System.Globalization.CultureInfo CurrentUICulture { get { return default(System.Globalization.CultureInfo); } set { } }
    public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get { return default(System.Globalization.DateTimeFormatInfo); } set { } }
    public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get { return default(System.Globalization.CultureInfo); } set { } }
    public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get { return default(System.Globalization.CultureInfo); } set { } }
    public virtual string DisplayName { get { return default(string); } }
    public virtual string EnglishName { get { return default(string); } }
    public static System.Globalization.CultureInfo InvariantCulture { get { return default(System.Globalization.CultureInfo); } }
    public virtual bool IsNeutralCulture { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public virtual string Name { get { return default(string); } }
    public virtual string NativeName { get { return default(string); } }
    public virtual System.Globalization.NumberFormatInfo NumberFormat { get { return default(System.Globalization.NumberFormatInfo); } set { } }
    public virtual System.Globalization.Calendar[] OptionalCalendars { get { return default(System.Globalization.Calendar[]); } }
    public virtual System.Globalization.CultureInfo Parent { get { return default(System.Globalization.CultureInfo); } }
    public virtual System.Globalization.TextInfo TextInfo { get { return default(System.Globalization.TextInfo); } }
    public virtual string TwoLetterISOLanguageName { get { return default(string); } }
    public virtual object Clone() { return default(object); }
    public override bool Equals(object value) { return default(bool); }
    public virtual object GetFormat(System.Type formatType) { return default(object); }
    public override int GetHashCode() { return default(int); }
    public static System.Globalization.CultureInfo ReadOnly(System.Globalization.CultureInfo ci) { return default(System.Globalization.CultureInfo); }
    public override string ToString() { return default(string); }
  }
  public partial class CultureNotFoundException : System.ArgumentException {
    public CultureNotFoundException() { }
    public CultureNotFoundException(string message) { }
    public CultureNotFoundException(string message, System.Exception innerException) { }
    public CultureNotFoundException(string paramName, string message) { }
    public CultureNotFoundException(string message, string invalidCultureName, System.Exception innerException) { }
    public CultureNotFoundException(string paramName, string invalidCultureName, string message) { }
    public virtual string InvalidCultureName { get { return default(string); } }
    public override string Message { get { return default(string); } }
  }
  public sealed partial class DateTimeFormatInfo : System.IFormatProvider {
    public DateTimeFormatInfo() { }
    public string[] AbbreviatedDayNames { get { return default(string[]); } set { } }
    public string[] AbbreviatedMonthGenitiveNames { get { return default(string[]); } set { } }
    public string[] AbbreviatedMonthNames { get { return default(string[]); } set { } }
    public string AMDesignator { get { return default(string); } set { } }
    public System.Globalization.Calendar Calendar { get { return default(System.Globalization.Calendar); } set { } }
    public System.Globalization.CalendarWeekRule CalendarWeekRule { get { return default(System.Globalization.CalendarWeekRule); } set { } }
    public static System.Globalization.DateTimeFormatInfo CurrentInfo { get { return default(System.Globalization.DateTimeFormatInfo); } }
    public string[] DayNames { get { return default(string[]); } set { } }
    public System.DayOfWeek FirstDayOfWeek { get { return default(System.DayOfWeek); } set { } }
    public string FullDateTimePattern { get { return default(string); } set { } }
    public static System.Globalization.DateTimeFormatInfo InvariantInfo { get { return default(System.Globalization.DateTimeFormatInfo); } }
    public bool IsReadOnly { get { return default(bool); } }
    public string LongDatePattern { get { return default(string); } set { } }
    public string LongTimePattern { get { return default(string); } set { } }
    public string MonthDayPattern { get { return default(string); } set { } }
    public string[] MonthGenitiveNames { get { return default(string[]); } set { } }
    public string[] MonthNames { get { return default(string[]); } set { } }
    public string PMDesignator { get { return default(string); } set { } }
    public string RFC1123Pattern { get { return default(string); } }
    public string ShortDatePattern { get { return default(string); } set { } }
    public string[] ShortestDayNames { get { return default(string[]); } set { } }
    public string ShortTimePattern { get { return default(string); } set { } }
    public string SortableDateTimePattern { get { return default(string); } }
    public string UniversalSortableDateTimePattern { get { return default(string); } }
    public string YearMonthPattern { get { return default(string); } set { } }
    public object Clone() { return default(object); }
    public string GetAbbreviatedDayName(System.DayOfWeek dayofweek) { return default(string); }
    public string GetAbbreviatedEraName(int era) { return default(string); }
    public string GetAbbreviatedMonthName(int month) { return default(string); }
    public string GetDayName(System.DayOfWeek dayofweek) { return default(string); }
    public int GetEra(string eraName) { return default(int); }
    public string GetEraName(int era) { return default(string); }
    public object GetFormat(System.Type formatType) { return default(object); }
    public static System.Globalization.DateTimeFormatInfo GetInstance(System.IFormatProvider provider) { return default(System.Globalization.DateTimeFormatInfo); }
    public string GetMonthName(int month) { return default(string); }
    public static System.Globalization.DateTimeFormatInfo ReadOnly(System.Globalization.DateTimeFormatInfo dtfi) { return default(System.Globalization.DateTimeFormatInfo); }
  }
  public sealed partial class NumberFormatInfo : System.IFormatProvider {
    public NumberFormatInfo() { }
    public int CurrencyDecimalDigits { get { return default(int); } set { } }
    public string CurrencyDecimalSeparator { get { return default(string); } set { } }
    public string CurrencyGroupSeparator { get { return default(string); } set { } }
    public int[] CurrencyGroupSizes { get { return default(int[]); } set { } }
    public int CurrencyNegativePattern { get { return default(int); } set { } }
    public int CurrencyPositivePattern { get { return default(int); } set { } }
    public string CurrencySymbol { get { return default(string); } set { } }
    public static System.Globalization.NumberFormatInfo CurrentInfo { get { return default(System.Globalization.NumberFormatInfo); } }
    public static System.Globalization.NumberFormatInfo InvariantInfo { get { return default(System.Globalization.NumberFormatInfo); } }
    public bool IsReadOnly { get { return default(bool); } }
    public string NaNSymbol { get { return default(string); } set { } }
    public string NegativeInfinitySymbol { get { return default(string); } set { } }
    public string NegativeSign { get { return default(string); } set { } }
    public int NumberDecimalDigits { get { return default(int); } set { } }
    public string NumberDecimalSeparator { get { return default(string); } set { } }
    public string NumberGroupSeparator { get { return default(string); } set { } }
    public int[] NumberGroupSizes { get { return default(int[]); } set { } }
    public int NumberNegativePattern { get { return default(int); } set { } }
    public int PercentDecimalDigits { get { return default(int); } set { } }
    public string PercentDecimalSeparator { get { return default(string); } set { } }
    public string PercentGroupSeparator { get { return default(string); } set { } }
    public int[] PercentGroupSizes { get { return default(int[]); } set { } }
    public int PercentNegativePattern { get { return default(int); } set { } }
    public int PercentPositivePattern { get { return default(int); } set { } }
    public string PercentSymbol { get { return default(string); } set { } }
    public string PerMilleSymbol { get { return default(string); } set { } }
    public string PositiveInfinitySymbol { get { return default(string); } set { } }
    public string PositiveSign { get { return default(string); } set { } }
    public object Clone() { return default(object); }
    public object GetFormat(System.Type formatType) { return default(object); }
    public static System.Globalization.NumberFormatInfo GetInstance(System.IFormatProvider formatProvider) { return default(System.Globalization.NumberFormatInfo); }
    public static System.Globalization.NumberFormatInfo ReadOnly(System.Globalization.NumberFormatInfo nfi) { return default(System.Globalization.NumberFormatInfo); }
  }
  public partial class RegionInfo {
    public RegionInfo(string name) { }
    public virtual string CurrencySymbol { get { return default(string); } }
    public static System.Globalization.RegionInfo CurrentRegion { get { return default(System.Globalization.RegionInfo); } }
    public virtual string DisplayName { get { return default(string); } }
    public virtual string EnglishName { get { return default(string); } }
    public virtual bool IsMetric { get { return default(bool); } }
    public virtual string ISOCurrencySymbol { get { return default(string); } }
    public virtual string Name { get { return default(string); } }
    public virtual string NativeName { get { return default(string); } }
    public virtual string TwoLetterISORegionName { get { return default(string); } }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public override string ToString() { return default(string); }
  }
  public partial class StringInfo {
    public StringInfo() { }
    public StringInfo(string value) { }
    public int LengthInTextElements { get { return default(int); } }
    public string String { get { return default(string); } set { } }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static string GetNextTextElement(string str) { return default(string); }
    public static string GetNextTextElement(string str, int index) { return default(string); }
    public static System.Globalization.TextElementEnumerator GetTextElementEnumerator(string str) { return default(System.Globalization.TextElementEnumerator); }
    public static System.Globalization.TextElementEnumerator GetTextElementEnumerator(string str, int index) { return default(System.Globalization.TextElementEnumerator); }
    public static int[] ParseCombiningCharacters(string str) { return default(int[]); }
  }
  public partial class TextElementEnumerator : System.Collections.IEnumerator {
    internal TextElementEnumerator() { }
    public object Current { get { return default(object); } }
    public int ElementIndex { get { return default(int); } }
    public string GetTextElement() { return default(string); }
    public bool MoveNext() { return default(bool); }
    public void Reset() { }
  }
  public partial class TextInfo {
    internal TextInfo() { }
    public string CultureName { get { return default(string); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsRightToLeft { get { return default(bool); } }
    public virtual string ListSeparator { get { return default(string); } set { } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public virtual char ToLower(char c) { return default(char); }
    public virtual string ToLower(string str) { return default(string); }
    public override string ToString() { return default(string); }
    public virtual char ToUpper(char c) { return default(char); }
    public virtual string ToUpper(string str) { return default(string); }
  }
  public enum UnicodeCategory {
    ClosePunctuation = 21,
    ConnectorPunctuation = 18,
    Control = 14,
    CurrencySymbol = 26,
    DashPunctuation = 19,
    DecimalDigitNumber = 8,
    EnclosingMark = 7,
    FinalQuotePunctuation = 23,
    Format = 15,
    InitialQuotePunctuation = 22,
    LetterNumber = 9,
    LineSeparator = 12,
    LowercaseLetter = 1,
    MathSymbol = 25,
    ModifierLetter = 3,
    ModifierSymbol = 27,
    NonSpacingMark = 5,
    OpenPunctuation = 20,
    OtherLetter = 4,
    OtherNotAssigned = 29,
    OtherNumber = 10,
    OtherPunctuation = 24,
    OtherSymbol = 28,
    ParagraphSeparator = 13,
    PrivateUse = 17,
    SpaceSeparator = 11,
    SpacingCombiningMark = 6,
    Surrogate = 16,
    TitlecaseLetter = 2,
    UppercaseLetter = 0,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Globalization.Calendars")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Globalization.Calendars")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Globalization.Calendars")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Globalization {
  public partial class ChineseLunisolarCalendar : System.Globalization.EastAsianLunisolarCalendar {
    public ChineseLunisolarCalendar() { }
    public override int[] Eras { get { return default(int[]); } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int GetEra(System.DateTime time) { return default(int); }
  }
  public abstract partial class EastAsianLunisolarCalendar : System.Globalization.Calendar {
    internal EastAsianLunisolarCalendar() { }
    public override int TwoDigitYearMax { get { return default(int); } set { } }
    public override System.DateTime AddMonths(System.DateTime time, int months) { return default(System.DateTime); }
    public override System.DateTime AddYears(System.DateTime time, int years) { return default(System.DateTime); }
    public int GetCelestialStem(int sexagenaryYear) { return default(int); }
    public override int GetDayOfMonth(System.DateTime time) { return default(int); }
    public override System.DayOfWeek GetDayOfWeek(System.DateTime time) { return default(System.DayOfWeek); }
    public override int GetDayOfYear(System.DateTime time) { return default(int); }
    public override int GetDaysInMonth(int year, int month, int era) { return default(int); }
    public override int GetDaysInYear(int year, int era) { return default(int); }
    public override int GetLeapMonth(int year, int era) { return default(int); }
    public override int GetMonth(System.DateTime time) { return default(int); }
    public override int GetMonthsInYear(int year, int era) { return default(int); }
    public virtual int GetSexagenaryYear(System.DateTime time) { return default(int); }
    public int GetTerrestrialBranch(int sexagenaryYear) { return default(int); }
    public override int GetYear(System.DateTime time) { return default(int); }
    public override bool IsLeapDay(int year, int month, int day, int era) { return default(bool); }
    public override bool IsLeapMonth(int year, int month, int era) { return default(bool); }
    public override bool IsLeapYear(int year, int era) { return default(bool); }
    public override System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { return default(System.DateTime); }
    public override int ToFourDigitYear(int year) { return default(int); }
  }
  public partial class GregorianCalendar : System.Globalization.Calendar {
    public GregorianCalendar() { }
    public GregorianCalendar(System.Globalization.GregorianCalendarTypes type) { }
    public virtual System.Globalization.GregorianCalendarTypes CalendarType { get { return default(System.Globalization.GregorianCalendarTypes); } set { } }
    public override int[] Eras { get { return default(int[]); } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int TwoDigitYearMax { get { return default(int); } set { } }
    public override System.DateTime AddMonths(System.DateTime time, int months) { return default(System.DateTime); }
    public override System.DateTime AddYears(System.DateTime time, int years) { return default(System.DateTime); }
    public override int GetDayOfMonth(System.DateTime time) { return default(int); }
    public override System.DayOfWeek GetDayOfWeek(System.DateTime time) { return default(System.DayOfWeek); }
    public override int GetDayOfYear(System.DateTime time) { return default(int); }
    public override int GetDaysInMonth(int year, int month, int era) { return default(int); }
    public override int GetDaysInYear(int year, int era) { return default(int); }
    public override int GetEra(System.DateTime time) { return default(int); }
    public override int GetLeapMonth(int year, int era) { return default(int); }
    public override int GetMonth(System.DateTime time) { return default(int); }
    public override int GetMonthsInYear(int year, int era) { return default(int); }
    public override int GetYear(System.DateTime time) { return default(int); }
    public override bool IsLeapDay(int year, int month, int day, int era) { return default(bool); }
    public override bool IsLeapMonth(int year, int month, int era) { return default(bool); }
    public override bool IsLeapYear(int year, int era) { return default(bool); }
    public override System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { return default(System.DateTime); }
    public override int ToFourDigitYear(int year) { return default(int); }
  }
  public enum GregorianCalendarTypes {
    Arabic = 10,
    Localized = 1,
    MiddleEastFrench = 9,
    TransliteratedEnglish = 11,
    TransliteratedFrench = 12,
    USEnglish = 2,
  }
  public partial class HebrewCalendar : System.Globalization.Calendar {
    public HebrewCalendar() { }
    public override int[] Eras { get { return default(int[]); } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int TwoDigitYearMax { get { return default(int); } set { } }
    public override System.DateTime AddMonths(System.DateTime time, int months) { return default(System.DateTime); }
    public override System.DateTime AddYears(System.DateTime time, int years) { return default(System.DateTime); }
    public override int GetDayOfMonth(System.DateTime time) { return default(int); }
    public override System.DayOfWeek GetDayOfWeek(System.DateTime time) { return default(System.DayOfWeek); }
    public override int GetDayOfYear(System.DateTime time) { return default(int); }
    public override int GetDaysInMonth(int year, int month, int era) { return default(int); }
    public override int GetDaysInYear(int year, int era) { return default(int); }
    public override int GetEra(System.DateTime time) { return default(int); }
    public override int GetLeapMonth(int year, int era) { return default(int); }
    public override int GetMonth(System.DateTime time) { return default(int); }
    public override int GetMonthsInYear(int year, int era) { return default(int); }
    public override int GetYear(System.DateTime time) { return default(int); }
    public override bool IsLeapDay(int year, int month, int day, int era) { return default(bool); }
    public override bool IsLeapMonth(int year, int month, int era) { return default(bool); }
    public override bool IsLeapYear(int year, int era) { return default(bool); }
    public override System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { return default(System.DateTime); }
    public override int ToFourDigitYear(int year) { return default(int); }
  }
  public partial class HijriCalendar : System.Globalization.Calendar {
    public HijriCalendar() { }
    public override int[] Eras { get { return default(int[]); } }
    public int HijriAdjustment { get { return default(int); } set { } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int TwoDigitYearMax { get { return default(int); } set { } }
    public override System.DateTime AddMonths(System.DateTime time, int months) { return default(System.DateTime); }
    public override System.DateTime AddYears(System.DateTime time, int years) { return default(System.DateTime); }
    public override int GetDayOfMonth(System.DateTime time) { return default(int); }
    public override System.DayOfWeek GetDayOfWeek(System.DateTime time) { return default(System.DayOfWeek); }
    public override int GetDayOfYear(System.DateTime time) { return default(int); }
    public override int GetDaysInMonth(int year, int month, int era) { return default(int); }
    public override int GetDaysInYear(int year, int era) { return default(int); }
    public override int GetEra(System.DateTime time) { return default(int); }
    public override int GetLeapMonth(int year, int era) { return default(int); }
    public override int GetMonth(System.DateTime time) { return default(int); }
    public override int GetMonthsInYear(int year, int era) { return default(int); }
    public override int GetYear(System.DateTime time) { return default(int); }
    public override bool IsLeapDay(int year, int month, int day, int era) { return default(bool); }
    public override bool IsLeapMonth(int year, int month, int era) { return default(bool); }
    public override bool IsLeapYear(int year, int era) { return default(bool); }
    public override System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { return default(System.DateTime); }
    public override int ToFourDigitYear(int year) { return default(int); }
  }
  public partial class JapaneseCalendar : System.Globalization.Calendar {
    public JapaneseCalendar() { }
    public override int[] Eras { get { return default(int[]); } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int TwoDigitYearMax { get { return default(int); } set { } }
    public override System.DateTime AddMonths(System.DateTime time, int months) { return default(System.DateTime); }
    public override System.DateTime AddYears(System.DateTime time, int years) { return default(System.DateTime); }
    public override int GetDayOfMonth(System.DateTime time) { return default(int); }
    public override System.DayOfWeek GetDayOfWeek(System.DateTime time) { return default(System.DayOfWeek); }
    public override int GetDayOfYear(System.DateTime time) { return default(int); }
    public override int GetDaysInMonth(int year, int month, int era) { return default(int); }
    public override int GetDaysInYear(int year, int era) { return default(int); }
    public override int GetEra(System.DateTime time) { return default(int); }
    public override int GetLeapMonth(int year, int era) { return default(int); }
    public override int GetMonth(System.DateTime time) { return default(int); }
    public override int GetMonthsInYear(int year, int era) { return default(int); }
    public override int GetWeekOfYear(System.DateTime time, System.Globalization.CalendarWeekRule rule, System.DayOfWeek firstDayOfWeek) { return default(int); }
    public override int GetYear(System.DateTime time) { return default(int); }
    public override bool IsLeapDay(int year, int month, int day, int era) { return default(bool); }
    public override bool IsLeapMonth(int year, int month, int era) { return default(bool); }
    public override bool IsLeapYear(int year, int era) { return default(bool); }
    public override System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { return default(System.DateTime); }
    public override int ToFourDigitYear(int year) { return default(int); }
  }
  public partial class JapaneseLunisolarCalendar : System.Globalization.EastAsianLunisolarCalendar {
    public JapaneseLunisolarCalendar() { }
    public override int[] Eras { get { return default(int[]); } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int GetEra(System.DateTime time) { return default(int); }
  }
  public partial class JulianCalendar : System.Globalization.Calendar {
    public JulianCalendar() { }
    public override int[] Eras { get { return default(int[]); } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int TwoDigitYearMax { get { return default(int); } set { } }
    public override System.DateTime AddMonths(System.DateTime time, int months) { return default(System.DateTime); }
    public override System.DateTime AddYears(System.DateTime time, int years) { return default(System.DateTime); }
    public override int GetDayOfMonth(System.DateTime time) { return default(int); }
    public override System.DayOfWeek GetDayOfWeek(System.DateTime time) { return default(System.DayOfWeek); }
    public override int GetDayOfYear(System.DateTime time) { return default(int); }
    public override int GetDaysInMonth(int year, int month, int era) { return default(int); }
    public override int GetDaysInYear(int year, int era) { return default(int); }
    public override int GetEra(System.DateTime time) { return default(int); }
    public override int GetLeapMonth(int year, int era) { return default(int); }
    public override int GetMonth(System.DateTime time) { return default(int); }
    public override int GetMonthsInYear(int year, int era) { return default(int); }
    public override int GetYear(System.DateTime time) { return default(int); }
    public override bool IsLeapDay(int year, int month, int day, int era) { return default(bool); }
    public override bool IsLeapMonth(int year, int month, int era) { return default(bool); }
    public override bool IsLeapYear(int year, int era) { return default(bool); }
    public override System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { return default(System.DateTime); }
    public override int ToFourDigitYear(int year) { return default(int); }
  }
  public partial class KoreanCalendar : System.Globalization.Calendar {
    public KoreanCalendar() { }
    public override int[] Eras { get { return default(int[]); } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int TwoDigitYearMax { get { return default(int); } set { } }
    public override System.DateTime AddMonths(System.DateTime time, int months) { return default(System.DateTime); }
    public override System.DateTime AddYears(System.DateTime time, int years) { return default(System.DateTime); }
    public override int GetDayOfMonth(System.DateTime time) { return default(int); }
    public override System.DayOfWeek GetDayOfWeek(System.DateTime time) { return default(System.DayOfWeek); }
    public override int GetDayOfYear(System.DateTime time) { return default(int); }
    public override int GetDaysInMonth(int year, int month, int era) { return default(int); }
    public override int GetDaysInYear(int year, int era) { return default(int); }
    public override int GetEra(System.DateTime time) { return default(int); }
    public override int GetLeapMonth(int year, int era) { return default(int); }
    public override int GetMonth(System.DateTime time) { return default(int); }
    public override int GetMonthsInYear(int year, int era) { return default(int); }
    public override int GetWeekOfYear(System.DateTime time, System.Globalization.CalendarWeekRule rule, System.DayOfWeek firstDayOfWeek) { return default(int); }
    public override int GetYear(System.DateTime time) { return default(int); }
    public override bool IsLeapDay(int year, int month, int day, int era) { return default(bool); }
    public override bool IsLeapMonth(int year, int month, int era) { return default(bool); }
    public override bool IsLeapYear(int year, int era) { return default(bool); }
    public override System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { return default(System.DateTime); }
    public override int ToFourDigitYear(int year) { return default(int); }
  }
  public partial class KoreanLunisolarCalendar : System.Globalization.EastAsianLunisolarCalendar {
    public KoreanLunisolarCalendar() { }
    public override int[] Eras { get { return default(int[]); } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int GetEra(System.DateTime time) { return default(int); }
  }
  public partial class PersianCalendar : System.Globalization.Calendar {
    public PersianCalendar() { }
    public override int[] Eras { get { return default(int[]); } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int TwoDigitYearMax { get { return default(int); } set { } }
    public override System.DateTime AddMonths(System.DateTime time, int months) { return default(System.DateTime); }
    public override System.DateTime AddYears(System.DateTime time, int years) { return default(System.DateTime); }
    public override int GetDayOfMonth(System.DateTime time) { return default(int); }
    public override System.DayOfWeek GetDayOfWeek(System.DateTime time) { return default(System.DayOfWeek); }
    public override int GetDayOfYear(System.DateTime time) { return default(int); }
    public override int GetDaysInMonth(int year, int month, int era) { return default(int); }
    public override int GetDaysInYear(int year, int era) { return default(int); }
    public override int GetEra(System.DateTime time) { return default(int); }
    public override int GetLeapMonth(int year, int era) { return default(int); }
    public override int GetMonth(System.DateTime time) { return default(int); }
    public override int GetMonthsInYear(int year, int era) { return default(int); }
    public override int GetYear(System.DateTime time) { return default(int); }
    public override bool IsLeapDay(int year, int month, int day, int era) { return default(bool); }
    public override bool IsLeapMonth(int year, int month, int era) { return default(bool); }
    public override bool IsLeapYear(int year, int era) { return default(bool); }
    public override System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { return default(System.DateTime); }
    public override int ToFourDigitYear(int year) { return default(int); }
  }
  public partial class TaiwanCalendar : System.Globalization.Calendar {
    public TaiwanCalendar() { }
    public override int[] Eras { get { return default(int[]); } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int TwoDigitYearMax { get { return default(int); } set { } }
    public override System.DateTime AddMonths(System.DateTime time, int months) { return default(System.DateTime); }
    public override System.DateTime AddYears(System.DateTime time, int years) { return default(System.DateTime); }
    public override int GetDayOfMonth(System.DateTime time) { return default(int); }
    public override System.DayOfWeek GetDayOfWeek(System.DateTime time) { return default(System.DayOfWeek); }
    public override int GetDayOfYear(System.DateTime time) { return default(int); }
    public override int GetDaysInMonth(int year, int month, int era) { return default(int); }
    public override int GetDaysInYear(int year, int era) { return default(int); }
    public override int GetEra(System.DateTime time) { return default(int); }
    public override int GetLeapMonth(int year, int era) { return default(int); }
    public override int GetMonth(System.DateTime time) { return default(int); }
    public override int GetMonthsInYear(int year, int era) { return default(int); }
    public override int GetWeekOfYear(System.DateTime time, System.Globalization.CalendarWeekRule rule, System.DayOfWeek firstDayOfWeek) { return default(int); }
    public override int GetYear(System.DateTime time) { return default(int); }
    public override bool IsLeapDay(int year, int month, int day, int era) { return default(bool); }
    public override bool IsLeapMonth(int year, int month, int era) { return default(bool); }
    public override bool IsLeapYear(int year, int era) { return default(bool); }
    public override System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { return default(System.DateTime); }
    public override int ToFourDigitYear(int year) { return default(int); }
  }
  public partial class TaiwanLunisolarCalendar : System.Globalization.EastAsianLunisolarCalendar {
    public TaiwanLunisolarCalendar() { }
    public override int[] Eras { get { return default(int[]); } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int GetEra(System.DateTime time) { return default(int); }
  }
  public partial class ThaiBuddhistCalendar : System.Globalization.Calendar {
    public ThaiBuddhistCalendar() { }
    public override int[] Eras { get { return default(int[]); } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int TwoDigitYearMax { get { return default(int); } set { } }
    public override System.DateTime AddMonths(System.DateTime time, int months) { return default(System.DateTime); }
    public override System.DateTime AddYears(System.DateTime time, int years) { return default(System.DateTime); }
    public override int GetDayOfMonth(System.DateTime time) { return default(int); }
    public override System.DayOfWeek GetDayOfWeek(System.DateTime time) { return default(System.DayOfWeek); }
    public override int GetDayOfYear(System.DateTime time) { return default(int); }
    public override int GetDaysInMonth(int year, int month, int era) { return default(int); }
    public override int GetDaysInYear(int year, int era) { return default(int); }
    public override int GetEra(System.DateTime time) { return default(int); }
    public override int GetLeapMonth(int year, int era) { return default(int); }
    public override int GetMonth(System.DateTime time) { return default(int); }
    public override int GetMonthsInYear(int year, int era) { return default(int); }
    public override int GetWeekOfYear(System.DateTime time, System.Globalization.CalendarWeekRule rule, System.DayOfWeek firstDayOfWeek) { return default(int); }
    public override int GetYear(System.DateTime time) { return default(int); }
    public override bool IsLeapDay(int year, int month, int day, int era) { return default(bool); }
    public override bool IsLeapMonth(int year, int month, int era) { return default(bool); }
    public override bool IsLeapYear(int year, int era) { return default(bool); }
    public override System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { return default(System.DateTime); }
    public override int ToFourDigitYear(int year) { return default(int); }
  }
  public partial class UmAlQuraCalendar : System.Globalization.Calendar {
    public UmAlQuraCalendar() { }
    public override int[] Eras { get { return default(int[]); } }
    public override System.DateTime MaxSupportedDateTime { get { return default(System.DateTime); } }
    public override System.DateTime MinSupportedDateTime { get { return default(System.DateTime); } }
    public override int TwoDigitYearMax { get { return default(int); } set { } }
    public override System.DateTime AddMonths(System.DateTime time, int months) { return default(System.DateTime); }
    public override System.DateTime AddYears(System.DateTime time, int years) { return default(System.DateTime); }
    public override int GetDayOfMonth(System.DateTime time) { return default(int); }
    public override System.DayOfWeek GetDayOfWeek(System.DateTime time) { return default(System.DayOfWeek); }
    public override int GetDayOfYear(System.DateTime time) { return default(int); }
    public override int GetDaysInMonth(int year, int month, int era) { return default(int); }
    public override int GetDaysInYear(int year, int era) { return default(int); }
    public override int GetEra(System.DateTime time) { return default(int); }
    public override int GetLeapMonth(int year, int era) { return default(int); }
    public override int GetMonth(System.DateTime time) { return default(int); }
    public override int GetMonthsInYear(int year, int era) { return default(int); }
    public override int GetYear(System.DateTime time) { return default(int); }
    public override bool IsLeapDay(int year, int month, int day, int era) { return default(bool); }
    public override bool IsLeapMonth(int year, int month, int era) { return default(bool); }
    public override bool IsLeapYear(int year, int era) { return default(bool); }
    public override System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { return default(System.DateTime); }
    public override int ToFourDigitYear(int year) { return default(int); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Globalization.Extensions")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Globalization.Extensions")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Globalization.Extensions")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System {
  public static partial class StringNormalizationExtensions {
    public static bool IsNormalized(this string value) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public static bool IsNormalized(this string value, System.Text.NormalizationForm normalizationForm) { return default(bool); }
    public static string Normalize(this string value) { return default(string); }
    [System.Security.SecurityCriticalAttribute]
    public static string Normalize(this string value, System.Text.NormalizationForm normalizationForm) { return default(string); }
  }
}
namespace System.Globalization {
  public static partial class GlobalizationExtensions {
    public static System.StringComparer GetStringComparer(this System.Globalization.CompareInfo compareInfo, System.Globalization.CompareOptions options) { return default(System.StringComparer); }
  }
  public sealed partial class IdnMapping {
    public IdnMapping() { }
    public bool AllowUnassigned { get { return default(bool); } set { } }
    public bool UseStd3AsciiRules { get { return default(bool); } set { } }
    public override bool Equals(object obj) { return default(bool); }
    public string GetAscii(string unicode) { return default(string); }
    public string GetAscii(string unicode, int index) { return default(string); }
    public string GetAscii(string unicode, int index, int count) { return default(string); }
    public override int GetHashCode() { return default(int); }
    public string GetUnicode(string ascii) { return default(string); }
    public string GetUnicode(string ascii, int index) { return default(string); }
    public string GetUnicode(string ascii, int index, int count) { return default(string); }
  }
}
namespace System.Text {
  public enum NormalizationForm {
    FormC = 1,
    FormD = 2,
    FormKC = 5,
    FormKD = 6,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.IO")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.IO")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.IO")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.IO {
  public partial class BinaryReader : System.IDisposable {
    public BinaryReader(System.IO.Stream input) { }
    public BinaryReader(System.IO.Stream input, System.Text.Encoding encoding) { }
    public BinaryReader(System.IO.Stream input, System.Text.Encoding encoding, bool leaveOpen) { }
    public virtual System.IO.Stream BaseStream { get { return default(System.IO.Stream); } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    protected virtual void FillBuffer(int numBytes) { }
    public virtual int PeekChar() { return default(int); }
    public virtual int Read() { return default(int); }
    public virtual int Read(byte[] buffer, int index, int count) { return default(int); }
    public virtual int Read(char[] buffer, int index, int count) { return default(int); }
    protected internal int Read7BitEncodedInt() { return default(int); }
    public virtual bool ReadBoolean() { return default(bool); }
    public virtual byte ReadByte() { return default(byte); }
    public virtual byte[] ReadBytes(int count) { return default(byte[]); }
    public virtual char ReadChar() { return default(char); }
    public virtual char[] ReadChars(int count) { return default(char[]); }
    public virtual decimal ReadDecimal() { return default(decimal); }
    public virtual double ReadDouble() { return default(double); }
    public virtual short ReadInt16() { return default(short); }
    public virtual int ReadInt32() { return default(int); }
    public virtual long ReadInt64() { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public virtual sbyte ReadSByte() { return default(sbyte); }
    public virtual float ReadSingle() { return default(float); }
    public virtual string ReadString() { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public virtual ushort ReadUInt16() { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public virtual uint ReadUInt32() { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public virtual ulong ReadUInt64() { return default(ulong); }
  }
  public partial class BinaryWriter : System.IDisposable {
    public static readonly System.IO.BinaryWriter Null;
    protected System.IO.Stream OutStream;
    protected BinaryWriter() { }
    public BinaryWriter(System.IO.Stream output) { }
    public BinaryWriter(System.IO.Stream output, System.Text.Encoding encoding) { }
    public BinaryWriter(System.IO.Stream output, System.Text.Encoding encoding, bool leaveOpen) { }
    public virtual System.IO.Stream BaseStream { get { return default(System.IO.Stream); } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public virtual void Flush() { }
    public virtual long Seek(int offset, System.IO.SeekOrigin origin) { return default(long); }
    public virtual void Write(bool value) { }
    public virtual void Write(byte value) { }
    public virtual void Write(byte[] buffer) { }
    public virtual void Write(byte[] buffer, int index, int count) { }
    public virtual void Write(char ch) { }
    public virtual void Write(char[] chars) { }
    public virtual void Write(char[] chars, int index, int count) { }
    public virtual void Write(decimal value) { }
    public virtual void Write(double value) { }
    public virtual void Write(short value) { }
    public virtual void Write(int value) { }
    public virtual void Write(long value) { }
    [System.CLSCompliantAttribute(false)]
    public virtual void Write(sbyte value) { }
    public virtual void Write(float value) { }
    public virtual void Write(string value) { }
    [System.CLSCompliantAttribute(false)]
    public virtual void Write(ushort value) { }
    [System.CLSCompliantAttribute(false)]
    public virtual void Write(uint value) { }
    [System.CLSCompliantAttribute(false)]
    public virtual void Write(ulong value) { }
    protected void Write7BitEncodedInt(int value) { }
  }
  public sealed partial class BufferedStream : System.IO.Stream {
    public BufferedStream(System.IO.Stream stream) { }
    public BufferedStream(System.IO.Stream stream, int bufferSize) { }
    public override bool CanRead { get { return default(bool); } }
    public override bool CanSeek { get { return default(bool); } }
    public override bool CanWrite { get { return default(bool); } }
    public override long Length { get { return default(long); } }
    public override long Position { get { return default(long); } set { } }
    protected override void Dispose(bool disposing) { }
    public override void Flush() { }
    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public override int Read(byte[] array, int offset, int count) { return default(int); }
    public override System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<int>); }
    public override int ReadByte() { return default(int); }
    public override long Seek(long offset, System.IO.SeekOrigin origin) { return default(long); }
    public override void SetLength(long value) { }
    public override void Write(byte[] array, int offset, int count) { }
    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public override void WriteByte(byte value) { }
  }
  public partial class EndOfStreamException : System.IO.IOException {
    public EndOfStreamException() { }
    public EndOfStreamException(string message) { }
    public EndOfStreamException(string message, System.Exception innerException) { }
  }
  public sealed partial class InvalidDataException : System.Exception {
    public InvalidDataException() { }
    public InvalidDataException(string message) { }
    public InvalidDataException(string message, System.Exception innerException) { }
  }
  public partial class MemoryStream : System.IO.Stream {
    public MemoryStream() { }
    public MemoryStream(byte[] buffer) { }
    public MemoryStream(byte[] buffer, bool writable) { }
    public MemoryStream(byte[] buffer, int index, int count) { }
    public MemoryStream(byte[] buffer, int index, int count, bool writable) { }
    public MemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible) { }
    public MemoryStream(int capacity) { }
    public override bool CanRead { get { return default(bool); } }
    public override bool CanSeek { get { return default(bool); } }
    public override bool CanWrite { get { return default(bool); } }
    public virtual int Capacity { get { return default(int); } set { } }
    public override long Length { get { return default(long); } }
    public override long Position { get { return default(long); } set { } }
    public override System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    protected override void Dispose(bool disposing) { }
    public override void Flush() { }
    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public override int Read(byte[] buffer, int offset, int count) { return default(int); }
    public override System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<int>); }
    public override int ReadByte() { return default(int); }
    public override long Seek(long offset, System.IO.SeekOrigin loc) { return default(long); }
    public override void SetLength(long value) { }
    public virtual byte[] ToArray() { return default(byte[]); }
    public virtual bool TryGetBuffer(out System.ArraySegment<byte> buffer) { buffer = default(System.ArraySegment<byte>); return default(bool); }
    public override void Write(byte[] buffer, int offset, int count) { }
    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public override void WriteByte(byte value) { }
    public virtual void WriteTo(System.IO.Stream stream) { }
  }
  public enum SeekOrigin {
    Begin = 0,
    Current = 1,
    End = 2,
  }
  public abstract partial class Stream : System.IDisposable {
    public static readonly System.IO.Stream Null;
    protected Stream() { }
    public abstract bool CanRead { get; }
    public abstract bool CanSeek { get; }
    public virtual bool CanTimeout { get { return default(bool); } }
    public abstract bool CanWrite { get; }
    public abstract long Length { get; }
    public abstract long Position { get; set; }
    public virtual int ReadTimeout { get { return default(int); } set { } }
    public virtual int WriteTimeout { get { return default(int); } set { } }
    public void CopyTo(System.IO.Stream destination) { }
    public void CopyTo(System.IO.Stream destination, int bufferSize) { }
    public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, int bufferSize) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public abstract void Flush();
    public System.Threading.Tasks.Task FlushAsync() { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public abstract int Read(byte[] buffer, int offset, int count);
    public System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count) { return default(System.Threading.Tasks.Task<int>); }
    public virtual System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<int>); }
    public virtual int ReadByte() { return default(int); }
    public abstract long Seek(long offset, System.IO.SeekOrigin origin);
    public abstract void SetLength(long value);
    public abstract void Write(byte[] buffer, int offset, int count);
    public System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public virtual void WriteByte(byte value) { }
  }
  public partial class StreamReader : System.IO.TextReader {
    public static readonly new System.IO.StreamReader Null;
    public StreamReader(System.IO.Stream stream) { }
    public StreamReader(System.IO.Stream stream, bool detectEncodingFromByteOrderMarks) { }
    public StreamReader(System.IO.Stream stream, System.Text.Encoding encoding) { }
    public StreamReader(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks) { }
    public StreamReader(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }
    public StreamReader(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen) { }
    public virtual System.IO.Stream BaseStream { get { return default(System.IO.Stream); } }
    public virtual System.Text.Encoding CurrentEncoding { get { return default(System.Text.Encoding); } }
    public bool EndOfStream { get { return default(bool); } }
    public void DiscardBufferedData() { }
    protected override void Dispose(bool disposing) { }
    public override int Peek() { return default(int); }
    public override int Read() { return default(int); }
    public override int Read(char[] buffer, int index, int count) { return default(int); }
    public override System.Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task<int>); }
    public override int ReadBlock(char[] buffer, int index, int count) { return default(int); }
    public override System.Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task<int>); }
    public override string ReadLine() { return default(string); }
    public override System.Threading.Tasks.Task<string> ReadLineAsync() { return default(System.Threading.Tasks.Task<string>); }
    public override string ReadToEnd() { return default(string); }
    public override System.Threading.Tasks.Task<string> ReadToEndAsync() { return default(System.Threading.Tasks.Task<string>); }
  }
  public partial class StreamWriter : System.IO.TextWriter {
    public static readonly new System.IO.StreamWriter Null;
    public StreamWriter(System.IO.Stream stream) { }
    public StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding) { }
    public StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, int bufferSize) { }
    public StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, int bufferSize, bool leaveOpen) { }
    public virtual bool AutoFlush { get { return default(bool); } set { } }
    public virtual System.IO.Stream BaseStream { get { return default(System.IO.Stream); } }
    public override System.Text.Encoding Encoding { get { return default(System.Text.Encoding); } }
    protected override void Dispose(bool disposing) { }
    public override void Flush() { }
    public override System.Threading.Tasks.Task FlushAsync() { return default(System.Threading.Tasks.Task); }
    public override void Write(char value) { }
    public override void Write(char[] buffer) { }
    public override void Write(char[] buffer, int index, int count) { }
    public override void Write(string value) { }
    public override System.Threading.Tasks.Task WriteAsync(char value) { return default(System.Threading.Tasks.Task); }
    public override System.Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task); }
    public override System.Threading.Tasks.Task WriteAsync(string value) { return default(System.Threading.Tasks.Task); }
    public override System.Threading.Tasks.Task WriteLineAsync() { return default(System.Threading.Tasks.Task); }
    public override System.Threading.Tasks.Task WriteLineAsync(char value) { return default(System.Threading.Tasks.Task); }
    public override System.Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task); }
    public override System.Threading.Tasks.Task WriteLineAsync(string value) { return default(System.Threading.Tasks.Task); }
  }
  public partial class StringReader : System.IO.TextReader {
    public StringReader(string s) { }
    protected override void Dispose(bool disposing) { }
    public override int Peek() { return default(int); }
    public override int Read() { return default(int); }
    public override int Read(char[] buffer, int index, int count) { return default(int); }
    public override System.Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task<int>); }
    public override System.Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task<int>); }
    public override string ReadLine() { return default(string); }
    public override System.Threading.Tasks.Task<string> ReadLineAsync() { return default(System.Threading.Tasks.Task<string>); }
    public override string ReadToEnd() { return default(string); }
    public override System.Threading.Tasks.Task<string> ReadToEndAsync() { return default(System.Threading.Tasks.Task<string>); }
  }
  public partial class StringWriter : System.IO.TextWriter {
    public StringWriter() { }
    public StringWriter(System.IFormatProvider formatProvider) { }
    public StringWriter(System.Text.StringBuilder sb) { }
    public StringWriter(System.Text.StringBuilder sb, System.IFormatProvider formatProvider) { }
    public override System.Text.Encoding Encoding { get { return default(System.Text.Encoding); } }
    protected override void Dispose(bool disposing) { }
    public override System.Threading.Tasks.Task FlushAsync() { return default(System.Threading.Tasks.Task); }
    public virtual System.Text.StringBuilder GetStringBuilder() { return default(System.Text.StringBuilder); }
    public override string ToString() { return default(string); }
    public override void Write(char value) { }
    public override void Write(char[] buffer, int index, int count) { }
    public override void Write(string value) { }
    public override System.Threading.Tasks.Task WriteAsync(char value) { return default(System.Threading.Tasks.Task); }
    public override System.Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task); }
    public override System.Threading.Tasks.Task WriteAsync(string value) { return default(System.Threading.Tasks.Task); }
    public override System.Threading.Tasks.Task WriteLineAsync(char value) { return default(System.Threading.Tasks.Task); }
    public override System.Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task); }
    public override System.Threading.Tasks.Task WriteLineAsync(string value) { return default(System.Threading.Tasks.Task); }
  }
  public abstract partial class TextReader : System.IDisposable {
    public static readonly System.IO.TextReader Null;
    protected TextReader() { }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public virtual int Peek() { return default(int); }
    public virtual int Read() { return default(int); }
    public virtual int Read(char[] buffer, int index, int count) { return default(int); }
    public virtual System.Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task<int>); }
    public virtual int ReadBlock(char[] buffer, int index, int count) { return default(int); }
    public virtual System.Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task<int>); }
    public virtual string ReadLine() { return default(string); }
    public virtual System.Threading.Tasks.Task<string> ReadLineAsync() { return default(System.Threading.Tasks.Task<string>); }
    public virtual string ReadToEnd() { return default(string); }
    public virtual System.Threading.Tasks.Task<string> ReadToEndAsync() { return default(System.Threading.Tasks.Task<string>); }
  }
  public abstract partial class TextWriter : System.IDisposable {
    protected char[] CoreNewLine;
    public static readonly System.IO.TextWriter Null;
    protected TextWriter() { }
    protected TextWriter(System.IFormatProvider formatProvider) { }
    public abstract System.Text.Encoding Encoding { get; }
    public virtual System.IFormatProvider FormatProvider { get { return default(System.IFormatProvider); } }
    public virtual string NewLine { get { return default(string); } set { } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public virtual void Flush() { }
    public virtual System.Threading.Tasks.Task FlushAsync() { return default(System.Threading.Tasks.Task); }
    public virtual void Write(bool value) { }
    public abstract void Write(char value);
    public virtual void Write(char[] buffer) { }
    public virtual void Write(char[] buffer, int index, int count) { }
    public virtual void Write(decimal value) { }
    public virtual void Write(double value) { }
    public virtual void Write(int value) { }
    public virtual void Write(long value) { }
    public virtual void Write(object value) { }
    public virtual void Write(float value) { }
    public virtual void Write(string value) { }
    public virtual void Write(string format, object arg0) { }
    public virtual void Write(string format, object arg0, object arg1) { }
    public virtual void Write(string format, object arg0, object arg1, object arg2) { }
    public virtual void Write(string format, params object[] arg) { }
    [System.CLSCompliantAttribute(false)]
    public virtual void Write(uint value) { }
    [System.CLSCompliantAttribute(false)]
    public virtual void Write(ulong value) { }
    public virtual System.Threading.Tasks.Task WriteAsync(char value) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task WriteAsync(char[] buffer) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task WriteAsync(string value) { return default(System.Threading.Tasks.Task); }
    public virtual void WriteLine() { }
    public virtual void WriteLine(bool value) { }
    public virtual void WriteLine(char value) { }
    public virtual void WriteLine(char[] buffer) { }
    public virtual void WriteLine(char[] buffer, int index, int count) { }
    public virtual void WriteLine(decimal value) { }
    public virtual void WriteLine(double value) { }
    public virtual void WriteLine(int value) { }
    public virtual void WriteLine(long value) { }
    public virtual void WriteLine(object value) { }
    public virtual void WriteLine(float value) { }
    public virtual void WriteLine(string value) { }
    public virtual void WriteLine(string format, object arg0) { }
    public virtual void WriteLine(string format, object arg0, object arg1) { }
    public virtual void WriteLine(string format, object arg0, object arg1, object arg2) { }
    public virtual void WriteLine(string format, params object[] arg) { }
    [System.CLSCompliantAttribute(false)]
    public virtual void WriteLine(uint value) { }
    [System.CLSCompliantAttribute(false)]
    public virtual void WriteLine(ulong value) { }
    public virtual System.Threading.Tasks.Task WriteLineAsync() { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task WriteLineAsync(char value) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task WriteLineAsync(char[] buffer) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task WriteLineAsync(string value) { return default(System.Threading.Tasks.Task); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.IO.Compression")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.IO.Compression")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.IO.Compression")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.IO.Compression {
  public enum CompressionLevel {
    Fastest = 1,
    NoCompression = 2,
    Optimal = 0,
  }
  public enum CompressionMode {
    Compress = 1,
    Decompress = 0,
  }
  public partial class DeflateStream : System.IO.Stream {
    public DeflateStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel) { }
    public DeflateStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel, bool leaveOpen) { }
    public DeflateStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode) { }
    public DeflateStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode, bool leaveOpen) { }
    public System.IO.Stream BaseStream { get { return default(System.IO.Stream); } }
    public override bool CanRead { get { return default(bool); } }
    public override bool CanSeek { get { return default(bool); } }
    public override bool CanWrite { get { return default(bool); } }
    public override long Length { get { return default(long); } }
    public override long Position { get { return default(long); } set { } }
    protected override void Dispose(bool disposing) { }
    public override void Flush() { }
    public override int Read(byte[] array, int offset, int count) { return default(int); }
    public override System.Threading.Tasks.Task<int> ReadAsync(byte[] array, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<int>); }
    public override long Seek(long offset, System.IO.SeekOrigin origin) { return default(long); }
    public override void SetLength(long value) { }
    public override void Write(byte[] array, int offset, int count) { }
    public override System.Threading.Tasks.Task WriteAsync(byte[] array, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
  }
  public partial class GZipStream : System.IO.Stream {
    public GZipStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel) { }
    public GZipStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel, bool leaveOpen) { }
    public GZipStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode) { }
    public GZipStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode, bool leaveOpen) { }
    public System.IO.Stream BaseStream { get { return default(System.IO.Stream); } }
    public override bool CanRead { get { return default(bool); } }
    public override bool CanSeek { get { return default(bool); } }
    public override bool CanWrite { get { return default(bool); } }
    public override long Length { get { return default(long); } }
    public override long Position { get { return default(long); } set { } }
    protected override void Dispose(bool disposing) { }
    public override void Flush() { }
    public override int Read(byte[] array, int offset, int count) { return default(int); }
    public override System.Threading.Tasks.Task<int> ReadAsync(byte[] array, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<int>); }
    public override long Seek(long offset, System.IO.SeekOrigin origin) { return default(long); }
    public override void SetLength(long value) { }
    public override void Write(byte[] array, int offset, int count) { }
    public override System.Threading.Tasks.Task WriteAsync(byte[] array, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
  }
  public partial class ZipArchive : System.IDisposable {
    public ZipArchive(System.IO.Stream stream) { }
    public ZipArchive(System.IO.Stream stream, System.IO.Compression.ZipArchiveMode mode) { }
    public ZipArchive(System.IO.Stream stream, System.IO.Compression.ZipArchiveMode mode, bool leaveOpen) { }
    public ZipArchive(System.IO.Stream stream, System.IO.Compression.ZipArchiveMode mode, bool leaveOpen, System.Text.Encoding entryNameEncoding) { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.IO.Compression.ZipArchiveEntry> Entries { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.IO.Compression.ZipArchiveEntry>); } }
    public System.IO.Compression.ZipArchiveMode Mode { get { return default(System.IO.Compression.ZipArchiveMode); } }
    public System.IO.Compression.ZipArchiveEntry CreateEntry(string entryName) { return default(System.IO.Compression.ZipArchiveEntry); }
    public System.IO.Compression.ZipArchiveEntry CreateEntry(string entryName, System.IO.Compression.CompressionLevel compressionLevel) { return default(System.IO.Compression.ZipArchiveEntry); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public System.IO.Compression.ZipArchiveEntry GetEntry(string entryName) { return default(System.IO.Compression.ZipArchiveEntry); }
  }
  public partial class ZipArchiveEntry {
    internal ZipArchiveEntry() { }
    public System.IO.Compression.ZipArchive Archive { get { return default(System.IO.Compression.ZipArchive); } }
    public long CompressedLength { get { return default(long); } }
    public string FullName { get { return default(string); } }
    public System.DateTimeOffset LastWriteTime { get { return default(System.DateTimeOffset); } set { } }
    public long Length { get { return default(long); } }
    public string Name { get { return default(string); } }
    public void Delete() { }
    public System.IO.Stream Open() { return default(System.IO.Stream); }
    public override string ToString() { return default(string); }
  }
  public enum ZipArchiveMode {
    Create = 1,
    Read = 0,
    Update = 2,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.IO.Compression.ZipFile")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.IO.Compression.ZipFile")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.IO.Compression.ZipFile")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.IO.Compression {
  public static partial class ZipFile {
    public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName) { }
    public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory) { }
    public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, System.IO.Compression.CompressionLevel compressionLevel, bool includeBaseDirectory, System.Text.Encoding entryNameEncoding) { }
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName) { }
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, System.Text.Encoding entryNameEncoding) { }
    public static System.IO.Compression.ZipArchive Open(string archiveFileName, System.IO.Compression.ZipArchiveMode mode) { return default(System.IO.Compression.ZipArchive); }
    public static System.IO.Compression.ZipArchive Open(string archiveFileName, System.IO.Compression.ZipArchiveMode mode, System.Text.Encoding entryNameEncoding) { return default(System.IO.Compression.ZipArchive); }
    public static System.IO.Compression.ZipArchive OpenRead(string archiveFileName) { return default(System.IO.Compression.ZipArchive); }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public static partial class ZipFileExtensions {
    public static System.IO.Compression.ZipArchiveEntry CreateEntryFromFile(this System.IO.Compression.ZipArchive destination, string sourceFileName, string entryName) { return default(System.IO.Compression.ZipArchiveEntry); }
    public static System.IO.Compression.ZipArchiveEntry CreateEntryFromFile(this System.IO.Compression.ZipArchive destination, string sourceFileName, string entryName, System.IO.Compression.CompressionLevel compressionLevel) { return default(System.IO.Compression.ZipArchiveEntry); }
    public static void ExtractToDirectory(this System.IO.Compression.ZipArchive source, string destinationDirectoryName) { }
    public static void ExtractToFile(this System.IO.Compression.ZipArchiveEntry source, string destinationFileName) { }
    public static void ExtractToFile(this System.IO.Compression.ZipArchiveEntry source, string destinationFileName, bool overwrite) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.IO.FileSystem")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.IO.FileSystem")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.IO.FileSystem")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace Microsoft.Win32.SafeHandles {
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class SafeFileHandle : System.Runtime.InteropServices.SafeHandle {
    public SafeFileHandle(System.IntPtr preexistingHandle, bool ownsHandle) : base (default(System.IntPtr), default(bool)) { }
    public override bool IsInvalid { [System.Security.SecurityCriticalAttribute]get { return default(bool); } }
    [System.Security.SecurityCriticalAttribute]
    protected override bool ReleaseHandle() { return default(bool); }
  }
}
namespace System.IO {
  public static partial class Directory {
    public static System.IO.DirectoryInfo CreateDirectory(string path) { return default(System.IO.DirectoryInfo); }
    public static void Delete(string path) { }
    public static void Delete(string path, bool recursive) { }
    public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path) { return default(System.Collections.Generic.IEnumerable<string>); }
    public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern) { return default(System.Collections.Generic.IEnumerable<string>); }
    public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { return default(System.Collections.Generic.IEnumerable<string>); }
    public static System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path) { return default(System.Collections.Generic.IEnumerable<string>); }
    public static System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern) { return default(System.Collections.Generic.IEnumerable<string>); }
    public static System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { return default(System.Collections.Generic.IEnumerable<string>); }
    public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path) { return default(System.Collections.Generic.IEnumerable<string>); }
    public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern) { return default(System.Collections.Generic.IEnumerable<string>); }
    public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { return default(System.Collections.Generic.IEnumerable<string>); }
    public static bool Exists(string path) { return default(bool); }
    public static System.DateTime GetCreationTime(string path) { return default(System.DateTime); }
    public static System.DateTime GetCreationTimeUtc(string path) { return default(System.DateTime); }
    public static string GetCurrentDirectory() { return default(string); }
    public static string[] GetDirectories(string path) { return default(string[]); }
    public static string[] GetDirectories(string path, string searchPattern) { return default(string[]); }
    public static string[] GetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption) { return default(string[]); }
    public static string GetDirectoryRoot(string path) { return default(string); }
    public static string[] GetFiles(string path) { return default(string[]); }
    public static string[] GetFiles(string path, string searchPattern) { return default(string[]); }
    public static string[] GetFiles(string path, string searchPattern, System.IO.SearchOption searchOption) { return default(string[]); }
    public static string[] GetFileSystemEntries(string path) { return default(string[]); }
    public static string[] GetFileSystemEntries(string path, string searchPattern) { return default(string[]); }
    public static string[] GetFileSystemEntries(string path, string searchPattern, System.IO.SearchOption searchOption) { return default(string[]); }
    public static System.DateTime GetLastAccessTime(string path) { return default(System.DateTime); }
    public static System.DateTime GetLastAccessTimeUtc(string path) { return default(System.DateTime); }
    public static System.DateTime GetLastWriteTime(string path) { return default(System.DateTime); }
    public static System.DateTime GetLastWriteTimeUtc(string path) { return default(System.DateTime); }
    public static System.IO.DirectoryInfo GetParent(string path) { return default(System.IO.DirectoryInfo); }
    public static void Move(string sourceDirName, string destDirName) { }
    public static void SetCreationTime(string path, System.DateTime creationTime) { }
    public static void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }
    public static void SetCurrentDirectory(string path) { }
    public static void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }
    public static void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }
    public static void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }
    public static void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }
  }
  public sealed partial class DirectoryInfo : System.IO.FileSystemInfo {
    public DirectoryInfo(string path) { }
    public override bool Exists { get { return default(bool); } }
    public override string Name { get { return default(string); } }
    public System.IO.DirectoryInfo Parent { get { return default(System.IO.DirectoryInfo); } }
    public System.IO.DirectoryInfo Root { get { return default(System.IO.DirectoryInfo); } }
    public void Create() { }
    public System.IO.DirectoryInfo CreateSubdirectory(string path) { return default(System.IO.DirectoryInfo); }
    public override void Delete() { }
    public void Delete(bool recursive) { }
    public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories() { return default(System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo>); }
    public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories(string searchPattern) { return default(System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo>); }
    public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories(string searchPattern, System.IO.SearchOption searchOption) { return default(System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo>); }
    public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles() { return default(System.Collections.Generic.IEnumerable<System.IO.FileInfo>); }
    public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles(string searchPattern) { return default(System.Collections.Generic.IEnumerable<System.IO.FileInfo>); }
    public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles(string searchPattern, System.IO.SearchOption searchOption) { return default(System.Collections.Generic.IEnumerable<System.IO.FileInfo>); }
    public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos() { return default(System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo>); }
    public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos(string searchPattern) { return default(System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo>); }
    public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { return default(System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo>); }
    public System.IO.DirectoryInfo[] GetDirectories() { return default(System.IO.DirectoryInfo[]); }
    public System.IO.DirectoryInfo[] GetDirectories(string searchPattern) { return default(System.IO.DirectoryInfo[]); }
    public System.IO.DirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption searchOption) { return default(System.IO.DirectoryInfo[]); }
    public System.IO.FileInfo[] GetFiles() { return default(System.IO.FileInfo[]); }
    public System.IO.FileInfo[] GetFiles(string searchPattern) { return default(System.IO.FileInfo[]); }
    public System.IO.FileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption) { return default(System.IO.FileInfo[]); }
    public System.IO.FileSystemInfo[] GetFileSystemInfos() { return default(System.IO.FileSystemInfo[]); }
    public System.IO.FileSystemInfo[] GetFileSystemInfos(string searchPattern) { return default(System.IO.FileSystemInfo[]); }
    public System.IO.FileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.SearchOption searchOption) { return default(System.IO.FileSystemInfo[]); }
    public void MoveTo(string destDirName) { }
    public override string ToString() { return default(string); }
  }
  public static partial class File {
    public static void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }
    public static void AppendAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }
    public static void AppendAllText(string path, string contents) { }
    public static void AppendAllText(string path, string contents, System.Text.Encoding encoding) { }
    public static System.IO.StreamWriter AppendText(string path) { return default(System.IO.StreamWriter); }
    public static void Copy(string sourceFileName, string destFileName) { }
    public static void Copy(string sourceFileName, string destFileName, bool overwrite) { }
    public static System.IO.FileStream Create(string path) { return default(System.IO.FileStream); }
    public static System.IO.FileStream Create(string path, int bufferSize) { return default(System.IO.FileStream); }
    public static System.IO.FileStream Create(string path, int bufferSize, System.IO.FileOptions options) { return default(System.IO.FileStream); }
    public static System.IO.StreamWriter CreateText(string path) { return default(System.IO.StreamWriter); }
    public static void Delete(string path) { }
    public static bool Exists(string path) { return default(bool); }
    public static System.IO.FileAttributes GetAttributes(string path) { return default(System.IO.FileAttributes); }
    public static System.DateTime GetCreationTime(string path) { return default(System.DateTime); }
    public static System.DateTime GetCreationTimeUtc(string path) { return default(System.DateTime); }
    public static System.DateTime GetLastAccessTime(string path) { return default(System.DateTime); }
    public static System.DateTime GetLastAccessTimeUtc(string path) { return default(System.DateTime); }
    public static System.DateTime GetLastWriteTime(string path) { return default(System.DateTime); }
    public static System.DateTime GetLastWriteTimeUtc(string path) { return default(System.DateTime); }
    public static void Move(string sourceFileName, string destFileName) { }
    public static System.IO.FileStream Open(string path, System.IO.FileMode mode) { return default(System.IO.FileStream); }
    public static System.IO.FileStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access) { return default(System.IO.FileStream); }
    public static System.IO.FileStream Open(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { return default(System.IO.FileStream); }
    public static System.IO.FileStream OpenRead(string path) { return default(System.IO.FileStream); }
    public static System.IO.StreamReader OpenText(string path) { return default(System.IO.StreamReader); }
    public static System.IO.FileStream OpenWrite(string path) { return default(System.IO.FileStream); }
    public static byte[] ReadAllBytes(string path) { return default(byte[]); }
    public static string[] ReadAllLines(string path) { return default(string[]); }
    public static string[] ReadAllLines(string path, System.Text.Encoding encoding) { return default(string[]); }
    public static string ReadAllText(string path) { return default(string); }
    public static string ReadAllText(string path, System.Text.Encoding encoding) { return default(string); }
    public static System.Collections.Generic.IEnumerable<string> ReadLines(string path) { return default(System.Collections.Generic.IEnumerable<string>); }
    public static System.Collections.Generic.IEnumerable<string> ReadLines(string path, System.Text.Encoding encoding) { return default(System.Collections.Generic.IEnumerable<string>); }
    public static void SetAttributes(string path, System.IO.FileAttributes fileAttributes) { }
    public static void SetCreationTime(string path, System.DateTime creationTime) { }
    public static void SetCreationTimeUtc(string path, System.DateTime creationTimeUtc) { }
    public static void SetLastAccessTime(string path, System.DateTime lastAccessTime) { }
    public static void SetLastAccessTimeUtc(string path, System.DateTime lastAccessTimeUtc) { }
    public static void SetLastWriteTime(string path, System.DateTime lastWriteTime) { }
    public static void SetLastWriteTimeUtc(string path, System.DateTime lastWriteTimeUtc) { }
    public static void WriteAllBytes(string path, byte[] bytes) { }
    public static void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents) { }
    public static void WriteAllLines(string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding) { }
    public static void WriteAllText(string path, string contents) { }
    public static void WriteAllText(string path, string contents, System.Text.Encoding encoding) { }
  }
  public sealed partial class FileInfo : System.IO.FileSystemInfo {
    public FileInfo(string fileName) { }
    public System.IO.DirectoryInfo Directory { get { return default(System.IO.DirectoryInfo); } }
    public string DirectoryName { get { return default(string); } }
    public override bool Exists { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } set { } }
    public long Length { get { return default(long); } }
    public override string Name { get { return default(string); } }
    public System.IO.StreamWriter AppendText() { return default(System.IO.StreamWriter); }
    public System.IO.FileInfo CopyTo(string destFileName) { return default(System.IO.FileInfo); }
    public System.IO.FileInfo CopyTo(string destFileName, bool overwrite) { return default(System.IO.FileInfo); }
    public System.IO.FileStream Create() { return default(System.IO.FileStream); }
    public System.IO.StreamWriter CreateText() { return default(System.IO.StreamWriter); }
    public override void Delete() { }
    public void MoveTo(string destFileName) { }
    public System.IO.FileStream Open(System.IO.FileMode mode) { return default(System.IO.FileStream); }
    public System.IO.FileStream Open(System.IO.FileMode mode, System.IO.FileAccess access) { return default(System.IO.FileStream); }
    public System.IO.FileStream Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { return default(System.IO.FileStream); }
    public System.IO.FileStream OpenRead() { return default(System.IO.FileStream); }
    public System.IO.StreamReader OpenText() { return default(System.IO.StreamReader); }
    public System.IO.FileStream OpenWrite() { return default(System.IO.FileStream); }
    public override string ToString() { return default(string); }
  }
  [System.FlagsAttribute]
  public enum FileOptions {
    Asynchronous = 1073741824,
    DeleteOnClose = 67108864,
    Encrypted = 16384,
    None = 0,
    RandomAccess = 268435456,
    SequentialScan = 134217728,
    WriteThrough = -2147483648,
  }
  public partial class FileStream : System.IO.Stream {
    public FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access) { }
    public FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize) { }
    public FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize, bool isAsync) { }
    public FileStream(string path, System.IO.FileMode mode) { }
    public FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access) { }
    public FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { }
    public FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize) { }
    public FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync) { }
    public FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options) { }
    public override bool CanRead { get { return default(bool); } }
    public override bool CanSeek { get { return default(bool); } }
    public override bool CanWrite { get { return default(bool); } }
    public virtual bool IsAsync { get { return default(bool); } }
    public override long Length { get { return default(long); } }
    public string Name { get { return default(string); } }
    public override long Position { get { return default(long); } set { } }
    public virtual Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle { get { return default(Microsoft.Win32.SafeHandles.SafeFileHandle); } }
    protected override void Dispose(bool disposing) { }
    ~FileStream() { }
    public override void Flush() { }
    public virtual void Flush(bool flushToDisk) { }
    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public override int Read(byte[] array, int offset, int count) { return default(int); }
    public override System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<int>); }
    public override int ReadByte() { return default(int); }
    public override long Seek(long offset, System.IO.SeekOrigin origin) { return default(long); }
    public override void SetLength(long value) { }
    public override void Write(byte[] array, int offset, int count) { }
    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public override void WriteByte(byte value) { }
  }
  public abstract partial class FileSystemInfo {
    protected string FullPath;
    protected string OriginalPath;
    protected FileSystemInfo() { }
    public System.IO.FileAttributes Attributes { get { return default(System.IO.FileAttributes); } set { } }
    public System.DateTime CreationTime { get { return default(System.DateTime); } set { } }
    public System.DateTime CreationTimeUtc { get { return default(System.DateTime); } set { } }
    public abstract bool Exists { get; }
    public string Extension { get { return default(string); } }
    public virtual string FullName { get { return default(string); } }
    public System.DateTime LastAccessTime { get { return default(System.DateTime); } set { } }
    public System.DateTime LastAccessTimeUtc { get { return default(System.DateTime); } set { } }
    public System.DateTime LastWriteTime { get { return default(System.DateTime); } set { } }
    public System.DateTime LastWriteTimeUtc { get { return default(System.DateTime); } set { } }
    public abstract string Name { get; }
    public abstract void Delete();
    public void Refresh() { }
  }
  public enum SearchOption {
    AllDirectories = 1,
    TopDirectoryOnly = 0,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.IO.FileSystem.AccessControl")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.IO.FileSystem.AccessControl")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.IO.FileSystem.AccessControl")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.IO {
  [System.Security.SecurityCriticalAttribute]
  public static partial class FileSystemAclExtensions {
    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.DirectoryInfo directoryInfo) { return default(System.Security.AccessControl.DirectorySecurity); }
    public static System.Security.AccessControl.DirectorySecurity GetAccessControl(this System.IO.DirectoryInfo directoryInfo, System.Security.AccessControl.AccessControlSections includeSections) { return default(System.Security.AccessControl.DirectorySecurity); }
    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.FileInfo fileInfo) { return default(System.Security.AccessControl.FileSecurity); }
    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.FileInfo fileInfo, System.Security.AccessControl.AccessControlSections includeSections) { return default(System.Security.AccessControl.FileSecurity); }
    public static System.Security.AccessControl.FileSecurity GetAccessControl(this System.IO.FileStream fileStream) { return default(System.Security.AccessControl.FileSecurity); }
    public static void SetAccessControl(this System.IO.DirectoryInfo directoryInfo, System.Security.AccessControl.DirectorySecurity directorySecurity) { }
    public static void SetAccessControl(this System.IO.FileInfo fileInfo, System.Security.AccessControl.FileSecurity fileSecurity) { }
    public static void SetAccessControl(this System.IO.FileStream fileStream, System.Security.AccessControl.FileSecurity fileSecurity) { }
  }
}
namespace System.Security.AccessControl {
  [System.Security.SecurityCriticalAttribute]
  public abstract partial class DirectoryObjectSecurity : System.Security.AccessControl.ObjectSecurity {
    protected DirectoryObjectSecurity() { }
    protected DirectoryObjectSecurity(System.Security.AccessControl.CommonSecurityDescriptor securityDescriptor) { }
    public virtual System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type, System.Guid objectType, System.Guid inheritedObjectType) { return default(System.Security.AccessControl.AccessRule); }
    protected void AddAccessRule(System.Security.AccessControl.ObjectAccessRule rule) { }
    protected void AddAuditRule(System.Security.AccessControl.ObjectAuditRule rule) { }
    public virtual System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags, System.Guid objectType, System.Guid inheritedObjectType) { return default(System.Security.AccessControl.AuditRule); }
    public System.Security.AccessControl.AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, System.Type targetType) { return default(System.Security.AccessControl.AuthorizationRuleCollection); }
    public System.Security.AccessControl.AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, System.Type targetType) { return default(System.Security.AccessControl.AuthorizationRuleCollection); }
    protected override bool ModifyAccess(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out bool modified) { modified = default(bool); return default(bool); }
    protected override bool ModifyAudit(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out bool modified) { modified = default(bool); return default(bool); }
    protected bool RemoveAccessRule(System.Security.AccessControl.ObjectAccessRule rule) { return default(bool); }
    protected void RemoveAccessRuleAll(System.Security.AccessControl.ObjectAccessRule rule) { }
    protected void RemoveAccessRuleSpecific(System.Security.AccessControl.ObjectAccessRule rule) { }
    protected bool RemoveAuditRule(System.Security.AccessControl.ObjectAuditRule rule) { return default(bool); }
    protected void RemoveAuditRuleAll(System.Security.AccessControl.ObjectAuditRule rule) { }
    protected void RemoveAuditRuleSpecific(System.Security.AccessControl.ObjectAuditRule rule) { }
    protected void ResetAccessRule(System.Security.AccessControl.ObjectAccessRule rule) { }
    protected void SetAccessRule(System.Security.AccessControl.ObjectAccessRule rule) { }
    protected void SetAuditRule(System.Security.AccessControl.ObjectAuditRule rule) { }
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class DirectorySecurity : System.Security.AccessControl.FileSystemSecurity {
    public DirectorySecurity() { }
    public DirectorySecurity(string name, System.Security.AccessControl.AccessControlSections includeSections) { }
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class FileSecurity : System.Security.AccessControl.FileSystemSecurity {
    public FileSecurity() { }
    public FileSecurity(string fileName, System.Security.AccessControl.AccessControlSections includeSections) { }
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class FileSystemAccessRule : System.Security.AccessControl.AccessRule {
    public FileSystemAccessRule(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public FileSystemAccessRule(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public FileSystemAccessRule(string identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public FileSystemAccessRule(string identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public System.Security.AccessControl.FileSystemRights FileSystemRights { get { return default(System.Security.AccessControl.FileSystemRights); } }
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class FileSystemAuditRule : System.Security.AccessControl.AuditRule {
    public FileSystemAuditRule(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.AuditFlags flags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public FileSystemAuditRule(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public FileSystemAuditRule(string identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.AuditFlags flags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public FileSystemAuditRule(string identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public System.Security.AccessControl.FileSystemRights FileSystemRights { get { return default(System.Security.AccessControl.FileSystemRights); } }
  }
  [System.FlagsAttribute]
  [System.Security.SecurityCriticalAttribute]
  public enum FileSystemRights {
    AppendData = 4,
    ChangePermissions = 262144,
    CreateDirectories = 4,
    CreateFiles = 2,
    Delete = 65536,
    DeleteSubdirectoriesAndFiles = 64,
    ExecuteFile = 32,
    FullControl = 2032127,
    ListDirectory = 1,
    Modify = 197055,
    Read = 131209,
    ReadAndExecute = 131241,
    ReadAttributes = 128,
    ReadData = 1,
    ReadExtendedAttributes = 8,
    ReadPermissions = 131072,
    Synchronize = 1048576,
    TakeOwnership = 524288,
    Traverse = 32,
    Write = 278,
    WriteAttributes = 256,
    WriteData = 2,
    WriteExtendedAttributes = 16,
  }
  [System.Security.SecurityCriticalAttribute]
  public abstract partial class FileSystemSecurity : System.Security.AccessControl.NativeObjectSecurity {
    internal FileSystemSecurity() : base (default(bool), default(System.Security.AccessControl.ResourceType)) { }
    public override System.Type AccessRightType { get { return default(System.Type); } }
    public override System.Type AccessRuleType { get { return default(System.Type); } }
    public override System.Type AuditRuleType { get { return default(System.Type); } }
    public sealed override System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type) { return default(System.Security.AccessControl.AccessRule); }
    public void AddAccessRule(System.Security.AccessControl.FileSystemAccessRule rule) { }
    public void AddAuditRule(System.Security.AccessControl.FileSystemAuditRule rule) { }
    public sealed override System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags) { return default(System.Security.AccessControl.AuditRule); }
    public bool RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule rule) { return default(bool); }
    public void RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule rule) { }
    public void RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule rule) { }
    public bool RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule rule) { return default(bool); }
    public void RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule rule) { }
    public void RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule rule) { }
    public void ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule rule) { }
    public void SetAccessRule(System.Security.AccessControl.FileSystemAccessRule rule) { }
    public void SetAuditRule(System.Security.AccessControl.FileSystemAuditRule rule) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.IO.FileSystem.DriveInfo")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.IO.FileSystem.DriveInfo")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.IO.FileSystem.DriveInfo")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.IO {
  public sealed partial class DriveInfo {
    public DriveInfo(string driveName) { }
    public long AvailableFreeSpace { get { return default(long); } }
    public string DriveFormat { get { return default(string); } }
    public System.IO.DriveType DriveType { get { return default(System.IO.DriveType); } }
    public bool IsReady { get { return default(bool); } }
    public string Name { get { return default(string); } }
    public System.IO.DirectoryInfo RootDirectory { get { return default(System.IO.DirectoryInfo); } }
    public long TotalFreeSpace { get { return default(long); } }
    public long TotalSize { get { return default(long); } }
    public string VolumeLabel { get { return default(string); } set { } }
    public static System.IO.DriveInfo[] GetDrives() { return default(System.IO.DriveInfo[]); }
    public override string ToString() { return default(string); }
  }
  public partial class DriveNotFoundException : System.IO.IOException {
    public DriveNotFoundException() { }
    public DriveNotFoundException(string message) { }
    public DriveNotFoundException(string message, System.Exception innerException) { }
  }
  public enum DriveType {
    CDRom = 5,
    Fixed = 3,
    Network = 4,
    NoRootDirectory = 1,
    Ram = 6,
    Removable = 2,
    Unknown = 0,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.IO.FileSystem.Primitives")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.IO.FileSystem.Primitives")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.IO.FileSystem.Primitives")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.IO {
  [System.FlagsAttribute]
  public enum FileAccess {
    Read = 1,
    ReadWrite = 3,
    Write = 2,
  }
  [System.FlagsAttribute]
  public enum FileAttributes {
    Archive = 32,
    Compressed = 2048,
    Device = 64,
    Directory = 16,
    Encrypted = 16384,
    Hidden = 2,
    IntegrityStream = 32768,
    Normal = 128,
    NoScrubData = 131072,
    NotContentIndexed = 8192,
    Offline = 4096,
    ReadOnly = 1,
    ReparsePoint = 1024,
    SparseFile = 512,
    System = 4,
    Temporary = 256,
  }
  public enum FileMode {
    Append = 6,
    Create = 2,
    CreateNew = 1,
    Open = 3,
    OpenOrCreate = 4,
    Truncate = 5,
  }
  [System.FlagsAttribute]
  public enum FileShare {
    Delete = 4,
    Inheritable = 16,
    None = 0,
    Read = 1,
    ReadWrite = 3,
    Write = 2,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.IO.FileSystem.Watcher")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.IO.FileSystem.Watcher")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.IO.FileSystem.Watcher")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.IO {
  public partial class ErrorEventArgs : System.EventArgs {
    public ErrorEventArgs(System.Exception exception) { }
    public virtual System.Exception GetException() { return default(System.Exception); }
  }
  public delegate void ErrorEventHandler(object sender, System.IO.ErrorEventArgs e);
  public partial class FileSystemEventArgs : System.EventArgs {
    public FileSystemEventArgs(System.IO.WatcherChangeTypes changeType, string directory, string name) { }
    public System.IO.WatcherChangeTypes ChangeType { get { return default(System.IO.WatcherChangeTypes); } }
    public string FullPath { get { return default(string); } }
    public string Name { get { return default(string); } }
  }
  public delegate void FileSystemEventHandler(object sender, System.IO.FileSystemEventArgs e);
  public partial class FileSystemWatcher : System.IDisposable {
    public FileSystemWatcher() { }
    public FileSystemWatcher(string path) { }
    public FileSystemWatcher(string path, string filter) { }
    public bool EnableRaisingEvents { get { return default(bool); } set { } }
    public string Filter { get { return default(string); } set { } }
    public bool IncludeSubdirectories { get { return default(bool); } set { } }
    public int InternalBufferSize { get { return default(int); } set { } }
    public System.IO.NotifyFilters NotifyFilter { get { return default(System.IO.NotifyFilters); } set { } }
    public string Path { get { return default(string); } set { } }
    public event System.IO.FileSystemEventHandler Changed { add { } remove { } }
    public event System.IO.FileSystemEventHandler Created { add { } remove { } }
    public event System.IO.FileSystemEventHandler Deleted { add { } remove { } }
    public event System.IO.ErrorEventHandler Error { add { } remove { } }
    public event System.IO.RenamedEventHandler Renamed { add { } remove { } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    protected void OnChanged(System.IO.FileSystemEventArgs e) { }
    protected void OnCreated(System.IO.FileSystemEventArgs e) { }
    protected void OnDeleted(System.IO.FileSystemEventArgs e) { }
    protected void OnError(System.IO.ErrorEventArgs e) { }
    protected void OnRenamed(System.IO.RenamedEventArgs e) { }
    public System.IO.WaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType) { return default(System.IO.WaitForChangedResult); }
    public System.IO.WaitForChangedResult WaitForChanged(System.IO.WatcherChangeTypes changeType, int timeout) { return default(System.IO.WaitForChangedResult); }
  }
  [System.FlagsAttribute]
  public enum NotifyFilters {
    Attributes = 4,
    CreationTime = 64,
    DirectoryName = 2,
    FileName = 1,
    LastAccess = 32,
    LastWrite = 16,
    Security = 256,
    Size = 8,
  }
  public partial class RenamedEventArgs : System.IO.FileSystemEventArgs {
    public RenamedEventArgs(System.IO.WatcherChangeTypes changeType, string directory, string name, string oldName) : base (default(System.IO.WatcherChangeTypes), default(string), default(string)) { }
    public string OldFullPath { get { return default(string); } }
    public string OldName { get { return default(string); } }
  }
  public delegate void RenamedEventHandler(object sender, System.IO.RenamedEventArgs e);
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Size=1)]
  public partial struct WaitForChangedResult {
    public System.IO.WatcherChangeTypes ChangeType { get { return default(System.IO.WatcherChangeTypes); } set { } }
    public string Name { get { return default(string); } set { } }
    public string OldName { get { return default(string); } set { } }
    public bool TimedOut { get { return default(bool); } set { } }
  }
  [System.FlagsAttribute]
  public enum WatcherChangeTypes {
    All = 15,
    Changed = 4,
    Created = 1,
    Deleted = 2,
    Renamed = 8,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.IO.MemoryMappedFiles")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.IO.MemoryMappedFiles")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.IO.MemoryMappedFiles")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace Microsoft.Win32.SafeHandles {
  public sealed partial class SafeMemoryMappedFileHandle : System.Runtime.InteropServices.SafeHandle {
    internal SafeMemoryMappedFileHandle() : base (default(System.IntPtr), default(bool)) { }
    public override bool IsInvalid { get { return default(bool); } }
    protected override bool ReleaseHandle() { return default(bool); }
  }
  public sealed partial class SafeMemoryMappedViewHandle : System.Runtime.InteropServices.SafeBuffer {
    internal SafeMemoryMappedViewHandle() : base (default(bool)) { }
    protected override bool ReleaseHandle() { return default(bool); }
  }
}
namespace System.IO.MemoryMappedFiles {
  public partial class MemoryMappedFile : System.IDisposable {
    internal MemoryMappedFile() { }
    public Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle SafeMemoryMappedFileHandle { get { return default(Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle); } }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateFromFile(System.IO.FileStream fileStream, string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access, System.IO.HandleInheritability inheritability, bool leaveOpen) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateFromFile(string path) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateFromFile(string path, System.IO.FileMode mode) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateFromFile(string path, System.IO.FileMode mode, string mapName) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateFromFile(string path, System.IO.FileMode mode, string mapName, long capacity) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateFromFile(string path, System.IO.FileMode mode, string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateNew(string mapName, long capacity) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateNew(string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateNew(string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access, System.IO.MemoryMappedFiles.MemoryMappedFileOptions options, System.IO.HandleInheritability inheritability) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateOrOpen(string mapName, long capacity) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateOrOpen(string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile CreateOrOpen(string mapName, long capacity, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access, System.IO.MemoryMappedFiles.MemoryMappedFileOptions options, System.IO.HandleInheritability inheritability) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public System.IO.MemoryMappedFiles.MemoryMappedViewAccessor CreateViewAccessor() { return default(System.IO.MemoryMappedFiles.MemoryMappedViewAccessor); }
    public System.IO.MemoryMappedFiles.MemoryMappedViewAccessor CreateViewAccessor(long offset, long size) { return default(System.IO.MemoryMappedFiles.MemoryMappedViewAccessor); }
    public System.IO.MemoryMappedFiles.MemoryMappedViewAccessor CreateViewAccessor(long offset, long size, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access) { return default(System.IO.MemoryMappedFiles.MemoryMappedViewAccessor); }
    public System.IO.MemoryMappedFiles.MemoryMappedViewStream CreateViewStream() { return default(System.IO.MemoryMappedFiles.MemoryMappedViewStream); }
    public System.IO.MemoryMappedFiles.MemoryMappedViewStream CreateViewStream(long offset, long size) { return default(System.IO.MemoryMappedFiles.MemoryMappedViewStream); }
    public System.IO.MemoryMappedFiles.MemoryMappedViewStream CreateViewStream(long offset, long size, System.IO.MemoryMappedFiles.MemoryMappedFileAccess access) { return default(System.IO.MemoryMappedFiles.MemoryMappedViewStream); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile OpenExisting(string mapName) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile OpenExisting(string mapName, System.IO.MemoryMappedFiles.MemoryMappedFileRights desiredAccessRights) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
    public static System.IO.MemoryMappedFiles.MemoryMappedFile OpenExisting(string mapName, System.IO.MemoryMappedFiles.MemoryMappedFileRights desiredAccessRights, System.IO.HandleInheritability inheritability) { return default(System.IO.MemoryMappedFiles.MemoryMappedFile); }
  }
  public enum MemoryMappedFileAccess {
    CopyOnWrite = 3,
    Read = 1,
    ReadExecute = 4,
    ReadWrite = 0,
    ReadWriteExecute = 5,
    Write = 2,
  }
  [System.FlagsAttribute]
  public enum MemoryMappedFileOptions {
    DelayAllocatePages = 67108864,
    None = 0,
  }
  [System.FlagsAttribute]
  public enum MemoryMappedFileRights {
    AccessSystemSecurity = 16777216,
    ChangePermissions = 262144,
    CopyOnWrite = 1,
    Delete = 65536,
    Execute = 8,
    FullControl = 983055,
    Read = 4,
    ReadExecute = 12,
    ReadPermissions = 131072,
    ReadWrite = 6,
    ReadWriteExecute = 14,
    TakeOwnership = 524288,
    Write = 2,
  }
  public sealed partial class MemoryMappedViewAccessor : System.IO.UnmanagedMemoryAccessor {
    internal MemoryMappedViewAccessor() { }
    public long PointerOffset { get { return default(long); } }
    public Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle SafeMemoryMappedViewHandle { get { return default(Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle); } }
    protected override void Dispose(bool disposing) { }
    public void Flush() { }
  }
  public sealed partial class MemoryMappedViewStream : System.IO.UnmanagedMemoryStream {
    internal MemoryMappedViewStream() { }
    public long PointerOffset { get { return default(long); } }
    public Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle SafeMemoryMappedViewHandle { get { return default(Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle); } }
    protected override void Dispose(bool disposing) { }
    public override void Flush() { }
    public override void SetLength(long value) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.IO.Pipes")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.IO.Pipes")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.IO.Pipes")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace Microsoft.Win32.SafeHandles {
  public sealed partial class SafePipeHandle : System.Runtime.InteropServices.SafeHandle {
    public SafePipeHandle(System.IntPtr preexistingHandle, bool ownsHandle) : base (default(System.IntPtr), default(bool)) { }
    public override bool IsInvalid { get { return default(bool); } }
    protected override bool ReleaseHandle() { return default(bool); }
  }
}
namespace System.IO.Pipes {
  public sealed partial class AnonymousPipeClientStream : System.IO.Pipes.PipeStream {
    public AnonymousPipeClientStream(System.IO.Pipes.PipeDirection direction, Microsoft.Win32.SafeHandles.SafePipeHandle safePipeHandle) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public AnonymousPipeClientStream(System.IO.Pipes.PipeDirection direction, string pipeHandleAsString) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public AnonymousPipeClientStream(string pipeHandleAsString) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public override System.IO.Pipes.PipeTransmissionMode ReadMode { set { } }
    public override System.IO.Pipes.PipeTransmissionMode TransmissionMode { get { return default(System.IO.Pipes.PipeTransmissionMode); } }
    ~AnonymousPipeClientStream() { }
  }
  public sealed partial class AnonymousPipeServerStream : System.IO.Pipes.PipeStream {
    public AnonymousPipeServerStream() : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public AnonymousPipeServerStream(System.IO.Pipes.PipeDirection direction) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public AnonymousPipeServerStream(System.IO.Pipes.PipeDirection direction, Microsoft.Win32.SafeHandles.SafePipeHandle serverSafePipeHandle, Microsoft.Win32.SafeHandles.SafePipeHandle clientSafePipeHandle) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public AnonymousPipeServerStream(System.IO.Pipes.PipeDirection direction, System.IO.HandleInheritability inheritability) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public AnonymousPipeServerStream(System.IO.Pipes.PipeDirection direction, System.IO.HandleInheritability inheritability, int bufferSize) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public Microsoft.Win32.SafeHandles.SafePipeHandle ClientSafePipeHandle { get { return default(Microsoft.Win32.SafeHandles.SafePipeHandle); } }
    public override System.IO.Pipes.PipeTransmissionMode ReadMode { set { } }
    public override System.IO.Pipes.PipeTransmissionMode TransmissionMode { get { return default(System.IO.Pipes.PipeTransmissionMode); } }
    protected override void Dispose(bool disposing) { }
    public void DisposeLocalCopyOfClientHandle() { }
    ~AnonymousPipeServerStream() { }
    public string GetClientHandleAsString() { return default(string); }
  }
  public sealed partial class NamedPipeClientStream : System.IO.Pipes.PipeStream {
    public NamedPipeClientStream(System.IO.Pipes.PipeDirection direction, bool isAsync, bool isConnected, Microsoft.Win32.SafeHandles.SafePipeHandle safePipeHandle) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public NamedPipeClientStream(string pipeName) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public NamedPipeClientStream(string serverName, string pipeName) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public NamedPipeClientStream(string serverName, string pipeName, System.IO.Pipes.PipeDirection direction) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public NamedPipeClientStream(string serverName, string pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public NamedPipeClientStream(string serverName, string pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options, System.Security.Principal.TokenImpersonationLevel impersonationLevel) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public int NumberOfServerInstances { get { return default(int); } }
    public void Connect() { }
    public void Connect(int timeout) { }
    public System.Threading.Tasks.Task ConnectAsync() { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ConnectAsync(int timeout) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ConnectAsync(int timeout, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ConnectAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    ~NamedPipeClientStream() { }
  }
  public sealed partial class NamedPipeServerStream : System.IO.Pipes.PipeStream {
    public NamedPipeServerStream(System.IO.Pipes.PipeDirection direction, bool isAsync, bool isConnected, Microsoft.Win32.SafeHandles.SafePipeHandle safePipeHandle) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public NamedPipeServerStream(string pipeName) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public NamedPipeServerStream(string pipeName, System.IO.Pipes.PipeDirection direction) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public NamedPipeServerStream(string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public NamedPipeServerStream(string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances, System.IO.Pipes.PipeTransmissionMode transmissionMode) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public NamedPipeServerStream(string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances, System.IO.Pipes.PipeTransmissionMode transmissionMode, System.IO.Pipes.PipeOptions options) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public NamedPipeServerStream(string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances, System.IO.Pipes.PipeTransmissionMode transmissionMode, System.IO.Pipes.PipeOptions options, int inBufferSize, int outBufferSize) : base (default(System.IO.Pipes.PipeDirection), default(int)) { }
    public void Disconnect() { }
    ~NamedPipeServerStream() { }
    public string GetImpersonationUserName() { return default(string); }
    public void WaitForConnection() { }
    public System.Threading.Tasks.Task WaitForConnectionAsync() { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task WaitForConnectionAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
  }
  public enum PipeDirection {
    In = 1,
    InOut = 3,
    Out = 2,
  }
  [System.FlagsAttribute]
  public enum PipeOptions {
    Asynchronous = 1073741824,
    None = 0,
    WriteThrough = -2147483648,
  }
  public abstract partial class PipeStream : System.IO.Stream {
    protected PipeStream(System.IO.Pipes.PipeDirection direction, int bufferSize) { }
    protected PipeStream(System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeTransmissionMode transmissionMode, int outBufferSize) { }
    public override bool CanRead { get { return default(bool); } }
    public override bool CanSeek { get { return default(bool); } }
    public override bool CanWrite { get { return default(bool); } }
    public virtual int InBufferSize { get { return default(int); } }
    public bool IsAsync { get { return default(bool); } }
    public bool IsConnected { get { return default(bool); } protected set { } }
    public bool IsMessageComplete { get { return default(bool); } }
    public override long Length { get { return default(long); } }
    public virtual int OutBufferSize { get { return default(int); } }
    public override long Position { get { return default(long); } set { } }
    public virtual System.IO.Pipes.PipeTransmissionMode ReadMode { get { return default(System.IO.Pipes.PipeTransmissionMode); } set { } }
    public Microsoft.Win32.SafeHandles.SafePipeHandle SafePipeHandle { get { return default(Microsoft.Win32.SafeHandles.SafePipeHandle); } }
    public virtual System.IO.Pipes.PipeTransmissionMode TransmissionMode { get { return default(System.IO.Pipes.PipeTransmissionMode); } }
    protected override void Dispose(bool disposing) { }
    public override void Flush() { }
    public override int Read(byte[] buffer, int offset, int count) { return default(int); }
    public override System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<int>); }
    public override int ReadByte() { return default(int); }
    public override long Seek(long offset, System.IO.SeekOrigin origin) { return default(long); }
    public override void SetLength(long value) { }
    public void WaitForPipeDrain() { }
    public override void Write(byte[] buffer, int offset, int count) { }
    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public override void WriteByte(byte value) { }
  }
  public enum PipeTransmissionMode {
    Byte = 0,
    Message = 1,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.IO.UnmanagedMemoryStream")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.IO.UnmanagedMemoryStream")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.IO.UnmanagedMemoryStream")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.IO {
  public partial class UnmanagedMemoryAccessor : System.IDisposable {
    protected UnmanagedMemoryAccessor() { }
    public UnmanagedMemoryAccessor(System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity) { }
    public UnmanagedMemoryAccessor(System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity, System.IO.FileAccess access) { }
    public bool CanRead { get { return default(bool); } }
    public bool CanWrite { get { return default(bool); } }
    public long Capacity { get { return default(long); } }
    protected bool IsOpen { get { return default(bool); } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    protected void Initialize(System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity, System.IO.FileAccess access) { }
    public bool ReadBoolean(long position) { return default(bool); }
    public byte ReadByte(long position) { return default(byte); }
    public char ReadChar(long position) { return default(char); }
    public decimal ReadDecimal(long position) { return default(decimal); }
    public double ReadDouble(long position) { return default(double); }
    public short ReadInt16(long position) { return default(short); }
    public int ReadInt32(long position) { return default(int); }
    public long ReadInt64(long position) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public sbyte ReadSByte(long position) { return default(sbyte); }
    public float ReadSingle(long position) { return default(float); }
    [System.CLSCompliantAttribute(false)]
    public ushort ReadUInt16(long position) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public uint ReadUInt32(long position) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public ulong ReadUInt64(long position) { return default(ulong); }
    public void Write(long position, bool value) { }
    public void Write(long position, byte value) { }
    public void Write(long position, char value) { }
    public void Write(long position, decimal value) { }
    public void Write(long position, double value) { }
    public void Write(long position, short value) { }
    public void Write(long position, int value) { }
    public void Write(long position, long value) { }
    [System.CLSCompliantAttribute(false)]
    public void Write(long position, sbyte value) { }
    public void Write(long position, float value) { }
    [System.CLSCompliantAttribute(false)]
    public void Write(long position, ushort value) { }
    [System.CLSCompliantAttribute(false)]
    public void Write(long position, uint value) { }
    [System.CLSCompliantAttribute(false)]
    public void Write(long position, ulong value) { }
  }
  public partial class UnmanagedMemoryStream : System.IO.Stream {
    protected UnmanagedMemoryStream() { }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe UnmanagedMemoryStream(byte* pointer, long length) { }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe UnmanagedMemoryStream(byte* pointer, long length, long capacity, System.IO.FileAccess access) { }
    public UnmanagedMemoryStream(System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length) { }
    public UnmanagedMemoryStream(System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length, System.IO.FileAccess access) { }
    public override bool CanRead { get { return default(bool); } }
    public override bool CanSeek { get { return default(bool); } }
    public override bool CanWrite { get { return default(bool); } }
    public long Capacity { get { return default(long); } }
    public override long Length { get { return default(long); } }
    public override long Position { get { return default(long); } set { } }
    [System.CLSCompliantAttribute(false)]
    public unsafe byte* PositionPointer { [System.Security.SecurityCriticalAttribute]get { return default(byte*); } [System.Security.SecurityCriticalAttribute]set { } }
    protected override void Dispose(bool disposing) { }
    public override void Flush() { }
    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    protected unsafe void Initialize(byte* pointer, long length, long capacity, System.IO.FileAccess access) { }
    protected void Initialize(System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length, System.IO.FileAccess access) { }
    public override int Read(byte[] buffer, int offset, int count) { return default(int); }
    public override System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<int>); }
    public override int ReadByte() { return default(int); }
    public override long Seek(long offset, System.IO.SeekOrigin loc) { return default(long); }
    public override void SetLength(long value) { }
    public override void Write(byte[] buffer, int offset, int count) { }
    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public override void WriteByte(byte value) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Linq")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Linq")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Linq")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Linq {
  public static partial class Enumerable {
    public static TSource Aggregate<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TSource, TSource> func) { return default(TSource); }
    public static TAccumulate Aggregate<TSource, TAccumulate>(this System.Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate> func) { return default(TAccumulate); }
    public static TResult Aggregate<TSource, TAccumulate, TResult>(this System.Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate> func, System.Func<TAccumulate, TResult> resultSelector) { return default(TResult); }
    public static bool All<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, bool> predicate) { return default(bool); }
    public static bool Any<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(bool); }
    public static bool Any<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, bool> predicate) { return default(bool); }
    public static System.Collections.Generic.IEnumerable<TSource> Append<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, TSource element) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static decimal Average(this System.Collections.Generic.IEnumerable<decimal> source) { return default(decimal); }
    public static double Average(this System.Collections.Generic.IEnumerable<double> source) { return default(double); }
    public static double Average(this System.Collections.Generic.IEnumerable<int> source) { return default(double); }
    public static double Average(this System.Collections.Generic.IEnumerable<long> source) { return default(double); }
    public static System.Nullable<decimal> Average(this System.Collections.Generic.IEnumerable<System.Nullable<decimal>> source) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Average(this System.Collections.Generic.IEnumerable<System.Nullable<double>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<double> Average(this System.Collections.Generic.IEnumerable<System.Nullable<int>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<double> Average(this System.Collections.Generic.IEnumerable<System.Nullable<long>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<float> Average(this System.Collections.Generic.IEnumerable<System.Nullable<float>> source) { return default(System.Nullable<float>); }
    public static float Average(this System.Collections.Generic.IEnumerable<float> source) { return default(float); }
    public static decimal Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, decimal> selector) { return default(decimal); }
    public static double Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, double> selector) { return default(double); }
    public static double Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, int> selector) { return default(double); }
    public static double Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, long> selector) { return default(double); }
    public static System.Nullable<decimal> Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<decimal>> selector) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<double>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<double> Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<int>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<double> Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<long>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<float> Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<float>> selector) { return default(System.Nullable<float>); }
    public static float Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, float> selector) { return default(float); }
    public static System.Collections.Generic.IEnumerable<TResult> Cast<TResult>(this System.Collections.IEnumerable source) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TSource> Concat<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static bool Contains<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, TSource value) { return default(bool); }
    public static bool Contains<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, TSource value, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(bool); }
    public static int Count<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(int); }
    public static int Count<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, bool> predicate) { return default(int); }
    public static System.Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, TSource defaultValue) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> Distinct<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> Distinct<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static TSource ElementAt<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, int index) { return default(TSource); }
    public static TSource ElementAtOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, int index) { return default(TSource); }
    public static System.Collections.Generic.IEnumerable<TResult> Empty<TResult>() { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TSource> Except<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> Except<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static TSource First<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(TSource); }
    public static TSource First<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, bool> predicate) { return default(TSource); }
    public static TSource FirstOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(TSource); }
    public static TSource FirstOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, bool> predicate) { return default(TSource); }
    public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TSource>>); }
    public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TSource>>); }
    public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector) { return default(System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>); }
    public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>); }
    public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult> resultSelector) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult> resultSelector) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter, TKey> outerKeySelector, System.Func<TInner, TKey> innerKeySelector, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult> resultSelector) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter, TKey> outerKeySelector, System.Func<TInner, TKey> innerKeySelector, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TSource> Intersect<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> Intersect<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter, TKey> outerKeySelector, System.Func<TInner, TKey> innerKeySelector, System.Func<TOuter, TInner, TResult> resultSelector) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter, TKey> outerKeySelector, System.Func<TInner, TKey> innerKeySelector, System.Func<TOuter, TInner, TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static TSource Last<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(TSource); }
    public static TSource Last<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, bool> predicate) { return default(TSource); }
    public static TSource LastOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(TSource); }
    public static TSource LastOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, bool> predicate) { return default(TSource); }
    public static long LongCount<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(long); }
    public static long LongCount<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, bool> predicate) { return default(long); }
    public static decimal Max(this System.Collections.Generic.IEnumerable<decimal> source) { return default(decimal); }
    public static double Max(this System.Collections.Generic.IEnumerable<double> source) { return default(double); }
    public static int Max(this System.Collections.Generic.IEnumerable<int> source) { return default(int); }
    public static long Max(this System.Collections.Generic.IEnumerable<long> source) { return default(long); }
    public static System.Nullable<decimal> Max(this System.Collections.Generic.IEnumerable<System.Nullable<decimal>> source) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Max(this System.Collections.Generic.IEnumerable<System.Nullable<double>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Max(this System.Collections.Generic.IEnumerable<System.Nullable<int>> source) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Max(this System.Collections.Generic.IEnumerable<System.Nullable<long>> source) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Max(this System.Collections.Generic.IEnumerable<System.Nullable<float>> source) { return default(System.Nullable<float>); }
    public static float Max(this System.Collections.Generic.IEnumerable<float> source) { return default(float); }
    public static TSource Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(TSource); }
    public static decimal Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, decimal> selector) { return default(decimal); }
    public static double Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, double> selector) { return default(double); }
    public static int Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, int> selector) { return default(int); }
    public static long Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, long> selector) { return default(long); }
    public static System.Nullable<decimal> Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<decimal>> selector) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<double>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<int>> selector) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<long>> selector) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<float>> selector) { return default(System.Nullable<float>); }
    public static float Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, float> selector) { return default(float); }
    public static TResult Max<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TResult> selector) { return default(TResult); }
    public static decimal Min(this System.Collections.Generic.IEnumerable<decimal> source) { return default(decimal); }
    public static double Min(this System.Collections.Generic.IEnumerable<double> source) { return default(double); }
    public static int Min(this System.Collections.Generic.IEnumerable<int> source) { return default(int); }
    public static long Min(this System.Collections.Generic.IEnumerable<long> source) { return default(long); }
    public static System.Nullable<decimal> Min(this System.Collections.Generic.IEnumerable<System.Nullable<decimal>> source) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Min(this System.Collections.Generic.IEnumerable<System.Nullable<double>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Min(this System.Collections.Generic.IEnumerable<System.Nullable<int>> source) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Min(this System.Collections.Generic.IEnumerable<System.Nullable<long>> source) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Min(this System.Collections.Generic.IEnumerable<System.Nullable<float>> source) { return default(System.Nullable<float>); }
    public static float Min(this System.Collections.Generic.IEnumerable<float> source) { return default(float); }
    public static TSource Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(TSource); }
    public static decimal Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, decimal> selector) { return default(decimal); }
    public static double Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, double> selector) { return default(double); }
    public static int Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, int> selector) { return default(int); }
    public static long Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, long> selector) { return default(long); }
    public static System.Nullable<decimal> Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<decimal>> selector) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<double>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<int>> selector) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<long>> selector) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<float>> selector) { return default(System.Nullable<float>); }
    public static float Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, float> selector) { return default(float); }
    public static TResult Min<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TResult> selector) { return default(TResult); }
    public static System.Collections.Generic.IEnumerable<TResult> OfType<TResult>(this System.Collections.IEnumerable source) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Linq.IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Linq.IOrderedEnumerable<TSource>); }
    public static System.Linq.IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Linq.IOrderedEnumerable<TSource>); }
    public static System.Linq.IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Linq.IOrderedEnumerable<TSource>); }
    public static System.Linq.IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Linq.IOrderedEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> Prepend<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, TSource element) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<int> Range(int start, int count) { return default(System.Collections.Generic.IEnumerable<int>); }
    public static System.Collections.Generic.IEnumerable<TResult> Repeat<TResult>(TResult element, int count) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TSource> Reverse<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TResult> selector) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, int, TResult> selector) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>> selector) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>> selector) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, System.Func<TSource, TCollection, TResult> resultSelector) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, System.Func<TSource, TCollection, TResult> resultSelector) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public static bool SequenceEqual<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) { return default(bool); }
    public static bool SequenceEqual<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(bool); }
    public static TSource Single<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(TSource); }
    public static TSource Single<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, bool> predicate) { return default(TSource); }
    public static TSource SingleOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(TSource); }
    public static TSource SingleOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, bool> predicate) { return default(TSource); }
    public static System.Collections.Generic.IEnumerable<TSource> Skip<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, int count) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, bool> predicate) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, int, bool> predicate) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static decimal Sum(this System.Collections.Generic.IEnumerable<decimal> source) { return default(decimal); }
    public static double Sum(this System.Collections.Generic.IEnumerable<double> source) { return default(double); }
    public static int Sum(this System.Collections.Generic.IEnumerable<int> source) { return default(int); }
    public static long Sum(this System.Collections.Generic.IEnumerable<long> source) { return default(long); }
    public static System.Nullable<decimal> Sum(this System.Collections.Generic.IEnumerable<System.Nullable<decimal>> source) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Sum(this System.Collections.Generic.IEnumerable<System.Nullable<double>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Sum(this System.Collections.Generic.IEnumerable<System.Nullable<int>> source) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Sum(this System.Collections.Generic.IEnumerable<System.Nullable<long>> source) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Sum(this System.Collections.Generic.IEnumerable<System.Nullable<float>> source) { return default(System.Nullable<float>); }
    public static float Sum(this System.Collections.Generic.IEnumerable<float> source) { return default(float); }
    public static decimal Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, decimal> selector) { return default(decimal); }
    public static double Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, double> selector) { return default(double); }
    public static int Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, int> selector) { return default(int); }
    public static long Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, long> selector) { return default(long); }
    public static System.Nullable<decimal> Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<decimal>> selector) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<double>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<int>> selector) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<long>> selector) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, System.Nullable<float>> selector) { return default(System.Nullable<float>); }
    public static float Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, float> selector) { return default(float); }
    public static System.Collections.Generic.IEnumerable<TSource> Take<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, int count) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, bool> predicate) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, int, bool> predicate) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Linq.IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this System.Linq.IOrderedEnumerable<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Linq.IOrderedEnumerable<TSource>); }
    public static System.Linq.IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this System.Linq.IOrderedEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Linq.IOrderedEnumerable<TSource>); }
    public static System.Linq.IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this System.Linq.IOrderedEnumerable<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Linq.IOrderedEnumerable<TSource>); }
    public static System.Linq.IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this System.Linq.IOrderedEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Linq.IOrderedEnumerable<TSource>); }
    public static TSource[] ToArray<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(TSource[]); }
    public static System.Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Collections.Generic.Dictionary<TKey, TSource>); }
    public static System.Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Collections.Generic.Dictionary<TKey, TSource>); }
    public static System.Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector) { return default(System.Collections.Generic.Dictionary<TKey, TElement>); }
    public static System.Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Collections.Generic.Dictionary<TKey, TElement>); }
    public static System.Collections.Generic.List<TSource> ToList<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(System.Collections.Generic.List<TSource>); }
    public static System.Linq.ILookup<TKey, TSource> ToLookup<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Linq.ILookup<TKey, TSource>); }
    public static System.Linq.ILookup<TKey, TSource> ToLookup<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.ILookup<TKey, TSource>); }
    public static System.Linq.ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector) { return default(System.Linq.ILookup<TKey, TElement>); }
    public static System.Linq.ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.ILookup<TKey, TElement>); }
    public static System.Collections.Generic.IEnumerable<TSource> Union<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> Union<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> Where<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, bool> predicate) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> Where<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource, int, bool> predicate) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Collections.Generic.IEnumerable<TResult> Zip<TFirst, TSecond, TResult>(this System.Collections.Generic.IEnumerable<TFirst> first, System.Collections.Generic.IEnumerable<TSecond> second, System.Func<TFirst, TSecond, TResult> resultSelector) { return default(System.Collections.Generic.IEnumerable<TResult>); }
  }
  public partial interface IGrouping<out TKey, out TElement> : System.Collections.Generic.IEnumerable<TElement>, System.Collections.IEnumerable {
    TKey Key { get; }
  }
  public partial interface ILookup<TKey, TElement> : System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>, System.Collections.IEnumerable {
    int Count { get; }
    System.Collections.Generic.IEnumerable<TElement> this[TKey key] { get; }
    bool Contains(TKey key);
  }
  public partial interface IOrderedEnumerable<TElement> : System.Collections.Generic.IEnumerable<TElement>, System.Collections.IEnumerable {
    System.Linq.IOrderedEnumerable<TElement> CreateOrderedEnumerable<TKey>(System.Func<TElement, TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer, bool descending);
  }
  public partial class Lookup<TKey, TElement> : System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>, System.Collections.IEnumerable, System.Linq.ILookup<TKey, TElement> {
    internal Lookup() { }
    public int Count { get { return default(int); } }
    public System.Collections.Generic.IEnumerable<TElement> this[TKey key] { get { return default(System.Collections.Generic.IEnumerable<TElement>); } }
    public System.Collections.Generic.IEnumerable<TResult> ApplyResultSelector<TResult>(System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult> resultSelector) { return default(System.Collections.Generic.IEnumerable<TResult>); }
    public bool Contains(TKey key) { return default(bool); }
    public System.Collections.Generic.IEnumerator<System.Linq.IGrouping<TKey, TElement>> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Linq.IGrouping<TKey, TElement>>); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Linq.Expressions")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Linq.Expressions")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Linq.Expressions")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Linq {
  public partial interface IOrderedQueryable : System.Collections.IEnumerable, System.Linq.IQueryable {
  }
  public partial interface IOrderedQueryable<out T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Linq.IOrderedQueryable, System.Linq.IQueryable, System.Linq.IQueryable<T> {
  }
  public partial interface IQueryable : System.Collections.IEnumerable {
    System.Type ElementType { get; }
    System.Linq.Expressions.Expression Expression { get; }
    System.Linq.IQueryProvider Provider { get; }
  }
  public partial interface IQueryable<out T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Linq.IQueryable {
  }
  public partial interface IQueryProvider {
    System.Linq.IQueryable CreateQuery(System.Linq.Expressions.Expression expression);
    System.Linq.IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression);
    object Execute(System.Linq.Expressions.Expression expression);
    TResult Execute<TResult>(System.Linq.Expressions.Expression expression);
  }
}
namespace System.Linq.Expressions {
  public partial class BinaryExpression : System.Linq.Expressions.Expression {
    internal BinaryExpression() { }
    public override bool CanReduce { get { return default(bool); } }
    public System.Linq.Expressions.LambdaExpression Conversion { get { return default(System.Linq.Expressions.LambdaExpression); } }
    public bool IsLifted { get { return default(bool); } }
    public bool IsLiftedToNull { get { return default(bool); } }
    public System.Linq.Expressions.Expression Left { get { return default(System.Linq.Expressions.Expression); } }
    public System.Reflection.MethodInfo Method { get { return default(System.Reflection.MethodInfo); } }
    public System.Linq.Expressions.Expression Right { get { return default(System.Linq.Expressions.Expression); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public override System.Linq.Expressions.Expression Reduce() { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.BinaryExpression Update(System.Linq.Expressions.Expression left, System.Linq.Expressions.LambdaExpression conversion, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
  }
  public partial class BlockExpression : System.Linq.Expressions.Expression {
    internal BlockExpression() { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Expressions { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public System.Linq.Expressions.Expression Result { get { return default(System.Linq.Expressions.Expression); } }
    public override System.Type Type { get { return default(System.Type); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> Variables { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression>); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.BlockExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions) { return default(System.Linq.Expressions.BlockExpression); }
  }
  public sealed partial class CatchBlock {
    internal CatchBlock() { }
    public System.Linq.Expressions.Expression Body { get { return default(System.Linq.Expressions.Expression); } }
    public System.Linq.Expressions.Expression Filter { get { return default(System.Linq.Expressions.Expression); } }
    public System.Type Test { get { return default(System.Type); } }
    public System.Linq.Expressions.ParameterExpression Variable { get { return default(System.Linq.Expressions.ParameterExpression); } }
    public override string ToString() { return default(string); }
    public System.Linq.Expressions.CatchBlock Update(System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression filter, System.Linq.Expressions.Expression body) { return default(System.Linq.Expressions.CatchBlock); }
  }
  public partial class ConditionalExpression : System.Linq.Expressions.Expression {
    internal ConditionalExpression() { }
    public System.Linq.Expressions.Expression IfFalse { get { return default(System.Linq.Expressions.Expression); } }
    public System.Linq.Expressions.Expression IfTrue { get { return default(System.Linq.Expressions.Expression); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public System.Linq.Expressions.Expression Test { get { return default(System.Linq.Expressions.Expression); } }
    public override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.ConditionalExpression Update(System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse) { return default(System.Linq.Expressions.ConditionalExpression); }
  }
  public partial class ConstantExpression : System.Linq.Expressions.Expression {
    internal ConstantExpression() { }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public override System.Type Type { get { return default(System.Type); } }
    public object Value { get { return default(object); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
  }
  public partial class DebugInfoExpression : System.Linq.Expressions.Expression {
    internal DebugInfoExpression() { }
    public System.Linq.Expressions.SymbolDocumentInfo Document { get { return default(System.Linq.Expressions.SymbolDocumentInfo); } }
    public virtual int EndColumn { get { return default(int); } }
    public virtual int EndLine { get { return default(int); } }
    public virtual bool IsClear { get { return default(bool); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public virtual int StartColumn { get { return default(int); } }
    public virtual int StartLine { get { return default(int); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
  }
  public sealed partial class DefaultExpression : System.Linq.Expressions.Expression {
    internal DefaultExpression() { }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
  }
  public sealed partial class ElementInit : System.Linq.Expressions.IArgumentProvider {
    internal ElementInit() { }
    public System.Reflection.MethodInfo AddMethod { get { return default(System.Reflection.MethodInfo); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>); } }
    int System.Linq.Expressions.IArgumentProvider.ArgumentCount { get { return default(int); } }
    System.Linq.Expressions.Expression System.Linq.Expressions.IArgumentProvider.GetArgument(int index) { return default(System.Linq.Expressions.Expression); }
    public override string ToString() { return default(string); }
    public System.Linq.Expressions.ElementInit Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.ElementInit); }
  }
  public abstract partial class Expression {
    protected Expression() { }
    public virtual bool CanReduce { get { return default(bool); } }
    public virtual System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public virtual System.Type Type { get { return default(System.Type); } }
    protected internal virtual System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public static System.Linq.Expressions.BinaryExpression Add(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression Add(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression AddAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression AddAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression AddAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression AddAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression AddAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression AddAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression AddChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression AddChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression And(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression And(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression AndAlso(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression AndAlso(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression AndAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression AndAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression AndAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.IndexExpression ArrayAccess(System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> indexes) { return default(System.Linq.Expressions.IndexExpression); }
    public static System.Linq.Expressions.IndexExpression ArrayAccess(System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes) { return default(System.Linq.Expressions.IndexExpression); }
    public static System.Linq.Expressions.MethodCallExpression ArrayIndex(System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> indexes) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.BinaryExpression ArrayIndex(System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.MethodCallExpression ArrayIndex(System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.UnaryExpression ArrayLength(System.Linq.Expressions.Expression array) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.BinaryExpression Assign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.MemberAssignment Bind(System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.MemberAssignment); }
    public static System.Linq.Expressions.MemberAssignment Bind(System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.MemberAssignment); }
    public static System.Linq.Expressions.BlockExpression Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions) { return default(System.Linq.Expressions.BlockExpression); }
    public static System.Linq.Expressions.BlockExpression Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions) { return default(System.Linq.Expressions.BlockExpression); }
    public static System.Linq.Expressions.BlockExpression Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, params System.Linq.Expressions.Expression[] expressions) { return default(System.Linq.Expressions.BlockExpression); }
    public static System.Linq.Expressions.BlockExpression Block(System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1) { return default(System.Linq.Expressions.BlockExpression); }
    public static System.Linq.Expressions.BlockExpression Block(System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2) { return default(System.Linq.Expressions.BlockExpression); }
    public static System.Linq.Expressions.BlockExpression Block(System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3) { return default(System.Linq.Expressions.BlockExpression); }
    public static System.Linq.Expressions.BlockExpression Block(System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4) { return default(System.Linq.Expressions.BlockExpression); }
    public static System.Linq.Expressions.BlockExpression Block(params System.Linq.Expressions.Expression[] expressions) { return default(System.Linq.Expressions.BlockExpression); }
    public static System.Linq.Expressions.BlockExpression Block(System.Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions) { return default(System.Linq.Expressions.BlockExpression); }
    public static System.Linq.Expressions.BlockExpression Block(System.Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions) { return default(System.Linq.Expressions.BlockExpression); }
    public static System.Linq.Expressions.BlockExpression Block(System.Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, params System.Linq.Expressions.Expression[] expressions) { return default(System.Linq.Expressions.BlockExpression); }
    public static System.Linq.Expressions.BlockExpression Block(System.Type type, params System.Linq.Expressions.Expression[] expressions) { return default(System.Linq.Expressions.BlockExpression); }
    public static System.Linq.Expressions.GotoExpression Break(System.Linq.Expressions.LabelTarget target) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.GotoExpression Break(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.GotoExpression Break(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, System.Type type) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.GotoExpression Break(System.Linq.Expressions.LabelTarget target, System.Type type) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression instance, string methodName, System.Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.MethodCallExpression Call(System.Type type, string methodName, System.Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments) { return default(System.Linq.Expressions.MethodCallExpression); }
    public static System.Linq.Expressions.CatchBlock Catch(System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body) { return default(System.Linq.Expressions.CatchBlock); }
    public static System.Linq.Expressions.CatchBlock Catch(System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter) { return default(System.Linq.Expressions.CatchBlock); }
    public static System.Linq.Expressions.CatchBlock Catch(System.Type type, System.Linq.Expressions.Expression body) { return default(System.Linq.Expressions.CatchBlock); }
    public static System.Linq.Expressions.CatchBlock Catch(System.Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter) { return default(System.Linq.Expressions.CatchBlock); }
    public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo document) { return default(System.Linq.Expressions.DebugInfoExpression); }
    public static System.Linq.Expressions.BinaryExpression Coalesce(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression Coalesce(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.ConditionalExpression Condition(System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse) { return default(System.Linq.Expressions.ConditionalExpression); }
    public static System.Linq.Expressions.ConditionalExpression Condition(System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, System.Type type) { return default(System.Linq.Expressions.ConditionalExpression); }
    public static System.Linq.Expressions.ConstantExpression Constant(object value) { return default(System.Linq.Expressions.ConstantExpression); }
    public static System.Linq.Expressions.ConstantExpression Constant(object value, System.Type type) { return default(System.Linq.Expressions.ConstantExpression); }
    public static System.Linq.Expressions.GotoExpression Continue(System.Linq.Expressions.LabelTarget target) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.GotoExpression Continue(System.Linq.Expressions.LabelTarget target, System.Type type) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.UnaryExpression Convert(System.Linq.Expressions.Expression expression, System.Type type) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression Convert(System.Linq.Expressions.Expression expression, System.Type type, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression ConvertChecked(System.Linq.Expressions.Expression expression, System.Type type) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression ConvertChecked(System.Linq.Expressions.Expression expression, System.Type type, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.DebugInfoExpression DebugInfo(System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn) { return default(System.Linq.Expressions.DebugInfoExpression); }
    public static System.Linq.Expressions.UnaryExpression Decrement(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression Decrement(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.DefaultExpression Default(System.Type type) { return default(System.Linq.Expressions.DefaultExpression); }
    public static System.Linq.Expressions.BinaryExpression Divide(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression Divide(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression DivideAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression DivideAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression DivideAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.ElementInit ElementInit(System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.ElementInit); }
    public static System.Linq.Expressions.ElementInit ElementInit(System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] arguments) { return default(System.Linq.Expressions.ElementInit); }
    public static System.Linq.Expressions.DefaultExpression Empty() { return default(System.Linq.Expressions.DefaultExpression); }
    public static System.Linq.Expressions.BinaryExpression Equal(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression Equal(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression ExclusiveOr(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression ExclusiveOr(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.MemberExpression Field(System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field) { return default(System.Linq.Expressions.MemberExpression); }
    public static System.Linq.Expressions.MemberExpression Field(System.Linq.Expressions.Expression expression, string fieldName) { return default(System.Linq.Expressions.MemberExpression); }
    public static System.Linq.Expressions.MemberExpression Field(System.Linq.Expressions.Expression expression, System.Type type, string fieldName) { return default(System.Linq.Expressions.MemberExpression); }
    public static System.Type GetActionType(params System.Type[] typeArgs) { return default(System.Type); }
    public static System.Type GetDelegateType(params System.Type[] typeArgs) { return default(System.Type); }
    public static System.Type GetFuncType(params System.Type[] typeArgs) { return default(System.Type); }
    public static System.Linq.Expressions.GotoExpression Goto(System.Linq.Expressions.LabelTarget target) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.GotoExpression Goto(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.GotoExpression Goto(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, System.Type type) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.GotoExpression Goto(System.Linq.Expressions.LabelTarget target, System.Type type) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.BinaryExpression GreaterThan(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression GreaterThan(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.ConditionalExpression IfThen(System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue) { return default(System.Linq.Expressions.ConditionalExpression); }
    public static System.Linq.Expressions.ConditionalExpression IfThenElse(System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse) { return default(System.Linq.Expressions.ConditionalExpression); }
    public static System.Linq.Expressions.UnaryExpression Increment(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression Increment(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.InvocationExpression Invoke(System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.InvocationExpression); }
    public static System.Linq.Expressions.InvocationExpression Invoke(System.Linq.Expressions.Expression expression, params System.Linq.Expressions.Expression[] arguments) { return default(System.Linq.Expressions.InvocationExpression); }
    public static System.Linq.Expressions.UnaryExpression IsFalse(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression IsFalse(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression IsTrue(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression IsTrue(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.LabelTarget Label() { return default(System.Linq.Expressions.LabelTarget); }
    public static System.Linq.Expressions.LabelExpression Label(System.Linq.Expressions.LabelTarget target) { return default(System.Linq.Expressions.LabelExpression); }
    public static System.Linq.Expressions.LabelExpression Label(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue) { return default(System.Linq.Expressions.LabelExpression); }
    public static System.Linq.Expressions.LabelTarget Label(string name) { return default(System.Linq.Expressions.LabelTarget); }
    public static System.Linq.Expressions.LabelTarget Label(System.Type type) { return default(System.Linq.Expressions.LabelTarget); }
    public static System.Linq.Expressions.LabelTarget Label(System.Type type, string name) { return default(System.Linq.Expressions.LabelTarget); }
    public static System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) { return default(System.Linq.Expressions.LambdaExpression); }
    public static System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters) { return default(System.Linq.Expressions.LambdaExpression); }
    public static System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) { return default(System.Linq.Expressions.LambdaExpression); }
    public static System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters) { return default(System.Linq.Expressions.LambdaExpression); }
    public static System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) { return default(System.Linq.Expressions.LambdaExpression); }
    public static System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) { return default(System.Linq.Expressions.LambdaExpression); }
    public static System.Linq.Expressions.LambdaExpression Lambda(System.Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) { return default(System.Linq.Expressions.LambdaExpression); }
    public static System.Linq.Expressions.LambdaExpression Lambda(System.Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters) { return default(System.Linq.Expressions.LambdaExpression); }
    public static System.Linq.Expressions.LambdaExpression Lambda(System.Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) { return default(System.Linq.Expressions.LambdaExpression); }
    public static System.Linq.Expressions.LambdaExpression Lambda(System.Type delegateType, System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters) { return default(System.Linq.Expressions.LambdaExpression); }
    public static System.Linq.Expressions.LambdaExpression Lambda(System.Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) { return default(System.Linq.Expressions.LambdaExpression); }
    public static System.Linq.Expressions.LambdaExpression Lambda(System.Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) { return default(System.Linq.Expressions.LambdaExpression); }
    public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) { return default(System.Linq.Expressions.Expression<TDelegate>); }
    public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters) { return default(System.Linq.Expressions.Expression<TDelegate>); }
    public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) { return default(System.Linq.Expressions.Expression<TDelegate>); }
    public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters) { return default(System.Linq.Expressions.Expression<TDelegate>); }
    public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) { return default(System.Linq.Expressions.Expression<TDelegate>); }
    public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) { return default(System.Linq.Expressions.Expression<TDelegate>); }
    public static System.Linq.Expressions.BinaryExpression LeftShift(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression LeftShift(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression LeftShiftAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression LeftShiftAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression LeftShiftAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression LessThan(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression LessThan(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression LessThanOrEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression LessThanOrEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.MemberListBinding ListBind(System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers) { return default(System.Linq.Expressions.MemberListBinding); }
    public static System.Linq.Expressions.MemberListBinding ListBind(System.Reflection.MemberInfo member, params System.Linq.Expressions.ElementInit[] initializers) { return default(System.Linq.Expressions.MemberListBinding); }
    public static System.Linq.Expressions.MemberListBinding ListBind(System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers) { return default(System.Linq.Expressions.MemberListBinding); }
    public static System.Linq.Expressions.MemberListBinding ListBind(System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.ElementInit[] initializers) { return default(System.Linq.Expressions.MemberListBinding); }
    public static System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers) { return default(System.Linq.Expressions.ListInitExpression); }
    public static System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers) { return default(System.Linq.Expressions.ListInitExpression); }
    public static System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.ElementInit[] initializers) { return default(System.Linq.Expressions.ListInitExpression); }
    public static System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.Expression[] initializers) { return default(System.Linq.Expressions.ListInitExpression); }
    public static System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers) { return default(System.Linq.Expressions.ListInitExpression); }
    public static System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] initializers) { return default(System.Linq.Expressions.ListInitExpression); }
    public static System.Linq.Expressions.LoopExpression Loop(System.Linq.Expressions.Expression body) { return default(System.Linq.Expressions.LoopExpression); }
    public static System.Linq.Expressions.LoopExpression Loop(System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget @break) { return default(System.Linq.Expressions.LoopExpression); }
    public static System.Linq.Expressions.LoopExpression Loop(System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget @break, System.Linq.Expressions.LabelTarget @continue) { return default(System.Linq.Expressions.LoopExpression); }
    public static System.Linq.Expressions.BinaryExpression MakeBinary(System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression MakeBinary(System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression MakeBinary(System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.CatchBlock MakeCatchBlock(System.Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter) { return default(System.Linq.Expressions.CatchBlock); }
    public static System.Linq.Expressions.GotoExpression MakeGoto(System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, System.Type type) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.IndexExpression MakeIndex(System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.IndexExpression); }
    public static System.Linq.Expressions.MemberExpression MakeMemberAccess(System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member) { return default(System.Linq.Expressions.MemberExpression); }
    public static System.Linq.Expressions.TryExpression MakeTry(System.Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression @finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock> handlers) { return default(System.Linq.Expressions.TryExpression); }
    public static System.Linq.Expressions.UnaryExpression MakeUnary(System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, System.Type type) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression MakeUnary(System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, System.Type type, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.MemberMemberBinding MemberBind(System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings) { return default(System.Linq.Expressions.MemberMemberBinding); }
    public static System.Linq.Expressions.MemberMemberBinding MemberBind(System.Reflection.MemberInfo member, params System.Linq.Expressions.MemberBinding[] bindings) { return default(System.Linq.Expressions.MemberMemberBinding); }
    public static System.Linq.Expressions.MemberMemberBinding MemberBind(System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings) { return default(System.Linq.Expressions.MemberMemberBinding); }
    public static System.Linq.Expressions.MemberMemberBinding MemberBind(System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.MemberBinding[] bindings) { return default(System.Linq.Expressions.MemberMemberBinding); }
    public static System.Linq.Expressions.MemberInitExpression MemberInit(System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings) { return default(System.Linq.Expressions.MemberInitExpression); }
    public static System.Linq.Expressions.MemberInitExpression MemberInit(System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.MemberBinding[] bindings) { return default(System.Linq.Expressions.MemberInitExpression); }
    public static System.Linq.Expressions.BinaryExpression Modulo(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression Modulo(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression ModuloAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression ModuloAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression ModuloAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression Multiply(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression Multiply(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression MultiplyAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression MultiplyAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression MultiplyAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression MultiplyChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression MultiplyChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.UnaryExpression Negate(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression Negate(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression NegateChecked(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression NegateChecked(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo constructor) { return default(System.Linq.Expressions.NewExpression); }
    public static System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.NewExpression); }
    public static System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> members) { return default(System.Linq.Expressions.NewExpression); }
    public static System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments, params System.Reflection.MemberInfo[] members) { return default(System.Linq.Expressions.NewExpression); }
    public static System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo constructor, params System.Linq.Expressions.Expression[] arguments) { return default(System.Linq.Expressions.NewExpression); }
    public static System.Linq.Expressions.NewExpression New(System.Type type) { return default(System.Linq.Expressions.NewExpression); }
    public static System.Linq.Expressions.NewArrayExpression NewArrayBounds(System.Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> bounds) { return default(System.Linq.Expressions.NewArrayExpression); }
    public static System.Linq.Expressions.NewArrayExpression NewArrayBounds(System.Type type, params System.Linq.Expressions.Expression[] bounds) { return default(System.Linq.Expressions.NewArrayExpression); }
    public static System.Linq.Expressions.NewArrayExpression NewArrayInit(System.Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers) { return default(System.Linq.Expressions.NewArrayExpression); }
    public static System.Linq.Expressions.NewArrayExpression NewArrayInit(System.Type type, params System.Linq.Expressions.Expression[] initializers) { return default(System.Linq.Expressions.NewArrayExpression); }
    public static System.Linq.Expressions.UnaryExpression Not(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression Not(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.BinaryExpression NotEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression NotEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.UnaryExpression OnesComplement(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression OnesComplement(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.BinaryExpression Or(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression Or(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression OrAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression OrAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression OrAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression OrElse(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression OrElse(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.ParameterExpression Parameter(System.Type type) { return default(System.Linq.Expressions.ParameterExpression); }
    public static System.Linq.Expressions.ParameterExpression Parameter(System.Type type, string name) { return default(System.Linq.Expressions.ParameterExpression); }
    public static System.Linq.Expressions.UnaryExpression PostDecrementAssign(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression PostDecrementAssign(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression PostIncrementAssign(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression PostIncrementAssign(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.BinaryExpression Power(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression Power(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression PowerAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression PowerAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression PowerAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.UnaryExpression PreDecrementAssign(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression PreDecrementAssign(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression PreIncrementAssign(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression PreIncrementAssign(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.MemberExpression Property(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor) { return default(System.Linq.Expressions.MemberExpression); }
    public static System.Linq.Expressions.MemberExpression Property(System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property) { return default(System.Linq.Expressions.MemberExpression); }
    public static System.Linq.Expressions.IndexExpression Property(System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.IndexExpression); }
    public static System.Linq.Expressions.IndexExpression Property(System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, params System.Linq.Expressions.Expression[] arguments) { return default(System.Linq.Expressions.IndexExpression); }
    public static System.Linq.Expressions.MemberExpression Property(System.Linq.Expressions.Expression expression, string propertyName) { return default(System.Linq.Expressions.MemberExpression); }
    public static System.Linq.Expressions.IndexExpression Property(System.Linq.Expressions.Expression instance, string propertyName, params System.Linq.Expressions.Expression[] arguments) { return default(System.Linq.Expressions.IndexExpression); }
    public static System.Linq.Expressions.MemberExpression Property(System.Linq.Expressions.Expression expression, System.Type type, string propertyName) { return default(System.Linq.Expressions.MemberExpression); }
    public static System.Linq.Expressions.MemberExpression PropertyOrField(System.Linq.Expressions.Expression expression, string propertyOrFieldName) { return default(System.Linq.Expressions.MemberExpression); }
    public static System.Linq.Expressions.UnaryExpression Quote(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public virtual System.Linq.Expressions.Expression Reduce() { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.Expression ReduceAndCheck() { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.Expression ReduceExtensions() { return default(System.Linq.Expressions.Expression); }
    public static System.Linq.Expressions.BinaryExpression ReferenceEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.UnaryExpression Rethrow() { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression Rethrow(System.Type type) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.GotoExpression Return(System.Linq.Expressions.LabelTarget target) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.GotoExpression Return(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.GotoExpression Return(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, System.Type type) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.GotoExpression Return(System.Linq.Expressions.LabelTarget target, System.Type type) { return default(System.Linq.Expressions.GotoExpression); }
    public static System.Linq.Expressions.BinaryExpression RightShift(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression RightShift(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression RightShiftAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression RightShiftAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression RightShiftAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables) { return default(System.Linq.Expressions.RuntimeVariablesExpression); }
    public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(params System.Linq.Expressions.ParameterExpression[] variables) { return default(System.Linq.Expressions.RuntimeVariablesExpression); }
    public static System.Linq.Expressions.BinaryExpression Subtract(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression Subtract(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression SubtractAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression SubtractAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression SubtractAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression SubtractChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.BinaryExpression SubtractChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.BinaryExpression); }
    public static System.Linq.Expressions.SwitchExpression Switch(System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, params System.Linq.Expressions.SwitchCase[] cases) { return default(System.Linq.Expressions.SwitchExpression); }
    public static System.Linq.Expressions.SwitchExpression Switch(System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases) { return default(System.Linq.Expressions.SwitchExpression); }
    public static System.Linq.Expressions.SwitchExpression Switch(System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases) { return default(System.Linq.Expressions.SwitchExpression); }
    public static System.Linq.Expressions.SwitchExpression Switch(System.Linq.Expressions.Expression switchValue, params System.Linq.Expressions.SwitchCase[] cases) { return default(System.Linq.Expressions.SwitchExpression); }
    public static System.Linq.Expressions.SwitchExpression Switch(System.Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases) { return default(System.Linq.Expressions.SwitchExpression); }
    public static System.Linq.Expressions.SwitchExpression Switch(System.Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases) { return default(System.Linq.Expressions.SwitchExpression); }
    public static System.Linq.Expressions.SwitchCase SwitchCase(System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> testValues) { return default(System.Linq.Expressions.SwitchCase); }
    public static System.Linq.Expressions.SwitchCase SwitchCase(System.Linq.Expressions.Expression body, params System.Linq.Expressions.Expression[] testValues) { return default(System.Linq.Expressions.SwitchCase); }
    public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName) { return default(System.Linq.Expressions.SymbolDocumentInfo); }
    public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, System.Guid language) { return default(System.Linq.Expressions.SymbolDocumentInfo); }
    public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, System.Guid language, System.Guid languageVendor) { return default(System.Linq.Expressions.SymbolDocumentInfo); }
    public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, System.Guid language, System.Guid languageVendor, System.Guid documentType) { return default(System.Linq.Expressions.SymbolDocumentInfo); }
    public static System.Linq.Expressions.UnaryExpression Throw(System.Linq.Expressions.Expression value) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression Throw(System.Linq.Expressions.Expression value, System.Type type) { return default(System.Linq.Expressions.UnaryExpression); }
    public override string ToString() { return default(string); }
    public static System.Linq.Expressions.TryExpression TryCatch(System.Linq.Expressions.Expression body, params System.Linq.Expressions.CatchBlock[] handlers) { return default(System.Linq.Expressions.TryExpression); }
    public static System.Linq.Expressions.TryExpression TryCatchFinally(System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression @finally, params System.Linq.Expressions.CatchBlock[] handlers) { return default(System.Linq.Expressions.TryExpression); }
    public static System.Linq.Expressions.TryExpression TryFault(System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault) { return default(System.Linq.Expressions.TryExpression); }
    public static System.Linq.Expressions.TryExpression TryFinally(System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression @finally) { return default(System.Linq.Expressions.TryExpression); }
    public static bool TryGetActionType(System.Type[] typeArgs, out System.Type actionType) { actionType = default(System.Type); return default(bool); }
    public static bool TryGetFuncType(System.Type[] typeArgs, out System.Type funcType) { funcType = default(System.Type); return default(bool); }
    public static System.Linq.Expressions.UnaryExpression TypeAs(System.Linq.Expressions.Expression expression, System.Type type) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.TypeBinaryExpression TypeEqual(System.Linq.Expressions.Expression expression, System.Type type) { return default(System.Linq.Expressions.TypeBinaryExpression); }
    public static System.Linq.Expressions.TypeBinaryExpression TypeIs(System.Linq.Expressions.Expression expression, System.Type type) { return default(System.Linq.Expressions.TypeBinaryExpression); }
    public static System.Linq.Expressions.UnaryExpression UnaryPlus(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression UnaryPlus(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.UnaryExpression Unbox(System.Linq.Expressions.Expression expression, System.Type type) { return default(System.Linq.Expressions.UnaryExpression); }
    public static System.Linq.Expressions.ParameterExpression Variable(System.Type type) { return default(System.Linq.Expressions.ParameterExpression); }
    public static System.Linq.Expressions.ParameterExpression Variable(System.Type type, string name) { return default(System.Linq.Expressions.ParameterExpression); }
    protected internal virtual System.Linq.Expressions.Expression VisitChildren(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
  }
  public sealed partial class Expression<TDelegate> : System.Linq.Expressions.LambdaExpression {
    internal Expression() { }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public new TDelegate Compile() { return default(TDelegate); }
    public new TDelegate Compile(bool preferInterpretation) { return default(TDelegate); }
    public System.Linq.Expressions.Expression<TDelegate> Update(System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) { return default(System.Linq.Expressions.Expression<TDelegate>); }
  }
  public enum ExpressionType {
    Add = 0,
    AddAssign = 63,
    AddAssignChecked = 74,
    AddChecked = 1,
    And = 2,
    AndAlso = 3,
    AndAssign = 64,
    ArrayIndex = 5,
    ArrayLength = 4,
    Assign = 46,
    Block = 47,
    Call = 6,
    Coalesce = 7,
    Conditional = 8,
    Constant = 9,
    Convert = 10,
    ConvertChecked = 11,
    DebugInfo = 48,
    Decrement = 49,
    Default = 51,
    Divide = 12,
    DivideAssign = 65,
    Dynamic = 50,
    Equal = 13,
    ExclusiveOr = 14,
    ExclusiveOrAssign = 66,
    Extension = 52,
    Goto = 53,
    GreaterThan = 15,
    GreaterThanOrEqual = 16,
    Increment = 54,
    Index = 55,
    Invoke = 17,
    IsFalse = 84,
    IsTrue = 83,
    Label = 56,
    Lambda = 18,
    LeftShift = 19,
    LeftShiftAssign = 67,
    LessThan = 20,
    LessThanOrEqual = 21,
    ListInit = 22,
    Loop = 58,
    MemberAccess = 23,
    MemberInit = 24,
    Modulo = 25,
    ModuloAssign = 68,
    Multiply = 26,
    MultiplyAssign = 69,
    MultiplyAssignChecked = 75,
    MultiplyChecked = 27,
    Negate = 28,
    NegateChecked = 30,
    New = 31,
    NewArrayBounds = 33,
    NewArrayInit = 32,
    Not = 34,
    NotEqual = 35,
    OnesComplement = 82,
    Or = 36,
    OrAssign = 70,
    OrElse = 37,
    Parameter = 38,
    PostDecrementAssign = 80,
    PostIncrementAssign = 79,
    Power = 39,
    PowerAssign = 71,
    PreDecrementAssign = 78,
    PreIncrementAssign = 77,
    Quote = 40,
    RightShift = 41,
    RightShiftAssign = 72,
    RuntimeVariables = 57,
    Subtract = 42,
    SubtractAssign = 73,
    SubtractAssignChecked = 76,
    SubtractChecked = 43,
    Switch = 59,
    Throw = 60,
    Try = 61,
    TypeAs = 44,
    TypeEqual = 81,
    TypeIs = 45,
    UnaryPlus = 29,
    Unbox = 62,
  }
  public abstract partial class ExpressionVisitor {
    protected ExpressionVisitor() { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Visit(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> nodes) { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>); }
    public virtual System.Linq.Expressions.Expression Visit(System.Linq.Expressions.Expression node) { return default(System.Linq.Expressions.Expression); }
    public static System.Collections.ObjectModel.ReadOnlyCollection<T> Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T> nodes, System.Func<T, T> elementVisitor) { return default(System.Collections.ObjectModel.ReadOnlyCollection<T>); }
    public T VisitAndConvert<T>(T node, string callerName) where T : System.Linq.Expressions.Expression { return default(T); }
    public System.Collections.ObjectModel.ReadOnlyCollection<T> VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T> nodes, string callerName) where T : System.Linq.Expressions.Expression { return default(System.Collections.ObjectModel.ReadOnlyCollection<T>); }
    protected internal virtual System.Linq.Expressions.Expression VisitBinary(System.Linq.Expressions.BinaryExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitBlock(System.Linq.Expressions.BlockExpression node) { return default(System.Linq.Expressions.Expression); }
    protected virtual System.Linq.Expressions.CatchBlock VisitCatchBlock(System.Linq.Expressions.CatchBlock node) { return default(System.Linq.Expressions.CatchBlock); }
    protected internal virtual System.Linq.Expressions.Expression VisitConditional(System.Linq.Expressions.ConditionalExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitConstant(System.Linq.Expressions.ConstantExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitDefault(System.Linq.Expressions.DefaultExpression node) { return default(System.Linq.Expressions.Expression); }
    protected virtual System.Linq.Expressions.ElementInit VisitElementInit(System.Linq.Expressions.ElementInit node) { return default(System.Linq.Expressions.ElementInit); }
    protected internal virtual System.Linq.Expressions.Expression VisitExtension(System.Linq.Expressions.Expression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitGoto(System.Linq.Expressions.GotoExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitIndex(System.Linq.Expressions.IndexExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitInvocation(System.Linq.Expressions.InvocationExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitLabel(System.Linq.Expressions.LabelExpression node) { return default(System.Linq.Expressions.Expression); }
    protected virtual System.Linq.Expressions.LabelTarget VisitLabelTarget(System.Linq.Expressions.LabelTarget node) { return default(System.Linq.Expressions.LabelTarget); }
    protected internal virtual System.Linq.Expressions.Expression VisitLambda<T>(System.Linq.Expressions.Expression<T> node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitListInit(System.Linq.Expressions.ListInitExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitLoop(System.Linq.Expressions.LoopExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitMember(System.Linq.Expressions.MemberExpression node) { return default(System.Linq.Expressions.Expression); }
    protected virtual System.Linq.Expressions.MemberAssignment VisitMemberAssignment(System.Linq.Expressions.MemberAssignment node) { return default(System.Linq.Expressions.MemberAssignment); }
    protected virtual System.Linq.Expressions.MemberBinding VisitMemberBinding(System.Linq.Expressions.MemberBinding node) { return default(System.Linq.Expressions.MemberBinding); }
    protected internal virtual System.Linq.Expressions.Expression VisitMemberInit(System.Linq.Expressions.MemberInitExpression node) { return default(System.Linq.Expressions.Expression); }
    protected virtual System.Linq.Expressions.MemberListBinding VisitMemberListBinding(System.Linq.Expressions.MemberListBinding node) { return default(System.Linq.Expressions.MemberListBinding); }
    protected virtual System.Linq.Expressions.MemberMemberBinding VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding node) { return default(System.Linq.Expressions.MemberMemberBinding); }
    protected internal virtual System.Linq.Expressions.Expression VisitMethodCall(System.Linq.Expressions.MethodCallExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitNew(System.Linq.Expressions.NewExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitNewArray(System.Linq.Expressions.NewArrayExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitParameter(System.Linq.Expressions.ParameterExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitSwitch(System.Linq.Expressions.SwitchExpression node) { return default(System.Linq.Expressions.Expression); }
    protected virtual System.Linq.Expressions.SwitchCase VisitSwitchCase(System.Linq.Expressions.SwitchCase node) { return default(System.Linq.Expressions.SwitchCase); }
    protected internal virtual System.Linq.Expressions.Expression VisitTry(System.Linq.Expressions.TryExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression node) { return default(System.Linq.Expressions.Expression); }
    protected internal virtual System.Linq.Expressions.Expression VisitUnary(System.Linq.Expressions.UnaryExpression node) { return default(System.Linq.Expressions.Expression); }
  }
  public sealed partial class GotoExpression : System.Linq.Expressions.Expression {
    internal GotoExpression() { }
    public System.Linq.Expressions.GotoExpressionKind Kind { get { return default(System.Linq.Expressions.GotoExpressionKind); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public System.Linq.Expressions.LabelTarget Target { get { return default(System.Linq.Expressions.LabelTarget); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    public System.Linq.Expressions.Expression Value { get { return default(System.Linq.Expressions.Expression); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.GotoExpression Update(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value) { return default(System.Linq.Expressions.GotoExpression); }
  }
  public enum GotoExpressionKind {
    Break = 2,
    Continue = 3,
    Goto = 0,
    Return = 1,
  }
  public partial interface IArgumentProvider {
    int ArgumentCount { get; }
    System.Linq.Expressions.Expression GetArgument(int index);
  }
  public partial interface IDynamicExpression : System.Linq.Expressions.IArgumentProvider {
    System.Type DelegateType { get; }
    object CreateCallSite();
    System.Linq.Expressions.Expression Rewrite(System.Linq.Expressions.Expression[] args);
  }
  public sealed partial class IndexExpression : System.Linq.Expressions.Expression, System.Linq.Expressions.IArgumentProvider {
    internal IndexExpression() { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>); } }
    public System.Reflection.PropertyInfo Indexer { get { return default(System.Reflection.PropertyInfo); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public System.Linq.Expressions.Expression Object { get { return default(System.Linq.Expressions.Expression); } }
    int System.Linq.Expressions.IArgumentProvider.ArgumentCount { get { return default(int); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    System.Linq.Expressions.Expression System.Linq.Expressions.IArgumentProvider.GetArgument(int index) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.IndexExpression Update(System.Linq.Expressions.Expression @object, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.IndexExpression); }
  }
  public sealed partial class InvocationExpression : System.Linq.Expressions.Expression, System.Linq.Expressions.IArgumentProvider {
    internal InvocationExpression() { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>); } }
    public System.Linq.Expressions.Expression Expression { get { return default(System.Linq.Expressions.Expression); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    int System.Linq.Expressions.IArgumentProvider.ArgumentCount { get { return default(int); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    System.Linq.Expressions.Expression System.Linq.Expressions.IArgumentProvider.GetArgument(int index) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.InvocationExpression Update(System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.InvocationExpression); }
  }
  public sealed partial class LabelExpression : System.Linq.Expressions.Expression {
    internal LabelExpression() { }
    public System.Linq.Expressions.Expression DefaultValue { get { return default(System.Linq.Expressions.Expression); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public System.Linq.Expressions.LabelTarget Target { get { return default(System.Linq.Expressions.LabelTarget); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.LabelExpression Update(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue) { return default(System.Linq.Expressions.LabelExpression); }
  }
  public sealed partial class LabelTarget {
    internal LabelTarget() { }
    public string Name { get { return default(string); } }
    public System.Type Type { get { return default(System.Type); } }
    public override string ToString() { return default(string); }
  }
  public abstract partial class LambdaExpression : System.Linq.Expressions.Expression {
    internal LambdaExpression() { }
    public System.Linq.Expressions.Expression Body { get { return default(System.Linq.Expressions.Expression); } }
    public string Name { get { return default(string); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> Parameters { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression>); } }
    public System.Type ReturnType { get { return default(System.Type); } }
    public bool TailCall { get { return default(bool); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    public System.Delegate Compile() { return default(System.Delegate); }
    public System.Delegate Compile(bool preferInterpretation) { return default(System.Delegate); }
  }
  public sealed partial class ListInitExpression : System.Linq.Expressions.Expression {
    internal ListInitExpression() { }
    public override bool CanReduce { get { return default(bool); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ElementInit> Initializers { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ElementInit>); } }
    public System.Linq.Expressions.NewExpression NewExpression { get { return default(System.Linq.Expressions.NewExpression); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public override System.Linq.Expressions.Expression Reduce() { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.ListInitExpression Update(System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers) { return default(System.Linq.Expressions.ListInitExpression); }
  }
  public sealed partial class LoopExpression : System.Linq.Expressions.Expression {
    internal LoopExpression() { }
    public System.Linq.Expressions.Expression Body { get { return default(System.Linq.Expressions.Expression); } }
    public System.Linq.Expressions.LabelTarget BreakLabel { get { return default(System.Linq.Expressions.LabelTarget); } }
    public System.Linq.Expressions.LabelTarget ContinueLabel { get { return default(System.Linq.Expressions.LabelTarget); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.LoopExpression Update(System.Linq.Expressions.LabelTarget breakLabel, System.Linq.Expressions.LabelTarget continueLabel, System.Linq.Expressions.Expression body) { return default(System.Linq.Expressions.LoopExpression); }
  }
  public sealed partial class MemberAssignment : System.Linq.Expressions.MemberBinding {
    internal MemberAssignment() { }
    public System.Linq.Expressions.Expression Expression { get { return default(System.Linq.Expressions.Expression); } }
    public System.Linq.Expressions.MemberAssignment Update(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.MemberAssignment); }
  }
  public abstract partial class MemberBinding {
    internal MemberBinding() { }
    public System.Linq.Expressions.MemberBindingType BindingType { get { return default(System.Linq.Expressions.MemberBindingType); } }
    public System.Reflection.MemberInfo Member { get { return default(System.Reflection.MemberInfo); } }
    public override string ToString() { return default(string); }
  }
  public enum MemberBindingType {
    Assignment = 0,
    ListBinding = 2,
    MemberBinding = 1,
  }
  public partial class MemberExpression : System.Linq.Expressions.Expression {
    internal MemberExpression() { }
    public System.Linq.Expressions.Expression Expression { get { return default(System.Linq.Expressions.Expression); } }
    public System.Reflection.MemberInfo Member { get { return default(System.Reflection.MemberInfo); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.MemberExpression Update(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.MemberExpression); }
  }
  public sealed partial class MemberInitExpression : System.Linq.Expressions.Expression {
    internal MemberInitExpression() { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.MemberBinding> Bindings { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.MemberBinding>); } }
    public override bool CanReduce { get { return default(bool); } }
    public System.Linq.Expressions.NewExpression NewExpression { get { return default(System.Linq.Expressions.NewExpression); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public override System.Linq.Expressions.Expression Reduce() { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.MemberInitExpression Update(System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings) { return default(System.Linq.Expressions.MemberInitExpression); }
  }
  public sealed partial class MemberListBinding : System.Linq.Expressions.MemberBinding {
    internal MemberListBinding() { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ElementInit> Initializers { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ElementInit>); } }
    public System.Linq.Expressions.MemberListBinding Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers) { return default(System.Linq.Expressions.MemberListBinding); }
  }
  public sealed partial class MemberMemberBinding : System.Linq.Expressions.MemberBinding {
    internal MemberMemberBinding() { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.MemberBinding> Bindings { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.MemberBinding>); } }
    public System.Linq.Expressions.MemberMemberBinding Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings) { return default(System.Linq.Expressions.MemberMemberBinding); }
  }
  public partial class MethodCallExpression : System.Linq.Expressions.Expression, System.Linq.Expressions.IArgumentProvider {
    internal MethodCallExpression() { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>); } }
    public System.Reflection.MethodInfo Method { get { return default(System.Reflection.MethodInfo); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public System.Linq.Expressions.Expression Object { get { return default(System.Linq.Expressions.Expression); } }
    int System.Linq.Expressions.IArgumentProvider.ArgumentCount { get { return default(int); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    System.Linq.Expressions.Expression System.Linq.Expressions.IArgumentProvider.GetArgument(int index) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.MethodCallExpression Update(System.Linq.Expressions.Expression @object, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.MethodCallExpression); }
  }
  public partial class NewArrayExpression : System.Linq.Expressions.Expression {
    internal NewArrayExpression() { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Expressions { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.NewArrayExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions) { return default(System.Linq.Expressions.NewArrayExpression); }
  }
  public partial class NewExpression : System.Linq.Expressions.Expression, System.Linq.Expressions.IArgumentProvider {
    internal NewExpression() { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>); } }
    public System.Reflection.ConstructorInfo Constructor { get { return default(System.Reflection.ConstructorInfo); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Reflection.MemberInfo> Members { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Reflection.MemberInfo>); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    int System.Linq.Expressions.IArgumentProvider.ArgumentCount { get { return default(int); } }
    public override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    System.Linq.Expressions.Expression System.Linq.Expressions.IArgumentProvider.GetArgument(int index) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.NewExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) { return default(System.Linq.Expressions.NewExpression); }
  }
  public partial class ParameterExpression : System.Linq.Expressions.Expression {
    internal ParameterExpression() { }
    public bool IsByRef { get { return default(bool); } }
    public string Name { get { return default(string); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
  }
  public sealed partial class RuntimeVariablesExpression : System.Linq.Expressions.Expression {
    internal RuntimeVariablesExpression() { }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> Variables { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression>); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.RuntimeVariablesExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables) { return default(System.Linq.Expressions.RuntimeVariablesExpression); }
  }
  public sealed partial class SwitchCase {
    internal SwitchCase() { }
    public System.Linq.Expressions.Expression Body { get { return default(System.Linq.Expressions.Expression); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> TestValues { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>); } }
    public override string ToString() { return default(string); }
    public System.Linq.Expressions.SwitchCase Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> testValues, System.Linq.Expressions.Expression body) { return default(System.Linq.Expressions.SwitchCase); }
  }
  public sealed partial class SwitchExpression : System.Linq.Expressions.Expression {
    internal SwitchExpression() { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.SwitchCase> Cases { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.SwitchCase>); } }
    public System.Reflection.MethodInfo Comparison { get { return default(System.Reflection.MethodInfo); } }
    public System.Linq.Expressions.Expression DefaultBody { get { return default(System.Linq.Expressions.Expression); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public System.Linq.Expressions.Expression SwitchValue { get { return default(System.Linq.Expressions.Expression); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.SwitchExpression Update(System.Linq.Expressions.Expression switchValue, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases, System.Linq.Expressions.Expression defaultBody) { return default(System.Linq.Expressions.SwitchExpression); }
  }
  public partial class SymbolDocumentInfo {
    internal SymbolDocumentInfo() { }
    public virtual System.Guid DocumentType { get { return default(System.Guid); } }
    public string FileName { get { return default(string); } }
    public virtual System.Guid Language { get { return default(System.Guid); } }
    public virtual System.Guid LanguageVendor { get { return default(System.Guid); } }
  }
  public sealed partial class TryExpression : System.Linq.Expressions.Expression {
    internal TryExpression() { }
    public System.Linq.Expressions.Expression Body { get { return default(System.Linq.Expressions.Expression); } }
    public System.Linq.Expressions.Expression Fault { get { return default(System.Linq.Expressions.Expression); } }
    public System.Linq.Expressions.Expression Finally { get { return default(System.Linq.Expressions.Expression); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.CatchBlock> Handlers { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.CatchBlock>); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.TryExpression Update(System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock> handlers, System.Linq.Expressions.Expression @finally, System.Linq.Expressions.Expression fault) { return default(System.Linq.Expressions.TryExpression); }
  }
  public sealed partial class TypeBinaryExpression : System.Linq.Expressions.Expression {
    internal TypeBinaryExpression() { }
    public System.Linq.Expressions.Expression Expression { get { return default(System.Linq.Expressions.Expression); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    public System.Type TypeOperand { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.TypeBinaryExpression Update(System.Linq.Expressions.Expression expression) { return default(System.Linq.Expressions.TypeBinaryExpression); }
  }
  public sealed partial class UnaryExpression : System.Linq.Expressions.Expression {
    internal UnaryExpression() { }
    public override bool CanReduce { get { return default(bool); } }
    public bool IsLifted { get { return default(bool); } }
    public bool IsLiftedToNull { get { return default(bool); } }
    public System.Reflection.MethodInfo Method { get { return default(System.Reflection.MethodInfo); } }
    public sealed override System.Linq.Expressions.ExpressionType NodeType { get { return default(System.Linq.Expressions.ExpressionType); } }
    public System.Linq.Expressions.Expression Operand { get { return default(System.Linq.Expressions.Expression); } }
    public sealed override System.Type Type { get { return default(System.Type); } }
    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) { return default(System.Linq.Expressions.Expression); }
    public override System.Linq.Expressions.Expression Reduce() { return default(System.Linq.Expressions.Expression); }
    public System.Linq.Expressions.UnaryExpression Update(System.Linq.Expressions.Expression operand) { return default(System.Linq.Expressions.UnaryExpression); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Linq.Parallel")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Linq.Parallel")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Linq.Parallel")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Linq {
  public partial class OrderedParallelQuery<TSource> : System.Linq.ParallelQuery<TSource> {
    internal OrderedParallelQuery() { }
    public override System.Collections.Generic.IEnumerator<TSource> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<TSource>); }
  }
  public static partial class ParallelEnumerable {
    public static TSource Aggregate<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TSource, TSource> func) { return default(TSource); }
    public static TAccumulate Aggregate<TSource, TAccumulate>(this System.Linq.ParallelQuery<TSource> source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate> func) { return default(TAccumulate); }
    public static TResult Aggregate<TSource, TAccumulate, TResult>(this System.Linq.ParallelQuery<TSource> source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, System.Func<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, System.Func<TAccumulate, TResult> resultSelector) { return default(TResult); }
    public static TResult Aggregate<TSource, TAccumulate, TResult>(this System.Linq.ParallelQuery<TSource> source, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate> func, System.Func<TAccumulate, TResult> resultSelector) { return default(TResult); }
    public static TResult Aggregate<TSource, TAccumulate, TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TAccumulate> seedFactory, System.Func<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, System.Func<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, System.Func<TAccumulate, TResult> resultSelector) { return default(TResult); }
    public static bool All<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, bool> predicate) { return default(bool); }
    public static bool Any<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(bool); }
    public static bool Any<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, bool> predicate) { return default(bool); }
    public static System.Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Linq.ParallelQuery AsOrdered(this System.Linq.ParallelQuery source) { return default(System.Linq.ParallelQuery); }
    public static System.Linq.ParallelQuery<TSource> AsOrdered<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery AsParallel(this System.Collections.IEnumerable source) { return default(System.Linq.ParallelQuery); }
    public static System.Linq.ParallelQuery<TSource> AsParallel<TSource>(this System.Collections.Concurrent.Partitioner<TSource> source) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> AsParallel<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Collections.Generic.IEnumerable<TSource> AsSequential<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(System.Collections.Generic.IEnumerable<TSource>); }
    public static System.Linq.ParallelQuery<TSource> AsUnordered<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(System.Linq.ParallelQuery<TSource>); }
    public static decimal Average(this System.Linq.ParallelQuery<decimal> source) { return default(decimal); }
    public static double Average(this System.Linq.ParallelQuery<double> source) { return default(double); }
    public static double Average(this System.Linq.ParallelQuery<int> source) { return default(double); }
    public static double Average(this System.Linq.ParallelQuery<long> source) { return default(double); }
    public static System.Nullable<decimal> Average(this System.Linq.ParallelQuery<System.Nullable<decimal>> source) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Average(this System.Linq.ParallelQuery<System.Nullable<double>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<double> Average(this System.Linq.ParallelQuery<System.Nullable<int>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<double> Average(this System.Linq.ParallelQuery<System.Nullable<long>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<float> Average(this System.Linq.ParallelQuery<System.Nullable<float>> source) { return default(System.Nullable<float>); }
    public static float Average(this System.Linq.ParallelQuery<float> source) { return default(float); }
    public static decimal Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, decimal> selector) { return default(decimal); }
    public static double Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, double> selector) { return default(double); }
    public static double Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, int> selector) { return default(double); }
    public static double Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, long> selector) { return default(double); }
    public static System.Nullable<decimal> Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<decimal>> selector) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<double>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<double> Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<int>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<double> Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<long>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<float> Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<float>> selector) { return default(System.Nullable<float>); }
    public static float Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, float> selector) { return default(float); }
    public static System.Linq.ParallelQuery<TResult> Cast<TResult>(this System.Linq.ParallelQuery source) { return default(System.Linq.ParallelQuery<TResult>); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static System.Linq.ParallelQuery<TSource> Concat<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> Concat<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second) { return default(System.Linq.ParallelQuery<TSource>); }
    public static bool Contains<TSource>(this System.Linq.ParallelQuery<TSource> source, TSource value) { return default(bool); }
    public static bool Contains<TSource>(this System.Linq.ParallelQuery<TSource> source, TSource value, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(bool); }
    public static int Count<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(int); }
    public static int Count<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, bool> predicate) { return default(int); }
    public static System.Linq.ParallelQuery<TSource> DefaultIfEmpty<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> DefaultIfEmpty<TSource>(this System.Linq.ParallelQuery<TSource> source, TSource defaultValue) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> Distinct<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> Distinct<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Linq.ParallelQuery<TSource>); }
    public static TSource ElementAt<TSource>(this System.Linq.ParallelQuery<TSource> source, int index) { return default(TSource); }
    public static TSource ElementAtOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source, int index) { return default(TSource); }
    public static System.Linq.ParallelQuery<TResult> Empty<TResult>() { return default(System.Linq.ParallelQuery<TResult>); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static System.Linq.ParallelQuery<TSource> Except<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) { return default(System.Linq.ParallelQuery<TSource>); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static System.Linq.ParallelQuery<TSource> Except<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> Except<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> Except<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Linq.ParallelQuery<TSource>); }
    public static TSource First<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(TSource); }
    public static TSource First<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, bool> predicate) { return default(TSource); }
    public static TSource FirstOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(TSource); }
    public static TSource FirstOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, bool> predicate) { return default(TSource); }
    public static void ForAll<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Action<TSource> action) { }
    public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TSource>>); }
    public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TSource>>); }
    public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector) { return default(System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TElement>>); }
    public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TElement>>); }
    public static System.Linq.ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult> resultSelector) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult> resultSelector) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.ParallelQuery<TResult>); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter, TKey> outerKeySelector, System.Func<TInner, TKey> innerKeySelector, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult> resultSelector) { return default(System.Linq.ParallelQuery<TResult>); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter, TKey> outerKeySelector, System.Func<TInner, TKey> innerKeySelector, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, System.Func<TOuter, TKey> outerKeySelector, System.Func<TInner, TKey> innerKeySelector, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult> resultSelector) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, System.Func<TOuter, TKey> outerKeySelector, System.Func<TInner, TKey> innerKeySelector, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.ParallelQuery<TResult>); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static System.Linq.ParallelQuery<TSource> Intersect<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) { return default(System.Linq.ParallelQuery<TSource>); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static System.Linq.ParallelQuery<TSource> Intersect<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> Intersect<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> Intersect<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Linq.ParallelQuery<TSource>); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static System.Linq.ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter, TKey> outerKeySelector, System.Func<TInner, TKey> innerKeySelector, System.Func<TOuter, TInner, TResult> resultSelector) { return default(System.Linq.ParallelQuery<TResult>); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static System.Linq.ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter, TKey> outerKeySelector, System.Func<TInner, TKey> innerKeySelector, System.Func<TOuter, TInner, TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, System.Func<TOuter, TKey> outerKeySelector, System.Func<TInner, TKey> innerKeySelector, System.Func<TOuter, TInner, TResult> resultSelector) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, System.Func<TOuter, TKey> outerKeySelector, System.Func<TInner, TKey> innerKeySelector, System.Func<TOuter, TInner, TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.ParallelQuery<TResult>); }
    public static TSource Last<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(TSource); }
    public static TSource Last<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, bool> predicate) { return default(TSource); }
    public static TSource LastOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(TSource); }
    public static TSource LastOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, bool> predicate) { return default(TSource); }
    public static long LongCount<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(long); }
    public static long LongCount<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, bool> predicate) { return default(long); }
    public static decimal Max(this System.Linq.ParallelQuery<decimal> source) { return default(decimal); }
    public static double Max(this System.Linq.ParallelQuery<double> source) { return default(double); }
    public static int Max(this System.Linq.ParallelQuery<int> source) { return default(int); }
    public static long Max(this System.Linq.ParallelQuery<long> source) { return default(long); }
    public static System.Nullable<decimal> Max(this System.Linq.ParallelQuery<System.Nullable<decimal>> source) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Max(this System.Linq.ParallelQuery<System.Nullable<double>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Max(this System.Linq.ParallelQuery<System.Nullable<int>> source) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Max(this System.Linq.ParallelQuery<System.Nullable<long>> source) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Max(this System.Linq.ParallelQuery<System.Nullable<float>> source) { return default(System.Nullable<float>); }
    public static float Max(this System.Linq.ParallelQuery<float> source) { return default(float); }
    public static TSource Max<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(TSource); }
    public static decimal Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, decimal> selector) { return default(decimal); }
    public static double Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, double> selector) { return default(double); }
    public static int Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, int> selector) { return default(int); }
    public static long Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, long> selector) { return default(long); }
    public static System.Nullable<decimal> Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<decimal>> selector) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<double>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<int>> selector) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<long>> selector) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<float>> selector) { return default(System.Nullable<float>); }
    public static float Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, float> selector) { return default(float); }
    public static TResult Max<TSource, TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TResult> selector) { return default(TResult); }
    public static decimal Min(this System.Linq.ParallelQuery<decimal> source) { return default(decimal); }
    public static double Min(this System.Linq.ParallelQuery<double> source) { return default(double); }
    public static int Min(this System.Linq.ParallelQuery<int> source) { return default(int); }
    public static long Min(this System.Linq.ParallelQuery<long> source) { return default(long); }
    public static System.Nullable<decimal> Min(this System.Linq.ParallelQuery<System.Nullable<decimal>> source) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Min(this System.Linq.ParallelQuery<System.Nullable<double>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Min(this System.Linq.ParallelQuery<System.Nullable<int>> source) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Min(this System.Linq.ParallelQuery<System.Nullable<long>> source) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Min(this System.Linq.ParallelQuery<System.Nullable<float>> source) { return default(System.Nullable<float>); }
    public static float Min(this System.Linq.ParallelQuery<float> source) { return default(float); }
    public static TSource Min<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(TSource); }
    public static decimal Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, decimal> selector) { return default(decimal); }
    public static double Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, double> selector) { return default(double); }
    public static int Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, int> selector) { return default(int); }
    public static long Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, long> selector) { return default(long); }
    public static System.Nullable<decimal> Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<decimal>> selector) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<double>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<int>> selector) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<long>> selector) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<float>> selector) { return default(System.Nullable<float>); }
    public static float Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, float> selector) { return default(float); }
    public static TResult Min<TSource, TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TResult> selector) { return default(TResult); }
    public static System.Linq.ParallelQuery<TResult> OfType<TResult>(this System.Linq.ParallelQuery source) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Linq.OrderedParallelQuery<TSource>); }
    public static System.Linq.OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Linq.OrderedParallelQuery<TSource>); }
    public static System.Linq.OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Linq.OrderedParallelQuery<TSource>); }
    public static System.Linq.OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Linq.OrderedParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<int> Range(int start, int count) { return default(System.Linq.ParallelQuery<int>); }
    public static System.Linq.ParallelQuery<TResult> Repeat<TResult>(TResult element, int count) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TSource> Reverse<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TResult> Select<TSource, TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TResult> selector) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TResult> Select<TSource, TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, int, TResult> selector) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TResult> SelectMany<TSource, TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>> selector) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TResult> SelectMany<TSource, TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>> selector) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, System.Func<TSource, TCollection, TResult> resultSelector) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, System.Func<TSource, TCollection, TResult> resultSelector) { return default(System.Linq.ParallelQuery<TResult>); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static bool SequenceEqual<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) { return default(bool); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static bool SequenceEqual<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(bool); }
    public static bool SequenceEqual<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second) { return default(bool); }
    public static bool SequenceEqual<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(bool); }
    public static TSource Single<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(TSource); }
    public static TSource Single<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, bool> predicate) { return default(TSource); }
    public static TSource SingleOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(TSource); }
    public static TSource SingleOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, bool> predicate) { return default(TSource); }
    public static System.Linq.ParallelQuery<TSource> Skip<TSource>(this System.Linq.ParallelQuery<TSource> source, int count) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> SkipWhile<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, bool> predicate) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> SkipWhile<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, int, bool> predicate) { return default(System.Linq.ParallelQuery<TSource>); }
    public static decimal Sum(this System.Linq.ParallelQuery<decimal> source) { return default(decimal); }
    public static double Sum(this System.Linq.ParallelQuery<double> source) { return default(double); }
    public static int Sum(this System.Linq.ParallelQuery<int> source) { return default(int); }
    public static long Sum(this System.Linq.ParallelQuery<long> source) { return default(long); }
    public static System.Nullable<decimal> Sum(this System.Linq.ParallelQuery<System.Nullable<decimal>> source) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Sum(this System.Linq.ParallelQuery<System.Nullable<double>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Sum(this System.Linq.ParallelQuery<System.Nullable<int>> source) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Sum(this System.Linq.ParallelQuery<System.Nullable<long>> source) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Sum(this System.Linq.ParallelQuery<System.Nullable<float>> source) { return default(System.Nullable<float>); }
    public static float Sum(this System.Linq.ParallelQuery<float> source) { return default(float); }
    public static decimal Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, decimal> selector) { return default(decimal); }
    public static double Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, double> selector) { return default(double); }
    public static int Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, int> selector) { return default(int); }
    public static long Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, long> selector) { return default(long); }
    public static System.Nullable<decimal> Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<decimal>> selector) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<double>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<int>> selector) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<long>> selector) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, System.Nullable<float>> selector) { return default(System.Nullable<float>); }
    public static float Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, float> selector) { return default(float); }
    public static System.Linq.ParallelQuery<TSource> Take<TSource>(this System.Linq.ParallelQuery<TSource> source, int count) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> TakeWhile<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, bool> predicate) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> TakeWhile<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, int, bool> predicate) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(this System.Linq.OrderedParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Linq.OrderedParallelQuery<TSource>); }
    public static System.Linq.OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(this System.Linq.OrderedParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Linq.OrderedParallelQuery<TSource>); }
    public static System.Linq.OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(this System.Linq.OrderedParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Linq.OrderedParallelQuery<TSource>); }
    public static System.Linq.OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(this System.Linq.OrderedParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Linq.OrderedParallelQuery<TSource>); }
    public static TSource[] ToArray<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(TSource[]); }
    public static System.Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Collections.Generic.Dictionary<TKey, TSource>); }
    public static System.Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Collections.Generic.Dictionary<TKey, TSource>); }
    public static System.Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector) { return default(System.Collections.Generic.Dictionary<TKey, TElement>); }
    public static System.Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Collections.Generic.Dictionary<TKey, TElement>); }
    public static System.Collections.Generic.List<TSource> ToList<TSource>(this System.Linq.ParallelQuery<TSource> source) { return default(System.Collections.Generic.List<TSource>); }
    public static System.Linq.ILookup<TKey, TSource> ToLookup<TSource, TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector) { return default(System.Linq.ILookup<TKey, TSource>); }
    public static System.Linq.ILookup<TKey, TSource> ToLookup<TSource, TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.ILookup<TKey, TSource>); }
    public static System.Linq.ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector) { return default(System.Linq.ILookup<TKey, TElement>); }
    public static System.Linq.ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, TKey> keySelector, System.Func<TSource, TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.ILookup<TKey, TElement>); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static System.Linq.ParallelQuery<TSource> Union<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) { return default(System.Linq.ParallelQuery<TSource>); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static System.Linq.ParallelQuery<TSource> Union<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> Union<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> Union<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> Where<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, bool> predicate) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> Where<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource, int, bool> predicate) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> WithCancellation<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Threading.CancellationToken cancellationToken) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> WithDegreeOfParallelism<TSource>(this System.Linq.ParallelQuery<TSource> source, int degreeOfParallelism) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> WithExecutionMode<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Linq.ParallelExecutionMode executionMode) { return default(System.Linq.ParallelQuery<TSource>); }
    public static System.Linq.ParallelQuery<TSource> WithMergeOptions<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Linq.ParallelMergeOptions mergeOptions) { return default(System.Linq.ParallelQuery<TSource>); }
    [System.ObsoleteAttribute("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]
    public static System.Linq.ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(this System.Linq.ParallelQuery<TFirst> first, System.Collections.Generic.IEnumerable<TSecond> second, System.Func<TFirst, TSecond, TResult> resultSelector) { return default(System.Linq.ParallelQuery<TResult>); }
    public static System.Linq.ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(this System.Linq.ParallelQuery<TFirst> first, System.Linq.ParallelQuery<TSecond> second, System.Func<TFirst, TSecond, TResult> resultSelector) { return default(System.Linq.ParallelQuery<TResult>); }
  }
  public enum ParallelExecutionMode {
    Default = 0,
    ForceParallelism = 1,
  }
  public enum ParallelMergeOptions {
    AutoBuffered = 2,
    Default = 0,
    FullyBuffered = 3,
    NotBuffered = 1,
  }
  public partial class ParallelQuery : System.Collections.IEnumerable {
    internal ParallelQuery() { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public partial class ParallelQuery<TSource> : System.Linq.ParallelQuery, System.Collections.Generic.IEnumerable<TSource>, System.Collections.IEnumerable {
    internal ParallelQuery() { }
    public virtual System.Collections.Generic.IEnumerator<TSource> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<TSource>); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Linq.Queryable")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Linq.Queryable")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Linq.Queryable")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Linq {
  public abstract partial class EnumerableExecutor {
    protected EnumerableExecutor() { }
  }
  public partial class EnumerableExecutor<T> : System.Linq.EnumerableExecutor {
    public EnumerableExecutor(System.Linq.Expressions.Expression expression) { }
  }
  public abstract partial class EnumerableQuery {
    protected EnumerableQuery() { }
  }
  public partial class EnumerableQuery<T> : System.Linq.EnumerableQuery, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Linq.IOrderedQueryable, System.Linq.IOrderedQueryable<T>, System.Linq.IQueryable, System.Linq.IQueryable<T>, System.Linq.IQueryProvider {
    public EnumerableQuery(System.Collections.Generic.IEnumerable<T> enumerable) { }
    public EnumerableQuery(System.Linq.Expressions.Expression expression) { }
    System.Type System.Linq.IQueryable.ElementType { get { return default(System.Type); } }
    System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get { return default(System.Linq.Expressions.Expression); } }
    System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get { return default(System.Linq.IQueryProvider); } }
    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression expression) { return default(System.Linq.IQueryable); }
    System.Linq.IQueryable<S> System.Linq.IQueryProvider.CreateQuery<S>(System.Linq.Expressions.Expression expression) { return default(System.Linq.IQueryable<S>); }
    object System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression expression) { return default(object); }
    S System.Linq.IQueryProvider.Execute<S>(System.Linq.Expressions.Expression expression) { return default(S); }
    public override string ToString() { return default(string); }
  }
  public static partial class Queryable {
    public static TSource Aggregate<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TSource, TSource>> func) { return default(TSource); }
    public static TAccumulate Aggregate<TSource, TAccumulate>(this System.Linq.IQueryable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>> func) { return default(TAccumulate); }
    public static TResult Aggregate<TSource, TAccumulate, TResult>(this System.Linq.IQueryable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>> func, System.Linq.Expressions.Expression<System.Func<TAccumulate, TResult>> selector) { return default(TResult); }
    public static bool All<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { return default(bool); }
    public static bool Any<TSource>(this System.Linq.IQueryable<TSource> source) { return default(bool); }
    public static bool Any<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { return default(bool); }
    public static System.Linq.IQueryable AsQueryable(this System.Collections.IEnumerable source) { return default(System.Linq.IQueryable); }
    public static System.Linq.IQueryable<TElement> AsQueryable<TElement>(this System.Collections.Generic.IEnumerable<TElement> source) { return default(System.Linq.IQueryable<TElement>); }
    public static decimal Average(this System.Linq.IQueryable<decimal> source) { return default(decimal); }
    public static double Average(this System.Linq.IQueryable<double> source) { return default(double); }
    public static double Average(this System.Linq.IQueryable<int> source) { return default(double); }
    public static double Average(this System.Linq.IQueryable<long> source) { return default(double); }
    public static System.Nullable<decimal> Average(this System.Linq.IQueryable<System.Nullable<decimal>> source) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Average(this System.Linq.IQueryable<System.Nullable<double>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<double> Average(this System.Linq.IQueryable<System.Nullable<int>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<double> Average(this System.Linq.IQueryable<System.Nullable<long>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<float> Average(this System.Linq.IQueryable<System.Nullable<float>> source) { return default(System.Nullable<float>); }
    public static float Average(this System.Linq.IQueryable<float> source) { return default(float); }
    public static decimal Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>> selector) { return default(decimal); }
    public static double Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, double>> selector) { return default(double); }
    public static double Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int>> selector) { return default(double); }
    public static double Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, long>> selector) { return default(double); }
    public static System.Nullable<decimal> Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<decimal>>> selector) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<double>>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<double> Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<int>>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<double> Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<long>>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<float> Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<float>>> selector) { return default(System.Nullable<float>); }
    public static float Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, float>> selector) { return default(float); }
    public static System.Linq.IQueryable<TResult> Cast<TResult>(this System.Linq.IQueryable source) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TSource> Concat<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) { return default(System.Linq.IQueryable<TSource>); }
    public static bool Contains<TSource>(this System.Linq.IQueryable<TSource> source, TSource item) { return default(bool); }
    public static bool Contains<TSource>(this System.Linq.IQueryable<TSource> source, TSource item, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(bool); }
    public static int Count<TSource>(this System.Linq.IQueryable<TSource> source) { return default(int); }
    public static int Count<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { return default(int); }
    public static System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource>(this System.Linq.IQueryable<TSource> source) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource>(this System.Linq.IQueryable<TSource> source, TSource defaultValue) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> Distinct<TSource>(this System.Linq.IQueryable<TSource> source) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> Distinct<TSource>(this System.Linq.IQueryable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Linq.IQueryable<TSource>); }
    public static TSource ElementAt<TSource>(this System.Linq.IQueryable<TSource> source, int index) { return default(TSource); }
    public static TSource ElementAtOrDefault<TSource>(this System.Linq.IQueryable<TSource> source, int index) { return default(TSource); }
    public static System.Linq.IQueryable<TSource> Except<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> Except<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Linq.IQueryable<TSource>); }
    public static TSource First<TSource>(this System.Linq.IQueryable<TSource> source) { return default(TSource); }
    public static TSource First<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { return default(TSource); }
    public static TSource FirstOrDefault<TSource>(this System.Linq.IQueryable<TSource> source) { return default(TSource); }
    public static TSource FirstOrDefault<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { return default(TSource); }
    public static System.Linq.IQueryable<System.Linq.IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { return default(System.Linq.IQueryable<System.Linq.IGrouping<TKey, TSource>>); }
    public static System.Linq.IQueryable<System.Linq.IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.IQueryable<System.Linq.IGrouping<TKey, TSource>>); }
    public static System.Linq.IQueryable<System.Linq.IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector) { return default(System.Linq.IQueryable<System.Linq.IGrouping<TKey, TElement>>); }
    public static System.Linq.IQueryable<System.Linq.IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.IQueryable<System.Linq.IGrouping<TKey, TElement>>); }
    public static System.Linq.IQueryable<TResult> GroupBy<TSource, TKey, TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>> resultSelector) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TResult> GroupBy<TSource, TKey, TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>> resultSelector) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>> outerKeySelector, System.Linq.Expressions.Expression<System.Func<TInner, TKey>> innerKeySelector, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>> resultSelector) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>> outerKeySelector, System.Linq.Expressions.Expression<System.Func<TInner, TKey>> innerKeySelector, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TSource> Intersect<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> Intersect<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>> outerKeySelector, System.Linq.Expressions.Expression<System.Func<TInner, TKey>> innerKeySelector, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>> resultSelector) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>> outerKeySelector, System.Linq.Expressions.Expression<System.Func<TInner, TKey>> innerKeySelector, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Linq.IQueryable<TResult>); }
    public static TSource Last<TSource>(this System.Linq.IQueryable<TSource> source) { return default(TSource); }
    public static TSource Last<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { return default(TSource); }
    public static TSource LastOrDefault<TSource>(this System.Linq.IQueryable<TSource> source) { return default(TSource); }
    public static TSource LastOrDefault<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { return default(TSource); }
    public static long LongCount<TSource>(this System.Linq.IQueryable<TSource> source) { return default(long); }
    public static long LongCount<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { return default(long); }
    public static TSource Max<TSource>(this System.Linq.IQueryable<TSource> source) { return default(TSource); }
    public static TResult Max<TSource, TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector) { return default(TResult); }
    public static TSource Min<TSource>(this System.Linq.IQueryable<TSource> source) { return default(TSource); }
    public static TResult Min<TSource, TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector) { return default(TResult); }
    public static System.Linq.IQueryable<TResult> OfType<TResult>(this System.Linq.IQueryable source) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IOrderedQueryable<TSource> OrderBy<TSource, TKey>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { return default(System.Linq.IOrderedQueryable<TSource>); }
    public static System.Linq.IOrderedQueryable<TSource> OrderBy<TSource, TKey>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Linq.IOrderedQueryable<TSource>); }
    public static System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { return default(System.Linq.IOrderedQueryable<TSource>); }
    public static System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Linq.IOrderedQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> Reverse<TSource>(this System.Linq.IQueryable<TSource> source) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TResult> Select<TSource, TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TResult> Select<TSource, TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, TResult>> selector) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TResult> SelectMany<TSource, TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>> selector) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TResult> SelectMany<TSource, TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>>> selector) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>> resultSelector) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>> resultSelector) { return default(System.Linq.IQueryable<TResult>); }
    public static bool SequenceEqual<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) { return default(bool); }
    public static bool SequenceEqual<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(bool); }
    public static TSource Single<TSource>(this System.Linq.IQueryable<TSource> source) { return default(TSource); }
    public static TSource Single<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { return default(TSource); }
    public static TSource SingleOrDefault<TSource>(this System.Linq.IQueryable<TSource> source) { return default(TSource); }
    public static TSource SingleOrDefault<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { return default(TSource); }
    public static System.Linq.IQueryable<TSource> Skip<TSource>(this System.Linq.IQueryable<TSource> source, int count) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> SkipWhile<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> SkipWhile<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, bool>> predicate) { return default(System.Linq.IQueryable<TSource>); }
    public static decimal Sum(this System.Linq.IQueryable<decimal> source) { return default(decimal); }
    public static double Sum(this System.Linq.IQueryable<double> source) { return default(double); }
    public static int Sum(this System.Linq.IQueryable<int> source) { return default(int); }
    public static long Sum(this System.Linq.IQueryable<long> source) { return default(long); }
    public static System.Nullable<decimal> Sum(this System.Linq.IQueryable<System.Nullable<decimal>> source) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Sum(this System.Linq.IQueryable<System.Nullable<double>> source) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Sum(this System.Linq.IQueryable<System.Nullable<int>> source) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Sum(this System.Linq.IQueryable<System.Nullable<long>> source) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Sum(this System.Linq.IQueryable<System.Nullable<float>> source) { return default(System.Nullable<float>); }
    public static float Sum(this System.Linq.IQueryable<float> source) { return default(float); }
    public static decimal Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>> selector) { return default(decimal); }
    public static double Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, double>> selector) { return default(double); }
    public static int Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int>> selector) { return default(int); }
    public static long Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, long>> selector) { return default(long); }
    public static System.Nullable<decimal> Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<decimal>>> selector) { return default(System.Nullable<decimal>); }
    public static System.Nullable<double> Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<double>>> selector) { return default(System.Nullable<double>); }
    public static System.Nullable<int> Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<int>>> selector) { return default(System.Nullable<int>); }
    public static System.Nullable<long> Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<long>>> selector) { return default(System.Nullable<long>); }
    public static System.Nullable<float> Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<float>>> selector) { return default(System.Nullable<float>); }
    public static float Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, float>> selector) { return default(float); }
    public static System.Linq.IQueryable<TSource> Take<TSource>(this System.Linq.IQueryable<TSource> source, int count) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> TakeWhile<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> TakeWhile<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, bool>> predicate) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IOrderedQueryable<TSource> ThenBy<TSource, TKey>(this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { return default(System.Linq.IOrderedQueryable<TSource>); }
    public static System.Linq.IOrderedQueryable<TSource> ThenBy<TSource, TKey>(this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Linq.IOrderedQueryable<TSource>); }
    public static System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { return default(System.Linq.IOrderedQueryable<TSource>); }
    public static System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Linq.IOrderedQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> Union<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> Union<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> Where<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TSource> Where<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, bool>> predicate) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Linq.IQueryable<TResult> Zip<TFirst, TSecond, TResult>(this System.Linq.IQueryable<TFirst> source1, System.Collections.Generic.IEnumerable<TSecond> source2, System.Linq.Expressions.Expression<System.Func<TFirst, TSecond, TResult>> resultSelector) { return default(System.Linq.IQueryable<TResult>); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Net.Http")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Net.Http")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Net.Http")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Net.Http {
  public partial class ByteArrayContent : System.Net.Http.HttpContent {
    public ByteArrayContent(byte[] content) { }
    public ByteArrayContent(byte[] content, int offset, int count) { }
    protected override System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync() { return default(System.Threading.Tasks.Task<System.IO.Stream>); }
    protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, System.Net.TransportContext context) { return default(System.Threading.Tasks.Task); }
    protected internal override bool TryComputeLength(out long length) { length = default(long); return default(bool); }
  }
  public enum ClientCertificateOption {
    Automatic = 1,
    Manual = 0,
  }
  public abstract partial class DelegatingHandler : System.Net.Http.HttpMessageHandler {
    protected DelegatingHandler() { }
    protected DelegatingHandler(System.Net.Http.HttpMessageHandler innerHandler) { }
    public System.Net.Http.HttpMessageHandler InnerHandler { get { return default(System.Net.Http.HttpMessageHandler); } set { } }
    protected override void Dispose(bool disposing) { }
    protected internal override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
  }
  public partial class FormUrlEncodedContent : System.Net.Http.ByteArrayContent {
    public FormUrlEncodedContent(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> nameValueCollection) : base (default(byte[])) { }
  }
  public partial class HttpClient : System.Net.Http.HttpMessageInvoker {
    public HttpClient() : base (default(System.Net.Http.HttpMessageHandler)) { }
    public HttpClient(System.Net.Http.HttpMessageHandler handler) : base (default(System.Net.Http.HttpMessageHandler)) { }
    public HttpClient(System.Net.Http.HttpMessageHandler handler, bool disposeHandler) : base (default(System.Net.Http.HttpMessageHandler)) { }
    public System.Uri BaseAddress { get { return default(System.Uri); } set { } }
    public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get { return default(System.Net.Http.Headers.HttpRequestHeaders); } }
    public long MaxResponseContentBufferSize { get { return default(long); } set { } }
    public System.TimeSpan Timeout { get { return default(System.TimeSpan); } set { } }
    public void CancelPendingRequests() { }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync(string requestUri) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync(string requestUri, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync(System.Uri requestUri) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync(System.Uri requestUri, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    protected override void Dispose(bool disposing) { }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(string requestUri) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(string requestUri, System.Net.Http.HttpCompletionOption completionOption) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(string requestUri, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(System.Uri requestUri) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(System.Uri requestUri, System.Net.Http.HttpCompletionOption completionOption) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(System.Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(System.Uri requestUri, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync(string requestUri) { return default(System.Threading.Tasks.Task<byte[]>); }
    public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync(System.Uri requestUri) { return default(System.Threading.Tasks.Task<byte[]>); }
    public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(string requestUri) { return default(System.Threading.Tasks.Task<System.IO.Stream>); }
    public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(System.Uri requestUri) { return default(System.Threading.Tasks.Task<System.IO.Stream>); }
    public System.Threading.Tasks.Task<string> GetStringAsync(string requestUri) { return default(System.Threading.Tasks.Task<string>); }
    public System.Threading.Tasks.Task<string> GetStringAsync(System.Uri requestUri) { return default(System.Threading.Tasks.Task<string>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync(string requestUri, System.Net.Http.HttpContent content) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync(string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync(System.Uri requestUri, System.Net.Http.HttpContent content) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync(System.Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync(string requestUri, System.Net.Http.HttpContent content) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync(string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync(System.Uri requestUri, System.Net.Http.HttpContent content) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync(System.Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
    public override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
  }
  public partial class HttpClientHandler : System.Net.Http.HttpMessageHandler {
    public HttpClientHandler() { }
    public bool AllowAutoRedirect { get { return default(bool); } set { } }
    public System.Net.DecompressionMethods AutomaticDecompression { get { return default(System.Net.DecompressionMethods); } set { } }
    public bool CheckCertificateRevocationList { get { return default(bool); } set { } }
    public System.Net.Http.ClientCertificateOption ClientCertificateOptions { get { return default(System.Net.Http.ClientCertificateOption); } set { } }
    public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get { return default(System.Security.Cryptography.X509Certificates.X509CertificateCollection); } }
    public System.Net.CookieContainer CookieContainer { get { return default(System.Net.CookieContainer); } set { } }
    public System.Net.ICredentials Credentials { get { return default(System.Net.ICredentials); } set { } }
    public System.Net.ICredentials DefaultProxyCredentials { get { return default(System.Net.ICredentials); } set { } }
    public int MaxAutomaticRedirections { get { return default(int); } set { } }
    public int MaxConnectionsPerServer { get { return default(int); } set { } }
    public long MaxRequestContentBufferSize { get { return default(long); } set { } }
    public int MaxResponseHeadersLength { get { return default(int); } set { } }
    public bool PreAuthenticate { get { return default(bool); } set { } }
    public System.Collections.Generic.IDictionary<string, object> Properties { get { return default(System.Collections.Generic.IDictionary<string, object>); } }
    public System.Net.IWebProxy Proxy { get { return default(System.Net.IWebProxy); } set { } }
    public System.Func<System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool> ServerCertificateCustomValidationCallback { get { return default(System.Func<System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool>); } set { } }
    public System.Security.Authentication.SslProtocols SslProtocols { get { return default(System.Security.Authentication.SslProtocols); } set { } }
    public virtual bool SupportsAutomaticDecompression { get { return default(bool); } }
    public virtual bool SupportsProxy { get { return default(bool); } }
    public virtual bool SupportsRedirectConfiguration { get { return default(bool); } }
    public bool UseCookies { get { return default(bool); } set { } }
    public bool UseDefaultCredentials { get { return default(bool); } set { } }
    public bool UseProxy { get { return default(bool); } set { } }
    protected override void Dispose(bool disposing) { }
    protected internal override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
  }
  public enum HttpCompletionOption {
    ResponseContentRead = 0,
    ResponseHeadersRead = 1,
  }
  public abstract partial class HttpContent : System.IDisposable {
    protected HttpContent() { }
    public System.Net.Http.Headers.HttpContentHeaders Headers { get { return default(System.Net.Http.Headers.HttpContentHeaders); } }
    public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream stream) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream stream, System.Net.TransportContext context) { return default(System.Threading.Tasks.Task); }
    protected virtual System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync() { return default(System.Threading.Tasks.Task<System.IO.Stream>); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public System.Threading.Tasks.Task LoadIntoBufferAsync() { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task LoadIntoBufferAsync(long maxBufferSize) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task<byte[]> ReadAsByteArrayAsync() { return default(System.Threading.Tasks.Task<byte[]>); }
    public System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync() { return default(System.Threading.Tasks.Task<System.IO.Stream>); }
    public System.Threading.Tasks.Task<string> ReadAsStringAsync() { return default(System.Threading.Tasks.Task<string>); }
    protected abstract System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, System.Net.TransportContext context);
    protected internal abstract bool TryComputeLength(out long length);
  }
  public abstract partial class HttpMessageHandler : System.IDisposable {
    protected HttpMessageHandler() { }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    protected internal abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
  }
  public partial class HttpMessageInvoker : System.IDisposable {
    public HttpMessageInvoker(System.Net.Http.HttpMessageHandler handler) { }
    public HttpMessageInvoker(System.Net.Http.HttpMessageHandler handler, bool disposeHandler) { }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public virtual System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
  }
  public partial class HttpMethod : System.IEquatable<System.Net.Http.HttpMethod> {
    public HttpMethod(string method) { }
    public static System.Net.Http.HttpMethod Delete { get { return default(System.Net.Http.HttpMethod); } }
    public static System.Net.Http.HttpMethod Get { get { return default(System.Net.Http.HttpMethod); } }
    public static System.Net.Http.HttpMethod Head { get { return default(System.Net.Http.HttpMethod); } }
    public string Method { get { return default(string); } }
    public static System.Net.Http.HttpMethod Options { get { return default(System.Net.Http.HttpMethod); } }
    public static System.Net.Http.HttpMethod Post { get { return default(System.Net.Http.HttpMethod); } }
    public static System.Net.Http.HttpMethod Put { get { return default(System.Net.Http.HttpMethod); } }
    public static System.Net.Http.HttpMethod Trace { get { return default(System.Net.Http.HttpMethod); } }
    public bool Equals(System.Net.Http.HttpMethod other) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Net.Http.HttpMethod left, System.Net.Http.HttpMethod right) { return default(bool); }
    public static bool operator !=(System.Net.Http.HttpMethod left, System.Net.Http.HttpMethod right) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  public partial class HttpRequestException : System.Exception {
    public HttpRequestException() { }
    public HttpRequestException(string message) { }
    public HttpRequestException(string message, System.Exception inner) { }
  }
  public partial class HttpRequestMessage : System.IDisposable {
    public HttpRequestMessage() { }
    public HttpRequestMessage(System.Net.Http.HttpMethod method, string requestUri) { }
    public HttpRequestMessage(System.Net.Http.HttpMethod method, System.Uri requestUri) { }
    public System.Net.Http.HttpContent Content { get { return default(System.Net.Http.HttpContent); } set { } }
    public System.Net.Http.Headers.HttpRequestHeaders Headers { get { return default(System.Net.Http.Headers.HttpRequestHeaders); } }
    public System.Net.Http.HttpMethod Method { get { return default(System.Net.Http.HttpMethod); } set { } }
    public System.Collections.Generic.IDictionary<string, object> Properties { get { return default(System.Collections.Generic.IDictionary<string, object>); } }
    public System.Uri RequestUri { get { return default(System.Uri); } set { } }
    public System.Version Version { get { return default(System.Version); } set { } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public override string ToString() { return default(string); }
  }
  public partial class HttpResponseMessage : System.IDisposable {
    public HttpResponseMessage() { }
    public HttpResponseMessage(System.Net.HttpStatusCode statusCode) { }
    public System.Net.Http.HttpContent Content { get { return default(System.Net.Http.HttpContent); } set { } }
    public System.Net.Http.Headers.HttpResponseHeaders Headers { get { return default(System.Net.Http.Headers.HttpResponseHeaders); } }
    public bool IsSuccessStatusCode { get { return default(bool); } }
    public string ReasonPhrase { get { return default(string); } set { } }
    public System.Net.Http.HttpRequestMessage RequestMessage { get { return default(System.Net.Http.HttpRequestMessage); } set { } }
    public System.Net.HttpStatusCode StatusCode { get { return default(System.Net.HttpStatusCode); } set { } }
    public System.Version Version { get { return default(System.Version); } set { } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public System.Net.Http.HttpResponseMessage EnsureSuccessStatusCode() { return default(System.Net.Http.HttpResponseMessage); }
    public override string ToString() { return default(string); }
  }
  public abstract partial class MessageProcessingHandler : System.Net.Http.DelegatingHandler {
    protected MessageProcessingHandler() { }
    protected MessageProcessingHandler(System.Net.Http.HttpMessageHandler innerHandler) { }
    protected abstract System.Net.Http.HttpRequestMessage ProcessRequest(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    protected abstract System.Net.Http.HttpResponseMessage ProcessResponse(System.Net.Http.HttpResponseMessage response, System.Threading.CancellationToken cancellationToken);
    protected internal sealed override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
  }
  public partial class MultipartContent : System.Net.Http.HttpContent, System.Collections.Generic.IEnumerable<System.Net.Http.HttpContent>, System.Collections.IEnumerable {
    public MultipartContent() { }
    public MultipartContent(string subtype) { }
    public MultipartContent(string subtype, string boundary) { }
    public virtual void Add(System.Net.Http.HttpContent content) { }
    protected override void Dispose(bool disposing) { }
    public System.Collections.Generic.IEnumerator<System.Net.Http.HttpContent> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Net.Http.HttpContent>); }
    protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, System.Net.TransportContext context) { return default(System.Threading.Tasks.Task); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    protected internal override bool TryComputeLength(out long length) { length = default(long); return default(bool); }
  }
  public partial class MultipartFormDataContent : System.Net.Http.MultipartContent {
    public MultipartFormDataContent() { }
    public MultipartFormDataContent(string boundary) { }
    public override void Add(System.Net.Http.HttpContent content) { }
    public void Add(System.Net.Http.HttpContent content, string name) { }
    public void Add(System.Net.Http.HttpContent content, string name, string fileName) { }
  }
  public partial class StreamContent : System.Net.Http.HttpContent {
    public StreamContent(System.IO.Stream content) { }
    public StreamContent(System.IO.Stream content, int bufferSize) { }
    protected override System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync() { return default(System.Threading.Tasks.Task<System.IO.Stream>); }
    protected override void Dispose(bool disposing) { }
    protected override System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, System.Net.TransportContext context) { return default(System.Threading.Tasks.Task); }
    protected internal override bool TryComputeLength(out long length) { length = default(long); return default(bool); }
  }
  public partial class StringContent : System.Net.Http.ByteArrayContent {
    public StringContent(string content) : base (default(byte[])) { }
    public StringContent(string content, System.Text.Encoding encoding) : base (default(byte[])) { }
    public StringContent(string content, System.Text.Encoding encoding, string mediaType) : base (default(byte[])) { }
  }
}
namespace System.Net.Http.Headers {
  public partial class AuthenticationHeaderValue {
    public AuthenticationHeaderValue(string scheme) { }
    public AuthenticationHeaderValue(string scheme, string parameter) { }
    public string Parameter { get { return default(string); } }
    public string Scheme { get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.AuthenticationHeaderValue Parse(string input) { return default(System.Net.Http.Headers.AuthenticationHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.AuthenticationHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.AuthenticationHeaderValue); return default(bool); }
  }
  public partial class CacheControlHeaderValue {
    public CacheControlHeaderValue() { }
    public System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue> Extensions { get { return default(System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue>); } }
    public System.Nullable<System.TimeSpan> MaxAge { get { return default(System.Nullable<System.TimeSpan>); } set { } }
    public bool MaxStale { get { return default(bool); } set { } }
    public System.Nullable<System.TimeSpan> MaxStaleLimit { get { return default(System.Nullable<System.TimeSpan>); } set { } }
    public System.Nullable<System.TimeSpan> MinFresh { get { return default(System.Nullable<System.TimeSpan>); } set { } }
    public bool MustRevalidate { get { return default(bool); } set { } }
    public bool NoCache { get { return default(bool); } set { } }
    public System.Collections.Generic.ICollection<string> NoCacheHeaders { get { return default(System.Collections.Generic.ICollection<string>); } }
    public bool NoStore { get { return default(bool); } set { } }
    public bool NoTransform { get { return default(bool); } set { } }
    public bool OnlyIfCached { get { return default(bool); } set { } }
    public bool Private { get { return default(bool); } set { } }
    public System.Collections.Generic.ICollection<string> PrivateHeaders { get { return default(System.Collections.Generic.ICollection<string>); } }
    public bool ProxyRevalidate { get { return default(bool); } set { } }
    public bool Public { get { return default(bool); } set { } }
    public System.Nullable<System.TimeSpan> SharedMaxAge { get { return default(System.Nullable<System.TimeSpan>); } set { } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.CacheControlHeaderValue Parse(string input) { return default(System.Net.Http.Headers.CacheControlHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.CacheControlHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.CacheControlHeaderValue); return default(bool); }
  }
  public partial class ContentDispositionHeaderValue {
    protected ContentDispositionHeaderValue(System.Net.Http.Headers.ContentDispositionHeaderValue source) { }
    public ContentDispositionHeaderValue(string dispositionType) { }
    public System.Nullable<System.DateTimeOffset> CreationDate { get { return default(System.Nullable<System.DateTimeOffset>); } set { } }
    public string DispositionType { get { return default(string); } set { } }
    public string FileName { get { return default(string); } set { } }
    public string FileNameStar { get { return default(string); } set { } }
    public System.Nullable<System.DateTimeOffset> ModificationDate { get { return default(System.Nullable<System.DateTimeOffset>); } set { } }
    public string Name { get { return default(string); } set { } }
    public System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue> Parameters { get { return default(System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue>); } }
    public System.Nullable<System.DateTimeOffset> ReadDate { get { return default(System.Nullable<System.DateTimeOffset>); } set { } }
    public System.Nullable<long> Size { get { return default(System.Nullable<long>); } set { } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.ContentDispositionHeaderValue Parse(string input) { return default(System.Net.Http.Headers.ContentDispositionHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.ContentDispositionHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.ContentDispositionHeaderValue); return default(bool); }
  }
  public partial class ContentRangeHeaderValue {
    public ContentRangeHeaderValue(long length) { }
    public ContentRangeHeaderValue(long from, long to) { }
    public ContentRangeHeaderValue(long from, long to, long length) { }
    public System.Nullable<long> From { get { return default(System.Nullable<long>); } }
    public bool HasLength { get { return default(bool); } }
    public bool HasRange { get { return default(bool); } }
    public System.Nullable<long> Length { get { return default(System.Nullable<long>); } }
    public System.Nullable<long> To { get { return default(System.Nullable<long>); } }
    public string Unit { get { return default(string); } set { } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.ContentRangeHeaderValue Parse(string input) { return default(System.Net.Http.Headers.ContentRangeHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.ContentRangeHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.ContentRangeHeaderValue); return default(bool); }
  }
  public partial class EntityTagHeaderValue {
    public EntityTagHeaderValue(string tag) { }
    public EntityTagHeaderValue(string tag, bool isWeak) { }
    public static System.Net.Http.Headers.EntityTagHeaderValue Any { get { return default(System.Net.Http.Headers.EntityTagHeaderValue); } }
    public bool IsWeak { get { return default(bool); } }
    public string Tag { get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.EntityTagHeaderValue Parse(string input) { return default(System.Net.Http.Headers.EntityTagHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.EntityTagHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.EntityTagHeaderValue); return default(bool); }
  }
  public sealed partial class HttpContentHeaders : System.Net.Http.Headers.HttpHeaders {
    internal HttpContentHeaders() { }
    public System.Collections.Generic.ICollection<string> Allow { get { return default(System.Collections.Generic.ICollection<string>); } }
    public System.Net.Http.Headers.ContentDispositionHeaderValue ContentDisposition { get { return default(System.Net.Http.Headers.ContentDispositionHeaderValue); } set { } }
    public System.Collections.Generic.ICollection<string> ContentEncoding { get { return default(System.Collections.Generic.ICollection<string>); } }
    public System.Collections.Generic.ICollection<string> ContentLanguage { get { return default(System.Collections.Generic.ICollection<string>); } }
    public System.Nullable<long> ContentLength { get { return default(System.Nullable<long>); } set { } }
    public System.Uri ContentLocation { get { return default(System.Uri); } set { } }
    public byte[] ContentMD5 { get { return default(byte[]); } set { } }
    public System.Net.Http.Headers.ContentRangeHeaderValue ContentRange { get { return default(System.Net.Http.Headers.ContentRangeHeaderValue); } set { } }
    public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get { return default(System.Net.Http.Headers.MediaTypeHeaderValue); } set { } }
    public System.Nullable<System.DateTimeOffset> Expires { get { return default(System.Nullable<System.DateTimeOffset>); } set { } }
    public System.Nullable<System.DateTimeOffset> LastModified { get { return default(System.Nullable<System.DateTimeOffset>); } set { } }
  }
  public abstract partial class HttpHeaders : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Collections.IEnumerable {
    protected HttpHeaders() { }
    public void Add(string name, System.Collections.Generic.IEnumerable<string> values) { }
    public void Add(string name, string value) { }
    public void Clear() { }
    public bool Contains(string name) { return default(bool); }
    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>); }
    public System.Collections.Generic.IEnumerable<string> GetValues(string name) { return default(System.Collections.Generic.IEnumerable<string>); }
    public bool Remove(string name) { return default(bool); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public override string ToString() { return default(string); }
    public bool TryAddWithoutValidation(string name, System.Collections.Generic.IEnumerable<string> values) { return default(bool); }
    public bool TryAddWithoutValidation(string name, string value) { return default(bool); }
    public bool TryGetValues(string name, out System.Collections.Generic.IEnumerable<string> values) { values = default(System.Collections.Generic.IEnumerable<string>); return default(bool); }
  }
  public sealed partial class HttpHeaderValueCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable where T : class {
    internal HttpHeaderValueCollection() { }
    public int Count { get { return default(int); } }
    public bool IsReadOnly { get { return default(bool); } }
    public void Add(T item) { }
    public void Clear() { }
    public bool Contains(T item) { return default(bool); }
    public void CopyTo(T[] array, int arrayIndex) { }
    public System.Collections.Generic.IEnumerator<T> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    public void ParseAdd(string input) { }
    public bool Remove(T item) { return default(bool); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public override string ToString() { return default(string); }
    public bool TryParseAdd(string input) { return default(bool); }
  }
  public sealed partial class HttpRequestHeaders : System.Net.Http.Headers.HttpHeaders {
    internal HttpRequestHeaders() { }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.MediaTypeWithQualityHeaderValue> Accept { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.MediaTypeWithQualityHeaderValue>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.StringWithQualityHeaderValue> AcceptCharset { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.StringWithQualityHeaderValue>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.StringWithQualityHeaderValue> AcceptEncoding { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.StringWithQualityHeaderValue>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.StringWithQualityHeaderValue> AcceptLanguage { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.StringWithQualityHeaderValue>); } }
    public System.Net.Http.Headers.AuthenticationHeaderValue Authorization { get { return default(System.Net.Http.Headers.AuthenticationHeaderValue); } set { } }
    public System.Net.Http.Headers.CacheControlHeaderValue CacheControl { get { return default(System.Net.Http.Headers.CacheControlHeaderValue); } set { } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<string> Connection { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<string>); } }
    public System.Nullable<bool> ConnectionClose { get { return default(System.Nullable<bool>); } set { } }
    public System.Nullable<System.DateTimeOffset> Date { get { return default(System.Nullable<System.DateTimeOffset>); } set { } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.NameValueWithParametersHeaderValue> Expect { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.NameValueWithParametersHeaderValue>); } }
    public System.Nullable<bool> ExpectContinue { get { return default(System.Nullable<bool>); } set { } }
    public string From { get { return default(string); } set { } }
    public string Host { get { return default(string); } set { } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.EntityTagHeaderValue> IfMatch { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.EntityTagHeaderValue>); } }
    public System.Nullable<System.DateTimeOffset> IfModifiedSince { get { return default(System.Nullable<System.DateTimeOffset>); } set { } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.EntityTagHeaderValue> IfNoneMatch { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.EntityTagHeaderValue>); } }
    public System.Net.Http.Headers.RangeConditionHeaderValue IfRange { get { return default(System.Net.Http.Headers.RangeConditionHeaderValue); } set { } }
    public System.Nullable<System.DateTimeOffset> IfUnmodifiedSince { get { return default(System.Nullable<System.DateTimeOffset>); } set { } }
    public System.Nullable<int> MaxForwards { get { return default(System.Nullable<int>); } set { } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.NameValueHeaderValue> Pragma { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.NameValueHeaderValue>); } }
    public System.Net.Http.Headers.AuthenticationHeaderValue ProxyAuthorization { get { return default(System.Net.Http.Headers.AuthenticationHeaderValue); } set { } }
    public System.Net.Http.Headers.RangeHeaderValue Range { get { return default(System.Net.Http.Headers.RangeHeaderValue); } set { } }
    public System.Uri Referrer { get { return default(System.Uri); } set { } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.TransferCodingWithQualityHeaderValue> TE { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.TransferCodingWithQualityHeaderValue>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<string> Trailer { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<string>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.TransferCodingHeaderValue> TransferEncoding { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.TransferCodingHeaderValue>); } }
    public System.Nullable<bool> TransferEncodingChunked { get { return default(System.Nullable<bool>); } set { } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ProductHeaderValue> Upgrade { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ProductHeaderValue>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ProductInfoHeaderValue> UserAgent { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ProductInfoHeaderValue>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ViaHeaderValue> Via { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ViaHeaderValue>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.WarningHeaderValue> Warning { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.WarningHeaderValue>); } }
  }
  public sealed partial class HttpResponseHeaders : System.Net.Http.Headers.HttpHeaders {
    internal HttpResponseHeaders() { }
    public System.Net.Http.Headers.HttpHeaderValueCollection<string> AcceptRanges { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<string>); } }
    public System.Nullable<System.TimeSpan> Age { get { return default(System.Nullable<System.TimeSpan>); } set { } }
    public System.Net.Http.Headers.CacheControlHeaderValue CacheControl { get { return default(System.Net.Http.Headers.CacheControlHeaderValue); } set { } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<string> Connection { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<string>); } }
    public System.Nullable<bool> ConnectionClose { get { return default(System.Nullable<bool>); } set { } }
    public System.Nullable<System.DateTimeOffset> Date { get { return default(System.Nullable<System.DateTimeOffset>); } set { } }
    public System.Net.Http.Headers.EntityTagHeaderValue ETag { get { return default(System.Net.Http.Headers.EntityTagHeaderValue); } set { } }
    public System.Uri Location { get { return default(System.Uri); } set { } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.NameValueHeaderValue> Pragma { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.NameValueHeaderValue>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.AuthenticationHeaderValue> ProxyAuthenticate { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.AuthenticationHeaderValue>); } }
    public System.Net.Http.Headers.RetryConditionHeaderValue RetryAfter { get { return default(System.Net.Http.Headers.RetryConditionHeaderValue); } set { } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ProductInfoHeaderValue> Server { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ProductInfoHeaderValue>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<string> Trailer { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<string>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.TransferCodingHeaderValue> TransferEncoding { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.TransferCodingHeaderValue>); } }
    public System.Nullable<bool> TransferEncodingChunked { get { return default(System.Nullable<bool>); } set { } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ProductHeaderValue> Upgrade { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ProductHeaderValue>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<string> Vary { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<string>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ViaHeaderValue> Via { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.ViaHeaderValue>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.WarningHeaderValue> Warning { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.WarningHeaderValue>); } }
    public System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.AuthenticationHeaderValue> WwwAuthenticate { get { return default(System.Net.Http.Headers.HttpHeaderValueCollection<System.Net.Http.Headers.AuthenticationHeaderValue>); } }
  }
  public partial class MediaTypeHeaderValue {
    protected MediaTypeHeaderValue(System.Net.Http.Headers.MediaTypeHeaderValue source) { }
    public MediaTypeHeaderValue(string mediaType) { }
    public string CharSet { get { return default(string); } set { } }
    public string MediaType { get { return default(string); } set { } }
    public System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue> Parameters { get { return default(System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue>); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.MediaTypeHeaderValue Parse(string input) { return default(System.Net.Http.Headers.MediaTypeHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.MediaTypeHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.MediaTypeHeaderValue); return default(bool); }
  }
  public sealed partial class MediaTypeWithQualityHeaderValue : System.Net.Http.Headers.MediaTypeHeaderValue {
    public MediaTypeWithQualityHeaderValue(string mediaType) : base (default(System.Net.Http.Headers.MediaTypeHeaderValue)) { }
    public MediaTypeWithQualityHeaderValue(string mediaType, double quality) : base (default(System.Net.Http.Headers.MediaTypeHeaderValue)) { }
    public System.Nullable<double> Quality { get { return default(System.Nullable<double>); } set { } }
    public static new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue Parse(string input) { return default(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue); }
    public static bool TryParse(string input, out System.Net.Http.Headers.MediaTypeWithQualityHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue); return default(bool); }
  }
  public partial class NameValueHeaderValue {
    protected NameValueHeaderValue(System.Net.Http.Headers.NameValueHeaderValue source) { }
    public NameValueHeaderValue(string name) { }
    public NameValueHeaderValue(string name, string value) { }
    public string Name { get { return default(string); } }
    public string Value { get { return default(string); } set { } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.NameValueHeaderValue Parse(string input) { return default(System.Net.Http.Headers.NameValueHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.NameValueHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.NameValueHeaderValue); return default(bool); }
  }
  public partial class NameValueWithParametersHeaderValue : System.Net.Http.Headers.NameValueHeaderValue {
    protected NameValueWithParametersHeaderValue(System.Net.Http.Headers.NameValueWithParametersHeaderValue source) : base (default(System.Net.Http.Headers.NameValueHeaderValue)) { }
    public NameValueWithParametersHeaderValue(string name) : base (default(System.Net.Http.Headers.NameValueHeaderValue)) { }
    public NameValueWithParametersHeaderValue(string name, string value) : base (default(System.Net.Http.Headers.NameValueHeaderValue)) { }
    public System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue> Parameters { get { return default(System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue>); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static new System.Net.Http.Headers.NameValueWithParametersHeaderValue Parse(string input) { return default(System.Net.Http.Headers.NameValueWithParametersHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.NameValueWithParametersHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.NameValueWithParametersHeaderValue); return default(bool); }
  }
  public partial class ProductHeaderValue {
    public ProductHeaderValue(string name) { }
    public ProductHeaderValue(string name, string version) { }
    public string Name { get { return default(string); } }
    public string Version { get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.ProductHeaderValue Parse(string input) { return default(System.Net.Http.Headers.ProductHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.ProductHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.ProductHeaderValue); return default(bool); }
  }
  public partial class ProductInfoHeaderValue {
    public ProductInfoHeaderValue(System.Net.Http.Headers.ProductHeaderValue product) { }
    public ProductInfoHeaderValue(string comment) { }
    public ProductInfoHeaderValue(string productName, string productVersion) { }
    public string Comment { get { return default(string); } }
    public System.Net.Http.Headers.ProductHeaderValue Product { get { return default(System.Net.Http.Headers.ProductHeaderValue); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.ProductInfoHeaderValue Parse(string input) { return default(System.Net.Http.Headers.ProductInfoHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.ProductInfoHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.ProductInfoHeaderValue); return default(bool); }
  }
  public partial class RangeConditionHeaderValue {
    public RangeConditionHeaderValue(System.DateTimeOffset date) { }
    public RangeConditionHeaderValue(System.Net.Http.Headers.EntityTagHeaderValue entityTag) { }
    public RangeConditionHeaderValue(string entityTag) { }
    public System.Nullable<System.DateTimeOffset> Date { get { return default(System.Nullable<System.DateTimeOffset>); } }
    public System.Net.Http.Headers.EntityTagHeaderValue EntityTag { get { return default(System.Net.Http.Headers.EntityTagHeaderValue); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.RangeConditionHeaderValue Parse(string input) { return default(System.Net.Http.Headers.RangeConditionHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.RangeConditionHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.RangeConditionHeaderValue); return default(bool); }
  }
  public partial class RangeHeaderValue {
    public RangeHeaderValue() { }
    public RangeHeaderValue(System.Nullable<long> from, System.Nullable<long> to) { }
    public System.Collections.Generic.ICollection<System.Net.Http.Headers.RangeItemHeaderValue> Ranges { get { return default(System.Collections.Generic.ICollection<System.Net.Http.Headers.RangeItemHeaderValue>); } }
    public string Unit { get { return default(string); } set { } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.RangeHeaderValue Parse(string input) { return default(System.Net.Http.Headers.RangeHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.RangeHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.RangeHeaderValue); return default(bool); }
  }
  public partial class RangeItemHeaderValue {
    public RangeItemHeaderValue(System.Nullable<long> from, System.Nullable<long> to) { }
    public System.Nullable<long> From { get { return default(System.Nullable<long>); } }
    public System.Nullable<long> To { get { return default(System.Nullable<long>); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public override string ToString() { return default(string); }
  }
  public partial class RetryConditionHeaderValue {
    public RetryConditionHeaderValue(System.DateTimeOffset date) { }
    public RetryConditionHeaderValue(System.TimeSpan delta) { }
    public System.Nullable<System.DateTimeOffset> Date { get { return default(System.Nullable<System.DateTimeOffset>); } }
    public System.Nullable<System.TimeSpan> Delta { get { return default(System.Nullable<System.TimeSpan>); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.RetryConditionHeaderValue Parse(string input) { return default(System.Net.Http.Headers.RetryConditionHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.RetryConditionHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.RetryConditionHeaderValue); return default(bool); }
  }
  public partial class StringWithQualityHeaderValue {
    public StringWithQualityHeaderValue(string value) { }
    public StringWithQualityHeaderValue(string value, double quality) { }
    public System.Nullable<double> Quality { get { return default(System.Nullable<double>); } }
    public string Value { get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.StringWithQualityHeaderValue Parse(string input) { return default(System.Net.Http.Headers.StringWithQualityHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.StringWithQualityHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.StringWithQualityHeaderValue); return default(bool); }
  }
  public partial class TransferCodingHeaderValue {
    protected TransferCodingHeaderValue(System.Net.Http.Headers.TransferCodingHeaderValue source) { }
    public TransferCodingHeaderValue(string value) { }
    public System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue> Parameters { get { return default(System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue>); } }
    public string Value { get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.TransferCodingHeaderValue Parse(string input) { return default(System.Net.Http.Headers.TransferCodingHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.TransferCodingHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.TransferCodingHeaderValue); return default(bool); }
  }
  public sealed partial class TransferCodingWithQualityHeaderValue : System.Net.Http.Headers.TransferCodingHeaderValue {
    public TransferCodingWithQualityHeaderValue(string value) : base (default(System.Net.Http.Headers.TransferCodingHeaderValue)) { }
    public TransferCodingWithQualityHeaderValue(string value, double quality) : base (default(System.Net.Http.Headers.TransferCodingHeaderValue)) { }
    public System.Nullable<double> Quality { get { return default(System.Nullable<double>); } set { } }
    public static new System.Net.Http.Headers.TransferCodingWithQualityHeaderValue Parse(string input) { return default(System.Net.Http.Headers.TransferCodingWithQualityHeaderValue); }
    public static bool TryParse(string input, out System.Net.Http.Headers.TransferCodingWithQualityHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.TransferCodingWithQualityHeaderValue); return default(bool); }
  }
  public partial class ViaHeaderValue {
    public ViaHeaderValue(string protocolVersion, string receivedBy) { }
    public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName) { }
    public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName, string comment) { }
    public string Comment { get { return default(string); } }
    public string ProtocolName { get { return default(string); } }
    public string ProtocolVersion { get { return default(string); } }
    public string ReceivedBy { get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.ViaHeaderValue Parse(string input) { return default(System.Net.Http.Headers.ViaHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.ViaHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.ViaHeaderValue); return default(bool); }
  }
  public partial class WarningHeaderValue {
    public WarningHeaderValue(int code, string agent, string text) { }
    public WarningHeaderValue(int code, string agent, string text, System.DateTimeOffset date) { }
    public string Agent { get { return default(string); } }
    public int Code { get { return default(int); } }
    public System.Nullable<System.DateTimeOffset> Date { get { return default(System.Nullable<System.DateTimeOffset>); } }
    public string Text { get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.Http.Headers.WarningHeaderValue Parse(string input) { return default(System.Net.Http.Headers.WarningHeaderValue); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string input, out System.Net.Http.Headers.WarningHeaderValue parsedValue) { parsedValue = default(System.Net.Http.Headers.WarningHeaderValue); return default(bool); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Net.Http.WinHttpHandler")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Net.Http.WinHttpHandler")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Net.Http.WinHttpHandler")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Net.Http {
  public enum CookieUsePolicy {
    IgnoreCookies = 0,
    UseInternalCookieStoreOnly = 1,
    UseSpecifiedCookieContainer = 2,
  }
  public enum WindowsProxyUsePolicy {
    DoNotUseProxy = 0,
    UseCustomProxy = 3,
    UseWinHttpProxy = 1,
    UseWinInetProxy = 2,
  }
  public partial class WinHttpHandler : System.Net.Http.HttpMessageHandler {
    public WinHttpHandler() { }
    public System.Net.DecompressionMethods AutomaticDecompression { get { return default(System.Net.DecompressionMethods); } set { } }
    public bool AutomaticRedirection { get { return default(bool); } set { } }
    public bool CheckCertificateRevocationList { get { return default(bool); } set { } }
    public System.Net.Http.ClientCertificateOption ClientCertificateOption { get { return default(System.Net.Http.ClientCertificateOption); } set { } }
    public System.Security.Cryptography.X509Certificates.X509Certificate2Collection ClientCertificates { get { return default(System.Security.Cryptography.X509Certificates.X509Certificate2Collection); } }
    public System.Net.CookieContainer CookieContainer { get { return default(System.Net.CookieContainer); } set { } }
    public System.Net.Http.CookieUsePolicy CookieUsePolicy { get { return default(System.Net.Http.CookieUsePolicy); } set { } }
    public System.Net.ICredentials DefaultProxyCredentials { get { return default(System.Net.ICredentials); } set { } }
    public int MaxAutomaticRedirections { get { return default(int); } set { } }
    public int MaxConnectionsPerServer { get { return default(int); } set { } }
    public int MaxResponseDrainSize { get { return default(int); } set { } }
    public int MaxResponseHeadersLength { get { return default(int); } set { } }
    public bool PreAuthenticate { get { return default(bool); } set { } }
    public System.Collections.Generic.IDictionary<string, object> Properties { get { return default(System.Collections.Generic.IDictionary<string, object>); } }
    public System.Net.IWebProxy Proxy { get { return default(System.Net.IWebProxy); } set { } }
    public System.TimeSpan ReceiveDataTimeout { get { return default(System.TimeSpan); } set { } }
    public System.TimeSpan ReceiveHeadersTimeout { get { return default(System.TimeSpan); } set { } }
    public System.TimeSpan SendTimeout { get { return default(System.TimeSpan); } set { } }
    public System.Func<System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool> ServerCertificateValidationCallback { get { return default(System.Func<System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, bool>); } set { } }
    public System.Net.ICredentials ServerCredentials { get { return default(System.Net.ICredentials); } set { } }
    public System.Security.Authentication.SslProtocols SslProtocols { get { return default(System.Security.Authentication.SslProtocols); } set { } }
    public System.Net.Http.WindowsProxyUsePolicy WindowsProxyUsePolicy { get { return default(System.Net.Http.WindowsProxyUsePolicy); } set { } }
    protected override void Dispose(bool disposing) { }
    protected override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Net.NameResolution")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Net.NameResolution")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Net.NameResolution")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Net {
  public static partial class Dns {
    public static System.Threading.Tasks.Task<System.Net.IPAddress[]> GetHostAddressesAsync(string hostNameOrAddress) { return default(System.Threading.Tasks.Task<System.Net.IPAddress[]>); }
    public static System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync(System.Net.IPAddress address) { return default(System.Threading.Tasks.Task<System.Net.IPHostEntry>); }
    public static System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync(string hostNameOrAddress) { return default(System.Threading.Tasks.Task<System.Net.IPHostEntry>); }
    public static string GetHostName() { return default(string); }
  }
  public partial class IPHostEntry {
    public IPHostEntry() { }
    public System.Net.IPAddress[] AddressList { get { return default(System.Net.IPAddress[]); } set { } }
    public string[] Aliases { get { return default(string[]); } set { } }
    public string HostName { get { return default(string); } set { } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Net.NetworkInformation")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Net.NetworkInformation")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Net.NetworkInformation")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Net.NetworkInformation {
  public enum DuplicateAddressDetectionState {
    Deprecated = 3,
    Duplicate = 2,
    Invalid = 0,
    Preferred = 4,
    Tentative = 1,
  }
  public abstract partial class GatewayIPAddressInformation {
    protected GatewayIPAddressInformation() { }
    public abstract System.Net.IPAddress Address { get; }
  }
  public partial class GatewayIPAddressInformationCollection : System.Collections.Generic.ICollection<System.Net.NetworkInformation.GatewayIPAddressInformation>, System.Collections.Generic.IEnumerable<System.Net.NetworkInformation.GatewayIPAddressInformation>, System.Collections.IEnumerable {
    protected internal GatewayIPAddressInformationCollection() { }
    public virtual int Count { get { return default(int); } }
    public virtual bool IsReadOnly { get { return default(bool); } }
    public virtual System.Net.NetworkInformation.GatewayIPAddressInformation this[int index] { get { return default(System.Net.NetworkInformation.GatewayIPAddressInformation); } }
    public virtual void Add(System.Net.NetworkInformation.GatewayIPAddressInformation address) { }
    public virtual void Clear() { }
    public virtual bool Contains(System.Net.NetworkInformation.GatewayIPAddressInformation address) { return default(bool); }
    public virtual void CopyTo(System.Net.NetworkInformation.GatewayIPAddressInformation[] array, int offset) { }
    public virtual System.Collections.Generic.IEnumerator<System.Net.NetworkInformation.GatewayIPAddressInformation> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Net.NetworkInformation.GatewayIPAddressInformation>); }
    public virtual bool Remove(System.Net.NetworkInformation.GatewayIPAddressInformation address) { return default(bool); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public abstract partial class IcmpV4Statistics {
    protected IcmpV4Statistics() { }
    public abstract long AddressMaskRepliesReceived { get; }
    public abstract long AddressMaskRepliesSent { get; }
    public abstract long AddressMaskRequestsReceived { get; }
    public abstract long AddressMaskRequestsSent { get; }
    public abstract long DestinationUnreachableMessagesReceived { get; }
    public abstract long DestinationUnreachableMessagesSent { get; }
    public abstract long EchoRepliesReceived { get; }
    public abstract long EchoRepliesSent { get; }
    public abstract long EchoRequestsReceived { get; }
    public abstract long EchoRequestsSent { get; }
    public abstract long ErrorsReceived { get; }
    public abstract long ErrorsSent { get; }
    public abstract long MessagesReceived { get; }
    public abstract long MessagesSent { get; }
    public abstract long ParameterProblemsReceived { get; }
    public abstract long ParameterProblemsSent { get; }
    public abstract long RedirectsReceived { get; }
    public abstract long RedirectsSent { get; }
    public abstract long SourceQuenchesReceived { get; }
    public abstract long SourceQuenchesSent { get; }
    public abstract long TimeExceededMessagesReceived { get; }
    public abstract long TimeExceededMessagesSent { get; }
    public abstract long TimestampRepliesReceived { get; }
    public abstract long TimestampRepliesSent { get; }
    public abstract long TimestampRequestsReceived { get; }
    public abstract long TimestampRequestsSent { get; }
  }
  public abstract partial class IcmpV6Statistics {
    protected IcmpV6Statistics() { }
    public abstract long DestinationUnreachableMessagesReceived { get; }
    public abstract long DestinationUnreachableMessagesSent { get; }
    public abstract long EchoRepliesReceived { get; }
    public abstract long EchoRepliesSent { get; }
    public abstract long EchoRequestsReceived { get; }
    public abstract long EchoRequestsSent { get; }
    public abstract long ErrorsReceived { get; }
    public abstract long ErrorsSent { get; }
    public abstract long MembershipQueriesReceived { get; }
    public abstract long MembershipQueriesSent { get; }
    public abstract long MembershipReductionsReceived { get; }
    public abstract long MembershipReductionsSent { get; }
    public abstract long MembershipReportsReceived { get; }
    public abstract long MembershipReportsSent { get; }
    public abstract long MessagesReceived { get; }
    public abstract long MessagesSent { get; }
    public abstract long NeighborAdvertisementsReceived { get; }
    public abstract long NeighborAdvertisementsSent { get; }
    public abstract long NeighborSolicitsReceived { get; }
    public abstract long NeighborSolicitsSent { get; }
    public abstract long PacketTooBigMessagesReceived { get; }
    public abstract long PacketTooBigMessagesSent { get; }
    public abstract long ParameterProblemsReceived { get; }
    public abstract long ParameterProblemsSent { get; }
    public abstract long RedirectsReceived { get; }
    public abstract long RedirectsSent { get; }
    public abstract long RouterAdvertisementsReceived { get; }
    public abstract long RouterAdvertisementsSent { get; }
    public abstract long RouterSolicitsReceived { get; }
    public abstract long RouterSolicitsSent { get; }
    public abstract long TimeExceededMessagesReceived { get; }
    public abstract long TimeExceededMessagesSent { get; }
  }
  public abstract partial class IPAddressInformation {
    protected IPAddressInformation() { }
    public abstract System.Net.IPAddress Address { get; }
    public abstract bool IsDnsEligible { get; }
    public abstract bool IsTransient { get; }
  }
  public partial class IPAddressInformationCollection : System.Collections.Generic.ICollection<System.Net.NetworkInformation.IPAddressInformation>, System.Collections.Generic.IEnumerable<System.Net.NetworkInformation.IPAddressInformation>, System.Collections.IEnumerable {
    internal IPAddressInformationCollection() { }
    public virtual int Count { get { return default(int); } }
    public virtual bool IsReadOnly { get { return default(bool); } }
    public virtual System.Net.NetworkInformation.IPAddressInformation this[int index] { get { return default(System.Net.NetworkInformation.IPAddressInformation); } }
    public virtual void Add(System.Net.NetworkInformation.IPAddressInformation address) { }
    public virtual void Clear() { }
    public virtual bool Contains(System.Net.NetworkInformation.IPAddressInformation address) { return default(bool); }
    public virtual void CopyTo(System.Net.NetworkInformation.IPAddressInformation[] array, int offset) { }
    public virtual System.Collections.Generic.IEnumerator<System.Net.NetworkInformation.IPAddressInformation> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Net.NetworkInformation.IPAddressInformation>); }
    public virtual bool Remove(System.Net.NetworkInformation.IPAddressInformation address) { return default(bool); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public abstract partial class IPGlobalProperties {
    protected IPGlobalProperties() { }
    public abstract string DhcpScopeName { get; }
    public abstract string DomainName { get; }
    public abstract string HostName { get; }
    public abstract bool IsWinsProxy { get; }
    public abstract System.Net.NetworkInformation.NetBiosNodeType NodeType { get; }
    public abstract System.Net.NetworkInformation.TcpConnectionInformation[] GetActiveTcpConnections();
    public abstract System.Net.IPEndPoint[] GetActiveTcpListeners();
    public abstract System.Net.IPEndPoint[] GetActiveUdpListeners();
    public abstract System.Net.NetworkInformation.IcmpV4Statistics GetIcmpV4Statistics();
    public abstract System.Net.NetworkInformation.IcmpV6Statistics GetIcmpV6Statistics();
    public static System.Net.NetworkInformation.IPGlobalProperties GetIPGlobalProperties() { return default(System.Net.NetworkInformation.IPGlobalProperties); }
    public abstract System.Net.NetworkInformation.IPGlobalStatistics GetIPv4GlobalStatistics();
    public abstract System.Net.NetworkInformation.IPGlobalStatistics GetIPv6GlobalStatistics();
    public abstract System.Net.NetworkInformation.TcpStatistics GetTcpIPv4Statistics();
    public abstract System.Net.NetworkInformation.TcpStatistics GetTcpIPv6Statistics();
    public abstract System.Net.NetworkInformation.UdpStatistics GetUdpIPv4Statistics();
    public abstract System.Net.NetworkInformation.UdpStatistics GetUdpIPv6Statistics();
    public virtual System.Threading.Tasks.Task<System.Net.NetworkInformation.UnicastIPAddressInformationCollection> GetUnicastAddressesAsync() { return default(System.Threading.Tasks.Task<System.Net.NetworkInformation.UnicastIPAddressInformationCollection>); }
  }
  public abstract partial class IPGlobalStatistics {
    protected IPGlobalStatistics() { }
    public abstract int DefaultTtl { get; }
    public abstract bool ForwardingEnabled { get; }
    public abstract int NumberOfInterfaces { get; }
    public abstract int NumberOfIPAddresses { get; }
    public abstract int NumberOfRoutes { get; }
    public abstract long OutputPacketRequests { get; }
    public abstract long OutputPacketRoutingDiscards { get; }
    public abstract long OutputPacketsDiscarded { get; }
    public abstract long OutputPacketsWithNoRoute { get; }
    public abstract long PacketFragmentFailures { get; }
    public abstract long PacketReassembliesRequired { get; }
    public abstract long PacketReassemblyFailures { get; }
    public abstract long PacketReassemblyTimeout { get; }
    public abstract long PacketsFragmented { get; }
    public abstract long PacketsReassembled { get; }
    public abstract long ReceivedPackets { get; }
    public abstract long ReceivedPacketsDelivered { get; }
    public abstract long ReceivedPacketsDiscarded { get; }
    public abstract long ReceivedPacketsForwarded { get; }
    public abstract long ReceivedPacketsWithAddressErrors { get; }
    public abstract long ReceivedPacketsWithHeadersErrors { get; }
    public abstract long ReceivedPacketsWithUnknownProtocol { get; }
  }
  public abstract partial class IPInterfaceProperties {
    protected IPInterfaceProperties() { }
    public abstract System.Net.NetworkInformation.IPAddressInformationCollection AnycastAddresses { get; }
    public abstract System.Net.NetworkInformation.IPAddressCollection DhcpServerAddresses { get; }
    public abstract System.Net.NetworkInformation.IPAddressCollection DnsAddresses { get; }
    public abstract string DnsSuffix { get; }
    public abstract System.Net.NetworkInformation.GatewayIPAddressInformationCollection GatewayAddresses { get; }
    public abstract bool IsDnsEnabled { get; }
    public abstract bool IsDynamicDnsEnabled { get; }
    public abstract System.Net.NetworkInformation.MulticastIPAddressInformationCollection MulticastAddresses { get; }
    public abstract System.Net.NetworkInformation.UnicastIPAddressInformationCollection UnicastAddresses { get; }
    public abstract System.Net.NetworkInformation.IPAddressCollection WinsServersAddresses { get; }
    public abstract System.Net.NetworkInformation.IPv4InterfaceProperties GetIPv4Properties();
    public abstract System.Net.NetworkInformation.IPv6InterfaceProperties GetIPv6Properties();
  }
  public abstract partial class IPInterfaceStatistics {
    protected IPInterfaceStatistics() { }
    public abstract long BytesReceived { get; }
    public abstract long BytesSent { get; }
    public abstract long IncomingPacketsDiscarded { get; }
    public abstract long IncomingPacketsWithErrors { get; }
    public abstract long IncomingUnknownProtocolPackets { get; }
    public abstract long NonUnicastPacketsReceived { get; }
    public abstract long NonUnicastPacketsSent { get; }
    public abstract long OutgoingPacketsDiscarded { get; }
    public abstract long OutgoingPacketsWithErrors { get; }
    public abstract long OutputQueueLength { get; }
    public abstract long UnicastPacketsReceived { get; }
    public abstract long UnicastPacketsSent { get; }
  }
  public abstract partial class IPv4InterfaceProperties {
    protected IPv4InterfaceProperties() { }
    public abstract int Index { get; }
    public abstract bool IsAutomaticPrivateAddressingActive { get; }
    public abstract bool IsAutomaticPrivateAddressingEnabled { get; }
    public abstract bool IsDhcpEnabled { get; }
    public abstract bool IsForwardingEnabled { get; }
    public abstract int Mtu { get; }
    public abstract bool UsesWins { get; }
  }
  public abstract partial class IPv6InterfaceProperties {
    protected IPv6InterfaceProperties() { }
    public abstract int Index { get; }
    public abstract int Mtu { get; }
    public virtual long GetScopeId(System.Net.NetworkInformation.ScopeLevel scopeLevel) { return default(long); }
  }
  public abstract partial class MulticastIPAddressInformation : System.Net.NetworkInformation.IPAddressInformation {
    protected MulticastIPAddressInformation() { }
    public abstract long AddressPreferredLifetime { get; }
    public abstract long AddressValidLifetime { get; }
    public abstract long DhcpLeaseLifetime { get; }
    public abstract System.Net.NetworkInformation.DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    public abstract System.Net.NetworkInformation.PrefixOrigin PrefixOrigin { get; }
    public abstract System.Net.NetworkInformation.SuffixOrigin SuffixOrigin { get; }
  }
  public partial class MulticastIPAddressInformationCollection : System.Collections.Generic.ICollection<System.Net.NetworkInformation.MulticastIPAddressInformation>, System.Collections.Generic.IEnumerable<System.Net.NetworkInformation.MulticastIPAddressInformation>, System.Collections.IEnumerable {
    protected internal MulticastIPAddressInformationCollection() { }
    public virtual int Count { get { return default(int); } }
    public virtual bool IsReadOnly { get { return default(bool); } }
    public virtual System.Net.NetworkInformation.MulticastIPAddressInformation this[int index] { get { return default(System.Net.NetworkInformation.MulticastIPAddressInformation); } }
    public virtual void Add(System.Net.NetworkInformation.MulticastIPAddressInformation address) { }
    public virtual void Clear() { }
    public virtual bool Contains(System.Net.NetworkInformation.MulticastIPAddressInformation address) { return default(bool); }
    public virtual void CopyTo(System.Net.NetworkInformation.MulticastIPAddressInformation[] array, int offset) { }
    public virtual System.Collections.Generic.IEnumerator<System.Net.NetworkInformation.MulticastIPAddressInformation> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Net.NetworkInformation.MulticastIPAddressInformation>); }
    public virtual bool Remove(System.Net.NetworkInformation.MulticastIPAddressInformation address) { return default(bool); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public enum NetBiosNodeType {
    Broadcast = 1,
    Hybrid = 8,
    Mixed = 4,
    Peer2Peer = 2,
    Unknown = 0,
  }
  public delegate void NetworkAddressChangedEventHandler(object sender, System.EventArgs e);
  public static partial class NetworkChange {
    public static event System.Net.NetworkInformation.NetworkAddressChangedEventHandler NetworkAddressChanged { add { } remove { } }
  }
  public partial class NetworkInformationException : System.Exception {
    public NetworkInformationException() { }
    public NetworkInformationException(int errorCode) { }
    public int ErrorCode { get { return default(int); } }
  }
  public abstract partial class NetworkInterface {
    protected NetworkInterface() { }
    public virtual string Description { get { return default(string); } }
    public virtual string Id { get { return default(string); } }
    public static int IPv6LoopbackInterfaceIndex { get { return default(int); } }
    public virtual bool IsReceiveOnly { get { return default(bool); } }
    public static int LoopbackInterfaceIndex { get { return default(int); } }
    public virtual string Name { get { return default(string); } }
    public virtual System.Net.NetworkInformation.NetworkInterfaceType NetworkInterfaceType { get { return default(System.Net.NetworkInformation.NetworkInterfaceType); } }
    public virtual System.Net.NetworkInformation.OperationalStatus OperationalStatus { get { return default(System.Net.NetworkInformation.OperationalStatus); } }
    public virtual long Speed { get { return default(long); } }
    public virtual bool SupportsMulticast { get { return default(bool); } }
    public static System.Net.NetworkInformation.NetworkInterface[] GetAllNetworkInterfaces() { return default(System.Net.NetworkInformation.NetworkInterface[]); }
    public virtual System.Net.NetworkInformation.IPInterfaceProperties GetIPProperties() { return default(System.Net.NetworkInformation.IPInterfaceProperties); }
    public virtual System.Net.NetworkInformation.IPInterfaceStatistics GetIPStatistics() { return default(System.Net.NetworkInformation.IPInterfaceStatistics); }
    public static bool GetIsNetworkAvailable() { return default(bool); }
    public virtual System.Net.NetworkInformation.PhysicalAddress GetPhysicalAddress() { return default(System.Net.NetworkInformation.PhysicalAddress); }
    public virtual bool Supports(System.Net.NetworkInformation.NetworkInterfaceComponent networkInterfaceComponent) { return default(bool); }
  }
  public enum NetworkInterfaceComponent {
    IPv4 = 0,
    IPv6 = 1,
  }
  public enum NetworkInterfaceType {
    AsymmetricDsl = 94,
    Atm = 37,
    BasicIsdn = 20,
    Ethernet = 6,
    Ethernet3Megabit = 26,
    FastEthernetFx = 69,
    FastEthernetT = 62,
    Fddi = 15,
    GenericModem = 48,
    GigabitEthernet = 117,
    HighPerformanceSerialBus = 144,
    IPOverAtm = 114,
    Isdn = 63,
    Loopback = 24,
    MultiRateSymmetricDsl = 143,
    Ppp = 23,
    PrimaryIsdn = 21,
    RateAdaptDsl = 95,
    Slip = 28,
    SymmetricDsl = 96,
    TokenRing = 9,
    Tunnel = 131,
    Unknown = 1,
    VeryHighSpeedDsl = 97,
    Wireless80211 = 71,
    Wman = 237,
    Wwanpp = 243,
    Wwanpp2 = 244,
  }
  public enum OperationalStatus {
    Dormant = 5,
    Down = 2,
    LowerLayerDown = 7,
    NotPresent = 6,
    Testing = 3,
    Unknown = 4,
    Up = 1,
  }
  public partial class PhysicalAddress {
    public static readonly System.Net.NetworkInformation.PhysicalAddress None;
    public PhysicalAddress(byte[] address) { }
    public override bool Equals(object comparand) { return default(bool); }
    public byte[] GetAddressBytes() { return default(byte[]); }
    public override int GetHashCode() { return default(int); }
    public static System.Net.NetworkInformation.PhysicalAddress Parse(string address) { return default(System.Net.NetworkInformation.PhysicalAddress); }
    public override string ToString() { return default(string); }
  }
  public enum PrefixOrigin {
    Dhcp = 3,
    Manual = 1,
    Other = 0,
    RouterAdvertisement = 4,
    WellKnown = 2,
  }
  public enum ScopeLevel {
    Admin = 4,
    Global = 14,
    Interface = 1,
    Link = 2,
    None = 0,
    Organization = 8,
    Site = 5,
    Subnet = 3,
  }
  public enum SuffixOrigin {
    LinkLayerAddress = 4,
    Manual = 1,
    OriginDhcp = 3,
    Other = 0,
    Random = 5,
    WellKnown = 2,
  }
  public abstract partial class TcpConnectionInformation {
    protected TcpConnectionInformation() { }
    public abstract System.Net.IPEndPoint LocalEndPoint { get; }
    public abstract System.Net.IPEndPoint RemoteEndPoint { get; }
    public abstract System.Net.NetworkInformation.TcpState State { get; }
  }
  public enum TcpState {
    Closed = 1,
    CloseWait = 8,
    Closing = 9,
    DeleteTcb = 12,
    Established = 5,
    FinWait1 = 6,
    FinWait2 = 7,
    LastAck = 10,
    Listen = 2,
    SynReceived = 4,
    SynSent = 3,
    TimeWait = 11,
    Unknown = 0,
  }
  public abstract partial class TcpStatistics {
    protected TcpStatistics() { }
    public abstract long ConnectionsAccepted { get; }
    public abstract long ConnectionsInitiated { get; }
    public abstract long CumulativeConnections { get; }
    public abstract long CurrentConnections { get; }
    public abstract long ErrorsReceived { get; }
    public abstract long FailedConnectionAttempts { get; }
    public abstract long MaximumConnections { get; }
    public abstract long MaximumTransmissionTimeout { get; }
    public abstract long MinimumTransmissionTimeout { get; }
    public abstract long ResetConnections { get; }
    public abstract long ResetsSent { get; }
    public abstract long SegmentsReceived { get; }
    public abstract long SegmentsResent { get; }
    public abstract long SegmentsSent { get; }
  }
  public abstract partial class UdpStatistics {
    protected UdpStatistics() { }
    public abstract long DatagramsReceived { get; }
    public abstract long DatagramsSent { get; }
    public abstract long IncomingDatagramsDiscarded { get; }
    public abstract long IncomingDatagramsWithErrors { get; }
    public abstract int UdpListeners { get; }
  }
  public abstract partial class UnicastIPAddressInformation : System.Net.NetworkInformation.IPAddressInformation {
    protected UnicastIPAddressInformation() { }
    public abstract long AddressPreferredLifetime { get; }
    public abstract long AddressValidLifetime { get; }
    public abstract long DhcpLeaseLifetime { get; }
    public abstract System.Net.NetworkInformation.DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    public abstract System.Net.IPAddress IPv4Mask { get; }
    public virtual int PrefixLength { get { return default(int); } }
    public abstract System.Net.NetworkInformation.PrefixOrigin PrefixOrigin { get; }
    public abstract System.Net.NetworkInformation.SuffixOrigin SuffixOrigin { get; }
  }
  public partial class UnicastIPAddressInformationCollection : System.Collections.Generic.ICollection<System.Net.NetworkInformation.UnicastIPAddressInformation>, System.Collections.Generic.IEnumerable<System.Net.NetworkInformation.UnicastIPAddressInformation>, System.Collections.IEnumerable {
    protected internal UnicastIPAddressInformationCollection() { }
    public virtual int Count { get { return default(int); } }
    public virtual bool IsReadOnly { get { return default(bool); } }
    public virtual System.Net.NetworkInformation.UnicastIPAddressInformation this[int index] { get { return default(System.Net.NetworkInformation.UnicastIPAddressInformation); } }
    public virtual void Add(System.Net.NetworkInformation.UnicastIPAddressInformation address) { }
    public virtual void Clear() { }
    public virtual bool Contains(System.Net.NetworkInformation.UnicastIPAddressInformation address) { return default(bool); }
    public virtual void CopyTo(System.Net.NetworkInformation.UnicastIPAddressInformation[] array, int offset) { }
    public virtual System.Collections.Generic.IEnumerator<System.Net.NetworkInformation.UnicastIPAddressInformation> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Net.NetworkInformation.UnicastIPAddressInformation>); }
    public virtual bool Remove(System.Net.NetworkInformation.UnicastIPAddressInformation address) { return default(bool); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Net.Ping")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Net.Ping")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Net.Ping")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Net.NetworkInformation {
  public enum IPStatus {
    BadDestination = 11018,
    BadHeader = 11042,
    BadOption = 11007,
    BadRoute = 11012,
    DestinationHostUnreachable = 11003,
    DestinationNetworkUnreachable = 11002,
    DestinationPortUnreachable = 11005,
    DestinationProhibited = 11004,
    DestinationProtocolUnreachable = 11004,
    DestinationScopeMismatch = 11045,
    DestinationUnreachable = 11040,
    HardwareError = 11008,
    IcmpError = 11044,
    NoResources = 11006,
    PacketTooBig = 11009,
    ParameterProblem = 11015,
    SourceQuench = 11016,
    Success = 0,
    TimedOut = 11010,
    TimeExceeded = 11041,
    TtlExpired = 11013,
    TtlReassemblyTimeExceeded = 11014,
    Unknown = -1,
    UnrecognizedNextHeader = 11043,
  }
  public partial class Ping : System.IDisposable {
    public Ping() { }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(System.Net.IPAddress address) { return default(System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply>); }
    public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(System.Net.IPAddress address, int timeout) { return default(System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply>); }
    public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(System.Net.IPAddress address, int timeout, byte[] buffer) { return default(System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply>); }
    public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options) { return default(System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply>); }
    public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(string hostNameOrAddress) { return default(System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply>); }
    public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(string hostNameOrAddress, int timeout) { return default(System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply>); }
    public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(string hostNameOrAddress, int timeout, byte[] buffer) { return default(System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply>); }
    public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync(string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options) { return default(System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply>); }
  }
  public partial class PingException : System.InvalidOperationException {
    public PingException(string message) { }
    public PingException(string message, System.Exception innerException) { }
  }
  public partial class PingOptions {
    public PingOptions() { }
    public PingOptions(int ttl, bool dontFragment) { }
    public bool DontFragment { get { return default(bool); } set { } }
    public int Ttl { get { return default(int); } set { } }
  }
  public partial class PingReply {
    internal PingReply() { }
    public System.Net.IPAddress Address { get { return default(System.Net.IPAddress); } }
    public byte[] Buffer { get { return default(byte[]); } }
    public System.Net.NetworkInformation.PingOptions Options { get { return default(System.Net.NetworkInformation.PingOptions); } }
    public long RoundtripTime { get { return default(long); } }
    public System.Net.NetworkInformation.IPStatus Status { get { return default(System.Net.NetworkInformation.IPStatus); } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Net.Primitives")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Net.Primitives")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Net.Primitives")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Net {
  [System.FlagsAttribute]
  public enum AuthenticationSchemes {
    Anonymous = 32768,
    Basic = 8,
    Digest = 1,
    IntegratedWindowsAuthentication = 6,
    Negotiate = 2,
    None = 0,
    Ntlm = 4,
  }
  public sealed partial class Cookie {
    public Cookie() { }
    public Cookie(string name, string value) { }
    public Cookie(string name, string value, string path) { }
    public Cookie(string name, string value, string path, string domain) { }
    public string Comment { get { return default(string); } set { } }
    public System.Uri CommentUri { get { return default(System.Uri); } set { } }
    public bool Discard { get { return default(bool); } set { } }
    public string Domain { get { return default(string); } set { } }
    public bool Expired { get { return default(bool); } set { } }
    public System.DateTime Expires { get { return default(System.DateTime); } set { } }
    public bool HttpOnly { get { return default(bool); } set { } }
    public string Name { get { return default(string); } set { } }
    public string Path { get { return default(string); } set { } }
    public string Port { get { return default(string); } set { } }
    public bool Secure { get { return default(bool); } set { } }
    public System.DateTime TimeStamp { get { return default(System.DateTime); } }
    public string Value { get { return default(string); } set { } }
    public int Version { get { return default(int); } set { } }
    public override bool Equals(object comparand) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public override string ToString() { return default(string); }
  }
  public partial class CookieCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    public CookieCollection() { }
    public int Count { get { return default(int); } }
    public System.Net.Cookie this[string name] { get { return default(System.Net.Cookie); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public void Add(System.Net.Cookie cookie) { }
    public void Add(System.Net.CookieCollection cookies) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
  }
  public partial class CookieContainer {
    public const int DefaultCookieLengthLimit = 4096;
    public const int DefaultCookieLimit = 300;
    public const int DefaultPerDomainCookieLimit = 20;
    public CookieContainer() { }
    public int Capacity { get { return default(int); } set { } }
    public int Count { get { return default(int); } }
    public int MaxCookieSize { get { return default(int); } set { } }
    public int PerDomainCapacity { get { return default(int); } set { } }
    public void Add(System.Uri uri, System.Net.Cookie cookie) { }
    public void Add(System.Uri uri, System.Net.CookieCollection cookies) { }
    public string GetCookieHeader(System.Uri uri) { return default(string); }
    public System.Net.CookieCollection GetCookies(System.Uri uri) { return default(System.Net.CookieCollection); }
    public void SetCookies(System.Uri uri, string cookieHeader) { }
  }
  public partial class CookieException : System.FormatException {
    public CookieException() { }
  }
  public partial class CredentialCache : System.Collections.IEnumerable, System.Net.ICredentials, System.Net.ICredentialsByHost {
    public CredentialCache() { }
    public static System.Net.ICredentials DefaultCredentials { get { return default(System.Net.ICredentials); } }
    public static System.Net.NetworkCredential DefaultNetworkCredentials { get { return default(System.Net.NetworkCredential); } }
    public void Add(string host, int port, string authenticationType, System.Net.NetworkCredential credential) { }
    public void Add(System.Uri uriPrefix, string authType, System.Net.NetworkCredential cred) { }
    public System.Net.NetworkCredential GetCredential(string host, int port, string authenticationType) { return default(System.Net.NetworkCredential); }
    public System.Net.NetworkCredential GetCredential(System.Uri uriPrefix, string authType) { return default(System.Net.NetworkCredential); }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public void Remove(string host, int port, string authenticationType) { }
    public void Remove(System.Uri uriPrefix, string authType) { }
  }
  [System.FlagsAttribute]
  public enum DecompressionMethods {
    Deflate = 2,
    GZip = 1,
    None = 0,
  }
  public partial class DnsEndPoint : System.Net.EndPoint {
    public DnsEndPoint(string host, int port) { }
    public DnsEndPoint(string host, int port, System.Net.Sockets.AddressFamily addressFamily) { }
    public override System.Net.Sockets.AddressFamily AddressFamily { get { return default(System.Net.Sockets.AddressFamily); } }
    public string Host { get { return default(string); } }
    public int Port { get { return default(int); } }
    public override bool Equals(object comparand) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public override string ToString() { return default(string); }
  }
  public abstract partial class EndPoint {
    protected EndPoint() { }
    public virtual System.Net.Sockets.AddressFamily AddressFamily { get { return default(System.Net.Sockets.AddressFamily); } }
    public virtual System.Net.EndPoint Create(System.Net.SocketAddress socketAddress) { return default(System.Net.EndPoint); }
    public virtual System.Net.SocketAddress Serialize() { return default(System.Net.SocketAddress); }
  }
  public enum HttpStatusCode {
    Accepted = 202,
    Ambiguous = 300,
    BadGateway = 502,
    BadRequest = 400,
    Conflict = 409,
    Continue = 100,
    Created = 201,
    ExpectationFailed = 417,
    Forbidden = 403,
    Found = 302,
    GatewayTimeout = 504,
    Gone = 410,
    HttpVersionNotSupported = 505,
    InternalServerError = 500,
    LengthRequired = 411,
    MethodNotAllowed = 405,
    Moved = 301,
    MovedPermanently = 301,
    MultipleChoices = 300,
    NoContent = 204,
    NonAuthoritativeInformation = 203,
    NotAcceptable = 406,
    NotFound = 404,
    NotImplemented = 501,
    NotModified = 304,
    OK = 200,
    PartialContent = 206,
    PaymentRequired = 402,
    PreconditionFailed = 412,
    ProxyAuthenticationRequired = 407,
    Redirect = 302,
    RedirectKeepVerb = 307,
    RedirectMethod = 303,
    RequestedRangeNotSatisfiable = 416,
    RequestEntityTooLarge = 413,
    RequestTimeout = 408,
    RequestUriTooLong = 414,
    ResetContent = 205,
    SeeOther = 303,
    ServiceUnavailable = 503,
    SwitchingProtocols = 101,
    TemporaryRedirect = 307,
    Unauthorized = 401,
    UnsupportedMediaType = 415,
    Unused = 306,
    UpgradeRequired = 426,
    UseProxy = 305,
  }
  public partial interface ICredentials {
    System.Net.NetworkCredential GetCredential(System.Uri uri, string authType);
  }
  public partial interface ICredentialsByHost {
    System.Net.NetworkCredential GetCredential(string host, int port, string authenticationType);
  }
  public partial class IPAddress {
    public static readonly System.Net.IPAddress Any;
    public static readonly System.Net.IPAddress Broadcast;
    public static readonly System.Net.IPAddress IPv6Any;
    public static readonly System.Net.IPAddress IPv6Loopback;
    public static readonly System.Net.IPAddress IPv6None;
    public static readonly System.Net.IPAddress Loopback;
    public static readonly System.Net.IPAddress None;
    public IPAddress(byte[] address) { }
    public IPAddress(byte[] address, long scopeid) { }
    public IPAddress(long newAddress) { }
    public System.Net.Sockets.AddressFamily AddressFamily { get { return default(System.Net.Sockets.AddressFamily); } }
    public bool IsIPv4MappedToIPv6 { get { return default(bool); } }
    public bool IsIPv6LinkLocal { get { return default(bool); } }
    public bool IsIPv6Multicast { get { return default(bool); } }
    public bool IsIPv6SiteLocal { get { return default(bool); } }
    public bool IsIPv6Teredo { get { return default(bool); } }
    public long ScopeId { get { return default(long); } set { } }
    public override bool Equals(object comparand) { return default(bool); }
    public byte[] GetAddressBytes() { return default(byte[]); }
    public override int GetHashCode() { return default(int); }
    public static short HostToNetworkOrder(short host) { return default(short); }
    public static int HostToNetworkOrder(int host) { return default(int); }
    public static long HostToNetworkOrder(long host) { return default(long); }
    public static bool IsLoopback(System.Net.IPAddress address) { return default(bool); }
    public System.Net.IPAddress MapToIPv4() { return default(System.Net.IPAddress); }
    public System.Net.IPAddress MapToIPv6() { return default(System.Net.IPAddress); }
    public static short NetworkToHostOrder(short network) { return default(short); }
    public static int NetworkToHostOrder(int network) { return default(int); }
    public static long NetworkToHostOrder(long network) { return default(long); }
    public static System.Net.IPAddress Parse(string ipString) { return default(System.Net.IPAddress); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string ipString, out System.Net.IPAddress address) { address = default(System.Net.IPAddress); return default(bool); }
  }
  public partial class IPEndPoint : System.Net.EndPoint {
    public const int MaxPort = 65535;
    public const int MinPort = 0;
    public IPEndPoint(long address, int port) { }
    public IPEndPoint(System.Net.IPAddress address, int port) { }
    public System.Net.IPAddress Address { get { return default(System.Net.IPAddress); } set { } }
    public override System.Net.Sockets.AddressFamily AddressFamily { get { return default(System.Net.Sockets.AddressFamily); } }
    public int Port { get { return default(int); } set { } }
    public override System.Net.EndPoint Create(System.Net.SocketAddress socketAddress) { return default(System.Net.EndPoint); }
    public override bool Equals(object comparand) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public override System.Net.SocketAddress Serialize() { return default(System.Net.SocketAddress); }
    public override string ToString() { return default(string); }
  }
  public partial interface IWebProxy {
    System.Net.ICredentials Credentials { get; set; }
    System.Uri GetProxy(System.Uri destination);
    bool IsBypassed(System.Uri host);
  }
  public partial class NetworkCredential : System.Net.ICredentials, System.Net.ICredentialsByHost {
    public NetworkCredential() { }
    public NetworkCredential(string userName, string password) { }
    public NetworkCredential(string userName, string password, string domain) { }
    public string Domain { get { return default(string); } set { } }
    public string Password { get { return default(string); } set { } }
    public string UserName { get { return default(string); } set { } }
    public System.Net.NetworkCredential GetCredential(string host, int port, string authenticationType) { return default(System.Net.NetworkCredential); }
    public System.Net.NetworkCredential GetCredential(System.Uri uri, string authType) { return default(System.Net.NetworkCredential); }
  }
  public partial class SocketAddress {
    public SocketAddress(System.Net.Sockets.AddressFamily family) { }
    public SocketAddress(System.Net.Sockets.AddressFamily family, int size) { }
    public System.Net.Sockets.AddressFamily Family { get { return default(System.Net.Sockets.AddressFamily); } }
    public byte this[int offset] { get { return default(byte); } set { } }
    public int Size { get { return default(int); } }
    public override bool Equals(object comparand) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public override string ToString() { return default(string); }
  }
  public abstract partial class TransportContext {
    protected TransportContext() { }
    public abstract System.Security.Authentication.ExtendedProtection.ChannelBinding GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind kind);
  }
}
namespace System.Net.NetworkInformation {
  public partial class IPAddressCollection : System.Collections.Generic.ICollection<System.Net.IPAddress>, System.Collections.Generic.IEnumerable<System.Net.IPAddress>, System.Collections.IEnumerable {
    protected internal IPAddressCollection() { }
    public virtual int Count { get { return default(int); } }
    public virtual bool IsReadOnly { get { return default(bool); } }
    public virtual System.Net.IPAddress this[int index] { get { return default(System.Net.IPAddress); } }
    public virtual void Add(System.Net.IPAddress address) { }
    public virtual void Clear() { }
    public virtual bool Contains(System.Net.IPAddress address) { return default(bool); }
    public virtual void CopyTo(System.Net.IPAddress[] array, int offset) { }
    public virtual System.Collections.Generic.IEnumerator<System.Net.IPAddress> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Net.IPAddress>); }
    public virtual bool Remove(System.Net.IPAddress address) { return default(bool); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
}
namespace System.Net.Security {
  public enum AuthenticationLevel {
    MutualAuthRequested = 1,
    MutualAuthRequired = 2,
    None = 0,
  }
  [System.FlagsAttribute]
  public enum SslPolicyErrors {
    None = 0,
    RemoteCertificateChainErrors = 4,
    RemoteCertificateNameMismatch = 2,
    RemoteCertificateNotAvailable = 1,
  }
}
namespace System.Net.Sockets {
  public enum AddressFamily {
    AppleTalk = 16,
    Atm = 22,
    Banyan = 21,
    Ccitt = 10,
    Chaos = 5,
    Cluster = 24,
    DataKit = 9,
    DataLink = 13,
    DecNet = 12,
    Ecma = 8,
    FireFox = 19,
    HyperChannel = 15,
    Ieee12844 = 25,
    ImpLink = 3,
    InterNetwork = 2,
    InterNetworkV6 = 23,
    Ipx = 6,
    Irda = 26,
    Iso = 7,
    Lat = 14,
    NetBios = 17,
    NetworkDesigners = 28,
    NS = 6,
    Osi = 7,
    Pup = 4,
    Sna = 11,
    Unix = 1,
    Unknown = -1,
    Unspecified = 0,
    VoiceView = 18,
  }
  public enum SocketError {
    AccessDenied = 10013,
    AddressAlreadyInUse = 10048,
    AddressFamilyNotSupported = 10047,
    AddressNotAvailable = 10049,
    AlreadyInProgress = 10037,
    ConnectionAborted = 10053,
    ConnectionRefused = 10061,
    ConnectionReset = 10054,
    DestinationAddressRequired = 10039,
    Disconnecting = 10101,
    Fault = 10014,
    HostDown = 10064,
    HostNotFound = 11001,
    HostUnreachable = 10065,
    InProgress = 10036,
    Interrupted = 10004,
    InvalidArgument = 10022,
    IOPending = 997,
    IsConnected = 10056,
    MessageSize = 10040,
    NetworkDown = 10050,
    NetworkReset = 10052,
    NetworkUnreachable = 10051,
    NoBufferSpaceAvailable = 10055,
    NoData = 11004,
    NoRecovery = 11003,
    NotConnected = 10057,
    NotInitialized = 10093,
    NotSocket = 10038,
    OperationAborted = 995,
    OperationNotSupported = 10045,
    ProcessLimit = 10067,
    ProtocolFamilyNotSupported = 10046,
    ProtocolNotSupported = 10043,
    ProtocolOption = 10042,
    ProtocolType = 10041,
    Shutdown = 10058,
    SocketError = -1,
    SocketNotSupported = 10044,
    Success = 0,
    SystemNotReady = 10091,
    TimedOut = 10060,
    TooManyOpenSockets = 10024,
    TryAgain = 11002,
    TypeNotFound = 10109,
    VersionNotSupported = 10092,
    WouldBlock = 10035,
  }
  public partial class SocketException : System.Exception {
    public SocketException() { }
    public SocketException(int errorCode) { }
    public override string Message { get { return default(string); } }
    public System.Net.Sockets.SocketError SocketErrorCode { get { return default(System.Net.Sockets.SocketError); } }
  }
}
namespace System.Security.Authentication {
  public enum CipherAlgorithmType {
    Aes = 26129,
    Aes128 = 26126,
    Aes192 = 26127,
    Aes256 = 26128,
    Des = 26113,
    None = 0,
    Null = 24576,
    Rc2 = 26114,
    Rc4 = 26625,
    TripleDes = 26115,
  }
  public enum ExchangeAlgorithmType {
    DiffieHellman = 43522,
    None = 0,
    RsaKeyX = 41984,
    RsaSign = 9216,
  }
  public enum HashAlgorithmType {
    Md5 = 32771,
    None = 0,
    Sha1 = 32772,
  }
  [System.FlagsAttribute]
  public enum SslProtocols {
    None = 0,
    [System.ObsoleteAttribute("This value has been deprecated.  It is no longer supported. http://go.microsoft.com/fwlink/?linkid=14202")]
    Ssl2 = 12,
    [System.ObsoleteAttribute("This value has been deprecated.  It is no longer supported. http://go.microsoft.com/fwlink/?linkid=14202")]
    Ssl3 = 48,
    Tls = 192,
    Tls11 = 768,
    Tls12 = 3072,
  }
}
namespace System.Security.Authentication.ExtendedProtection {
  public abstract partial class ChannelBinding : System.Runtime.InteropServices.SafeHandle {
    protected ChannelBinding() : base (default(System.IntPtr), default(bool)) { }
    protected ChannelBinding(bool ownsHandle) : base (default(System.IntPtr), default(bool)) { }
    public abstract int Size { get; }
  }
  public enum ChannelBindingKind {
    Endpoint = 26,
    Unique = 25,
    Unknown = 0,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Net.Requests")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Net.Requests")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Net.Requests")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Net {
  public partial class HttpWebRequest : System.Net.WebRequest {
    internal HttpWebRequest() { }
    public string Accept { get { return default(string); } set { } }
    public virtual bool AllowReadStreamBuffering { get { return default(bool); } set { } }
    public override string ContentType { get { return default(string); } set { } }
    public int ContinueTimeout { get { return default(int); } set { } }
    public virtual System.Net.CookieContainer CookieContainer { get { return default(System.Net.CookieContainer); } set { } }
    public override System.Net.ICredentials Credentials { get { return default(System.Net.ICredentials); } set { } }
    public virtual bool HaveResponse { get { return default(bool); } }
    public override System.Net.WebHeaderCollection Headers { get { return default(System.Net.WebHeaderCollection); } set { } }
    public override string Method { get { return default(string); } set { } }
    public override System.Uri RequestUri { get { return default(System.Uri); } }
    public virtual bool SupportsCookieContainer { get { return default(bool); } }
    public override bool UseDefaultCredentials { get { return default(bool); } set { } }
    public override void Abort() { }
    public override System.IAsyncResult BeginGetRequestStream(System.AsyncCallback callback, object state) { return default(System.IAsyncResult); }
    public override System.IAsyncResult BeginGetResponse(System.AsyncCallback callback, object state) { return default(System.IAsyncResult); }
    public override System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult) { return default(System.IO.Stream); }
    public override System.Net.WebResponse EndGetResponse(System.IAsyncResult asyncResult) { return default(System.Net.WebResponse); }
  }
  public partial class HttpWebResponse : System.Net.WebResponse {
    internal HttpWebResponse() { }
    public override long ContentLength { get { return default(long); } }
    public override string ContentType { get { return default(string); } }
    public virtual System.Net.CookieCollection Cookies { get { return default(System.Net.CookieCollection); } }
    public override System.Net.WebHeaderCollection Headers { get { return default(System.Net.WebHeaderCollection); } }
    public virtual string Method { get { return default(string); } }
    public override System.Uri ResponseUri { get { return default(System.Uri); } }
    public virtual System.Net.HttpStatusCode StatusCode { get { return default(System.Net.HttpStatusCode); } }
    public virtual string StatusDescription { get { return default(string); } }
    public override bool SupportsHeaders { get { return default(bool); } }
    protected override void Dispose(bool disposing) { }
    public override System.IO.Stream GetResponseStream() { return default(System.IO.Stream); }
  }
  public partial interface IWebRequestCreate {
    System.Net.WebRequest Create(System.Uri uri);
  }
  public partial class ProtocolViolationException : System.InvalidOperationException {
    public ProtocolViolationException() { }
    public ProtocolViolationException(string message) { }
  }
  public partial class WebException : System.InvalidOperationException {
    public WebException() { }
    public WebException(string message) { }
    public WebException(string message, System.Exception innerException) { }
    public WebException(string message, System.Exception innerException, System.Net.WebExceptionStatus status, System.Net.WebResponse response) { }
    public WebException(string message, System.Net.WebExceptionStatus status) { }
    public System.Net.WebResponse Response { get { return default(System.Net.WebResponse); } }
    public System.Net.WebExceptionStatus Status { get { return default(System.Net.WebExceptionStatus); } }
  }
  public enum WebExceptionStatus {
    CacheEntryNotFound = 18,
    ConnectFailure = 2,
    ConnectionClosed = 8,
    KeepAliveFailure = 12,
    MessageLengthLimitExceeded = 17,
    NameResolutionFailure = 1,
    Pending = 13,
    PipelineFailure = 5,
    ProtocolError = 7,
    ProxyNameResolutionFailure = 15,
    ReceiveFailure = 3,
    RequestCanceled = 6,
    RequestProhibitedByCachePolicy = 19,
    RequestProhibitedByProxy = 20,
    SecureChannelFailure = 10,
    SendFailure = 4,
    ServerProtocolViolation = 11,
    Success = 0,
    Timeout = 14,
    TrustFailure = 9,
    UnknownError = 16,
  }
  public abstract partial class WebRequest {
    protected WebRequest() { }
    public abstract string ContentType { get; set; }
    public virtual System.Net.ICredentials Credentials { get { return default(System.Net.ICredentials); } set { } }
    public static System.Net.IWebProxy DefaultWebProxy { get { return default(System.Net.IWebProxy); } set { } }
    public abstract System.Net.WebHeaderCollection Headers { get; set; }
    public abstract string Method { get; set; }
    public virtual System.Net.IWebProxy Proxy { get { return default(System.Net.IWebProxy); } set { } }
    public abstract System.Uri RequestUri { get; }
    public virtual bool UseDefaultCredentials { get { return default(bool); } set { } }
    public abstract void Abort();
    public abstract System.IAsyncResult BeginGetRequestStream(System.AsyncCallback callback, object state);
    public abstract System.IAsyncResult BeginGetResponse(System.AsyncCallback callback, object state);
    public static System.Net.WebRequest Create(string requestUriString) { return default(System.Net.WebRequest); }
    public static System.Net.WebRequest Create(System.Uri requestUri) { return default(System.Net.WebRequest); }
    public static System.Net.HttpWebRequest CreateHttp(string requestUriString) { return default(System.Net.HttpWebRequest); }
    public static System.Net.HttpWebRequest CreateHttp(System.Uri requestUri) { return default(System.Net.HttpWebRequest); }
    public abstract System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult);
    public abstract System.Net.WebResponse EndGetResponse(System.IAsyncResult asyncResult);
    public virtual System.Threading.Tasks.Task<System.IO.Stream> GetRequestStreamAsync() { return default(System.Threading.Tasks.Task<System.IO.Stream>); }
    public virtual System.Threading.Tasks.Task<System.Net.WebResponse> GetResponseAsync() { return default(System.Threading.Tasks.Task<System.Net.WebResponse>); }
    public static bool RegisterPrefix(string prefix, System.Net.IWebRequestCreate creator) { return default(bool); }
  }
  public abstract partial class WebResponse : System.IDisposable {
    protected WebResponse() { }
    public abstract long ContentLength { get; }
    public abstract string ContentType { get; }
    public virtual System.Net.WebHeaderCollection Headers { get { return default(System.Net.WebHeaderCollection); } }
    public abstract System.Uri ResponseUri { get; }
    public virtual bool SupportsHeaders { get { return default(bool); } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public abstract System.IO.Stream GetResponseStream();
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Net.Security")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Net.Security")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Net.Security")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Net.Security {
  public abstract partial class AuthenticatedStream : System.IO.Stream {
    protected AuthenticatedStream(System.IO.Stream innerStream, bool leaveInnerStreamOpen) { }
    protected System.IO.Stream InnerStream { get { return default(System.IO.Stream); } }
    public abstract bool IsAuthenticated { get; }
    public abstract bool IsEncrypted { get; }
    public abstract bool IsMutuallyAuthenticated { get; }
    public abstract bool IsServer { get; }
    public abstract bool IsSigned { get; }
    public bool LeaveInnerStreamOpen { get { return default(bool); } }
    protected override void Dispose(bool disposing) { }
  }
  public enum EncryptionPolicy {
    AllowNoEncryption = 1,
    NoEncryption = 2,
    RequireEncryption = 0,
  }
  public delegate System.Security.Cryptography.X509Certificates.X509Certificate LocalCertificateSelectionCallback(object sender, string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection localCertificates, System.Security.Cryptography.X509Certificates.X509Certificate remoteCertificate, string[] acceptableIssuers);
  public partial class NegotiateStream : System.Net.Security.AuthenticatedStream {
    public NegotiateStream(System.IO.Stream innerStream) : base (default(System.IO.Stream), default(bool)) { }
    public NegotiateStream(System.IO.Stream innerStream, bool leaveInnerStreamOpen) : base (default(System.IO.Stream), default(bool)) { }
    public override bool CanRead { get { return default(bool); } }
    public override bool CanSeek { get { return default(bool); } }
    public override bool CanTimeout { get { return default(bool); } }
    public override bool CanWrite { get { return default(bool); } }
    public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get { return default(System.Security.Principal.TokenImpersonationLevel); } }
    public override bool IsAuthenticated { get { return default(bool); } }
    public override bool IsEncrypted { get { return default(bool); } }
    public override bool IsMutuallyAuthenticated { get { return default(bool); } }
    public override bool IsServer { get { return default(bool); } }
    public override bool IsSigned { get { return default(bool); } }
    public override long Length { get { return default(long); } }
    public override long Position { get { return default(long); } set { } }
    public override int ReadTimeout { get { return default(int); } set { } }
    public virtual System.Security.Principal.IIdentity RemoteIdentity { get { return default(System.Security.Principal.IIdentity); } }
    public override int WriteTimeout { get { return default(int); } set { } }
    public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync() { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync(System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync(System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync(System.Net.NetworkCredential credential, string targetName) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync(System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync() { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync(System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync(System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) { return default(System.Threading.Tasks.Task); }
    public override void Flush() { }
    public override int Read(byte[] buffer, int offset, int count) { return default(int); }
    public override long Seek(long offset, System.IO.SeekOrigin origin) { return default(long); }
    public override void SetLength(long value) { }
    public override void Write(byte[] buffer, int offset, int count) { }
  }
  public enum ProtectionLevel {
    EncryptAndSign = 2,
    None = 0,
    Sign = 1,
  }
  public delegate bool RemoteCertificateValidationCallback(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors);
  public partial class SslStream : System.Net.Security.AuthenticatedStream {
    public SslStream(System.IO.Stream innerStream) : base (default(System.IO.Stream), default(bool)) { }
    public SslStream(System.IO.Stream innerStream, bool leaveInnerStreamOpen) : base (default(System.IO.Stream), default(bool)) { }
    public SslStream(System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback) : base (default(System.IO.Stream), default(bool)) { }
    public SslStream(System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback) : base (default(System.IO.Stream), default(bool)) { }
    public SslStream(System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback, System.Net.Security.EncryptionPolicy encryptionPolicy) : base (default(System.IO.Stream), default(bool)) { }
    public override bool CanRead { get { return default(bool); } }
    public override bool CanSeek { get { return default(bool); } }
    public override bool CanTimeout { get { return default(bool); } }
    public override bool CanWrite { get { return default(bool); } }
    public virtual bool CheckCertRevocationStatus { get { return default(bool); } }
    public virtual System.Security.Authentication.CipherAlgorithmType CipherAlgorithm { get { return default(System.Security.Authentication.CipherAlgorithmType); } }
    public virtual int CipherStrength { get { return default(int); } }
    public virtual System.Security.Authentication.HashAlgorithmType HashAlgorithm { get { return default(System.Security.Authentication.HashAlgorithmType); } }
    public virtual int HashStrength { get { return default(int); } }
    public override bool IsAuthenticated { get { return default(bool); } }
    public override bool IsEncrypted { get { return default(bool); } }
    public override bool IsMutuallyAuthenticated { get { return default(bool); } }
    public override bool IsServer { get { return default(bool); } }
    public override bool IsSigned { get { return default(bool); } }
    public virtual System.Security.Authentication.ExchangeAlgorithmType KeyExchangeAlgorithm { get { return default(System.Security.Authentication.ExchangeAlgorithmType); } }
    public virtual int KeyExchangeStrength { get { return default(int); } }
    public override long Length { get { return default(long); } }
    public virtual System.Security.Cryptography.X509Certificates.X509Certificate LocalCertificate { get { return default(System.Security.Cryptography.X509Certificates.X509Certificate); } }
    public override long Position { get { return default(long); } set { } }
    public override int ReadTimeout { get { return default(int); } set { } }
    public virtual System.Security.Cryptography.X509Certificates.X509Certificate RemoteCertificate { get { return default(System.Security.Cryptography.X509Certificates.X509Certificate); } }
    public virtual System.Security.Authentication.SslProtocols SslProtocol { get { return default(System.Security.Authentication.SslProtocols); } }
    public System.Net.TransportContext TransportContext { get { return default(System.Net.TransportContext); } }
    public override int WriteTimeout { get { return default(int); } set { } }
    public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync(string targetHost) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync(string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation) { return default(System.Threading.Tasks.Task); }
    public override void Flush() { }
    public override int Read(byte[] buffer, int offset, int count) { return default(int); }
    public override long Seek(long offset, System.IO.SeekOrigin origin) { return default(long); }
    public override void SetLength(long value) { }
    public void Write(byte[] buffer) { }
    public override void Write(byte[] buffer, int offset, int count) { }
  }
}
namespace System.Security.Authentication {
  public partial class AuthenticationException : System.Exception {
    public AuthenticationException() { }
    public AuthenticationException(string message) { }
    public AuthenticationException(string message, System.Exception innerException) { }
  }
  public partial class InvalidCredentialException : System.Security.Authentication.AuthenticationException {
    public InvalidCredentialException() { }
    public InvalidCredentialException(string message) { }
    public InvalidCredentialException(string message, System.Exception innerException) { }
  }
}
namespace System.Security.Authentication.ExtendedProtection {
  public partial class ExtendedProtectionPolicy {
    public ExtendedProtectionPolicy(System.Security.Authentication.ExtendedProtection.PolicyEnforcement policyEnforcement) { }
    public ExtendedProtectionPolicy(System.Security.Authentication.ExtendedProtection.PolicyEnforcement policyEnforcement, System.Security.Authentication.ExtendedProtection.ChannelBinding customChannelBinding) { }
    public ExtendedProtectionPolicy(System.Security.Authentication.ExtendedProtection.PolicyEnforcement policyEnforcement, System.Security.Authentication.ExtendedProtection.ProtectionScenario protectionScenario, System.Collections.ICollection customServiceNames) { }
    public ExtendedProtectionPolicy(System.Security.Authentication.ExtendedProtection.PolicyEnforcement policyEnforcement, System.Security.Authentication.ExtendedProtection.ProtectionScenario protectionScenario, System.Security.Authentication.ExtendedProtection.ServiceNameCollection customServiceNames) { }
    public System.Security.Authentication.ExtendedProtection.ChannelBinding CustomChannelBinding { get { return default(System.Security.Authentication.ExtendedProtection.ChannelBinding); } }
    public System.Security.Authentication.ExtendedProtection.ServiceNameCollection CustomServiceNames { get { return default(System.Security.Authentication.ExtendedProtection.ServiceNameCollection); } }
    public static bool OSSupportsExtendedProtection { get { return default(bool); } }
    public System.Security.Authentication.ExtendedProtection.PolicyEnforcement PolicyEnforcement { get { return default(System.Security.Authentication.ExtendedProtection.PolicyEnforcement); } }
    public System.Security.Authentication.ExtendedProtection.ProtectionScenario ProtectionScenario { get { return default(System.Security.Authentication.ExtendedProtection.ProtectionScenario); } }
    public override string ToString() { return default(string); }
  }
  public enum PolicyEnforcement {
    Always = 2,
    Never = 0,
    WhenSupported = 1,
  }
  public enum ProtectionScenario {
    TransportSelected = 0,
    TrustedProxy = 1,
  }
  public partial class ServiceNameCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    public ServiceNameCollection(System.Collections.ICollection items) { }
    public int Count { get { return default(int); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public bool Contains(string searchServiceName) { return default(bool); }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public System.Security.Authentication.ExtendedProtection.ServiceNameCollection Merge(System.Collections.IEnumerable serviceNames) { return default(System.Security.Authentication.ExtendedProtection.ServiceNameCollection); }
    public System.Security.Authentication.ExtendedProtection.ServiceNameCollection Merge(string serviceName) { return default(System.Security.Authentication.ExtendedProtection.ServiceNameCollection); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Net.Sockets")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Net.Sockets")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Net.Sockets")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Net.Sockets {
  public enum IOControlCode : long {
    AbsorbRouterAlert = (long)2550136837,
    AddMulticastGroupOnInterface = (long)2550136842,
    AddressListChange = (long)671088663,
    AddressListQuery = (long)1207959574,
    AddressListSort = (long)3355443225,
    AssociateHandle = (long)2281701377,
    AsyncIO = (long)2147772029,
    BindToInterface = (long)2550136840,
    DataToRead = (long)1074030207,
    DeleteMulticastGroupFromInterface = (long)2550136843,
    EnableCircularQueuing = (long)671088642,
    Flush = (long)671088644,
    GetBroadcastAddress = (long)1207959557,
    GetExtensionFunctionPointer = (long)3355443206,
    GetGroupQos = (long)3355443208,
    GetQos = (long)3355443207,
    KeepAliveValues = (long)2550136836,
    LimitBroadcasts = (long)2550136839,
    MulticastInterface = (long)2550136841,
    MulticastScope = (long)2281701386,
    MultipointLoopback = (long)2281701385,
    NamespaceChange = (long)2281701401,
    NonBlockingIO = (long)2147772030,
    OobDataRead = (long)1074033415,
    QueryTargetPnpHandle = (long)1207959576,
    ReceiveAll = (long)2550136833,
    ReceiveAllIgmpMulticast = (long)2550136835,
    ReceiveAllMulticast = (long)2550136834,
    RoutingInterfaceChange = (long)2281701397,
    RoutingInterfaceQuery = (long)3355443220,
    SetGroupQos = (long)2281701388,
    SetQos = (long)2281701387,
    TranslateHandle = (long)3355443213,
    UnicastInterface = (long)2550136838,
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct IPPacketInformation {
    public System.Net.IPAddress Address { get { return default(System.Net.IPAddress); } }
    public int Interface { get { return default(int); } }
    public override bool Equals(object comparand) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Net.Sockets.IPPacketInformation packetInformation1, System.Net.Sockets.IPPacketInformation packetInformation2) { return default(bool); }
    public static bool operator !=(System.Net.Sockets.IPPacketInformation packetInformation1, System.Net.Sockets.IPPacketInformation packetInformation2) { return default(bool); }
  }
  public enum IPProtectionLevel {
    EdgeRestricted = 20,
    Restricted = 30,
    Unrestricted = 10,
    Unspecified = -1,
  }
  public partial class IPv6MulticastOption {
    public IPv6MulticastOption(System.Net.IPAddress group) { }
    public IPv6MulticastOption(System.Net.IPAddress group, long ifindex) { }
    public System.Net.IPAddress Group { get { return default(System.Net.IPAddress); } set { } }
    public long InterfaceIndex { get { return default(long); } set { } }
  }
  public partial class LingerOption {
    public LingerOption(bool enable, int seconds) { }
    public bool Enabled { get { return default(bool); } set { } }
    public int LingerTime { get { return default(int); } set { } }
  }
  public partial class MulticastOption {
    public MulticastOption(System.Net.IPAddress group) { }
    public MulticastOption(System.Net.IPAddress group, int interfaceIndex) { }
    public MulticastOption(System.Net.IPAddress group, System.Net.IPAddress mcint) { }
    public System.Net.IPAddress Group { get { return default(System.Net.IPAddress); } set { } }
    public int InterfaceIndex { get { return default(int); } set { } }
    public System.Net.IPAddress LocalAddress { get { return default(System.Net.IPAddress); } set { } }
  }
  public partial class NetworkStream : System.IO.Stream {
    public NetworkStream(System.Net.Sockets.Socket socket) { }
    public NetworkStream(System.Net.Sockets.Socket socket, bool ownsSocket) { }
    public override bool CanRead { get { return default(bool); } }
    public override bool CanSeek { get { return default(bool); } }
    public override bool CanTimeout { get { return default(bool); } }
    public override bool CanWrite { get { return default(bool); } }
    public virtual bool DataAvailable { get { return default(bool); } }
    public override long Length { get { return default(long); } }
    public override long Position { get { return default(long); } set { } }
    public override int ReadTimeout { get { return default(int); } set { } }
    public override int WriteTimeout { get { return default(int); } set { } }
    protected override void Dispose(bool disposing) { }
    ~NetworkStream() { }
    public override void Flush() { }
    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public override int Read(byte[] buffer, int offset, int size) { return default(int); }
    public override System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<int>); }
    public override long Seek(long offset, System.IO.SeekOrigin origin) { return default(long); }
    public override void SetLength(long value) { }
    public override void Write(byte[] buffer, int offset, int size) { }
    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
  }
  public enum ProtocolType {
    Ggp = 3,
    Icmp = 1,
    IcmpV6 = 58,
    Idp = 22,
    Igmp = 2,
    IP = 0,
    IPSecAuthenticationHeader = 51,
    IPSecEncapsulatingSecurityPayload = 50,
    IPv4 = 4,
    IPv6 = 41,
    IPv6DestinationOptions = 60,
    IPv6FragmentHeader = 44,
    IPv6HopByHopOptions = 0,
    IPv6NoNextHeader = 59,
    IPv6RoutingHeader = 43,
    Ipx = 1000,
    ND = 77,
    Pup = 12,
    Raw = 255,
    Spx = 1256,
    SpxII = 1257,
    Tcp = 6,
    Udp = 17,
    Unknown = -1,
    Unspecified = 0,
  }
  public enum SelectMode {
    SelectError = 2,
    SelectRead = 0,
    SelectWrite = 1,
  }
  public partial class SendPacketsElement {
    public SendPacketsElement(byte[] buffer) { }
    public SendPacketsElement(byte[] buffer, int offset, int count) { }
    public SendPacketsElement(byte[] buffer, int offset, int count, bool endOfPacket) { }
    public SendPacketsElement(string filepath) { }
    public SendPacketsElement(string filepath, int offset, int count) { }
    public SendPacketsElement(string filepath, int offset, int count, bool endOfPacket) { }
    public byte[] Buffer { get { return default(byte[]); } }
    public int Count { get { return default(int); } }
    public bool EndOfPacket { get { return default(bool); } }
    public string FilePath { get { return default(string); } }
    public int Offset { get { return default(int); } }
  }
  public partial class Socket : System.IDisposable {
    public Socket(System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType) { }
    public Socket(System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType) { }
    public System.Net.Sockets.AddressFamily AddressFamily { get { return default(System.Net.Sockets.AddressFamily); } }
    public int Available { get { return default(int); } }
    public bool Blocking { get { return default(bool); } set { } }
    public bool Connected { get { return default(bool); } }
    public bool DontFragment { get { return default(bool); } set { } }
    public bool DualMode { get { return default(bool); } set { } }
    public bool EnableBroadcast { get { return default(bool); } set { } }
    public bool ExclusiveAddressUse { get { return default(bool); } set { } }
    public bool IsBound { get { return default(bool); } }
    public System.Net.Sockets.LingerOption LingerState { get { return default(System.Net.Sockets.LingerOption); } set { } }
    public System.Net.EndPoint LocalEndPoint { get { return default(System.Net.EndPoint); } }
    public bool MulticastLoopback { get { return default(bool); } set { } }
    public bool NoDelay { get { return default(bool); } set { } }
    public static bool OSSupportsIPv4 { get { return default(bool); } }
    public static bool OSSupportsIPv6 { get { return default(bool); } }
    public System.Net.Sockets.ProtocolType ProtocolType { get { return default(System.Net.Sockets.ProtocolType); } }
    public int ReceiveBufferSize { get { return default(int); } set { } }
    public int ReceiveTimeout { get { return default(int); } set { } }
    public System.Net.EndPoint RemoteEndPoint { get { return default(System.Net.EndPoint); } }
    public int SendBufferSize { get { return default(int); } set { } }
    public int SendTimeout { get { return default(int); } set { } }
    public System.Net.Sockets.SocketType SocketType { get { return default(System.Net.Sockets.SocketType); } }
    public short Ttl { get { return default(short); } set { } }
    public System.Net.Sockets.Socket Accept() { return default(System.Net.Sockets.Socket); }
    public bool AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs e) { return default(bool); }
    public void Bind(System.Net.EndPoint localEP) { }
    public static void CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs e) { }
    public void Connect(System.Net.EndPoint remoteEP) { }
    public void Connect(System.Net.IPAddress address, int port) { }
    public void Connect(System.Net.IPAddress[] addresses, int port) { }
    public void Connect(string host, int port) { }
    public bool ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs e) { return default(bool); }
    public static bool ConnectAsync(System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType, System.Net.Sockets.SocketAsyncEventArgs e) { return default(bool); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    ~Socket() { }
    public object GetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName) { return default(object); }
    public void GetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue) { }
    public byte[] GetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionLength) { return default(byte[]); }
    public int IOControl(int ioControlCode, byte[] optionInValue, byte[] optionOutValue) { return default(int); }
    public int IOControl(System.Net.Sockets.IOControlCode ioControlCode, byte[] optionInValue, byte[] optionOutValue) { return default(int); }
    public void Listen(int backlog) { }
    public bool Poll(int microSeconds, System.Net.Sockets.SelectMode mode) { return default(bool); }
    public int Receive(byte[] buffer) { return default(int); }
    public int Receive(byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags) { return default(int); }
    public int Receive(byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode) { errorCode = default(System.Net.Sockets.SocketError); return default(int); }
    public int Receive(byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags) { return default(int); }
    public int Receive(byte[] buffer, System.Net.Sockets.SocketFlags socketFlags) { return default(int); }
    public int Receive(System.Collections.Generic.IList<System.ArraySegment<byte>> buffers) { return default(int); }
    public int Receive(System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags) { return default(int); }
    public int Receive(System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode) { errorCode = default(System.Net.Sockets.SocketError); return default(int); }
    public bool ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs e) { return default(bool); }
    public int ReceiveFrom(byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP) { return default(int); }
    public int ReceiveFrom(byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP) { return default(int); }
    public int ReceiveFrom(byte[] buffer, ref System.Net.EndPoint remoteEP) { return default(int); }
    public int ReceiveFrom(byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP) { return default(int); }
    public bool ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs e) { return default(bool); }
    public int ReceiveMessageFrom(byte[] buffer, int offset, int size, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out System.Net.Sockets.IPPacketInformation ipPacketInformation) { ipPacketInformation = default(System.Net.Sockets.IPPacketInformation); return default(int); }
    public bool ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs e) { return default(bool); }
    public static void Select(System.Collections.IList checkRead, System.Collections.IList checkWrite, System.Collections.IList checkError, int microSeconds) { }
    public int Send(byte[] buffer) { return default(int); }
    public int Send(byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags) { return default(int); }
    public int Send(byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode) { errorCode = default(System.Net.Sockets.SocketError); return default(int); }
    public int Send(byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags) { return default(int); }
    public int Send(byte[] buffer, System.Net.Sockets.SocketFlags socketFlags) { return default(int); }
    public int Send(System.Collections.Generic.IList<System.ArraySegment<byte>> buffers) { return default(int); }
    public int Send(System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags) { return default(int); }
    public int Send(System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode) { errorCode = default(System.Net.Sockets.SocketError); return default(int); }
    public bool SendAsync(System.Net.Sockets.SocketAsyncEventArgs e) { return default(bool); }
    public bool SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs e) { return default(bool); }
    public int SendTo(byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP) { return default(int); }
    public int SendTo(byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP) { return default(int); }
    public int SendTo(byte[] buffer, System.Net.EndPoint remoteEP) { return default(int); }
    public int SendTo(byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP) { return default(int); }
    public bool SendToAsync(System.Net.Sockets.SocketAsyncEventArgs e) { return default(bool); }
    public void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, bool optionValue) { }
    public void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue) { }
    public void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionValue) { }
    public void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, object optionValue) { }
    public void Shutdown(System.Net.Sockets.SocketShutdown how) { }
  }
  public partial class SocketAsyncEventArgs : System.EventArgs, System.IDisposable {
    public SocketAsyncEventArgs() { }
    public System.Net.Sockets.Socket AcceptSocket { get { return default(System.Net.Sockets.Socket); } set { } }
    public byte[] Buffer { get { return default(byte[]); } }
    public System.Collections.Generic.IList<System.ArraySegment<byte>> BufferList { get { return default(System.Collections.Generic.IList<System.ArraySegment<byte>>); } set { } }
    public int BytesTransferred { get { return default(int); } }
    public System.Exception ConnectByNameError { get { return default(System.Exception); } }
    public System.Net.Sockets.Socket ConnectSocket { get { return default(System.Net.Sockets.Socket); } }
    public int Count { get { return default(int); } }
    public System.Net.Sockets.SocketAsyncOperation LastOperation { get { return default(System.Net.Sockets.SocketAsyncOperation); } }
    public int Offset { get { return default(int); } }
    public System.Net.Sockets.IPPacketInformation ReceiveMessageFromPacketInfo { get { return default(System.Net.Sockets.IPPacketInformation); } }
    public System.Net.EndPoint RemoteEndPoint { get { return default(System.Net.EndPoint); } set { } }
    public System.Net.Sockets.SendPacketsElement[] SendPacketsElements { get { return default(System.Net.Sockets.SendPacketsElement[]); } set { } }
    public int SendPacketsSendSize { get { return default(int); } set { } }
    public System.Net.Sockets.SocketError SocketError { get { return default(System.Net.Sockets.SocketError); } set { } }
    public System.Net.Sockets.SocketFlags SocketFlags { get { return default(System.Net.Sockets.SocketFlags); } set { } }
    public object UserToken { get { return default(object); } set { } }
    public event System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs> Completed { add { } remove { } }
    public void Dispose() { }
    ~SocketAsyncEventArgs() { }
    protected virtual void OnCompleted(System.Net.Sockets.SocketAsyncEventArgs e) { }
    public void SetBuffer(byte[] buffer, int offset, int count) { }
    public void SetBuffer(int offset, int count) { }
  }
  public enum SocketAsyncOperation {
    Accept = 1,
    Connect = 2,
    Disconnect = 3,
    None = 0,
    Receive = 4,
    ReceiveFrom = 5,
    ReceiveMessageFrom = 6,
    Send = 7,
    SendPackets = 8,
    SendTo = 9,
  }
  [System.FlagsAttribute]
  public enum SocketFlags {
    Broadcast = 1024,
    ControlDataTruncated = 512,
    DontRoute = 4,
    Multicast = 2048,
    None = 0,
    OutOfBand = 1,
    Partial = 32768,
    Peek = 2,
    Truncated = 256,
  }
  public enum SocketOptionLevel {
    IP = 0,
    IPv6 = 41,
    Socket = 65535,
    Tcp = 6,
    Udp = 17,
  }
  public enum SocketOptionName {
    AcceptConnection = 2,
    AddMembership = 12,
    AddSourceMembership = 15,
    BlockSource = 17,
    Broadcast = 32,
    BsdUrgent = 2,
    ChecksumCoverage = 20,
    Debug = 1,
    DontFragment = 14,
    DontLinger = -129,
    DontRoute = 16,
    DropMembership = 13,
    DropSourceMembership = 16,
    Error = 4103,
    ExclusiveAddressUse = -5,
    Expedited = 2,
    HeaderIncluded = 2,
    HopLimit = 21,
    IPOptions = 1,
    IPProtectionLevel = 23,
    IpTimeToLive = 4,
    IPv6Only = 27,
    KeepAlive = 8,
    Linger = 128,
    MaxConnections = 2147483647,
    MulticastInterface = 9,
    MulticastLoopback = 11,
    MulticastTimeToLive = 10,
    NoChecksum = 1,
    NoDelay = 1,
    OutOfBandInline = 256,
    PacketInformation = 19,
    ReceiveBuffer = 4098,
    ReceiveLowWater = 4100,
    ReceiveTimeout = 4102,
    ReuseAddress = 4,
    ReuseUnicastPort = 12295,
    SendBuffer = 4097,
    SendLowWater = 4099,
    SendTimeout = 4101,
    Type = 4104,
    TypeOfService = 3,
    UnblockSource = 18,
    UpdateAcceptContext = 28683,
    UpdateConnectContext = 28688,
    UseLoopback = 64,
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SocketReceiveFromResult {
    public int ReceivedBytes;
    public System.Net.EndPoint RemoteEndPoint;
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SocketReceiveMessageFromResult {
    public System.Net.Sockets.IPPacketInformation PacketInformation;
    public int ReceivedBytes;
    public System.Net.EndPoint RemoteEndPoint;
    public System.Net.Sockets.SocketFlags SocketFlags;
  }
  public enum SocketShutdown {
    Both = 2,
    Receive = 0,
    Send = 1,
  }
  public static partial class SocketTaskExtensions {
    public static System.Threading.Tasks.Task<System.Net.Sockets.Socket> AcceptAsync(this System.Net.Sockets.Socket socket) { return default(System.Threading.Tasks.Task<System.Net.Sockets.Socket>); }
    public static System.Threading.Tasks.Task<System.Net.Sockets.Socket> AcceptAsync(this System.Net.Sockets.Socket socket, System.Net.Sockets.Socket acceptSocket) { return default(System.Threading.Tasks.Task<System.Net.Sockets.Socket>); }
    public static System.Threading.Tasks.Task ConnectAsync(this System.Net.Sockets.Socket socket, System.Net.EndPoint remoteEP) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task ConnectAsync(this System.Net.Sockets.Socket socket, System.Net.IPAddress address, int port) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task ConnectAsync(this System.Net.Sockets.Socket socket, System.Net.IPAddress[] addresses, int port) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task ConnectAsync(this System.Net.Sockets.Socket socket, string host, int port) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task<int> ReceiveAsync(this System.Net.Sockets.Socket socket, System.ArraySegment<byte> buffer, System.Net.Sockets.SocketFlags socketFlags) { return default(System.Threading.Tasks.Task<int>); }
    public static System.Threading.Tasks.Task<int> ReceiveAsync(this System.Net.Sockets.Socket socket, System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags) { return default(System.Threading.Tasks.Task<int>); }
    public static System.Threading.Tasks.Task<System.Net.Sockets.SocketReceiveFromResult> ReceiveFromAsync(this System.Net.Sockets.Socket socket, System.ArraySegment<byte> buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEndPoint) { return default(System.Threading.Tasks.Task<System.Net.Sockets.SocketReceiveFromResult>); }
    public static System.Threading.Tasks.Task<System.Net.Sockets.SocketReceiveMessageFromResult> ReceiveMessageFromAsync(this System.Net.Sockets.Socket socket, System.ArraySegment<byte> buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEndPoint) { return default(System.Threading.Tasks.Task<System.Net.Sockets.SocketReceiveMessageFromResult>); }
    public static System.Threading.Tasks.Task<int> SendAsync(this System.Net.Sockets.Socket socket, System.ArraySegment<byte> buffer, System.Net.Sockets.SocketFlags socketFlags) { return default(System.Threading.Tasks.Task<int>); }
    public static System.Threading.Tasks.Task<int> SendAsync(this System.Net.Sockets.Socket socket, System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags) { return default(System.Threading.Tasks.Task<int>); }
    public static System.Threading.Tasks.Task<int> SendToAsync(this System.Net.Sockets.Socket socket, System.ArraySegment<byte> buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP) { return default(System.Threading.Tasks.Task<int>); }
  }
  public enum SocketType {
    Dgram = 2,
    Raw = 3,
    Rdm = 4,
    Seqpacket = 5,
    Stream = 1,
    Unknown = -1,
  }
  public partial class TcpClient : System.IDisposable {
    public TcpClient() { }
    public TcpClient(System.Net.Sockets.AddressFamily family) { }
    protected bool Active { get { return default(bool); } set { } }
    public int Available { get { return default(int); } }
    public System.Net.Sockets.Socket Client { get { return default(System.Net.Sockets.Socket); } set { } }
    public bool Connected { get { return default(bool); } }
    public bool ExclusiveAddressUse { get { return default(bool); } set { } }
    public System.Net.Sockets.LingerOption LingerState { get { return default(System.Net.Sockets.LingerOption); } set { } }
    public bool NoDelay { get { return default(bool); } set { } }
    public int ReceiveBufferSize { get { return default(int); } set { } }
    public int ReceiveTimeout { get { return default(int); } set { } }
    public int SendBufferSize { get { return default(int); } set { } }
    public int SendTimeout { get { return default(int); } set { } }
    public System.Threading.Tasks.Task ConnectAsync(System.Net.IPAddress address, int port) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ConnectAsync(System.Net.IPAddress[] addresses, int port) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ConnectAsync(string host, int port) { return default(System.Threading.Tasks.Task); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    ~TcpClient() { }
    public System.Net.Sockets.NetworkStream GetStream() { return default(System.Net.Sockets.NetworkStream); }
  }
  public partial class TcpListener {
    public TcpListener(System.Net.IPAddress localaddr, int port) { }
    public TcpListener(System.Net.IPEndPoint localEP) { }
    protected bool Active { get { return default(bool); } }
    public bool ExclusiveAddressUse { get { return default(bool); } set { } }
    public System.Net.EndPoint LocalEndpoint { get { return default(System.Net.EndPoint); } }
    public System.Net.Sockets.Socket Server { get { return default(System.Net.Sockets.Socket); } }
    public System.Threading.Tasks.Task<System.Net.Sockets.Socket> AcceptSocketAsync() { return default(System.Threading.Tasks.Task<System.Net.Sockets.Socket>); }
    public System.Threading.Tasks.Task<System.Net.Sockets.TcpClient> AcceptTcpClientAsync() { return default(System.Threading.Tasks.Task<System.Net.Sockets.TcpClient>); }
    public bool Pending() { return default(bool); }
    public void Start() { }
    public void Start(int backlog) { }
    public void Stop() { }
  }
  public partial class UdpClient : System.IDisposable {
    public UdpClient() { }
    public UdpClient(int port) { }
    public UdpClient(int port, System.Net.Sockets.AddressFamily family) { }
    public UdpClient(System.Net.IPEndPoint localEP) { }
    public UdpClient(System.Net.Sockets.AddressFamily family) { }
    protected bool Active { get { return default(bool); } set { } }
    public int Available { get { return default(int); } }
    public System.Net.Sockets.Socket Client { get { return default(System.Net.Sockets.Socket); } set { } }
    public bool DontFragment { get { return default(bool); } set { } }
    public bool EnableBroadcast { get { return default(bool); } set { } }
    public bool ExclusiveAddressUse { get { return default(bool); } set { } }
    public bool MulticastLoopback { get { return default(bool); } set { } }
    public short Ttl { get { return default(short); } set { } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public void DropMulticastGroup(System.Net.IPAddress multicastAddr) { }
    public void DropMulticastGroup(System.Net.IPAddress multicastAddr, int ifindex) { }
    public void JoinMulticastGroup(int ifindex, System.Net.IPAddress multicastAddr) { }
    public void JoinMulticastGroup(System.Net.IPAddress multicastAddr) { }
    public void JoinMulticastGroup(System.Net.IPAddress multicastAddr, int timeToLive) { }
    public void JoinMulticastGroup(System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress) { }
    public System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult> ReceiveAsync() { return default(System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>); }
    public System.Threading.Tasks.Task<int> SendAsync(byte[] datagram, int bytes, System.Net.IPEndPoint endPoint) { return default(System.Threading.Tasks.Task<int>); }
    public System.Threading.Tasks.Task<int> SendAsync(byte[] datagram, int bytes, string hostname, int port) { return default(System.Threading.Tasks.Task<int>); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct UdpReceiveResult : System.IEquatable<System.Net.Sockets.UdpReceiveResult> {
    public UdpReceiveResult(byte[] buffer, System.Net.IPEndPoint remoteEndPoint) { throw new System.NotImplementedException(); }
    public byte[] Buffer { get { return default(byte[]); } }
    public System.Net.IPEndPoint RemoteEndPoint { get { return default(System.Net.IPEndPoint); } }
    public bool Equals(System.Net.Sockets.UdpReceiveResult other) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Net.Sockets.UdpReceiveResult left, System.Net.Sockets.UdpReceiveResult right) { return default(bool); }
    public static bool operator !=(System.Net.Sockets.UdpReceiveResult left, System.Net.Sockets.UdpReceiveResult right) { return default(bool); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Net.WebHeaderCollection")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Net.WebHeaderCollection")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Net.WebHeaderCollection")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Net {
  public enum HttpRequestHeader {
    Accept = 20,
    AcceptCharset = 21,
    AcceptEncoding = 22,
    AcceptLanguage = 23,
    Allow = 10,
    Authorization = 24,
    CacheControl = 0,
    Connection = 1,
    ContentEncoding = 13,
    ContentLanguage = 14,
    ContentLength = 11,
    ContentLocation = 15,
    ContentMd5 = 16,
    ContentRange = 17,
    ContentType = 12,
    Cookie = 25,
    Date = 2,
    Expect = 26,
    Expires = 18,
    From = 27,
    Host = 28,
    IfMatch = 29,
    IfModifiedSince = 30,
    IfNoneMatch = 31,
    IfRange = 32,
    IfUnmodifiedSince = 33,
    KeepAlive = 3,
    LastModified = 19,
    MaxForwards = 34,
    Pragma = 4,
    ProxyAuthorization = 35,
    Range = 37,
    Referer = 36,
    Te = 38,
    Trailer = 5,
    TransferEncoding = 6,
    Translate = 39,
    Upgrade = 7,
    UserAgent = 40,
    Via = 8,
    Warning = 9,
  }
  public enum HttpResponseHeader {
    AcceptRanges = 20,
    Age = 21,
    Allow = 10,
    CacheControl = 0,
    Connection = 1,
    ContentEncoding = 13,
    ContentLanguage = 14,
    ContentLength = 11,
    ContentLocation = 15,
    ContentMd5 = 16,
    ContentRange = 17,
    ContentType = 12,
    Date = 2,
    ETag = 22,
    Expires = 18,
    KeepAlive = 3,
    LastModified = 19,
    Location = 23,
    Pragma = 4,
    ProxyAuthenticate = 24,
    RetryAfter = 25,
    Server = 26,
    SetCookie = 27,
    Trailer = 5,
    TransferEncoding = 6,
    Upgrade = 7,
    Vary = 28,
    Via = 8,
    Warning = 9,
    WwwAuthenticate = 29,
  }
  public sealed partial class WebHeaderCollection : System.Collections.IEnumerable {
    public WebHeaderCollection() { }
    public string[] AllKeys { get { return default(string[]); } }
    public int Count { get { return default(int); } }
    public string this[System.Net.HttpRequestHeader header] { get { return default(string); } set { } }
    public string this[System.Net.HttpResponseHeader header] { get { return default(string); } set { } }
    public string this[string name] { get { return default(string); } set { } }
    public void Remove(string name) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public override string ToString() { return default(string); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Net.WebSockets")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Net.WebSockets")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Net.WebSockets")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Net.WebSockets {
  public abstract partial class WebSocket : System.IDisposable {
    protected WebSocket() { }
    public abstract System.Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get; }
    public abstract string CloseStatusDescription { get; }
    public abstract System.Net.WebSockets.WebSocketState State { get; }
    public abstract string SubProtocol { get; }
    public abstract void Abort();
    public abstract System.Threading.Tasks.Task CloseAsync(System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    public abstract System.Threading.Tasks.Task CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    public abstract void Dispose();
    public abstract System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync(System.ArraySegment<byte> buffer, System.Threading.CancellationToken cancellationToken);
    public abstract System.Threading.Tasks.Task SendAsync(System.ArraySegment<byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);
  }
  public enum WebSocketCloseStatus {
    Empty = 1005,
    EndpointUnavailable = 1001,
    InternalServerError = 1011,
    InvalidMessageType = 1003,
    InvalidPayloadData = 1007,
    MandatoryExtension = 1010,
    MessageTooBig = 1009,
    NormalClosure = 1000,
    PolicyViolation = 1008,
    ProtocolError = 1002,
  }
  public enum WebSocketError {
    ConnectionClosedPrematurely = 8,
    Faulted = 2,
    HeaderError = 7,
    InvalidMessageType = 1,
    InvalidState = 9,
    NativeError = 3,
    NotAWebSocket = 4,
    Success = 0,
    UnsupportedProtocol = 6,
    UnsupportedVersion = 5,
  }
  public sealed partial class WebSocketException : System.Exception {
    public WebSocketException(int nativeError) { }
    public WebSocketException(int nativeError, System.Exception innerException) { }
    public WebSocketException(int nativeError, string message) { }
    public WebSocketException(System.Net.WebSockets.WebSocketError error) { }
    public WebSocketException(System.Net.WebSockets.WebSocketError error, System.Exception innerException) { }
    public WebSocketException(System.Net.WebSockets.WebSocketError error, int nativeError) { }
    public WebSocketException(System.Net.WebSockets.WebSocketError error, int nativeError, System.Exception innerException) { }
    public WebSocketException(System.Net.WebSockets.WebSocketError error, int nativeError, string message) { }
    public WebSocketException(System.Net.WebSockets.WebSocketError error, int nativeError, string message, System.Exception innerException) { }
    public WebSocketException(System.Net.WebSockets.WebSocketError error, string message) { }
    public WebSocketException(System.Net.WebSockets.WebSocketError error, string message, System.Exception innerException) { }
    public WebSocketException(string message) { }
    public WebSocketException(string message, System.Exception innerException) { }
    public int ErrorCode { get { return default(int); } }
    public System.Net.WebSockets.WebSocketError WebSocketErrorCode { get { return default(System.Net.WebSockets.WebSocketError); } }
  }
  public enum WebSocketMessageType {
    Binary = 1,
    Close = 2,
    Text = 0,
  }
  public partial class WebSocketReceiveResult {
    public WebSocketReceiveResult(int count, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage) { }
    public WebSocketReceiveResult(int count, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Nullable<System.Net.WebSockets.WebSocketCloseStatus> closeStatus, string closeStatusDescription) { }
    public System.Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get { return default(System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>); } }
    public string CloseStatusDescription { get { return default(string); } }
    public int Count { get { return default(int); } }
    public bool EndOfMessage { get { return default(bool); } }
    public System.Net.WebSockets.WebSocketMessageType MessageType { get { return default(System.Net.WebSockets.WebSocketMessageType); } }
  }
  public enum WebSocketState {
    Aborted = 6,
    Closed = 5,
    CloseReceived = 4,
    CloseSent = 3,
    Connecting = 1,
    None = 0,
    Open = 2,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Net.WebSockets.Client")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Net.WebSockets.Client")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Net.WebSockets.Client")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Net.WebSockets {
  public sealed partial class ClientWebSocket : System.Net.WebSockets.WebSocket {
    public ClientWebSocket() { }
    public override System.Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get { return default(System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>); } }
    public override string CloseStatusDescription { get { return default(string); } }
    public System.Net.WebSockets.ClientWebSocketOptions Options { get { return default(System.Net.WebSockets.ClientWebSocketOptions); } }
    public override System.Net.WebSockets.WebSocketState State { get { return default(System.Net.WebSockets.WebSocketState); } }
    public override string SubProtocol { get { return default(string); } }
    public override void Abort() { }
    public override System.Threading.Tasks.Task CloseAsync(System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public override System.Threading.Tasks.Task CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ConnectAsync(System.Uri uri, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public override void Dispose() { }
    public override System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync(System.ArraySegment<byte> buffer, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>); }
    public override System.Threading.Tasks.Task SendAsync(System.ArraySegment<byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
  }
  public sealed partial class ClientWebSocketOptions {
    internal ClientWebSocketOptions() { }
    public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get { return default(System.Security.Cryptography.X509Certificates.X509CertificateCollection); } set { } }
    public System.Net.CookieContainer Cookies { get { return default(System.Net.CookieContainer); } set { } }
    public System.Net.ICredentials Credentials { get { return default(System.Net.ICredentials); } set { } }
    public System.TimeSpan KeepAliveInterval { get { return default(System.TimeSpan); } set { } }
    public System.Net.IWebProxy Proxy { get { return default(System.Net.IWebProxy); } set { } }
    public void AddSubProtocol(string subProtocol) { }
    public void SetRequestHeader(string headerName, string headerValue) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Numerics.Vectors")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Numerics.Vectors")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Numerics.Vectors")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Numerics {
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Matrix3x2 : System.IEquatable<System.Numerics.Matrix3x2> {
    public float M11;
    public float M12;
    public float M21;
    public float M22;
    public float M31;
    public float M32;
    public Matrix3x2(float m11, float m12, float m21, float m22, float m31, float m32) { throw new System.NotImplementedException(); }
    public static System.Numerics.Matrix3x2 Identity { get { return default(System.Numerics.Matrix3x2); } }
    public bool IsIdentity { get { return default(bool); } }
    public System.Numerics.Vector2 Translation { get { return default(System.Numerics.Vector2); } set { } }
    public static System.Numerics.Matrix3x2 Add(System.Numerics.Matrix3x2 value1, System.Numerics.Matrix3x2 value2) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 CreateRotation(float radians) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 CreateRotation(float radians, System.Numerics.Vector2 centerPoint) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 CreateScale(System.Numerics.Vector2 scales) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 CreateScale(System.Numerics.Vector2 scales, System.Numerics.Vector2 centerPoint) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 CreateScale(float scale) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 CreateScale(float scale, System.Numerics.Vector2 centerPoint) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 CreateScale(float xScale, float yScale) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 CreateScale(float xScale, float yScale, System.Numerics.Vector2 centerPoint) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 CreateSkew(float radiansX, float radiansY) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 CreateSkew(float radiansX, float radiansY, System.Numerics.Vector2 centerPoint) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 CreateTranslation(System.Numerics.Vector2 position) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 CreateTranslation(float xPosition, float yPosition) { return default(System.Numerics.Matrix3x2); }
    public bool Equals(System.Numerics.Matrix3x2 other) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public float GetDeterminant() { return default(float); }
    public override int GetHashCode() { return default(int); }
    public static bool Invert(System.Numerics.Matrix3x2 matrix, out System.Numerics.Matrix3x2 result) { result = default(System.Numerics.Matrix3x2); return default(bool); }
    public static System.Numerics.Matrix3x2 Lerp(System.Numerics.Matrix3x2 matrix1, System.Numerics.Matrix3x2 matrix2, float amount) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 Multiply(System.Numerics.Matrix3x2 value1, System.Numerics.Matrix3x2 value2) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 Multiply(System.Numerics.Matrix3x2 value1, float value2) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 Negate(System.Numerics.Matrix3x2 value) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 operator +(System.Numerics.Matrix3x2 value1, System.Numerics.Matrix3x2 value2) { return default(System.Numerics.Matrix3x2); }
    public static bool operator ==(System.Numerics.Matrix3x2 value1, System.Numerics.Matrix3x2 value2) { return default(bool); }
    public static bool operator !=(System.Numerics.Matrix3x2 value1, System.Numerics.Matrix3x2 value2) { return default(bool); }
    public static System.Numerics.Matrix3x2 operator *(System.Numerics.Matrix3x2 value1, System.Numerics.Matrix3x2 value2) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 operator *(System.Numerics.Matrix3x2 value1, float value2) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 operator -(System.Numerics.Matrix3x2 value1, System.Numerics.Matrix3x2 value2) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 operator -(System.Numerics.Matrix3x2 value) { return default(System.Numerics.Matrix3x2); }
    public static System.Numerics.Matrix3x2 Subtract(System.Numerics.Matrix3x2 value1, System.Numerics.Matrix3x2 value2) { return default(System.Numerics.Matrix3x2); }
    public override string ToString() { return default(string); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Matrix4x4 : System.IEquatable<System.Numerics.Matrix4x4> {
    public float M11;
    public float M12;
    public float M13;
    public float M14;
    public float M21;
    public float M22;
    public float M23;
    public float M24;
    public float M31;
    public float M32;
    public float M33;
    public float M34;
    public float M41;
    public float M42;
    public float M43;
    public float M44;
    public Matrix4x4(System.Numerics.Matrix3x2 value) { throw new System.NotImplementedException(); }
    public Matrix4x4(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44) { throw new System.NotImplementedException(); }
    public static System.Numerics.Matrix4x4 Identity { get { return default(System.Numerics.Matrix4x4); } }
    public bool IsIdentity { get { return default(bool); } }
    public System.Numerics.Vector3 Translation { get { return default(System.Numerics.Vector3); } set { } }
    public static System.Numerics.Matrix4x4 Add(System.Numerics.Matrix4x4 value1, System.Numerics.Matrix4x4 value2) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateBillboard(System.Numerics.Vector3 objectPosition, System.Numerics.Vector3 cameraPosition, System.Numerics.Vector3 cameraUpVector, System.Numerics.Vector3 cameraForwardVector) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateConstrainedBillboard(System.Numerics.Vector3 objectPosition, System.Numerics.Vector3 cameraPosition, System.Numerics.Vector3 rotateAxis, System.Numerics.Vector3 cameraForwardVector, System.Numerics.Vector3 objectForwardVector) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateFromAxisAngle(System.Numerics.Vector3 axis, float angle) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateFromQuaternion(System.Numerics.Quaternion quaternion) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateFromYawPitchRoll(float yaw, float pitch, float roll) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateLookAt(System.Numerics.Vector3 cameraPosition, System.Numerics.Vector3 cameraTarget, System.Numerics.Vector3 cameraUpVector) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateOrthographic(float width, float height, float zNearPlane, float zFarPlane) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNearPlane, float zFarPlane) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreatePerspective(float width, float height, float nearPlaneDistance, float farPlaneDistance) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreatePerspectiveFieldOfView(float fieldOfView, float aspectRatio, float nearPlaneDistance, float farPlaneDistance) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float nearPlaneDistance, float farPlaneDistance) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateReflection(System.Numerics.Plane value) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateRotationX(float radians) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateRotationX(float radians, System.Numerics.Vector3 centerPoint) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateRotationY(float radians) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateRotationY(float radians, System.Numerics.Vector3 centerPoint) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateRotationZ(float radians) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateRotationZ(float radians, System.Numerics.Vector3 centerPoint) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateScale(System.Numerics.Vector3 scales) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateScale(System.Numerics.Vector3 scales, System.Numerics.Vector3 centerPoint) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateScale(float scale) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateScale(float scale, System.Numerics.Vector3 centerPoint) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateScale(float xScale, float yScale, float zScale) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateScale(float xScale, float yScale, float zScale, System.Numerics.Vector3 centerPoint) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateShadow(System.Numerics.Vector3 lightDirection, System.Numerics.Plane plane) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateTranslation(System.Numerics.Vector3 position) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateTranslation(float xPosition, float yPosition, float zPosition) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 CreateWorld(System.Numerics.Vector3 position, System.Numerics.Vector3 forward, System.Numerics.Vector3 up) { return default(System.Numerics.Matrix4x4); }
    public static bool Decompose(System.Numerics.Matrix4x4 matrix, out System.Numerics.Vector3 scale, out System.Numerics.Quaternion rotation, out System.Numerics.Vector3 translation) { scale = default(System.Numerics.Vector3); rotation = default(System.Numerics.Quaternion); translation = default(System.Numerics.Vector3); return default(bool); }
    public bool Equals(System.Numerics.Matrix4x4 other) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public float GetDeterminant() { return default(float); }
    public override int GetHashCode() { return default(int); }
    public static bool Invert(System.Numerics.Matrix4x4 matrix, out System.Numerics.Matrix4x4 result) { result = default(System.Numerics.Matrix4x4); return default(bool); }
    public static System.Numerics.Matrix4x4 Lerp(System.Numerics.Matrix4x4 matrix1, System.Numerics.Matrix4x4 matrix2, float amount) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 Multiply(System.Numerics.Matrix4x4 value1, System.Numerics.Matrix4x4 value2) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 Multiply(System.Numerics.Matrix4x4 value1, float value2) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 Negate(System.Numerics.Matrix4x4 value) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 operator +(System.Numerics.Matrix4x4 value1, System.Numerics.Matrix4x4 value2) { return default(System.Numerics.Matrix4x4); }
    public static bool operator ==(System.Numerics.Matrix4x4 value1, System.Numerics.Matrix4x4 value2) { return default(bool); }
    public static bool operator !=(System.Numerics.Matrix4x4 value1, System.Numerics.Matrix4x4 value2) { return default(bool); }
    public static System.Numerics.Matrix4x4 operator *(System.Numerics.Matrix4x4 value1, System.Numerics.Matrix4x4 value2) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 operator *(System.Numerics.Matrix4x4 value1, float value2) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 operator -(System.Numerics.Matrix4x4 value1, System.Numerics.Matrix4x4 value2) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 operator -(System.Numerics.Matrix4x4 value) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 Subtract(System.Numerics.Matrix4x4 value1, System.Numerics.Matrix4x4 value2) { return default(System.Numerics.Matrix4x4); }
    public override string ToString() { return default(string); }
    public static System.Numerics.Matrix4x4 Transform(System.Numerics.Matrix4x4 value, System.Numerics.Quaternion rotation) { return default(System.Numerics.Matrix4x4); }
    public static System.Numerics.Matrix4x4 Transpose(System.Numerics.Matrix4x4 matrix) { return default(System.Numerics.Matrix4x4); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Plane : System.IEquatable<System.Numerics.Plane> {
    public float D;
    public System.Numerics.Vector3 Normal;
    public Plane(System.Numerics.Vector3 normal, float d) { throw new System.NotImplementedException(); }
    public Plane(System.Numerics.Vector4 value) { throw new System.NotImplementedException(); }
    public Plane(float x, float y, float z, float d) { throw new System.NotImplementedException(); }
    public static System.Numerics.Plane CreateFromVertices(System.Numerics.Vector3 point1, System.Numerics.Vector3 point2, System.Numerics.Vector3 point3) { return default(System.Numerics.Plane); }
    public static float Dot(System.Numerics.Plane plane, System.Numerics.Vector4 value) { return default(float); }
    public static float DotCoordinate(System.Numerics.Plane plane, System.Numerics.Vector3 value) { return default(float); }
    public static float DotNormal(System.Numerics.Plane plane, System.Numerics.Vector3 value) { return default(float); }
    public bool Equals(System.Numerics.Plane other) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Numerics.Plane Normalize(System.Numerics.Plane value) { return default(System.Numerics.Plane); }
    public static bool operator ==(System.Numerics.Plane value1, System.Numerics.Plane value2) { return default(bool); }
    public static bool operator !=(System.Numerics.Plane value1, System.Numerics.Plane value2) { return default(bool); }
    public override string ToString() { return default(string); }
    public static System.Numerics.Plane Transform(System.Numerics.Plane plane, System.Numerics.Matrix4x4 matrix) { return default(System.Numerics.Plane); }
    public static System.Numerics.Plane Transform(System.Numerics.Plane plane, System.Numerics.Quaternion rotation) { return default(System.Numerics.Plane); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Quaternion : System.IEquatable<System.Numerics.Quaternion> {
    public float W;
    public float X;
    public float Y;
    public float Z;
    public Quaternion(System.Numerics.Vector3 vectorPart, float scalarPart) { throw new System.NotImplementedException(); }
    public Quaternion(float x, float y, float z, float w) { throw new System.NotImplementedException(); }
    public static System.Numerics.Quaternion Identity { get { return default(System.Numerics.Quaternion); } }
    public bool IsIdentity { get { return default(bool); } }
    public static System.Numerics.Quaternion Add(System.Numerics.Quaternion value1, System.Numerics.Quaternion value2) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion Concatenate(System.Numerics.Quaternion value1, System.Numerics.Quaternion value2) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion Conjugate(System.Numerics.Quaternion value) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion CreateFromAxisAngle(System.Numerics.Vector3 axis, float angle) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion CreateFromRotationMatrix(System.Numerics.Matrix4x4 matrix) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion CreateFromYawPitchRoll(float yaw, float pitch, float roll) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion Divide(System.Numerics.Quaternion value1, System.Numerics.Quaternion value2) { return default(System.Numerics.Quaternion); }
    public static float Dot(System.Numerics.Quaternion quaternion1, System.Numerics.Quaternion quaternion2) { return default(float); }
    public bool Equals(System.Numerics.Quaternion other) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Numerics.Quaternion Inverse(System.Numerics.Quaternion value) { return default(System.Numerics.Quaternion); }
    public float Length() { return default(float); }
    public float LengthSquared() { return default(float); }
    public static System.Numerics.Quaternion Lerp(System.Numerics.Quaternion quaternion1, System.Numerics.Quaternion quaternion2, float amount) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion Multiply(System.Numerics.Quaternion value1, System.Numerics.Quaternion value2) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion Multiply(System.Numerics.Quaternion value1, float value2) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion Negate(System.Numerics.Quaternion value) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion Normalize(System.Numerics.Quaternion value) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion operator +(System.Numerics.Quaternion value1, System.Numerics.Quaternion value2) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion operator /(System.Numerics.Quaternion value1, System.Numerics.Quaternion value2) { return default(System.Numerics.Quaternion); }
    public static bool operator ==(System.Numerics.Quaternion value1, System.Numerics.Quaternion value2) { return default(bool); }
    public static bool operator !=(System.Numerics.Quaternion value1, System.Numerics.Quaternion value2) { return default(bool); }
    public static System.Numerics.Quaternion operator *(System.Numerics.Quaternion value1, System.Numerics.Quaternion value2) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion operator *(System.Numerics.Quaternion value1, float value2) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion operator -(System.Numerics.Quaternion value1, System.Numerics.Quaternion value2) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion operator -(System.Numerics.Quaternion value) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion Slerp(System.Numerics.Quaternion quaternion1, System.Numerics.Quaternion quaternion2, float amount) { return default(System.Numerics.Quaternion); }
    public static System.Numerics.Quaternion Subtract(System.Numerics.Quaternion value1, System.Numerics.Quaternion value2) { return default(System.Numerics.Quaternion); }
    public override string ToString() { return default(string); }
  }
  public static partial class Vector {
    public static bool IsHardwareAccelerated { get { return default(bool); } }
    public static System.Numerics.Vector<T> Abs<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> Add<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> AndNot<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<byte> AsVectorByte<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<byte>); }
    public static System.Numerics.Vector<double> AsVectorDouble<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<double>); }
    public static System.Numerics.Vector<short> AsVectorInt16<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<short>); }
    public static System.Numerics.Vector<int> AsVectorInt32<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<int>); }
    public static System.Numerics.Vector<long> AsVectorInt64<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<long>); }
    [System.CLSCompliantAttribute(false)]
    public static System.Numerics.Vector<sbyte> AsVectorSByte<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<sbyte>); }
    public static System.Numerics.Vector<float> AsVectorSingle<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<float>); }
    [System.CLSCompliantAttribute(false)]
    public static System.Numerics.Vector<ushort> AsVectorUInt16<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<ushort>); }
    [System.CLSCompliantAttribute(false)]
    public static System.Numerics.Vector<uint> AsVectorUInt32<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<uint>); }
    [System.CLSCompliantAttribute(false)]
    public static System.Numerics.Vector<ulong> AsVectorUInt64<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<ulong>); }
    public static System.Numerics.Vector<T> BitwiseAnd<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> BitwiseOr<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<float> ConditionalSelect(System.Numerics.Vector<int> condition, System.Numerics.Vector<float> left, System.Numerics.Vector<float> right) { return default(System.Numerics.Vector<float>); }
    public static System.Numerics.Vector<double> ConditionalSelect(System.Numerics.Vector<long> condition, System.Numerics.Vector<double> left, System.Numerics.Vector<double> right) { return default(System.Numerics.Vector<double>); }
    public static System.Numerics.Vector<T> ConditionalSelect<T>(System.Numerics.Vector<T> condition, System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> Divide<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static T Dot<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(T); }
    public static System.Numerics.Vector<long> Equals(System.Numerics.Vector<double> left, System.Numerics.Vector<double> right) { return default(System.Numerics.Vector<long>); }
    public static System.Numerics.Vector<int> Equals(System.Numerics.Vector<int> left, System.Numerics.Vector<int> right) { return default(System.Numerics.Vector<int>); }
    public static System.Numerics.Vector<long> Equals(System.Numerics.Vector<long> left, System.Numerics.Vector<long> right) { return default(System.Numerics.Vector<long>); }
    public static System.Numerics.Vector<int> Equals(System.Numerics.Vector<float> left, System.Numerics.Vector<float> right) { return default(System.Numerics.Vector<int>); }
    public static System.Numerics.Vector<T> Equals<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static bool EqualsAll<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(bool); }
    public static bool EqualsAny<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(bool); }
    public static System.Numerics.Vector<long> GreaterThan(System.Numerics.Vector<double> left, System.Numerics.Vector<double> right) { return default(System.Numerics.Vector<long>); }
    public static System.Numerics.Vector<int> GreaterThan(System.Numerics.Vector<int> left, System.Numerics.Vector<int> right) { return default(System.Numerics.Vector<int>); }
    public static System.Numerics.Vector<long> GreaterThan(System.Numerics.Vector<long> left, System.Numerics.Vector<long> right) { return default(System.Numerics.Vector<long>); }
    public static System.Numerics.Vector<int> GreaterThan(System.Numerics.Vector<float> left, System.Numerics.Vector<float> right) { return default(System.Numerics.Vector<int>); }
    public static System.Numerics.Vector<T> GreaterThan<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static bool GreaterThanAll<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(bool); }
    public static bool GreaterThanAny<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(bool); }
    public static System.Numerics.Vector<long> GreaterThanOrEqual(System.Numerics.Vector<double> left, System.Numerics.Vector<double> right) { return default(System.Numerics.Vector<long>); }
    public static System.Numerics.Vector<int> GreaterThanOrEqual(System.Numerics.Vector<int> left, System.Numerics.Vector<int> right) { return default(System.Numerics.Vector<int>); }
    public static System.Numerics.Vector<long> GreaterThanOrEqual(System.Numerics.Vector<long> left, System.Numerics.Vector<long> right) { return default(System.Numerics.Vector<long>); }
    public static System.Numerics.Vector<int> GreaterThanOrEqual(System.Numerics.Vector<float> left, System.Numerics.Vector<float> right) { return default(System.Numerics.Vector<int>); }
    public static System.Numerics.Vector<T> GreaterThanOrEqual<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static bool GreaterThanOrEqualAll<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(bool); }
    public static bool GreaterThanOrEqualAny<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(bool); }
    public static System.Numerics.Vector<long> LessThan(System.Numerics.Vector<double> left, System.Numerics.Vector<double> right) { return default(System.Numerics.Vector<long>); }
    public static System.Numerics.Vector<int> LessThan(System.Numerics.Vector<int> left, System.Numerics.Vector<int> right) { return default(System.Numerics.Vector<int>); }
    public static System.Numerics.Vector<long> LessThan(System.Numerics.Vector<long> left, System.Numerics.Vector<long> right) { return default(System.Numerics.Vector<long>); }
    public static System.Numerics.Vector<int> LessThan(System.Numerics.Vector<float> left, System.Numerics.Vector<float> right) { return default(System.Numerics.Vector<int>); }
    public static System.Numerics.Vector<T> LessThan<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static bool LessThanAll<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(bool); }
    public static bool LessThanAny<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(bool); }
    public static System.Numerics.Vector<long> LessThanOrEqual(System.Numerics.Vector<double> left, System.Numerics.Vector<double> right) { return default(System.Numerics.Vector<long>); }
    public static System.Numerics.Vector<int> LessThanOrEqual(System.Numerics.Vector<int> left, System.Numerics.Vector<int> right) { return default(System.Numerics.Vector<int>); }
    public static System.Numerics.Vector<long> LessThanOrEqual(System.Numerics.Vector<long> left, System.Numerics.Vector<long> right) { return default(System.Numerics.Vector<long>); }
    public static System.Numerics.Vector<int> LessThanOrEqual(System.Numerics.Vector<float> left, System.Numerics.Vector<float> right) { return default(System.Numerics.Vector<int>); }
    public static System.Numerics.Vector<T> LessThanOrEqual<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static bool LessThanOrEqualAll<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(bool); }
    public static bool LessThanOrEqualAny<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(bool); }
    public static System.Numerics.Vector<T> Max<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> Min<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> Multiply<T>(T left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> Multiply<T>(System.Numerics.Vector<T> left, T right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> Multiply<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> Negate<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> OnesComplement<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> SquareRoot<T>(System.Numerics.Vector<T> value) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> Subtract<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> Xor<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) where T : struct { return default(System.Numerics.Vector<T>); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Vector<T> : System.IEquatable<System.Numerics.Vector<T>>, System.IFormattable where T : struct {
    public Vector(T value) { throw new System.NotImplementedException(); }
    public Vector(T[] values) { throw new System.NotImplementedException(); }
    public Vector(T[] values, int index) { throw new System.NotImplementedException(); }
    public static int Count { get { return default(int); } }
    public T this[int index] { get { return default(T); } }
    public static System.Numerics.Vector<T> One { get { return default(System.Numerics.Vector<T>); } }
    public static System.Numerics.Vector<T> Zero { get { return default(System.Numerics.Vector<T>); } }
    public void CopyTo(T[] destination) { }
    public void CopyTo(T[] destination, int startIndex) { }
    public bool Equals(System.Numerics.Vector<T> other) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Numerics.Vector<T> operator +(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> operator &(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> operator |(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> operator /(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) { return default(System.Numerics.Vector<T>); }
    public static bool operator ==(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) { return default(bool); }
    public static System.Numerics.Vector<T> operator ^(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) { return default(System.Numerics.Vector<T>); }
    public static explicit operator System.Numerics.Vector<byte> (System.Numerics.Vector<T> value) { return default(System.Numerics.Vector<byte>); }
    public static explicit operator System.Numerics.Vector<double> (System.Numerics.Vector<T> value) { return default(System.Numerics.Vector<double>); }
    public static explicit operator System.Numerics.Vector<short> (System.Numerics.Vector<T> value) { return default(System.Numerics.Vector<short>); }
    public static explicit operator System.Numerics.Vector<int> (System.Numerics.Vector<T> value) { return default(System.Numerics.Vector<int>); }
    public static explicit operator System.Numerics.Vector<long> (System.Numerics.Vector<T> value) { return default(System.Numerics.Vector<long>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Numerics.Vector<sbyte> (System.Numerics.Vector<T> value) { return default(System.Numerics.Vector<sbyte>); }
    public static explicit operator System.Numerics.Vector<float> (System.Numerics.Vector<T> value) { return default(System.Numerics.Vector<float>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Numerics.Vector<ushort> (System.Numerics.Vector<T> value) { return default(System.Numerics.Vector<ushort>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Numerics.Vector<uint> (System.Numerics.Vector<T> value) { return default(System.Numerics.Vector<uint>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Numerics.Vector<ulong> (System.Numerics.Vector<T> value) { return default(System.Numerics.Vector<ulong>); }
    public static bool operator !=(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) { return default(bool); }
    public static System.Numerics.Vector<T> operator *(T factor, System.Numerics.Vector<T> value) { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> operator *(System.Numerics.Vector<T> value, T factor) { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> operator *(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> operator ~(System.Numerics.Vector<T> value) { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> operator -(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right) { return default(System.Numerics.Vector<T>); }
    public static System.Numerics.Vector<T> operator -(System.Numerics.Vector<T> value) { return default(System.Numerics.Vector<T>); }
    public override string ToString() { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider formatProvider) { return default(string); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Vector2 : System.IEquatable<System.Numerics.Vector2>, System.IFormattable {
    public float X;
    public float Y;
    public Vector2(float value) { throw new System.NotImplementedException(); }
    public Vector2(float x, float y) { throw new System.NotImplementedException(); }
    public static System.Numerics.Vector2 One { get { return default(System.Numerics.Vector2); } }
    public static System.Numerics.Vector2 UnitX { get { return default(System.Numerics.Vector2); } }
    public static System.Numerics.Vector2 UnitY { get { return default(System.Numerics.Vector2); } }
    public static System.Numerics.Vector2 Zero { get { return default(System.Numerics.Vector2); } }
    public static System.Numerics.Vector2 Abs(System.Numerics.Vector2 value) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Add(System.Numerics.Vector2 left, System.Numerics.Vector2 right) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Clamp(System.Numerics.Vector2 value1, System.Numerics.Vector2 min, System.Numerics.Vector2 max) { return default(System.Numerics.Vector2); }
    public void CopyTo(float[] array) { }
    public void CopyTo(float[] array, int index) { }
    public static float Distance(System.Numerics.Vector2 value1, System.Numerics.Vector2 value2) { return default(float); }
    public static float DistanceSquared(System.Numerics.Vector2 value1, System.Numerics.Vector2 value2) { return default(float); }
    public static System.Numerics.Vector2 Divide(System.Numerics.Vector2 left, System.Numerics.Vector2 right) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Divide(System.Numerics.Vector2 left, float divisor) { return default(System.Numerics.Vector2); }
    public static float Dot(System.Numerics.Vector2 value1, System.Numerics.Vector2 value2) { return default(float); }
    public bool Equals(System.Numerics.Vector2 other) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public float Length() { return default(float); }
    public float LengthSquared() { return default(float); }
    public static System.Numerics.Vector2 Lerp(System.Numerics.Vector2 value1, System.Numerics.Vector2 value2, float amount) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Max(System.Numerics.Vector2 value1, System.Numerics.Vector2 value2) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Min(System.Numerics.Vector2 value1, System.Numerics.Vector2 value2) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Multiply(System.Numerics.Vector2 left, System.Numerics.Vector2 right) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Multiply(System.Numerics.Vector2 left, float right) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Multiply(float left, System.Numerics.Vector2 right) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Negate(System.Numerics.Vector2 value) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Normalize(System.Numerics.Vector2 value) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 operator +(System.Numerics.Vector2 left, System.Numerics.Vector2 right) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 operator /(System.Numerics.Vector2 left, System.Numerics.Vector2 right) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 operator /(System.Numerics.Vector2 value1, float value2) { return default(System.Numerics.Vector2); }
    public static bool operator ==(System.Numerics.Vector2 left, System.Numerics.Vector2 right) { return default(bool); }
    public static bool operator !=(System.Numerics.Vector2 left, System.Numerics.Vector2 right) { return default(bool); }
    public static System.Numerics.Vector2 operator *(System.Numerics.Vector2 left, System.Numerics.Vector2 right) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 operator *(System.Numerics.Vector2 left, float right) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 operator *(float left, System.Numerics.Vector2 right) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 operator -(System.Numerics.Vector2 left, System.Numerics.Vector2 right) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 operator -(System.Numerics.Vector2 value) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Reflect(System.Numerics.Vector2 vector, System.Numerics.Vector2 normal) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 SquareRoot(System.Numerics.Vector2 value) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Subtract(System.Numerics.Vector2 left, System.Numerics.Vector2 right) { return default(System.Numerics.Vector2); }
    public override string ToString() { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider formatProvider) { return default(string); }
    public static System.Numerics.Vector2 Transform(System.Numerics.Vector2 position, System.Numerics.Matrix3x2 matrix) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Transform(System.Numerics.Vector2 position, System.Numerics.Matrix4x4 matrix) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 Transform(System.Numerics.Vector2 value, System.Numerics.Quaternion rotation) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 TransformNormal(System.Numerics.Vector2 normal, System.Numerics.Matrix3x2 matrix) { return default(System.Numerics.Vector2); }
    public static System.Numerics.Vector2 TransformNormal(System.Numerics.Vector2 normal, System.Numerics.Matrix4x4 matrix) { return default(System.Numerics.Vector2); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Vector3 : System.IEquatable<System.Numerics.Vector3>, System.IFormattable {
    public float X;
    public float Y;
    public float Z;
    public Vector3(System.Numerics.Vector2 value, float z) { throw new System.NotImplementedException(); }
    public Vector3(float value) { throw new System.NotImplementedException(); }
    public Vector3(float x, float y, float z) { throw new System.NotImplementedException(); }
    public static System.Numerics.Vector3 One { get { return default(System.Numerics.Vector3); } }
    public static System.Numerics.Vector3 UnitX { get { return default(System.Numerics.Vector3); } }
    public static System.Numerics.Vector3 UnitY { get { return default(System.Numerics.Vector3); } }
    public static System.Numerics.Vector3 UnitZ { get { return default(System.Numerics.Vector3); } }
    public static System.Numerics.Vector3 Zero { get { return default(System.Numerics.Vector3); } }
    public static System.Numerics.Vector3 Abs(System.Numerics.Vector3 value) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 Add(System.Numerics.Vector3 left, System.Numerics.Vector3 right) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 Clamp(System.Numerics.Vector3 value1, System.Numerics.Vector3 min, System.Numerics.Vector3 max) { return default(System.Numerics.Vector3); }
    public void CopyTo(float[] array) { }
    public void CopyTo(float[] array, int index) { }
    public static System.Numerics.Vector3 Cross(System.Numerics.Vector3 vector1, System.Numerics.Vector3 vector2) { return default(System.Numerics.Vector3); }
    public static float Distance(System.Numerics.Vector3 value1, System.Numerics.Vector3 value2) { return default(float); }
    public static float DistanceSquared(System.Numerics.Vector3 value1, System.Numerics.Vector3 value2) { return default(float); }
    public static System.Numerics.Vector3 Divide(System.Numerics.Vector3 left, System.Numerics.Vector3 right) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 Divide(System.Numerics.Vector3 left, float divisor) { return default(System.Numerics.Vector3); }
    public static float Dot(System.Numerics.Vector3 vector1, System.Numerics.Vector3 vector2) { return default(float); }
    public bool Equals(System.Numerics.Vector3 other) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public float Length() { return default(float); }
    public float LengthSquared() { return default(float); }
    public static System.Numerics.Vector3 Lerp(System.Numerics.Vector3 value1, System.Numerics.Vector3 value2, float amount) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 Max(System.Numerics.Vector3 value1, System.Numerics.Vector3 value2) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 Min(System.Numerics.Vector3 value1, System.Numerics.Vector3 value2) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 Multiply(System.Numerics.Vector3 left, System.Numerics.Vector3 right) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 Multiply(System.Numerics.Vector3 left, float right) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 Multiply(float left, System.Numerics.Vector3 right) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 Negate(System.Numerics.Vector3 value) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 Normalize(System.Numerics.Vector3 value) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 operator +(System.Numerics.Vector3 left, System.Numerics.Vector3 right) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 operator /(System.Numerics.Vector3 left, System.Numerics.Vector3 right) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 operator /(System.Numerics.Vector3 value1, float value2) { return default(System.Numerics.Vector3); }
    public static bool operator ==(System.Numerics.Vector3 left, System.Numerics.Vector3 right) { return default(bool); }
    public static bool operator !=(System.Numerics.Vector3 left, System.Numerics.Vector3 right) { return default(bool); }
    public static System.Numerics.Vector3 operator *(System.Numerics.Vector3 left, System.Numerics.Vector3 right) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 operator *(System.Numerics.Vector3 left, float right) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 operator *(float left, System.Numerics.Vector3 right) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 operator -(System.Numerics.Vector3 left, System.Numerics.Vector3 right) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 operator -(System.Numerics.Vector3 value) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 Reflect(System.Numerics.Vector3 vector, System.Numerics.Vector3 normal) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 SquareRoot(System.Numerics.Vector3 value) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 Subtract(System.Numerics.Vector3 left, System.Numerics.Vector3 right) { return default(System.Numerics.Vector3); }
    public override string ToString() { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider formatProvider) { return default(string); }
    public static System.Numerics.Vector3 Transform(System.Numerics.Vector3 position, System.Numerics.Matrix4x4 matrix) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 Transform(System.Numerics.Vector3 value, System.Numerics.Quaternion rotation) { return default(System.Numerics.Vector3); }
    public static System.Numerics.Vector3 TransformNormal(System.Numerics.Vector3 normal, System.Numerics.Matrix4x4 matrix) { return default(System.Numerics.Vector3); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Vector4 : System.IEquatable<System.Numerics.Vector4>, System.IFormattable {
    public float W;
    public float X;
    public float Y;
    public float Z;
    public Vector4(System.Numerics.Vector2 value, float z, float w) { throw new System.NotImplementedException(); }
    public Vector4(System.Numerics.Vector3 value, float w) { throw new System.NotImplementedException(); }
    public Vector4(float value) { throw new System.NotImplementedException(); }
    public Vector4(float x, float y, float z, float w) { throw new System.NotImplementedException(); }
    public static System.Numerics.Vector4 One { get { return default(System.Numerics.Vector4); } }
    public static System.Numerics.Vector4 UnitW { get { return default(System.Numerics.Vector4); } }
    public static System.Numerics.Vector4 UnitX { get { return default(System.Numerics.Vector4); } }
    public static System.Numerics.Vector4 UnitY { get { return default(System.Numerics.Vector4); } }
    public static System.Numerics.Vector4 UnitZ { get { return default(System.Numerics.Vector4); } }
    public static System.Numerics.Vector4 Zero { get { return default(System.Numerics.Vector4); } }
    public static System.Numerics.Vector4 Abs(System.Numerics.Vector4 value) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Add(System.Numerics.Vector4 left, System.Numerics.Vector4 right) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Clamp(System.Numerics.Vector4 value1, System.Numerics.Vector4 min, System.Numerics.Vector4 max) { return default(System.Numerics.Vector4); }
    public void CopyTo(float[] array) { }
    public void CopyTo(float[] array, int index) { }
    public static float Distance(System.Numerics.Vector4 value1, System.Numerics.Vector4 value2) { return default(float); }
    public static float DistanceSquared(System.Numerics.Vector4 value1, System.Numerics.Vector4 value2) { return default(float); }
    public static System.Numerics.Vector4 Divide(System.Numerics.Vector4 left, System.Numerics.Vector4 right) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Divide(System.Numerics.Vector4 left, float divisor) { return default(System.Numerics.Vector4); }
    public static float Dot(System.Numerics.Vector4 vector1, System.Numerics.Vector4 vector2) { return default(float); }
    public bool Equals(System.Numerics.Vector4 other) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public float Length() { return default(float); }
    public float LengthSquared() { return default(float); }
    public static System.Numerics.Vector4 Lerp(System.Numerics.Vector4 value1, System.Numerics.Vector4 value2, float amount) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Max(System.Numerics.Vector4 value1, System.Numerics.Vector4 value2) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Min(System.Numerics.Vector4 value1, System.Numerics.Vector4 value2) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Multiply(System.Numerics.Vector4 left, System.Numerics.Vector4 right) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Multiply(System.Numerics.Vector4 left, float right) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Multiply(float left, System.Numerics.Vector4 right) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Negate(System.Numerics.Vector4 value) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Normalize(System.Numerics.Vector4 vector) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 operator +(System.Numerics.Vector4 left, System.Numerics.Vector4 right) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 operator /(System.Numerics.Vector4 left, System.Numerics.Vector4 right) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 operator /(System.Numerics.Vector4 value1, float value2) { return default(System.Numerics.Vector4); }
    public static bool operator ==(System.Numerics.Vector4 left, System.Numerics.Vector4 right) { return default(bool); }
    public static bool operator !=(System.Numerics.Vector4 left, System.Numerics.Vector4 right) { return default(bool); }
    public static System.Numerics.Vector4 operator *(System.Numerics.Vector4 left, System.Numerics.Vector4 right) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 operator *(System.Numerics.Vector4 left, float right) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 operator *(float left, System.Numerics.Vector4 right) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 operator -(System.Numerics.Vector4 left, System.Numerics.Vector4 right) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 operator -(System.Numerics.Vector4 value) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 SquareRoot(System.Numerics.Vector4 value) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Subtract(System.Numerics.Vector4 left, System.Numerics.Vector4 right) { return default(System.Numerics.Vector4); }
    public override string ToString() { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider formatProvider) { return default(string); }
    public static System.Numerics.Vector4 Transform(System.Numerics.Vector2 position, System.Numerics.Matrix4x4 matrix) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Transform(System.Numerics.Vector2 value, System.Numerics.Quaternion rotation) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Transform(System.Numerics.Vector3 position, System.Numerics.Matrix4x4 matrix) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Transform(System.Numerics.Vector3 value, System.Numerics.Quaternion rotation) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Transform(System.Numerics.Vector4 vector, System.Numerics.Matrix4x4 matrix) { return default(System.Numerics.Vector4); }
    public static System.Numerics.Vector4 Transform(System.Numerics.Vector4 value, System.Numerics.Quaternion rotation) { return default(System.Numerics.Vector4); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.ObjectModel")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.ObjectModel")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.ObjectModel")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Collections.ObjectModel {
  public abstract partial class KeyedCollection<TKey, TItem> : System.Collections.ObjectModel.Collection<TItem> {
    protected KeyedCollection() { }
    protected KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey> comparer) { }
    protected KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey> comparer, int dictionaryCreationThreshold) { }
    public System.Collections.Generic.IEqualityComparer<TKey> Comparer { get { return default(System.Collections.Generic.IEqualityComparer<TKey>); } }
    protected System.Collections.Generic.IDictionary<TKey, TItem> Dictionary { get { return default(System.Collections.Generic.IDictionary<TKey, TItem>); } }
    public TItem this[TKey key] { get { return default(TItem); } }
    protected void ChangeItemKey(TItem item, TKey newKey) { }
    protected override void ClearItems() { }
    public bool Contains(TKey key) { return default(bool); }
    protected abstract TKey GetKeyForItem(TItem item);
    protected override void InsertItem(int index, TItem item) { }
    public bool Remove(TKey key) { return default(bool); }
    protected override void RemoveItem(int index) { }
    protected override void SetItem(int index, TItem item) { }
  }
  public partial class ObservableCollection<T> : System.Collections.ObjectModel.Collection<T>, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.INotifyPropertyChanged {
    public ObservableCollection() { }
    public ObservableCollection(System.Collections.Generic.IEnumerable<T> collection) { }
    public virtual event System.Collections.Specialized.NotifyCollectionChangedEventHandler CollectionChanged { add { } remove { } }
    protected virtual event System.ComponentModel.PropertyChangedEventHandler PropertyChanged { add { } remove { } }
    event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
    protected System.IDisposable BlockReentrancy() { return default(System.IDisposable); }
    protected void CheckReentrancy() { }
    protected override void ClearItems() { }
    protected override void InsertItem(int index, T item) { }
    public void Move(int oldIndex, int newIndex) { }
    protected virtual void MoveItem(int oldIndex, int newIndex) { }
    protected virtual void OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
    protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
    protected override void RemoveItem(int index) { }
    protected override void SetItem(int index, T item) { }
  }
  public partial class ReadOnlyDictionary<TKey, TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    public ReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary) { }
    public int Count { get { return default(int); } }
    protected System.Collections.Generic.IDictionary<TKey, TValue> Dictionary { get { return default(System.Collections.Generic.IDictionary<TKey, TValue>); } }
    public TValue this[TKey key] { get { return default(TValue); } }
    public System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.KeyCollection Keys { get { return default(System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.KeyCollection); } }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get { return default(bool); } }
    TValue System.Collections.Generic.IDictionary<TKey,TValue>.this[TKey key] { get { return default(TValue); } set { } }
    System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get { return default(System.Collections.Generic.ICollection<TKey>); } }
    System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get { return default(System.Collections.Generic.ICollection<TValue>); } }
    System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get { return default(System.Collections.Generic.IEnumerable<TKey>); } }
    System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get { return default(System.Collections.Generic.IEnumerable<TValue>); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IDictionary.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IDictionary.IsReadOnly { get { return default(bool); } }
    object System.Collections.IDictionary.this[object key] { get { return default(object); } set { } }
    System.Collections.ICollection System.Collections.IDictionary.Keys { get { return default(System.Collections.ICollection); } }
    System.Collections.ICollection System.Collections.IDictionary.Values { get { return default(System.Collections.ICollection); } }
    public System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ValueCollection Values { get { return default(System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ValueCollection); } }
    public bool ContainsKey(TKey key) { return default(bool); }
    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>); }
    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> item) { }
    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear() { }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> item) { return default(bool); }
    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) { }
    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> item) { return default(bool); }
    void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value) { }
    bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key) { return default(bool); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    void System.Collections.IDictionary.Add(object key, object value) { }
    void System.Collections.IDictionary.Clear() { }
    bool System.Collections.IDictionary.Contains(object key) { return default(bool); }
    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    void System.Collections.IDictionary.Remove(object key) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public bool TryGetValue(TKey key, out TValue value) { value = default(TValue); return default(bool); }
    public sealed partial class KeyCollection : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IReadOnlyCollection<TKey>, System.Collections.ICollection, System.Collections.IEnumerable {
      internal KeyCollection() { }
      public int Count { get { return default(int); } }
      bool System.Collections.Generic.ICollection<TKey>.IsReadOnly { get { return default(bool); } }
      bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
      object System.Collections.ICollection.SyncRoot { get { return default(object); } }
      public void CopyTo(TKey[] array, int arrayIndex) { }
      public System.Collections.Generic.IEnumerator<TKey> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<TKey>); }
      void System.Collections.Generic.ICollection<TKey>.Add(TKey item) { }
      void System.Collections.Generic.ICollection<TKey>.Clear() { }
      bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item) { return default(bool); }
      bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item) { return default(bool); }
      void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
      System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    }
    public sealed partial class ValueCollection : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.Generic.IReadOnlyCollection<TValue>, System.Collections.ICollection, System.Collections.IEnumerable {
      internal ValueCollection() { }
      public int Count { get { return default(int); } }
      bool System.Collections.Generic.ICollection<TValue>.IsReadOnly { get { return default(bool); } }
      bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
      object System.Collections.ICollection.SyncRoot { get { return default(object); } }
      public void CopyTo(TValue[] array, int arrayIndex) { }
      public System.Collections.Generic.IEnumerator<TValue> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<TValue>); }
      void System.Collections.Generic.ICollection<TValue>.Add(TValue item) { }
      void System.Collections.Generic.ICollection<TValue>.Clear() { }
      bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item) { return default(bool); }
      bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item) { return default(bool); }
      void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
      System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    }
  }
  public partial class ReadOnlyObservableCollection<T> : System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.INotifyPropertyChanged {
    public ReadOnlyObservableCollection(System.Collections.ObjectModel.ObservableCollection<T> list) : base (default(System.Collections.Generic.IList<T>)) { }
    protected virtual event System.Collections.Specialized.NotifyCollectionChangedEventHandler CollectionChanged { add { } remove { } }
    protected virtual event System.ComponentModel.PropertyChangedEventHandler PropertyChanged { add { } remove { } }
    event System.Collections.Specialized.NotifyCollectionChangedEventHandler System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged { add { } remove { } }
    event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
    protected virtual void OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) { }
    protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs args) { }
  }
}
namespace System.Collections.Specialized {
  public partial interface INotifyCollectionChanged {
    event System.Collections.Specialized.NotifyCollectionChangedEventHandler CollectionChanged;
  }
  public enum NotifyCollectionChangedAction {
    Add = 0,
    Move = 3,
    Remove = 1,
    Replace = 2,
    Reset = 4,
  }
  public partial class NotifyCollectionChangedEventArgs : System.EventArgs {
    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action) { }
    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList changedItems) { }
    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList newItems, System.Collections.IList oldItems) { }
    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList newItems, System.Collections.IList oldItems, int startingIndex) { }
    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList changedItems, int startingIndex) { }
    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList changedItems, int index, int oldIndex) { }
    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, object changedItem) { }
    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, object changedItem, int index) { }
    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, object changedItem, int index, int oldIndex) { }
    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, object newItem, object oldItem) { }
    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, object newItem, object oldItem, int index) { }
    public System.Collections.Specialized.NotifyCollectionChangedAction Action { get { return default(System.Collections.Specialized.NotifyCollectionChangedAction); } }
    public System.Collections.IList NewItems { get { return default(System.Collections.IList); } }
    public int NewStartingIndex { get { return default(int); } }
    public System.Collections.IList OldItems { get { return default(System.Collections.IList); } }
    public int OldStartingIndex { get { return default(int); } }
  }
  public delegate void NotifyCollectionChangedEventHandler(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e);
}
namespace System.ComponentModel {
  public partial class DataErrorsChangedEventArgs : System.EventArgs {
    public DataErrorsChangedEventArgs(string propertyName) { }
    public virtual string PropertyName { get { return default(string); } }
  }
  public partial interface INotifyDataErrorInfo {
    bool HasErrors { get; }
    event System.EventHandler<System.ComponentModel.DataErrorsChangedEventArgs> ErrorsChanged;
    System.Collections.IEnumerable GetErrors(string propertyName);
  }
  public partial interface INotifyPropertyChanged {
    event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
  }
  public partial interface INotifyPropertyChanging {
    event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
  }
  public partial class PropertyChangedEventArgs : System.EventArgs {
    public PropertyChangedEventArgs(string propertyName) { }
    public virtual string PropertyName { get { return default(string); } }
  }
  public delegate void PropertyChangedEventHandler(object sender, System.ComponentModel.PropertyChangedEventArgs e);
  public partial class PropertyChangingEventArgs : System.EventArgs {
    public PropertyChangingEventArgs(string propertyName) { }
    public virtual string PropertyName { get { return default(string); } }
  }
  public delegate void PropertyChangingEventHandler(object sender, System.ComponentModel.PropertyChangingEventArgs e);
}
namespace System.Windows.Input {
  public partial interface ICommand {
    event System.EventHandler CanExecuteChanged;
    bool CanExecute(object parameter);
    void Execute(object parameter);
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Reflection")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Reflection")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Reflection")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("System.Private.Reflection.Extensibility, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("System.Reflection.Emit, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("System.Reflection.Emit.Lightweight, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("System.Runtime.InteropServices, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Reflection {
  public sealed partial class AmbiguousMatchException : System.Exception {
    public AmbiguousMatchException() { }
    public AmbiguousMatchException(string message) { }
    public AmbiguousMatchException(string message, System.Exception inner) { }
  }
  public abstract partial class Assembly : System.Reflection.ICustomAttributeProvider {
    internal Assembly() { }
    public virtual string CodeBase { get { return default(string); } }
    public virtual System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> CustomAttributes { get { return default(System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>); } }
    public abstract System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo> DefinedTypes { get; }
    public virtual System.Reflection.MethodInfo EntryPoint { get { return default(System.Reflection.MethodInfo); } }
    public virtual System.Collections.Generic.IEnumerable<System.Type> ExportedTypes { get { return default(System.Collections.Generic.IEnumerable<System.Type>); } }
    public virtual string FullName { get { return default(string); } }
    public virtual string ImageRuntimeVersion { get { return default(string); } }
    public virtual bool IsDynamic { get { return default(bool); } }
    public virtual string Location { get { return default(string); } }
    public virtual System.Reflection.Module ManifestModule { get { return default(System.Reflection.Module); } }
    public abstract System.Collections.Generic.IEnumerable<System.Reflection.Module> Modules { get; }
    public object CreateInstance(string typeName) { return default(object); }
    public object CreateInstance(string typeName, bool ignoreCase) { return default(object); }
    public static string CreateQualifiedName(string assemblyName, string typeName) { return default(string); }
    public override bool Equals(object o) { return default(bool); }
    public static System.Reflection.Assembly GetEntryAssembly() { return default(System.Reflection.Assembly); }
    public virtual System.Type[] GetExportedTypes() { return default(System.Type[]); }
    public override int GetHashCode() { return default(int); }
    public virtual System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName) { return default(System.Reflection.ManifestResourceInfo); }
    public virtual string[] GetManifestResourceNames() { return default(string[]); }
    public virtual System.IO.Stream GetManifestResourceStream(string name) { return default(System.IO.Stream); }
    public virtual System.Reflection.AssemblyName GetName() { return default(System.Reflection.AssemblyName); }
    public virtual System.Reflection.AssemblyName[] GetReferencedAssemblies() { return default(System.Reflection.AssemblyName[]); }
    public virtual System.Type GetType(string name) { return default(System.Type); }
    public virtual System.Type GetType(string name, bool throwOnError) { return default(System.Type); }
    public virtual System.Type GetType(string name, bool throwOnError, bool ignoreCase) { return default(System.Type); }
    public virtual System.Type[] GetTypes() { return default(System.Type[]); }
    public static System.Reflection.Assembly Load(System.Reflection.AssemblyName assemblyRef) { return default(System.Reflection.Assembly); }
    object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) { return default(object[]); }
    object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, bool inherit) { return default(object[]); }
    bool System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, bool inherit) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  public enum AssemblyContentType {
    Default = 0,
    WindowsRuntime = 1,
  }
  public sealed partial class AssemblyName {
    public AssemblyName() { }
    public AssemblyName(string assemblyName) { }
    public System.Reflection.AssemblyContentType ContentType { get { return default(System.Reflection.AssemblyContentType); } set { } }
    public string CultureName { get { return default(string); } set { } }
    public System.Reflection.AssemblyNameFlags Flags { get { return default(System.Reflection.AssemblyNameFlags); } set { } }
    public string FullName { get { return default(string); } }
    public string Name { get { return default(string); } set { } }
    public System.Reflection.ProcessorArchitecture ProcessorArchitecture { get { return default(System.Reflection.ProcessorArchitecture); } set { } }
    public System.Version Version { get { return default(System.Version); } set { } }
    public byte[] GetPublicKey() { return default(byte[]); }
    public byte[] GetPublicKeyToken() { return default(byte[]); }
    public void SetPublicKey(byte[] publicKey) { }
    public void SetPublicKeyToken(byte[] publicKeyToken) { }
    public override string ToString() { return default(string); }
  }
  [System.FlagsAttribute]
  public enum BindingFlags {
    CreateInstance = 512,
    DeclaredOnly = 2,
    Default = 0,
    FlattenHierarchy = 64,
    GetField = 1024,
    GetProperty = 4096,
    IgnoreCase = 1,
    Instance = 4,
    InvokeMethod = 256,
    NonPublic = 32,
    Public = 16,
    SetField = 2048,
    SetProperty = 8192,
    Static = 8,
  }
  public abstract partial class ConstructorInfo : System.Reflection.MethodBase {
    internal ConstructorInfo() { }
    public static readonly string ConstructorName;
    public static readonly string TypeConstructorName;
    public override System.Reflection.MemberTypes MemberType { get { return default(System.Reflection.MemberTypes); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public virtual object Invoke(object[] parameters) { return default(object); }
  }
  public partial class CustomAttributeData {
    internal CustomAttributeData() { }
    public virtual System.Type AttributeType { get { return default(System.Type); } }
    public virtual System.Reflection.ConstructorInfo Constructor { get { return default(System.Reflection.ConstructorInfo); } }
    public virtual System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> ConstructorArguments { get { return default(System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument>); } }
    public virtual System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> NamedArguments { get { return default(System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument>); } }
    public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.Assembly target) { return default(System.Collections.Generic.IList<System.Reflection.CustomAttributeData>); }
    public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.MemberInfo target) { return default(System.Collections.Generic.IList<System.Reflection.CustomAttributeData>); }
    public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.Module target) { return default(System.Collections.Generic.IList<System.Reflection.CustomAttributeData>); }
    public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.ParameterInfo target) { return default(System.Collections.Generic.IList<System.Reflection.CustomAttributeData>); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct CustomAttributeNamedArgument {
    public bool IsField { get { return default(bool); } }
    public string MemberName { get { return default(string); } }
    public System.Reflection.CustomAttributeTypedArgument TypedValue { get { return default(System.Reflection.CustomAttributeTypedArgument); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right) { return default(bool); }
    public static bool operator !=(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct CustomAttributeTypedArgument {
    public System.Type ArgumentType { get { return default(System.Type); } }
    public object Value { get { return default(object); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right) { return default(bool); }
    public static bool operator !=(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  public abstract partial class EventInfo : System.Reflection.MemberInfo {
    internal EventInfo() { }
    public virtual System.Reflection.MethodInfo AddMethod { get { return default(System.Reflection.MethodInfo); } }
    public abstract System.Reflection.EventAttributes Attributes { get; }
    public virtual System.Type EventHandlerType { get { return default(System.Type); } }
    public virtual bool IsMulticast { get { return default(bool); } }
    public bool IsSpecialName { get { return default(bool); } }
    public override System.Reflection.MemberTypes MemberType { get { return default(System.Reflection.MemberTypes); } }
    public virtual System.Reflection.MethodInfo RaiseMethod { get { return default(System.Reflection.MethodInfo); } }
    public virtual System.Reflection.MethodInfo RemoveMethod { get { return default(System.Reflection.MethodInfo); } }
    public virtual void AddEventHandler(object target, System.Delegate handler) { }
    public override bool Equals(object obj) { return default(bool); }
    public System.Reflection.MethodInfo GetAddMethod() { return default(System.Reflection.MethodInfo); }
    public abstract System.Reflection.MethodInfo GetAddMethod(bool nonPublic);
    public override int GetHashCode() { return default(int); }
    public System.Reflection.MethodInfo GetRaiseMethod() { return default(System.Reflection.MethodInfo); }
    public abstract System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic);
    public System.Reflection.MethodInfo GetRemoveMethod() { return default(System.Reflection.MethodInfo); }
    public abstract System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic);
    public virtual void RemoveEventHandler(object target, System.Delegate handler) { }
  }
  public abstract partial class FieldInfo : System.Reflection.MemberInfo {
    internal FieldInfo() { }
    public abstract System.Reflection.FieldAttributes Attributes { get; }
    public abstract System.Type FieldType { get; }
    public bool IsAssembly { get { return default(bool); } }
    public bool IsFamily { get { return default(bool); } }
    public bool IsFamilyAndAssembly { get { return default(bool); } }
    public bool IsFamilyOrAssembly { get { return default(bool); } }
    public bool IsInitOnly { get { return default(bool); } }
    public bool IsLiteral { get { return default(bool); } }
    public bool IsPrivate { get { return default(bool); } }
    public bool IsPublic { get { return default(bool); } }
    public bool IsSpecialName { get { return default(bool); } }
    public bool IsStatic { get { return default(bool); } }
    public override System.Reflection.MemberTypes MemberType { get { return default(System.Reflection.MemberTypes); } }
    public override bool Equals(object obj) { return default(bool); }
    public static System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle) { return default(System.Reflection.FieldInfo); }
    public static System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle, System.RuntimeTypeHandle declaringType) { return default(System.Reflection.FieldInfo); }
    public override int GetHashCode() { return default(int); }
    public virtual System.Type[] GetOptionalCustomModifiers() { return default(System.Type[]); }
    public virtual object GetRawConstantValue() { return default(object); }
    public virtual System.Type[] GetRequiredCustomModifiers() { return default(System.Type[]); }
    public abstract object GetValue(object obj);
    public virtual void SetValue(object obj, object value) { }
  }
  public partial interface ICustomAttributeProvider {
    object[] GetCustomAttributes(bool inherit);
    object[] GetCustomAttributes(System.Type attributeType, bool inherit);
    bool IsDefined(System.Type attributeType, bool inherit);
  }
  public static partial class IntrospectionExtensions {
    public static System.Reflection.TypeInfo GetTypeInfo(this System.Type type) { return default(System.Reflection.TypeInfo); }
  }
  public partial class InvalidFilterCriteriaException : System.Exception {
    public InvalidFilterCriteriaException() { }
    public InvalidFilterCriteriaException(string message) { }
    public InvalidFilterCriteriaException(string message, System.Exception inner) { }
  }
  public partial interface IReflectableType {
    System.Reflection.TypeInfo GetTypeInfo();
  }
  public partial class LocalVariableInfo {
    protected LocalVariableInfo() { }
    public virtual bool IsPinned { get { return default(bool); } }
    public virtual int LocalIndex { get { return default(int); } }
    public virtual System.Type LocalType { get { return default(System.Type); } }
    public override string ToString() { return default(string); }
  }
  public partial class ManifestResourceInfo {
    public ManifestResourceInfo(System.Reflection.Assembly containingAssembly, string containingFileName, System.Reflection.ResourceLocation resourceLocation) { }
    public virtual string FileName { get { return default(string); } }
    public virtual System.Reflection.Assembly ReferencedAssembly { get { return default(System.Reflection.Assembly); } }
    public virtual System.Reflection.ResourceLocation ResourceLocation { get { return default(System.Reflection.ResourceLocation); } }
  }
  public delegate bool MemberFilter(System.Reflection.MemberInfo m, object filterCriteria);
  public abstract partial class MemberInfo : System.Reflection.ICustomAttributeProvider {
    internal MemberInfo() { }
    public virtual System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> CustomAttributes { get { return default(System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>); } }
    public abstract System.Type DeclaringType { get; }
    public abstract System.Reflection.MemberTypes MemberType { get; }
    public virtual int MetadataToken { get { return default(int); } }
    public virtual System.Reflection.Module Module { get { return default(System.Reflection.Module); } }
    public abstract string Name { get; }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) { return default(object[]); }
    object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, bool inherit) { return default(object[]); }
    bool System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, bool inherit) { return default(bool); }
  }
  [System.FlagsAttribute]
  public enum MemberTypes {
    All = 191,
    Constructor = 1,
    Custom = 64,
    Event = 2,
    Field = 4,
    Method = 8,
    NestedType = 128,
    Property = 16,
    TypeInfo = 32,
  }
  public abstract partial class MethodBase : System.Reflection.MemberInfo {
    internal MethodBase() { }
    public abstract System.Reflection.MethodAttributes Attributes { get; }
    public virtual System.Reflection.CallingConventions CallingConvention { get { return default(System.Reflection.CallingConventions); } }
    public virtual bool ContainsGenericParameters { get { return default(bool); } }
    public bool IsAbstract { get { return default(bool); } }
    public bool IsAssembly { get { return default(bool); } }
    public bool IsConstructor { get { return default(bool); } }
    public bool IsFamily { get { return default(bool); } }
    public bool IsFamilyAndAssembly { get { return default(bool); } }
    public bool IsFamilyOrAssembly { get { return default(bool); } }
    public bool IsFinal { get { return default(bool); } }
    public virtual bool IsGenericMethod { get { return default(bool); } }
    public virtual bool IsGenericMethodDefinition { get { return default(bool); } }
    public bool IsHideBySig { get { return default(bool); } }
    public bool IsPrivate { get { return default(bool); } }
    public bool IsPublic { get { return default(bool); } }
    public bool IsSpecialName { get { return default(bool); } }
    public bool IsStatic { get { return default(bool); } }
    public bool IsVirtual { get { return default(bool); } }
    public abstract System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }
    public override bool Equals(object obj) { return default(bool); }
    public virtual System.Type[] GetGenericArguments() { return default(System.Type[]); }
    public override int GetHashCode() { return default(int); }
    public static System.Reflection.MethodBase GetMethodFromHandle(System.RuntimeMethodHandle handle) { return default(System.Reflection.MethodBase); }
    public static System.Reflection.MethodBase GetMethodFromHandle(System.RuntimeMethodHandle handle, System.RuntimeTypeHandle declaringType) { return default(System.Reflection.MethodBase); }
    public abstract System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
    public abstract System.Reflection.ParameterInfo[] GetParameters();
    public virtual object Invoke(object obj, object[] parameters) { return default(object); }
  }
  public abstract partial class MethodInfo : System.Reflection.MethodBase {
    internal MethodInfo() { }
    public override System.Reflection.MemberTypes MemberType { get { return default(System.Reflection.MemberTypes); } }
    public virtual System.Reflection.ParameterInfo ReturnParameter { get { return default(System.Reflection.ParameterInfo); } }
    public virtual System.Type ReturnType { get { return default(System.Type); } }
    public abstract System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    public virtual System.Delegate CreateDelegate(System.Type delegateType) { return default(System.Delegate); }
    public virtual System.Delegate CreateDelegate(System.Type delegateType, object target) { return default(System.Delegate); }
    public override bool Equals(object obj) { return default(bool); }
    public abstract System.Reflection.MethodInfo GetBaseDefinition();
    public override System.Type[] GetGenericArguments() { return default(System.Type[]); }
    public virtual System.Reflection.MethodInfo GetGenericMethodDefinition() { return default(System.Reflection.MethodInfo); }
    public override int GetHashCode() { return default(int); }
    public virtual System.Reflection.MethodInfo MakeGenericMethod(params System.Type[] typeArguments) { return default(System.Reflection.MethodInfo); }
  }
  public abstract partial class Module : System.Reflection.ICustomAttributeProvider {
    internal Module() { }
    public static readonly System.Reflection.TypeFilter FilterTypeName;
    public static readonly System.Reflection.TypeFilter FilterTypeNameIgnoreCase;
    public virtual System.Reflection.Assembly Assembly { get { return default(System.Reflection.Assembly); } }
    public virtual System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> CustomAttributes { get { return default(System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>); } }
    public virtual string FullyQualifiedName { get { return default(string); } }
    public virtual System.Guid ModuleVersionId { get { return default(System.Guid); } }
    public virtual string Name { get { return default(string); } }
    public virtual string ScopeName { get { return default(string); } }
    public override bool Equals(object o) { return default(bool); }
    public virtual System.Type[] FindTypes(System.Reflection.TypeFilter filter, object filterCriteria) { return default(System.Type[]); }
    public System.Reflection.FieldInfo GetField(string name) { return default(System.Reflection.FieldInfo); }
    public virtual System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.FieldInfo); }
    public System.Reflection.FieldInfo[] GetFields() { return default(System.Reflection.FieldInfo[]); }
    public virtual System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingFlags) { return default(System.Reflection.FieldInfo[]); }
    public override int GetHashCode() { return default(int); }
    public System.Reflection.MethodInfo GetMethod(string name) { return default(System.Reflection.MethodInfo); }
    public System.Reflection.MethodInfo GetMethod(string name, System.Type[] types) { return default(System.Reflection.MethodInfo); }
    public System.Reflection.MethodInfo[] GetMethods() { return default(System.Reflection.MethodInfo[]); }
    public virtual System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingFlags) { return default(System.Reflection.MethodInfo[]); }
    public virtual System.Type GetType(string className) { return default(System.Type); }
    public virtual System.Type GetType(string className, bool ignoreCase) { return default(System.Type); }
    public virtual System.Type GetType(string className, bool throwOnError, bool ignoreCase) { return default(System.Type); }
    public virtual System.Type[] GetTypes() { return default(System.Type[]); }
    object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) { return default(object[]); }
    object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, bool inherit) { return default(object[]); }
    bool System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, bool inherit) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  public partial class ParameterInfo : System.Reflection.ICustomAttributeProvider {
    internal ParameterInfo() { }
    public virtual System.Reflection.ParameterAttributes Attributes { get { return default(System.Reflection.ParameterAttributes); } }
    public virtual System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> CustomAttributes { get { return default(System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>); } }
    public virtual object DefaultValue { get { return default(object); } }
    public virtual bool HasDefaultValue { get { return default(bool); } }
    public bool IsIn { get { return default(bool); } }
    public bool IsOptional { get { return default(bool); } }
    public bool IsOut { get { return default(bool); } }
    public bool IsRetval { get { return default(bool); } }
    public virtual System.Reflection.MemberInfo Member { get { return default(System.Reflection.MemberInfo); } }
    public virtual string Name { get { return default(string); } }
    public virtual System.Type ParameterType { get { return default(System.Type); } }
    public virtual int Position { get { return default(int); } }
    public virtual object RawDefaultValue { get { return default(object); } }
    public virtual System.Type[] GetOptionalCustomModifiers() { return default(System.Type[]); }
    public virtual System.Type[] GetRequiredCustomModifiers() { return default(System.Type[]); }
    object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) { return default(object[]); }
    object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, bool inherit) { return default(object[]); }
    bool System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, bool inherit) { return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct ParameterModifier {
    public ParameterModifier(int parameterCount) { throw new System.NotImplementedException(); }
    public bool this[int index] { get { return default(bool); } set { } }
  }
  public abstract partial class PropertyInfo : System.Reflection.MemberInfo {
    internal PropertyInfo() { }
    public abstract System.Reflection.PropertyAttributes Attributes { get; }
    public abstract bool CanRead { get; }
    public abstract bool CanWrite { get; }
    public virtual System.Reflection.MethodInfo GetMethod { get { return default(System.Reflection.MethodInfo); } }
    public bool IsSpecialName { get { return default(bool); } }
    public override System.Reflection.MemberTypes MemberType { get { return default(System.Reflection.MemberTypes); } }
    public abstract System.Type PropertyType { get; }
    public virtual System.Reflection.MethodInfo SetMethod { get { return default(System.Reflection.MethodInfo); } }
    public override bool Equals(object obj) { return default(bool); }
    public System.Reflection.MethodInfo[] GetAccessors() { return default(System.Reflection.MethodInfo[]); }
    public abstract System.Reflection.MethodInfo[] GetAccessors(bool nonPublic);
    public virtual object GetConstantValue() { return default(object); }
    public System.Reflection.MethodInfo GetGetMethod() { return default(System.Reflection.MethodInfo); }
    public abstract System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
    public override int GetHashCode() { return default(int); }
    public abstract System.Reflection.ParameterInfo[] GetIndexParameters();
    public virtual System.Type[] GetOptionalCustomModifiers() { return default(System.Type[]); }
    public virtual object GetRawConstantValue() { return default(object); }
    public virtual System.Type[] GetRequiredCustomModifiers() { return default(System.Type[]); }
    public System.Reflection.MethodInfo GetSetMethod() { return default(System.Reflection.MethodInfo); }
    public abstract System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
    public object GetValue(object obj) { return default(object); }
    public virtual object GetValue(object obj, object[] index) { return default(object); }
    public void SetValue(object obj, object value) { }
    public virtual void SetValue(object obj, object value, object[] index) { }
  }
  public abstract partial class ReflectionContext {
    protected ReflectionContext() { }
    public virtual System.Reflection.TypeInfo GetTypeForObject(object value) { return default(System.Reflection.TypeInfo); }
    public abstract System.Reflection.Assembly MapAssembly(System.Reflection.Assembly assembly);
    public abstract System.Reflection.TypeInfo MapType(System.Reflection.TypeInfo type);
  }
  public sealed partial class ReflectionTypeLoadException : System.Exception {
    public ReflectionTypeLoadException(System.Type[] classes, System.Exception[] exceptions) { }
    public ReflectionTypeLoadException(System.Type[] classes, System.Exception[] exceptions, string message) { }
    public System.Exception[] LoaderExceptions { get { return default(System.Exception[]); } }
    public System.Type[] Types { get { return default(System.Type[]); } }
  }
  [System.FlagsAttribute]
  public enum ResourceLocation {
    ContainedInAnotherAssembly = 2,
    ContainedInManifestFile = 4,
    Embedded = 1,
  }
  public partial class TargetException : System.Exception {
    public TargetException() { }
    public TargetException(string message) { }
    public TargetException(string message, System.Exception inner) { }
  }
  public sealed partial class TargetInvocationException : System.Exception {
    public TargetInvocationException(System.Exception inner) { }
    public TargetInvocationException(string message, System.Exception inner) { }
  }
  public sealed partial class TargetParameterCountException : System.Exception {
    public TargetParameterCountException() { }
    public TargetParameterCountException(string message) { }
    public TargetParameterCountException(string message, System.Exception inner) { }
  }
  public delegate bool TypeFilter(System.Type m, object filterCriteria);
  public abstract partial class TypeInfo : System.Reflection.MemberInfo, System.Reflection.IReflectableType {
    internal TypeInfo() { }
    public abstract System.Reflection.Assembly Assembly { get; }
    public abstract string AssemblyQualifiedName { get; }
    public abstract System.Reflection.TypeAttributes Attributes { get; }
    public abstract System.Type BaseType { get; }
    public abstract bool ContainsGenericParameters { get; }
    public virtual System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo> DeclaredConstructors { get { return default(System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo>); } }
    public virtual System.Collections.Generic.IEnumerable<System.Reflection.EventInfo> DeclaredEvents { get { return default(System.Collections.Generic.IEnumerable<System.Reflection.EventInfo>); } }
    public virtual System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo> DeclaredFields { get { return default(System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>); } }
    public virtual System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> DeclaredMembers { get { return default(System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>); } }
    public virtual System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> DeclaredMethods { get { return default(System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>); } }
    public virtual System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo> DeclaredNestedTypes { get { return default(System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>); } }
    public virtual System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> DeclaredProperties { get { return default(System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>); } }
    public abstract System.Reflection.MethodBase DeclaringMethod { get; }
    public abstract string FullName { get; }
    public abstract System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }
    public abstract int GenericParameterPosition { get; }
    public abstract System.Type[] GenericTypeArguments { get; }
    public virtual System.Type[] GenericTypeParameters { get { return default(System.Type[]); } }
    public abstract System.Guid GUID { get; }
    public bool HasElementType { get { return default(bool); } }
    public virtual System.Collections.Generic.IEnumerable<System.Type> ImplementedInterfaces { get { return default(System.Collections.Generic.IEnumerable<System.Type>); } }
    public bool IsAbstract { get { return default(bool); } }
    public bool IsAnsiClass { get { return default(bool); } }
    public bool IsArray { get { return default(bool); } }
    public bool IsAutoClass { get { return default(bool); } }
    public bool IsAutoLayout { get { return default(bool); } }
    public bool IsByRef { get { return default(bool); } }
    public bool IsClass { get { return default(bool); } }
    public virtual bool IsCOMObject { get { return default(bool); } }
    public abstract bool IsEnum { get; }
    public bool IsExplicitLayout { get { return default(bool); } }
    public abstract bool IsGenericParameter { get; }
    public abstract bool IsGenericType { get; }
    public abstract bool IsGenericTypeDefinition { get; }
    public bool IsImport { get { return default(bool); } }
    public bool IsInterface { get { return default(bool); } }
    public bool IsLayoutSequential { get { return default(bool); } }
    public bool IsMarshalByRef { get { return default(bool); } }
    public bool IsNested { get { return default(bool); } }
    public bool IsNestedAssembly { get { return default(bool); } }
    public bool IsNestedFamANDAssem { get { return default(bool); } }
    public bool IsNestedFamily { get { return default(bool); } }
    public bool IsNestedFamORAssem { get { return default(bool); } }
    public bool IsNestedPrivate { get { return default(bool); } }
    public bool IsNestedPublic { get { return default(bool); } }
    public bool IsNotPublic { get { return default(bool); } }
    public bool IsPointer { get { return default(bool); } }
    public virtual bool IsPrimitive { get { return default(bool); } }
    public bool IsPublic { get { return default(bool); } }
    public bool IsSealed { get { return default(bool); } }
    public abstract bool IsSerializable { get; }
    public bool IsSpecialName { get { return default(bool); } }
    public bool IsUnicodeClass { get { return default(bool); } }
    public virtual bool IsValueType { get { return default(bool); } }
    public bool IsVisible { get { return default(bool); } }
    public override System.Reflection.MemberTypes MemberType { get { return default(System.Reflection.MemberTypes); } }
    public abstract string Namespace { get; }
    public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get { return default(System.Runtime.InteropServices.StructLayoutAttribute); } }
    public System.Reflection.ConstructorInfo TypeInitializer { get { return default(System.Reflection.ConstructorInfo); } }
    public virtual System.Type UnderlyingSystemType { get { return default(System.Type); } }
    public virtual System.Type AsType() { return default(System.Type); }
    public virtual System.Type[] FindInterfaces(System.Reflection.TypeFilter filter, object filterCriteria) { return default(System.Type[]); }
    public virtual System.Reflection.MemberInfo[] FindMembers(System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria) { return default(System.Reflection.MemberInfo[]); }
    public abstract int GetArrayRank();
    public System.Reflection.ConstructorInfo GetConstructor(System.Type[] types) { return default(System.Reflection.ConstructorInfo); }
    public System.Reflection.ConstructorInfo[] GetConstructors() { return default(System.Reflection.ConstructorInfo[]); }
    public virtual System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.ConstructorInfo[]); }
    public virtual System.Reflection.EventInfo GetDeclaredEvent(string name) { return default(System.Reflection.EventInfo); }
    public virtual System.Reflection.FieldInfo GetDeclaredField(string name) { return default(System.Reflection.FieldInfo); }
    public virtual System.Reflection.MethodInfo GetDeclaredMethod(string name) { return default(System.Reflection.MethodInfo); }
    public virtual System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> GetDeclaredMethods(string name) { return default(System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>); }
    public virtual System.Reflection.TypeInfo GetDeclaredNestedType(string name) { return default(System.Reflection.TypeInfo); }
    public virtual System.Reflection.PropertyInfo GetDeclaredProperty(string name) { return default(System.Reflection.PropertyInfo); }
    public virtual System.Reflection.MemberInfo[] GetDefaultMembers() { return default(System.Reflection.MemberInfo[]); }
    public abstract System.Type GetElementType();
    public virtual string GetEnumName(object value) { return default(string); }
    public virtual string[] GetEnumNames() { return default(string[]); }
    public virtual System.Type GetEnumUnderlyingType() { return default(System.Type); }
    public virtual System.Array GetEnumValues() { return default(System.Array); }
    public System.Reflection.EventInfo GetEvent(string name) { return default(System.Reflection.EventInfo); }
    public virtual System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.EventInfo); }
    public virtual System.Reflection.EventInfo[] GetEvents() { return default(System.Reflection.EventInfo[]); }
    public virtual System.Reflection.EventInfo[] GetEvents(System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.EventInfo[]); }
    public System.Reflection.FieldInfo GetField(string name) { return default(System.Reflection.FieldInfo); }
    public virtual System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.FieldInfo); }
    public System.Reflection.FieldInfo[] GetFields() { return default(System.Reflection.FieldInfo[]); }
    public virtual System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.FieldInfo[]); }
    public virtual System.Type[] GetGenericArguments() { return default(System.Type[]); }
    public abstract System.Type[] GetGenericParameterConstraints();
    public abstract System.Type GetGenericTypeDefinition();
    public System.Type GetInterface(string name) { return default(System.Type); }
    public virtual System.Type GetInterface(string name, bool ignoreCase) { return default(System.Type); }
    public virtual System.Type[] GetInterfaces() { return default(System.Type[]); }
    public System.Reflection.MemberInfo[] GetMember(string name) { return default(System.Reflection.MemberInfo[]); }
    public virtual System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.MemberInfo[]); }
    public virtual System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.MemberInfo[]); }
    public System.Reflection.MemberInfo[] GetMembers() { return default(System.Reflection.MemberInfo[]); }
    public virtual System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.MemberInfo[]); }
    public System.Reflection.MethodInfo GetMethod(string name) { return default(System.Reflection.MethodInfo); }
    public System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.MethodInfo); }
    public System.Reflection.MethodInfo GetMethod(string name, System.Type[] types) { return default(System.Reflection.MethodInfo); }
    public System.Reflection.MethodInfo GetMethod(string name, System.Type[] types, System.Reflection.ParameterModifier[] modifiers) { return default(System.Reflection.MethodInfo); }
    public System.Reflection.MethodInfo[] GetMethods() { return default(System.Reflection.MethodInfo[]); }
    public virtual System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.MethodInfo[]); }
    public System.Type GetNestedType(string name) { return default(System.Type); }
    public virtual System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr) { return default(System.Type); }
    public System.Type[] GetNestedTypes() { return default(System.Type[]); }
    public virtual System.Type[] GetNestedTypes(System.Reflection.BindingFlags bindingAttr) { return default(System.Type[]); }
    public System.Reflection.PropertyInfo[] GetProperties() { return default(System.Reflection.PropertyInfo[]); }
    public virtual System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.PropertyInfo[]); }
    public System.Reflection.PropertyInfo GetProperty(string name) { return default(System.Reflection.PropertyInfo); }
    public System.Reflection.PropertyInfo GetProperty(string name, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.PropertyInfo); }
    public System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType) { return default(System.Reflection.PropertyInfo); }
    public System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType, System.Type[] types) { return default(System.Reflection.PropertyInfo); }
    public System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers) { return default(System.Reflection.PropertyInfo); }
    public System.Reflection.PropertyInfo GetProperty(string name, System.Type[] types) { return default(System.Reflection.PropertyInfo); }
    public virtual bool IsAssignableFrom(System.Reflection.TypeInfo typeInfo) { return default(bool); }
    public virtual bool IsAssignableFrom(System.Type c) { return default(bool); }
    public virtual bool IsEnumDefined(object value) { return default(bool); }
    public virtual bool IsEquivalentTo(System.Type other) { return default(bool); }
    public virtual bool IsInstanceOfType(object o) { return default(bool); }
    public virtual bool IsSubclassOf(System.Type c) { return default(bool); }
    public abstract System.Type MakeArrayType();
    public abstract System.Type MakeArrayType(int rank);
    public abstract System.Type MakeByRefType();
    public abstract System.Type MakeGenericType(params System.Type[] typeArguments);
    public abstract System.Type MakePointerType();
    System.Reflection.TypeInfo System.Reflection.IReflectableType.GetTypeInfo() { return default(System.Reflection.TypeInfo); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Reflection.DispatchProxy")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Reflection.DispatchProxy")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Reflection.DispatchProxy")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Reflection {
  public abstract partial class DispatchProxy {
    protected DispatchProxy() { }
    public static T Create<T, TProxy>() where TProxy : System.Reflection.DispatchProxy { return default(T); }
    protected abstract object Invoke(System.Reflection.MethodInfo targetMethod, object[] args);
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Reflection.Extensions")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Reflection.Extensions")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Reflection.Extensions")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Reflection {
  public static partial class CustomAttributeExtensions {
    public static System.Attribute GetCustomAttribute(this System.Reflection.Assembly element, System.Type attributeType) { return default(System.Attribute); }
    public static System.Attribute GetCustomAttribute(this System.Reflection.MemberInfo element, System.Type attributeType) { return default(System.Attribute); }
    public static System.Attribute GetCustomAttribute(this System.Reflection.MemberInfo element, System.Type attributeType, bool inherit) { return default(System.Attribute); }
    public static System.Attribute GetCustomAttribute(this System.Reflection.Module element, System.Type attributeType) { return default(System.Attribute); }
    public static System.Attribute GetCustomAttribute(this System.Reflection.ParameterInfo element, System.Type attributeType) { return default(System.Attribute); }
    public static System.Attribute GetCustomAttribute(this System.Reflection.ParameterInfo element, System.Type attributeType, bool inherit) { return default(System.Attribute); }
    public static T GetCustomAttribute<T>(this System.Reflection.Assembly element) where T : System.Attribute { return default(T); }
    public static T GetCustomAttribute<T>(this System.Reflection.MemberInfo element) where T : System.Attribute { return default(T); }
    public static T GetCustomAttribute<T>(this System.Reflection.MemberInfo element, bool inherit) where T : System.Attribute { return default(T); }
    public static T GetCustomAttribute<T>(this System.Reflection.Module element) where T : System.Attribute { return default(T); }
    public static T GetCustomAttribute<T>(this System.Reflection.ParameterInfo element) where T : System.Attribute { return default(T); }
    public static T GetCustomAttribute<T>(this System.Reflection.ParameterInfo element, bool inherit) where T : System.Attribute { return default(T); }
    public static System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(this System.Reflection.Assembly element) { return default(System.Collections.Generic.IEnumerable<System.Attribute>); }
    public static System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(this System.Reflection.Assembly element, System.Type attributeType) { return default(System.Collections.Generic.IEnumerable<System.Attribute>); }
    public static System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(this System.Reflection.MemberInfo element) { return default(System.Collections.Generic.IEnumerable<System.Attribute>); }
    public static System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(this System.Reflection.MemberInfo element, bool inherit) { return default(System.Collections.Generic.IEnumerable<System.Attribute>); }
    public static System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(this System.Reflection.MemberInfo element, System.Type attributeType) { return default(System.Collections.Generic.IEnumerable<System.Attribute>); }
    public static System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(this System.Reflection.MemberInfo element, System.Type attributeType, bool inherit) { return default(System.Collections.Generic.IEnumerable<System.Attribute>); }
    public static System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(this System.Reflection.Module element) { return default(System.Collections.Generic.IEnumerable<System.Attribute>); }
    public static System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(this System.Reflection.Module element, System.Type attributeType) { return default(System.Collections.Generic.IEnumerable<System.Attribute>); }
    public static System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(this System.Reflection.ParameterInfo element) { return default(System.Collections.Generic.IEnumerable<System.Attribute>); }
    public static System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(this System.Reflection.ParameterInfo element, bool inherit) { return default(System.Collections.Generic.IEnumerable<System.Attribute>); }
    public static System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(this System.Reflection.ParameterInfo element, System.Type attributeType) { return default(System.Collections.Generic.IEnumerable<System.Attribute>); }
    public static System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(this System.Reflection.ParameterInfo element, System.Type attributeType, bool inherit) { return default(System.Collections.Generic.IEnumerable<System.Attribute>); }
    public static System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this System.Reflection.Assembly element) where T : System.Attribute { return default(System.Collections.Generic.IEnumerable<T>); }
    public static System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this System.Reflection.MemberInfo element) where T : System.Attribute { return default(System.Collections.Generic.IEnumerable<T>); }
    public static System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this System.Reflection.MemberInfo element, bool inherit) where T : System.Attribute { return default(System.Collections.Generic.IEnumerable<T>); }
    public static System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this System.Reflection.Module element) where T : System.Attribute { return default(System.Collections.Generic.IEnumerable<T>); }
    public static System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this System.Reflection.ParameterInfo element) where T : System.Attribute { return default(System.Collections.Generic.IEnumerable<T>); }
    public static System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this System.Reflection.ParameterInfo element, bool inherit) where T : System.Attribute { return default(System.Collections.Generic.IEnumerable<T>); }
    public static bool IsDefined(this System.Reflection.Assembly element, System.Type attributeType) { return default(bool); }
    public static bool IsDefined(this System.Reflection.MemberInfo element, System.Type attributeType) { return default(bool); }
    public static bool IsDefined(this System.Reflection.MemberInfo element, System.Type attributeType, bool inherit) { return default(bool); }
    public static bool IsDefined(this System.Reflection.Module element, System.Type attributeType) { return default(bool); }
    public static bool IsDefined(this System.Reflection.ParameterInfo element, System.Type attributeType) { return default(bool); }
    public static bool IsDefined(this System.Reflection.ParameterInfo element, System.Type attributeType, bool inherit) { return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct InterfaceMapping {
    public System.Reflection.MethodInfo[] InterfaceMethods;
    public System.Type InterfaceType;
    public System.Reflection.MethodInfo[] TargetMethods;
    public System.Type TargetType;
  }
  public static partial class RuntimeReflectionExtensions {
    public static System.Reflection.MethodInfo GetMethodInfo(this System.Delegate del) { return default(System.Reflection.MethodInfo); }
    public static System.Reflection.MethodInfo GetRuntimeBaseDefinition(this System.Reflection.MethodInfo method) { return default(System.Reflection.MethodInfo); }
    public static System.Reflection.EventInfo GetRuntimeEvent(this System.Type type, string name) { return default(System.Reflection.EventInfo); }
    public static System.Collections.Generic.IEnumerable<System.Reflection.EventInfo> GetRuntimeEvents(this System.Type type) { return default(System.Collections.Generic.IEnumerable<System.Reflection.EventInfo>); }
    public static System.Reflection.FieldInfo GetRuntimeField(this System.Type type, string name) { return default(System.Reflection.FieldInfo); }
    public static System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo> GetRuntimeFields(this System.Type type) { return default(System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>); }
    public static System.Reflection.InterfaceMapping GetRuntimeInterfaceMap(this System.Reflection.TypeInfo typeInfo, System.Type interfaceType) { return default(System.Reflection.InterfaceMapping); }
    public static System.Reflection.MethodInfo GetRuntimeMethod(this System.Type type, string name, System.Type[] parameters) { return default(System.Reflection.MethodInfo); }
    public static System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> GetRuntimeMethods(this System.Type type) { return default(System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>); }
    public static System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> GetRuntimeProperties(this System.Type type) { return default(System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>); }
    public static System.Reflection.PropertyInfo GetRuntimeProperty(this System.Type type, string name) { return default(System.Reflection.PropertyInfo); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Reflection.Primitives")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Reflection.Primitives")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Reflection.Primitives")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Reflection {
  [System.FlagsAttribute]
  public enum CallingConventions {
    Any = 3,
    ExplicitThis = 64,
    HasThis = 32,
    Standard = 1,
    VarArgs = 2,
  }
  [System.FlagsAttribute]
  public enum EventAttributes {
    None = 0,
    RTSpecialName = 1024,
    SpecialName = 512,
  }
  [System.FlagsAttribute]
  public enum FieldAttributes {
    Assembly = 3,
    FamANDAssem = 2,
    Family = 4,
    FamORAssem = 5,
    FieldAccessMask = 7,
    HasDefault = 32768,
    HasFieldMarshal = 4096,
    HasFieldRVA = 256,
    InitOnly = 32,
    Literal = 64,
    NotSerialized = 128,
    PinvokeImpl = 8192,
    Private = 1,
    PrivateScope = 0,
    Public = 6,
    RTSpecialName = 1024,
    SpecialName = 512,
    Static = 16,
  }
  [System.FlagsAttribute]
  public enum GenericParameterAttributes {
    Contravariant = 2,
    Covariant = 1,
    DefaultConstructorConstraint = 16,
    None = 0,
    NotNullableValueTypeConstraint = 8,
    ReferenceTypeConstraint = 4,
    SpecialConstraintMask = 28,
    VarianceMask = 3,
  }
  [System.FlagsAttribute]
  public enum MethodAttributes {
    Abstract = 1024,
    Assembly = 3,
    CheckAccessOnOverride = 512,
    FamANDAssem = 2,
    Family = 4,
    FamORAssem = 5,
    Final = 32,
    HasSecurity = 16384,
    HideBySig = 128,
    MemberAccessMask = 7,
    NewSlot = 256,
    PinvokeImpl = 8192,
    Private = 1,
    PrivateScope = 0,
    Public = 6,
    RequireSecObject = 32768,
    ReuseSlot = 0,
    RTSpecialName = 4096,
    SpecialName = 2048,
    Static = 16,
    UnmanagedExport = 8,
    Virtual = 64,
    VtableLayoutMask = 256,
  }
  public enum MethodImplAttributes {
    AggressiveInlining = 256,
    CodeTypeMask = 3,
    ForwardRef = 16,
    IL = 0,
    InternalCall = 4096,
    Managed = 0,
    ManagedMask = 4,
    Native = 1,
    NoInlining = 8,
    NoOptimization = 64,
    OPTIL = 2,
    PreserveSig = 128,
    Runtime = 3,
    Synchronized = 32,
    Unmanaged = 4,
  }
  [System.FlagsAttribute]
  public enum ParameterAttributes {
    HasDefault = 4096,
    HasFieldMarshal = 8192,
    In = 1,
    Lcid = 4,
    None = 0,
    Optional = 16,
    Out = 2,
    Retval = 8,
  }
  [System.FlagsAttribute]
  public enum PropertyAttributes {
    HasDefault = 4096,
    None = 0,
    RTSpecialName = 1024,
    SpecialName = 512,
  }
  [System.FlagsAttribute]
  public enum TypeAttributes {
    Abstract = 128,
    AnsiClass = 0,
    AutoClass = 131072,
    AutoLayout = 0,
    BeforeFieldInit = 1048576,
    Class = 0,
    ClassSemanticsMask = 32,
    CustomFormatClass = 196608,
    CustomFormatMask = 12582912,
    ExplicitLayout = 16,
    HasSecurity = 262144,
    Import = 4096,
    Interface = 32,
    LayoutMask = 24,
    NestedAssembly = 5,
    NestedFamANDAssem = 6,
    NestedFamily = 4,
    NestedFamORAssem = 7,
    NestedPrivate = 3,
    NestedPublic = 2,
    NotPublic = 0,
    Public = 1,
    RTSpecialName = 2048,
    Sealed = 256,
    SequentialLayout = 8,
    Serializable = 8192,
    SpecialName = 1024,
    StringFormatMask = 196608,
    UnicodeClass = 65536,
    VisibilityMask = 7,
    WindowsRuntime = 16384,
  }
}
namespace System.Reflection.Emit {
  public enum FlowControl {
    Branch = 0,
    Break = 1,
    Call = 2,
    Cond_Branch = 3,
    Meta = 4,
    Next = 5,
    Return = 7,
    Throw = 8,
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct OpCode {
    public System.Reflection.Emit.FlowControl FlowControl { get { return default(System.Reflection.Emit.FlowControl); } }
    public string Name { get { return default(string); } }
    public System.Reflection.Emit.OpCodeType OpCodeType { get { return default(System.Reflection.Emit.OpCodeType); } }
    public System.Reflection.Emit.OperandType OperandType { get { return default(System.Reflection.Emit.OperandType); } }
    public int Size { get { return default(int); } }
    public System.Reflection.Emit.StackBehaviour StackBehaviourPop { get { return default(System.Reflection.Emit.StackBehaviour); } }
    public System.Reflection.Emit.StackBehaviour StackBehaviourPush { get { return default(System.Reflection.Emit.StackBehaviour); } }
    public short Value { get { return default(short); } }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Reflection.Emit.OpCode obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Reflection.Emit.OpCode a, System.Reflection.Emit.OpCode b) { return default(bool); }
    public static bool operator !=(System.Reflection.Emit.OpCode a, System.Reflection.Emit.OpCode b) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  public partial class OpCodes {
    internal OpCodes() { }
    public static readonly System.Reflection.Emit.OpCode Add;
    public static readonly System.Reflection.Emit.OpCode Add_Ovf;
    public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;
    public static readonly System.Reflection.Emit.OpCode And;
    public static readonly System.Reflection.Emit.OpCode Arglist;
    public static readonly System.Reflection.Emit.OpCode Beq;
    public static readonly System.Reflection.Emit.OpCode Beq_S;
    public static readonly System.Reflection.Emit.OpCode Bge;
    public static readonly System.Reflection.Emit.OpCode Bge_S;
    public static readonly System.Reflection.Emit.OpCode Bge_Un;
    public static readonly System.Reflection.Emit.OpCode Bge_Un_S;
    public static readonly System.Reflection.Emit.OpCode Bgt;
    public static readonly System.Reflection.Emit.OpCode Bgt_S;
    public static readonly System.Reflection.Emit.OpCode Bgt_Un;
    public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;
    public static readonly System.Reflection.Emit.OpCode Ble;
    public static readonly System.Reflection.Emit.OpCode Ble_S;
    public static readonly System.Reflection.Emit.OpCode Ble_Un;
    public static readonly System.Reflection.Emit.OpCode Ble_Un_S;
    public static readonly System.Reflection.Emit.OpCode Blt;
    public static readonly System.Reflection.Emit.OpCode Blt_S;
    public static readonly System.Reflection.Emit.OpCode Blt_Un;
    public static readonly System.Reflection.Emit.OpCode Blt_Un_S;
    public static readonly System.Reflection.Emit.OpCode Bne_Un;
    public static readonly System.Reflection.Emit.OpCode Bne_Un_S;
    public static readonly System.Reflection.Emit.OpCode Box;
    public static readonly System.Reflection.Emit.OpCode Br;
    public static readonly System.Reflection.Emit.OpCode Br_S;
    public static readonly System.Reflection.Emit.OpCode Break;
    public static readonly System.Reflection.Emit.OpCode Brfalse;
    public static readonly System.Reflection.Emit.OpCode Brfalse_S;
    public static readonly System.Reflection.Emit.OpCode Brtrue;
    public static readonly System.Reflection.Emit.OpCode Brtrue_S;
    public static readonly System.Reflection.Emit.OpCode Call;
    public static readonly System.Reflection.Emit.OpCode Calli;
    public static readonly System.Reflection.Emit.OpCode Callvirt;
    public static readonly System.Reflection.Emit.OpCode Castclass;
    public static readonly System.Reflection.Emit.OpCode Ceq;
    public static readonly System.Reflection.Emit.OpCode Cgt;
    public static readonly System.Reflection.Emit.OpCode Cgt_Un;
    public static readonly System.Reflection.Emit.OpCode Ckfinite;
    public static readonly System.Reflection.Emit.OpCode Clt;
    public static readonly System.Reflection.Emit.OpCode Clt_Un;
    public static readonly System.Reflection.Emit.OpCode Constrained;
    public static readonly System.Reflection.Emit.OpCode Conv_I;
    public static readonly System.Reflection.Emit.OpCode Conv_I1;
    public static readonly System.Reflection.Emit.OpCode Conv_I2;
    public static readonly System.Reflection.Emit.OpCode Conv_I4;
    public static readonly System.Reflection.Emit.OpCode Conv_I8;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;
    public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;
    public static readonly System.Reflection.Emit.OpCode Conv_R_Un;
    public static readonly System.Reflection.Emit.OpCode Conv_R4;
    public static readonly System.Reflection.Emit.OpCode Conv_R8;
    public static readonly System.Reflection.Emit.OpCode Conv_U;
    public static readonly System.Reflection.Emit.OpCode Conv_U1;
    public static readonly System.Reflection.Emit.OpCode Conv_U2;
    public static readonly System.Reflection.Emit.OpCode Conv_U4;
    public static readonly System.Reflection.Emit.OpCode Conv_U8;
    public static readonly System.Reflection.Emit.OpCode Cpblk;
    public static readonly System.Reflection.Emit.OpCode Cpobj;
    public static readonly System.Reflection.Emit.OpCode Div;
    public static readonly System.Reflection.Emit.OpCode Div_Un;
    public static readonly System.Reflection.Emit.OpCode Dup;
    public static readonly System.Reflection.Emit.OpCode Endfilter;
    public static readonly System.Reflection.Emit.OpCode Endfinally;
    public static readonly System.Reflection.Emit.OpCode Initblk;
    public static readonly System.Reflection.Emit.OpCode Initobj;
    public static readonly System.Reflection.Emit.OpCode Isinst;
    public static readonly System.Reflection.Emit.OpCode Jmp;
    public static readonly System.Reflection.Emit.OpCode Ldarg;
    public static readonly System.Reflection.Emit.OpCode Ldarg_0;
    public static readonly System.Reflection.Emit.OpCode Ldarg_1;
    public static readonly System.Reflection.Emit.OpCode Ldarg_2;
    public static readonly System.Reflection.Emit.OpCode Ldarg_3;
    public static readonly System.Reflection.Emit.OpCode Ldarg_S;
    public static readonly System.Reflection.Emit.OpCode Ldarga;
    public static readonly System.Reflection.Emit.OpCode Ldarga_S;
    public static readonly System.Reflection.Emit.OpCode Ldc_I4;
    public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;
    public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;
    public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;
    public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;
    public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;
    public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;
    public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;
    public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;
    public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;
    public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;
    public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;
    public static readonly System.Reflection.Emit.OpCode Ldc_I8;
    public static readonly System.Reflection.Emit.OpCode Ldc_R4;
    public static readonly System.Reflection.Emit.OpCode Ldc_R8;
    public static readonly System.Reflection.Emit.OpCode Ldelem;
    public static readonly System.Reflection.Emit.OpCode Ldelem_I;
    public static readonly System.Reflection.Emit.OpCode Ldelem_I1;
    public static readonly System.Reflection.Emit.OpCode Ldelem_I2;
    public static readonly System.Reflection.Emit.OpCode Ldelem_I4;
    public static readonly System.Reflection.Emit.OpCode Ldelem_I8;
    public static readonly System.Reflection.Emit.OpCode Ldelem_R4;
    public static readonly System.Reflection.Emit.OpCode Ldelem_R8;
    public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;
    public static readonly System.Reflection.Emit.OpCode Ldelem_U1;
    public static readonly System.Reflection.Emit.OpCode Ldelem_U2;
    public static readonly System.Reflection.Emit.OpCode Ldelem_U4;
    public static readonly System.Reflection.Emit.OpCode Ldelema;
    public static readonly System.Reflection.Emit.OpCode Ldfld;
    public static readonly System.Reflection.Emit.OpCode Ldflda;
    public static readonly System.Reflection.Emit.OpCode Ldftn;
    public static readonly System.Reflection.Emit.OpCode Ldind_I;
    public static readonly System.Reflection.Emit.OpCode Ldind_I1;
    public static readonly System.Reflection.Emit.OpCode Ldind_I2;
    public static readonly System.Reflection.Emit.OpCode Ldind_I4;
    public static readonly System.Reflection.Emit.OpCode Ldind_I8;
    public static readonly System.Reflection.Emit.OpCode Ldind_R4;
    public static readonly System.Reflection.Emit.OpCode Ldind_R8;
    public static readonly System.Reflection.Emit.OpCode Ldind_Ref;
    public static readonly System.Reflection.Emit.OpCode Ldind_U1;
    public static readonly System.Reflection.Emit.OpCode Ldind_U2;
    public static readonly System.Reflection.Emit.OpCode Ldind_U4;
    public static readonly System.Reflection.Emit.OpCode Ldlen;
    public static readonly System.Reflection.Emit.OpCode Ldloc;
    public static readonly System.Reflection.Emit.OpCode Ldloc_0;
    public static readonly System.Reflection.Emit.OpCode Ldloc_1;
    public static readonly System.Reflection.Emit.OpCode Ldloc_2;
    public static readonly System.Reflection.Emit.OpCode Ldloc_3;
    public static readonly System.Reflection.Emit.OpCode Ldloc_S;
    public static readonly System.Reflection.Emit.OpCode Ldloca;
    public static readonly System.Reflection.Emit.OpCode Ldloca_S;
    public static readonly System.Reflection.Emit.OpCode Ldnull;
    public static readonly System.Reflection.Emit.OpCode Ldobj;
    public static readonly System.Reflection.Emit.OpCode Ldsfld;
    public static readonly System.Reflection.Emit.OpCode Ldsflda;
    public static readonly System.Reflection.Emit.OpCode Ldstr;
    public static readonly System.Reflection.Emit.OpCode Ldtoken;
    public static readonly System.Reflection.Emit.OpCode Ldvirtftn;
    public static readonly System.Reflection.Emit.OpCode Leave;
    public static readonly System.Reflection.Emit.OpCode Leave_S;
    public static readonly System.Reflection.Emit.OpCode Localloc;
    public static readonly System.Reflection.Emit.OpCode Mkrefany;
    public static readonly System.Reflection.Emit.OpCode Mul;
    public static readonly System.Reflection.Emit.OpCode Mul_Ovf;
    public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;
    public static readonly System.Reflection.Emit.OpCode Neg;
    public static readonly System.Reflection.Emit.OpCode Newarr;
    public static readonly System.Reflection.Emit.OpCode Newobj;
    public static readonly System.Reflection.Emit.OpCode Nop;
    public static readonly System.Reflection.Emit.OpCode Not;
    public static readonly System.Reflection.Emit.OpCode Or;
    public static readonly System.Reflection.Emit.OpCode Pop;
    public static readonly System.Reflection.Emit.OpCode Prefix1;
    public static readonly System.Reflection.Emit.OpCode Prefix2;
    public static readonly System.Reflection.Emit.OpCode Prefix3;
    public static readonly System.Reflection.Emit.OpCode Prefix4;
    public static readonly System.Reflection.Emit.OpCode Prefix5;
    public static readonly System.Reflection.Emit.OpCode Prefix6;
    public static readonly System.Reflection.Emit.OpCode Prefix7;
    public static readonly System.Reflection.Emit.OpCode Prefixref;
    public static readonly System.Reflection.Emit.OpCode Readonly;
    public static readonly System.Reflection.Emit.OpCode Refanytype;
    public static readonly System.Reflection.Emit.OpCode Refanyval;
    public static readonly System.Reflection.Emit.OpCode Rem;
    public static readonly System.Reflection.Emit.OpCode Rem_Un;
    public static readonly System.Reflection.Emit.OpCode Ret;
    public static readonly System.Reflection.Emit.OpCode Rethrow;
    public static readonly System.Reflection.Emit.OpCode Shl;
    public static readonly System.Reflection.Emit.OpCode Shr;
    public static readonly System.Reflection.Emit.OpCode Shr_Un;
    public static readonly System.Reflection.Emit.OpCode Sizeof;
    public static readonly System.Reflection.Emit.OpCode Starg;
    public static readonly System.Reflection.Emit.OpCode Starg_S;
    public static readonly System.Reflection.Emit.OpCode Stelem;
    public static readonly System.Reflection.Emit.OpCode Stelem_I;
    public static readonly System.Reflection.Emit.OpCode Stelem_I1;
    public static readonly System.Reflection.Emit.OpCode Stelem_I2;
    public static readonly System.Reflection.Emit.OpCode Stelem_I4;
    public static readonly System.Reflection.Emit.OpCode Stelem_I8;
    public static readonly System.Reflection.Emit.OpCode Stelem_R4;
    public static readonly System.Reflection.Emit.OpCode Stelem_R8;
    public static readonly System.Reflection.Emit.OpCode Stelem_Ref;
    public static readonly System.Reflection.Emit.OpCode Stfld;
    public static readonly System.Reflection.Emit.OpCode Stind_I;
    public static readonly System.Reflection.Emit.OpCode Stind_I1;
    public static readonly System.Reflection.Emit.OpCode Stind_I2;
    public static readonly System.Reflection.Emit.OpCode Stind_I4;
    public static readonly System.Reflection.Emit.OpCode Stind_I8;
    public static readonly System.Reflection.Emit.OpCode Stind_R4;
    public static readonly System.Reflection.Emit.OpCode Stind_R8;
    public static readonly System.Reflection.Emit.OpCode Stind_Ref;
    public static readonly System.Reflection.Emit.OpCode Stloc;
    public static readonly System.Reflection.Emit.OpCode Stloc_0;
    public static readonly System.Reflection.Emit.OpCode Stloc_1;
    public static readonly System.Reflection.Emit.OpCode Stloc_2;
    public static readonly System.Reflection.Emit.OpCode Stloc_3;
    public static readonly System.Reflection.Emit.OpCode Stloc_S;
    public static readonly System.Reflection.Emit.OpCode Stobj;
    public static readonly System.Reflection.Emit.OpCode Stsfld;
    public static readonly System.Reflection.Emit.OpCode Sub;
    public static readonly System.Reflection.Emit.OpCode Sub_Ovf;
    public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;
    public static readonly System.Reflection.Emit.OpCode Switch;
    public static readonly System.Reflection.Emit.OpCode Tailcall;
    public static readonly System.Reflection.Emit.OpCode Throw;
    public static readonly System.Reflection.Emit.OpCode Unaligned;
    public static readonly System.Reflection.Emit.OpCode Unbox;
    public static readonly System.Reflection.Emit.OpCode Unbox_Any;
    public static readonly System.Reflection.Emit.OpCode Volatile;
    public static readonly System.Reflection.Emit.OpCode Xor;
    public static bool TakesSingleByteArgument(System.Reflection.Emit.OpCode inst) { return default(bool); }
  }
  public enum OpCodeType {
    Macro = 1,
    Nternal = 2,
    Objmodel = 3,
    Prefix = 4,
    Primitive = 5,
  }
  public enum OperandType {
    InlineBrTarget = 0,
    InlineField = 1,
    InlineI = 2,
    InlineI8 = 3,
    InlineMethod = 4,
    InlineNone = 5,
    InlineR = 7,
    InlineSig = 9,
    InlineString = 10,
    InlineSwitch = 11,
    InlineTok = 12,
    InlineType = 13,
    InlineVar = 14,
    ShortInlineBrTarget = 15,
    ShortInlineI = 16,
    ShortInlineR = 17,
    ShortInlineVar = 18,
  }
  public enum PackingSize {
    Size1 = 1,
    Size128 = 128,
    Size16 = 16,
    Size2 = 2,
    Size32 = 32,
    Size4 = 4,
    Size64 = 64,
    Size8 = 8,
    Unspecified = 0,
  }
  public enum StackBehaviour {
    Pop0 = 0,
    Pop1 = 1,
    Pop1_pop1 = 2,
    Popi = 3,
    Popi_pop1 = 4,
    Popi_popi = 5,
    Popi_popi_popi = 7,
    Popi_popi8 = 6,
    Popi_popr4 = 8,
    Popi_popr8 = 9,
    Popref = 10,
    Popref_pop1 = 11,
    Popref_popi = 12,
    Popref_popi_pop1 = 28,
    Popref_popi_popi = 13,
    Popref_popi_popi8 = 14,
    Popref_popi_popr4 = 15,
    Popref_popi_popr8 = 16,
    Popref_popi_popref = 17,
    Push0 = 18,
    Push1 = 19,
    Push1_push1 = 20,
    Pushi = 21,
    Pushi8 = 22,
    Pushr4 = 23,
    Pushr8 = 24,
    Pushref = 25,
    Varpop = 26,
    Varpush = 27,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Reflection.TypeExtensions")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Reflection.TypeExtensions")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Reflection.TypeExtensions")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Reflection {
  public static partial class AssemblyExtensions {
    public static System.Type[] GetExportedTypes(this System.Reflection.Assembly assembly) { return default(System.Type[]); }
    public static System.Reflection.Module[] GetModules(this System.Reflection.Assembly assembly) { return default(System.Reflection.Module[]); }
    public static System.Type[] GetTypes(this System.Reflection.Assembly assembly) { return default(System.Type[]); }
  }
  public static partial class EventInfoExtensions {
    public static System.Reflection.MethodInfo GetAddMethod(this System.Reflection.EventInfo eventInfo) { return default(System.Reflection.MethodInfo); }
    public static System.Reflection.MethodInfo GetAddMethod(this System.Reflection.EventInfo eventInfo, bool nonPublic) { return default(System.Reflection.MethodInfo); }
    public static System.Reflection.MethodInfo GetRaiseMethod(this System.Reflection.EventInfo eventInfo) { return default(System.Reflection.MethodInfo); }
    public static System.Reflection.MethodInfo GetRaiseMethod(this System.Reflection.EventInfo eventInfo, bool nonPublic) { return default(System.Reflection.MethodInfo); }
    public static System.Reflection.MethodInfo GetRemoveMethod(this System.Reflection.EventInfo eventInfo) { return default(System.Reflection.MethodInfo); }
    public static System.Reflection.MethodInfo GetRemoveMethod(this System.Reflection.EventInfo eventInfo, bool nonPublic) { return default(System.Reflection.MethodInfo); }
  }
  public static partial class MemberInfoExtensions {
    public static int GetMetadataToken(this System.Reflection.MemberInfo member) { return default(int); }
    public static bool HasMetadataToken(this System.Reflection.MemberInfo member) { return default(bool); }
  }
  public static partial class MethodInfoExtensions {
    public static System.Reflection.MethodInfo GetBaseDefinition(this System.Reflection.MethodInfo method) { return default(System.Reflection.MethodInfo); }
  }
  public static partial class ModuleExtensions {
    public static System.Guid GetModuleVersionId(this System.Reflection.Module module) { return default(System.Guid); }
    public static bool HasModuleVersionId(this System.Reflection.Module module) { return default(bool); }
  }
  public static partial class PropertyInfoExtensions {
    public static System.Reflection.MethodInfo[] GetAccessors(this System.Reflection.PropertyInfo property) { return default(System.Reflection.MethodInfo[]); }
    public static System.Reflection.MethodInfo[] GetAccessors(this System.Reflection.PropertyInfo property, bool nonPublic) { return default(System.Reflection.MethodInfo[]); }
    public static System.Reflection.MethodInfo GetGetMethod(this System.Reflection.PropertyInfo property) { return default(System.Reflection.MethodInfo); }
    public static System.Reflection.MethodInfo GetGetMethod(this System.Reflection.PropertyInfo property, bool nonPublic) { return default(System.Reflection.MethodInfo); }
    public static System.Reflection.MethodInfo GetSetMethod(this System.Reflection.PropertyInfo property) { return default(System.Reflection.MethodInfo); }
    public static System.Reflection.MethodInfo GetSetMethod(this System.Reflection.PropertyInfo property, bool nonPublic) { return default(System.Reflection.MethodInfo); }
  }
  public static partial class TypeExtensions {
    public static System.Reflection.ConstructorInfo GetConstructor(this System.Type type, System.Type[] types) { return default(System.Reflection.ConstructorInfo); }
    public static System.Reflection.ConstructorInfo[] GetConstructors(this System.Type type) { return default(System.Reflection.ConstructorInfo[]); }
    public static System.Reflection.ConstructorInfo[] GetConstructors(this System.Type type, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.ConstructorInfo[]); }
    public static System.Reflection.MemberInfo[] GetDefaultMembers(this System.Type type) { return default(System.Reflection.MemberInfo[]); }
    public static System.Reflection.EventInfo GetEvent(this System.Type type, string name) { return default(System.Reflection.EventInfo); }
    public static System.Reflection.EventInfo GetEvent(this System.Type type, string name, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.EventInfo); }
    public static System.Reflection.EventInfo[] GetEvents(this System.Type type) { return default(System.Reflection.EventInfo[]); }
    public static System.Reflection.EventInfo[] GetEvents(this System.Type type, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.EventInfo[]); }
    public static System.Reflection.FieldInfo GetField(this System.Type type, string name) { return default(System.Reflection.FieldInfo); }
    public static System.Reflection.FieldInfo GetField(this System.Type type, string name, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.FieldInfo); }
    public static System.Reflection.FieldInfo[] GetFields(this System.Type type) { return default(System.Reflection.FieldInfo[]); }
    public static System.Reflection.FieldInfo[] GetFields(this System.Type type, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.FieldInfo[]); }
    public static System.Type[] GetGenericArguments(this System.Type type) { return default(System.Type[]); }
    public static System.Type[] GetInterfaces(this System.Type type) { return default(System.Type[]); }
    public static System.Reflection.MemberInfo[] GetMember(this System.Type type, string name) { return default(System.Reflection.MemberInfo[]); }
    public static System.Reflection.MemberInfo[] GetMember(this System.Type type, string name, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.MemberInfo[]); }
    public static System.Reflection.MemberInfo[] GetMembers(this System.Type type) { return default(System.Reflection.MemberInfo[]); }
    public static System.Reflection.MemberInfo[] GetMembers(this System.Type type, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.MemberInfo[]); }
    public static System.Reflection.MethodInfo GetMethod(this System.Type type, string name) { return default(System.Reflection.MethodInfo); }
    public static System.Reflection.MethodInfo GetMethod(this System.Type type, string name, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.MethodInfo); }
    public static System.Reflection.MethodInfo GetMethod(this System.Type type, string name, System.Type[] types) { return default(System.Reflection.MethodInfo); }
    public static System.Reflection.MethodInfo[] GetMethods(this System.Type type) { return default(System.Reflection.MethodInfo[]); }
    public static System.Reflection.MethodInfo[] GetMethods(this System.Type type, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.MethodInfo[]); }
    public static System.Type GetNestedType(this System.Type type, string name, System.Reflection.BindingFlags bindingAttr) { return default(System.Type); }
    public static System.Type[] GetNestedTypes(this System.Type type, System.Reflection.BindingFlags bindingAttr) { return default(System.Type[]); }
    public static System.Reflection.PropertyInfo[] GetProperties(this System.Type type) { return default(System.Reflection.PropertyInfo[]); }
    public static System.Reflection.PropertyInfo[] GetProperties(this System.Type type, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.PropertyInfo[]); }
    public static System.Reflection.PropertyInfo GetProperty(this System.Type type, string name) { return default(System.Reflection.PropertyInfo); }
    public static System.Reflection.PropertyInfo GetProperty(this System.Type type, string name, System.Reflection.BindingFlags bindingAttr) { return default(System.Reflection.PropertyInfo); }
    public static System.Reflection.PropertyInfo GetProperty(this System.Type type, string name, System.Type returnType) { return default(System.Reflection.PropertyInfo); }
    public static System.Reflection.PropertyInfo GetProperty(this System.Type type, string name, System.Type returnType, System.Type[] types) { return default(System.Reflection.PropertyInfo); }
    public static bool IsAssignableFrom(this System.Type type, System.Type c) { return default(bool); }
    public static bool IsInstanceOfType(this System.Type type, object o) { return default(bool); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Resources.ResourceManager")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Resources.ResourceManager")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Resources.ResourceManager")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Resources {
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public partial class MissingManifestResourceException : System.Exception {
    public MissingManifestResourceException() { }
    public MissingManifestResourceException(string message) { }
    public MissingManifestResourceException(string message, System.Exception inner) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), AllowMultiple=false)]
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class NeutralResourcesLanguageAttribute : System.Attribute {
    public NeutralResourcesLanguageAttribute(string cultureName) { }
    public string CultureName { get { return default(string); } }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public partial class ResourceManager {
    public ResourceManager(string baseName, System.Reflection.Assembly assembly) { }
    public ResourceManager(System.Type resourceSource) { }
    public string GetString(string name) { return default(string); }
    public virtual string GetString(string name, System.Globalization.CultureInfo culture) { return default(string); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), AllowMultiple=false)]
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public sealed partial class SatelliteContractVersionAttribute : System.Attribute {
    public SatelliteContractVersionAttribute(string version) { }
    public string Version { get { return default(string); } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Runtime")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Runtime")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Runtime")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.InternalsVisibleToAttribute("System.Private.Reflection.Extensibility, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System {
  public delegate void Action();
  public delegate void Action<in T>(T obj);
  public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
  public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
  public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
  public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
  public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
  public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
  public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, in T16>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
  public delegate void Action<in T1, in T2>(T1 arg1, T2 arg2);
  public delegate void Action<in T1, in T2, in T3>(T1 arg1, T2 arg2, T3 arg3);
  public delegate void Action<in T1, in T2, in T3, in T4>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
  public delegate void Action<in T1, in T2, in T3, in T4, in T5>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
  public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
  public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
  public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
  public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
  public static partial class Activator {
    public static object CreateInstance(System.Type type) { return default(object); }
    public static object CreateInstance(System.Type type, bool nonPublic) { return default(object); }
    public static object CreateInstance(System.Type type, params object[] args) { return default(object); }
    public static T CreateInstance<T>() { return default(T); }
  }
  public partial class ArgumentException : System.Exception {
    public ArgumentException() { }
    public ArgumentException(string message) { }
    public ArgumentException(string message, System.Exception innerException) { }
    public ArgumentException(string message, string paramName) { }
    public ArgumentException(string message, string paramName, System.Exception innerException) { }
    public override string Message { get { return default(string); } }
    public virtual string ParamName { get { return default(string); } }
  }
  public partial class ArgumentNullException : System.ArgumentException {
    public ArgumentNullException() { }
    public ArgumentNullException(string paramName) { }
    public ArgumentNullException(string message, System.Exception innerException) { }
    public ArgumentNullException(string paramName, string message) { }
  }
  public partial class ArgumentOutOfRangeException : System.ArgumentException {
    public ArgumentOutOfRangeException() { }
    public ArgumentOutOfRangeException(string paramName) { }
    public ArgumentOutOfRangeException(string message, System.Exception innerException) { }
    public ArgumentOutOfRangeException(string paramName, object actualValue, string message) { }
    public ArgumentOutOfRangeException(string paramName, string message) { }
    public virtual object ActualValue { get { return default(object); } }
    public override string Message { get { return default(string); } }
  }
  public partial class ArithmeticException : System.Exception {
    public ArithmeticException() { }
    public ArithmeticException(string message) { }
    public ArithmeticException(string message, System.Exception innerException) { }
  }
  public abstract partial class Array : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable {
    internal Array() { }
    public int Length { get { return default(int); } }
    public int Rank { get { return default(int); } }
    int System.Collections.ICollection.Count { get { return default(int); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public static int BinarySearch(System.Array array, int index, int length, object value) { return default(int); }
    public static int BinarySearch(System.Array array, int index, int length, object value, System.Collections.IComparer comparer) { return default(int); }
    public static int BinarySearch(System.Array array, object value) { return default(int); }
    public static int BinarySearch(System.Array array, object value, System.Collections.IComparer comparer) { return default(int); }
    public static int BinarySearch<T>(T[] array, T value) { return default(int); }
    public static int BinarySearch<T>(T[] array, T value, System.Collections.Generic.IComparer<T> comparer) { return default(int); }
    public static int BinarySearch<T>(T[] array, int index, int length, T value) { return default(int); }
    public static int BinarySearch<T>(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer) { return default(int); }
    public static void Clear(System.Array array, int index, int length) { }
    public object Clone() { return default(object); }
    public static void ConstrainedCopy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length) { }
    public static void Copy(System.Array sourceArray, System.Array destinationArray, int length) { }
    public static void Copy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length) { }
    public void CopyTo(System.Array array, int index) { }
    public static System.Array CreateInstance(System.Type elementType, int length) { return default(System.Array); }
    public static System.Array CreateInstance(System.Type elementType, params int[] lengths) { return default(System.Array); }
    public static System.Array CreateInstance(System.Type elementType, int[] lengths, int[] lowerBounds) { return default(System.Array); }
    public static T[] Empty<T>() { return default(T[]); }
    public static bool Exists<T>(T[] array, System.Predicate<T> match) { return default(bool); }
    public static T Find<T>(T[] array, System.Predicate<T> match) { return default(T); }
    public static T[] FindAll<T>(T[] array, System.Predicate<T> match) { return default(T[]); }
    public static int FindIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match) { return default(int); }
    public static int FindIndex<T>(T[] array, int startIndex, System.Predicate<T> match) { return default(int); }
    public static int FindIndex<T>(T[] array, System.Predicate<T> match) { return default(int); }
    public static T FindLast<T>(T[] array, System.Predicate<T> match) { return default(T); }
    public static int FindLastIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match) { return default(int); }
    public static int FindLastIndex<T>(T[] array, int startIndex, System.Predicate<T> match) { return default(int); }
    public static int FindLastIndex<T>(T[] array, System.Predicate<T> match) { return default(int); }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int GetLength(int dimension) { return default(int); }
    public int GetLowerBound(int dimension) { return default(int); }
    public int GetUpperBound(int dimension) { return default(int); }
    public object GetValue(int index) { return default(object); }
    public object GetValue(params int[] indices) { return default(object); }
    public static int IndexOf(System.Array array, object value) { return default(int); }
    public static int IndexOf(System.Array array, object value, int startIndex) { return default(int); }
    public static int IndexOf(System.Array array, object value, int startIndex, int count) { return default(int); }
    public static int IndexOf<T>(T[] array, T value) { return default(int); }
    public static int IndexOf<T>(T[] array, T value, int startIndex) { return default(int); }
    public static int IndexOf<T>(T[] array, T value, int startIndex, int count) { return default(int); }
    public void Initialize() { }
    public static int LastIndexOf(System.Array array, object value) { return default(int); }
    public static int LastIndexOf(System.Array array, object value, int startIndex) { return default(int); }
    public static int LastIndexOf(System.Array array, object value, int startIndex, int count) { return default(int); }
    public static int LastIndexOf<T>(T[] array, T value) { return default(int); }
    public static int LastIndexOf<T>(T[] array, T value, int startIndex) { return default(int); }
    public static int LastIndexOf<T>(T[] array, T value, int startIndex, int count) { return default(int); }
    public static void Resize<T>(ref T[] array, int newSize) { }
    public static void Reverse(System.Array array) { }
    public static void Reverse(System.Array array, int index, int length) { }
    public void SetValue(object value, int index) { }
    public void SetValue(object value, params int[] indices) { }
    public static void Sort(System.Array array) { }
    public static void Sort(System.Array keys, System.Array items) { }
    public static void Sort(System.Array keys, System.Array items, System.Collections.IComparer comparer) { }
    public static void Sort(System.Array keys, System.Array items, int index, int length) { }
    public static void Sort(System.Array keys, System.Array items, int index, int length, System.Collections.IComparer comparer) { }
    public static void Sort(System.Array array, System.Collections.IComparer comparer) { }
    public static void Sort(System.Array array, int index, int length) { }
    public static void Sort(System.Array array, int index, int length, System.Collections.IComparer comparer) { }
    public static void Sort<T>(T[] array) { }
    public static void Sort<T>(T[] array, System.Collections.Generic.IComparer<T> comparer) { }
    public static void Sort<T>(T[] array, System.Comparison<T> comparison) { }
    public static void Sort<T>(T[] array, int index, int length) { }
    public static void Sort<T>(T[] array, int index, int length, System.Collections.Generic.IComparer<T> comparer) { }
    public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items) { }
    public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, System.Collections.Generic.IComparer<TKey> comparer) { }
    public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length) { }
    public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer<TKey> comparer) { }
    int System.Collections.IList.Add(object value) { return default(int); }
    void System.Collections.IList.Clear() { }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    void System.Collections.IList.RemoveAt(int index) { }
    int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer) { return default(int); }
    bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer) { return default(bool); }
    int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { return default(int); }
    public static bool TrueForAll<T>(T[] array, System.Predicate<T> match) { return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct ArraySegment<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.IEnumerable {
    public ArraySegment(T[] array) { throw new System.NotImplementedException(); }
    public ArraySegment(T[] array, int offset, int count) { throw new System.NotImplementedException(); }
    public T[] Array { get { return default(T[]); } }
    public int Count { get { return default(int); } }
    public int Offset { get { return default(int); } }
    bool System.Collections.Generic.ICollection<T>.IsReadOnly { get { return default(bool); } }
    T System.Collections.Generic.IList<T>.this[int index] { get { return default(T); } set { } }
    T System.Collections.Generic.IReadOnlyList<T>.this[int index] { get { return default(T); } }
    public bool Equals(System.ArraySegment<T> obj) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.ArraySegment<T> a, System.ArraySegment<T> b) { return default(bool); }
    public static bool operator !=(System.ArraySegment<T> a, System.ArraySegment<T> b) { return default(bool); }
    void System.Collections.Generic.ICollection<T>.Add(T item) { }
    void System.Collections.Generic.ICollection<T>.Clear() { }
    bool System.Collections.Generic.ICollection<T>.Contains(T item) { return default(bool); }
    void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex) { }
    bool System.Collections.Generic.ICollection<T>.Remove(T item) { return default(bool); }
    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    int System.Collections.Generic.IList<T>.IndexOf(T item) { return default(int); }
    void System.Collections.Generic.IList<T>.Insert(int index, T item) { }
    void System.Collections.Generic.IList<T>.RemoveAt(int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public partial class ArrayTypeMismatchException : System.Exception {
    public ArrayTypeMismatchException() { }
    public ArrayTypeMismatchException(string message) { }
    public ArrayTypeMismatchException(string message, System.Exception innerException) { }
  }
  public delegate void AsyncCallback(System.IAsyncResult ar);
  [System.AttributeUsageAttribute((System.AttributeTargets)(32767), Inherited=true, AllowMultiple=false)]
  public abstract partial class Attribute {
    protected Attribute() { }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  [System.FlagsAttribute]
  public enum AttributeTargets {
    All = 32767,
    Assembly = 1,
    Class = 4,
    Constructor = 32,
    Delegate = 4096,
    Enum = 16,
    Event = 512,
    Field = 256,
    GenericParameter = 16384,
    Interface = 1024,
    Method = 64,
    Module = 2,
    Parameter = 2048,
    Property = 128,
    ReturnValue = 8192,
    Struct = 8,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4), Inherited=true)]
  public sealed partial class AttributeUsageAttribute : System.Attribute {
    public AttributeUsageAttribute(System.AttributeTargets validOn) { }
    public bool AllowMultiple { get { return default(bool); } set { } }
    public bool Inherited { get { return default(bool); } set { } }
    public System.AttributeTargets ValidOn { get { return default(System.AttributeTargets); } }
  }
  public partial class BadImageFormatException : System.Exception {
    public BadImageFormatException() { }
    public BadImageFormatException(string message) { }
    public BadImageFormatException(string message, System.Exception inner) { }
    public BadImageFormatException(string message, string fileName) { }
    public BadImageFormatException(string message, string fileName, System.Exception inner) { }
    public string FileName { get { return default(string); } }
    public override string Message { get { return default(string); } }
    public override string ToString() { return default(string); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Boolean : System.IComparable, System.IComparable<bool>, System.IConvertible, System.IEquatable<bool> {
    public static readonly string FalseString;
    public static readonly string TrueString;
    public int CompareTo(bool value) { return default(int); }
    public bool Equals(bool obj) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool Parse(string value) { return default(bool); }
    int System.IComparable.CompareTo(object obj) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    string System.IConvertible.ToString(System.IFormatProvider provider) { return default(string); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public override string ToString() { return default(string); }
    public static bool TryParse(string value, out bool result) { result = default(bool); return default(bool); }
  }
  public static partial class Buffer {
    public static void BlockCopy(System.Array src, int srcOffset, System.Array dst, int dstOffset, int count) { }
    public static int ByteLength(System.Array array) { return default(int); }
    public static byte GetByte(System.Array array, int index) { return default(byte); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe static void MemoryCopy(void* source, void* destination, long destinationSizeInBytes, long sourceBytesToCopy) { }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe static void MemoryCopy(void* source, void* destination, ulong destinationSizeInBytes, ulong sourceBytesToCopy) { }
    public static void SetByte(System.Array array, int index, byte value) { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Byte : System.IComparable, System.IComparable<byte>, System.IConvertible, System.IEquatable<byte>, System.IFormattable {
    public const byte MaxValue = (byte)255;
    public const byte MinValue = (byte)0;
    public int CompareTo(byte value) { return default(int); }
    public bool Equals(byte obj) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static byte Parse(string s) { return default(byte); }
    public static byte Parse(string s, System.Globalization.NumberStyles style) { return default(byte); }
    public static byte Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider) { return default(byte); }
    public static byte Parse(string s, System.IFormatProvider provider) { return default(byte); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
    public static bool TryParse(string s, out byte result) { result = default(byte); return default(bool); }
    public static bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out byte result) { result = default(byte); return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Char : System.IComparable, System.IComparable<char>, System.IConvertible, System.IEquatable<char> {
    public const char MaxValue = '\uFFFF';
    public const char MinValue = '\0';
    public int CompareTo(char value) { return default(int); }
    public static string ConvertFromUtf32(int utf32) { return default(string); }
    public static int ConvertToUtf32(char highSurrogate, char lowSurrogate) { return default(int); }
    public static int ConvertToUtf32(string s, int index) { return default(int); }
    public bool Equals(char obj) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static double GetNumericValue(char c) { return default(double); }
    public static double GetNumericValue(string s, int index) { return default(double); }
    public static bool IsControl(char c) { return default(bool); }
    public static bool IsControl(string s, int index) { return default(bool); }
    public static bool IsDigit(char c) { return default(bool); }
    public static bool IsDigit(string s, int index) { return default(bool); }
    public static bool IsHighSurrogate(char c) { return default(bool); }
    public static bool IsHighSurrogate(string s, int index) { return default(bool); }
    public static bool IsLetter(char c) { return default(bool); }
    public static bool IsLetter(string s, int index) { return default(bool); }
    public static bool IsLetterOrDigit(char c) { return default(bool); }
    public static bool IsLetterOrDigit(string s, int index) { return default(bool); }
    public static bool IsLower(char c) { return default(bool); }
    public static bool IsLower(string s, int index) { return default(bool); }
    public static bool IsLowSurrogate(char c) { return default(bool); }
    public static bool IsLowSurrogate(string s, int index) { return default(bool); }
    public static bool IsNumber(char c) { return default(bool); }
    public static bool IsNumber(string s, int index) { return default(bool); }
    public static bool IsPunctuation(char c) { return default(bool); }
    public static bool IsPunctuation(string s, int index) { return default(bool); }
    public static bool IsSeparator(char c) { return default(bool); }
    public static bool IsSeparator(string s, int index) { return default(bool); }
    public static bool IsSurrogate(char c) { return default(bool); }
    public static bool IsSurrogate(string s, int index) { return default(bool); }
    public static bool IsSurrogatePair(char highSurrogate, char lowSurrogate) { return default(bool); }
    public static bool IsSurrogatePair(string s, int index) { return default(bool); }
    public static bool IsSymbol(char c) { return default(bool); }
    public static bool IsSymbol(string s, int index) { return default(bool); }
    public static bool IsUpper(char c) { return default(bool); }
    public static bool IsUpper(string s, int index) { return default(bool); }
    public static bool IsWhiteSpace(char c) { return default(bool); }
    public static bool IsWhiteSpace(string s, int index) { return default(bool); }
    public static char Parse(string s) { return default(char); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    string System.IConvertible.ToString(System.IFormatProvider provider) { return default(string); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public static char ToLower(char c) { return default(char); }
    public static char ToLowerInvariant(char c) { return default(char); }
    public override string ToString() { return default(string); }
    public static string ToString(char c) { return default(string); }
    public static char ToUpper(char c) { return default(char); }
    public static char ToUpperInvariant(char c) { return default(char); }
    public static bool TryParse(string s, out char result) { result = default(char); return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(32767), Inherited=true, AllowMultiple=false)]
  public sealed partial class CLSCompliantAttribute : System.Attribute {
    public CLSCompliantAttribute(bool isCompliant) { }
    public bool IsCompliant { get { return default(bool); } }
  }
  public delegate int Comparison<in T>(T x, T y);
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Size=1)]
  public partial struct DateTime : System.IComparable, System.IComparable<System.DateTime>, System.IConvertible, System.IEquatable<System.DateTime>, System.IFormattable {
    public static readonly System.DateTime MaxValue;
    public static readonly System.DateTime MinValue;
    public DateTime(int year, int month, int day) { throw new System.NotImplementedException(); }
    public DateTime(int year, int month, int day, int hour, int minute, int second) { throw new System.NotImplementedException(); }
    public DateTime(int year, int month, int day, int hour, int minute, int second, System.DateTimeKind kind) { throw new System.NotImplementedException(); }
    public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond) { throw new System.NotImplementedException(); }
    public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System.DateTimeKind kind) { throw new System.NotImplementedException(); }
    public DateTime(long ticks) { throw new System.NotImplementedException(); }
    public DateTime(long ticks, System.DateTimeKind kind) { throw new System.NotImplementedException(); }
    public System.DateTime Date { get { return default(System.DateTime); } }
    public int Day { get { return default(int); } }
    public System.DayOfWeek DayOfWeek { get { return default(System.DayOfWeek); } }
    public int DayOfYear { get { return default(int); } }
    public int Hour { get { return default(int); } }
    public System.DateTimeKind Kind { get { return default(System.DateTimeKind); } }
    public int Millisecond { get { return default(int); } }
    public int Minute { get { return default(int); } }
    public int Month { get { return default(int); } }
    public static System.DateTime Now { get { return default(System.DateTime); } }
    public int Second { get { return default(int); } }
    public long Ticks { get { return default(long); } }
    public System.TimeSpan TimeOfDay { get { return default(System.TimeSpan); } }
    public static System.DateTime Today { get { return default(System.DateTime); } }
    public static System.DateTime UtcNow { get { return default(System.DateTime); } }
    public int Year { get { return default(int); } }
    public System.DateTime Add(System.TimeSpan value) { return default(System.DateTime); }
    public System.DateTime AddDays(double value) { return default(System.DateTime); }
    public System.DateTime AddHours(double value) { return default(System.DateTime); }
    public System.DateTime AddMilliseconds(double value) { return default(System.DateTime); }
    public System.DateTime AddMinutes(double value) { return default(System.DateTime); }
    public System.DateTime AddMonths(int months) { return default(System.DateTime); }
    public System.DateTime AddSeconds(double value) { return default(System.DateTime); }
    public System.DateTime AddTicks(long value) { return default(System.DateTime); }
    public System.DateTime AddYears(int value) { return default(System.DateTime); }
    public static int Compare(System.DateTime t1, System.DateTime t2) { return default(int); }
    public int CompareTo(System.DateTime value) { return default(int); }
    public static int DaysInMonth(int year, int month) { return default(int); }
    public bool Equals(System.DateTime value) { return default(bool); }
    public static bool Equals(System.DateTime t1, System.DateTime t2) { return default(bool); }
    public override bool Equals(object value) { return default(bool); }
    public static System.DateTime FromBinary(long dateData) { return default(System.DateTime); }
    public static System.DateTime FromFileTime(long fileTime) { return default(System.DateTime); }
    public static System.DateTime FromFileTimeUtc(long fileTime) { return default(System.DateTime); }
    public string[] GetDateTimeFormats() { return default(string[]); }
    public string[] GetDateTimeFormats(char format) { return default(string[]); }
    public string[] GetDateTimeFormats(char format, System.IFormatProvider provider) { return default(string[]); }
    public string[] GetDateTimeFormats(System.IFormatProvider provider) { return default(string[]); }
    public override int GetHashCode() { return default(int); }
    public bool IsDaylightSavingTime() { return default(bool); }
    public static bool IsLeapYear(int year) { return default(bool); }
    public static System.DateTime operator +(System.DateTime d, System.TimeSpan t) { return default(System.DateTime); }
    public static bool operator ==(System.DateTime d1, System.DateTime d2) { return default(bool); }
    public static bool operator >(System.DateTime t1, System.DateTime t2) { return default(bool); }
    public static bool operator >=(System.DateTime t1, System.DateTime t2) { return default(bool); }
    public static bool operator !=(System.DateTime d1, System.DateTime d2) { return default(bool); }
    public static bool operator <(System.DateTime t1, System.DateTime t2) { return default(bool); }
    public static bool operator <=(System.DateTime t1, System.DateTime t2) { return default(bool); }
    public static System.TimeSpan operator -(System.DateTime d1, System.DateTime d2) { return default(System.TimeSpan); }
    public static System.DateTime operator -(System.DateTime d, System.TimeSpan t) { return default(System.DateTime); }
    public static System.DateTime Parse(string s) { return default(System.DateTime); }
    public static System.DateTime Parse(string s, System.IFormatProvider provider) { return default(System.DateTime); }
    public static System.DateTime Parse(string s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles) { return default(System.DateTime); }
    public static System.DateTime ParseExact(string s, string format, System.IFormatProvider provider) { return default(System.DateTime); }
    public static System.DateTime ParseExact(string s, string format, System.IFormatProvider provider, System.Globalization.DateTimeStyles style) { return default(System.DateTime); }
    public static System.DateTime ParseExact(string s, string[] formats, System.IFormatProvider provider, System.Globalization.DateTimeStyles style) { return default(System.DateTime); }
    public static System.DateTime SpecifyKind(System.DateTime value, System.DateTimeKind kind) { return default(System.DateTime); }
    public System.TimeSpan Subtract(System.DateTime value) { return default(System.TimeSpan); }
    public System.DateTime Subtract(System.TimeSpan value) { return default(System.DateTime); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public long ToBinary() { return default(long); }
    public long ToFileTime() { return default(long); }
    public long ToFileTimeUtc() { return default(long); }
    public System.DateTime ToLocalTime() { return default(System.DateTime); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
    public System.DateTime ToUniversalTime() { return default(System.DateTime); }
    public static bool TryParse(string s, out System.DateTime result) { result = default(System.DateTime); return default(bool); }
    public static bool TryParse(string s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles, out System.DateTime result) { result = default(System.DateTime); return default(bool); }
    public static bool TryParseExact(string s, string format, System.IFormatProvider provider, System.Globalization.DateTimeStyles style, out System.DateTime result) { result = default(System.DateTime); return default(bool); }
    public static bool TryParseExact(string s, string[] formats, System.IFormatProvider provider, System.Globalization.DateTimeStyles style, out System.DateTime result) { result = default(System.DateTime); return default(bool); }
  }
  public enum DateTimeKind {
    Local = 2,
    Unspecified = 0,
    Utc = 1,
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Size=1)]
  public partial struct DateTimeOffset : System.IComparable, System.IComparable<System.DateTimeOffset>, System.IEquatable<System.DateTimeOffset>, System.IFormattable {
    public static readonly System.DateTimeOffset MaxValue;
    public static readonly System.DateTimeOffset MinValue;
    public DateTimeOffset(System.DateTime dateTime) { throw new System.NotImplementedException(); }
    public DateTimeOffset(System.DateTime dateTime, System.TimeSpan offset) { throw new System.NotImplementedException(); }
    public DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System.TimeSpan offset) { throw new System.NotImplementedException(); }
    public DateTimeOffset(int year, int month, int day, int hour, int minute, int second, System.TimeSpan offset) { throw new System.NotImplementedException(); }
    public DateTimeOffset(long ticks, System.TimeSpan offset) { throw new System.NotImplementedException(); }
    public System.DateTime Date { get { return default(System.DateTime); } }
    public System.DateTime DateTime { get { return default(System.DateTime); } }
    public int Day { get { return default(int); } }
    public System.DayOfWeek DayOfWeek { get { return default(System.DayOfWeek); } }
    public int DayOfYear { get { return default(int); } }
    public int Hour { get { return default(int); } }
    public System.DateTime LocalDateTime { get { return default(System.DateTime); } }
    public int Millisecond { get { return default(int); } }
    public int Minute { get { return default(int); } }
    public int Month { get { return default(int); } }
    public static System.DateTimeOffset Now { get { return default(System.DateTimeOffset); } }
    public System.TimeSpan Offset { get { return default(System.TimeSpan); } }
    public int Second { get { return default(int); } }
    public long Ticks { get { return default(long); } }
    public System.TimeSpan TimeOfDay { get { return default(System.TimeSpan); } }
    public System.DateTime UtcDateTime { get { return default(System.DateTime); } }
    public static System.DateTimeOffset UtcNow { get { return default(System.DateTimeOffset); } }
    public long UtcTicks { get { return default(long); } }
    public int Year { get { return default(int); } }
    public System.DateTimeOffset Add(System.TimeSpan timeSpan) { return default(System.DateTimeOffset); }
    public System.DateTimeOffset AddDays(double days) { return default(System.DateTimeOffset); }
    public System.DateTimeOffset AddHours(double hours) { return default(System.DateTimeOffset); }
    public System.DateTimeOffset AddMilliseconds(double milliseconds) { return default(System.DateTimeOffset); }
    public System.DateTimeOffset AddMinutes(double minutes) { return default(System.DateTimeOffset); }
    public System.DateTimeOffset AddMonths(int months) { return default(System.DateTimeOffset); }
    public System.DateTimeOffset AddSeconds(double seconds) { return default(System.DateTimeOffset); }
    public System.DateTimeOffset AddTicks(long ticks) { return default(System.DateTimeOffset); }
    public System.DateTimeOffset AddYears(int years) { return default(System.DateTimeOffset); }
    public static int Compare(System.DateTimeOffset first, System.DateTimeOffset second) { return default(int); }
    public int CompareTo(System.DateTimeOffset other) { return default(int); }
    public bool Equals(System.DateTimeOffset other) { return default(bool); }
    public static bool Equals(System.DateTimeOffset first, System.DateTimeOffset second) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public bool EqualsExact(System.DateTimeOffset other) { return default(bool); }
    public static System.DateTimeOffset FromFileTime(long fileTime) { return default(System.DateTimeOffset); }
    public static System.DateTimeOffset FromUnixTimeMilliseconds(long milliseconds) { return default(System.DateTimeOffset); }
    public static System.DateTimeOffset FromUnixTimeSeconds(long seconds) { return default(System.DateTimeOffset); }
    public override int GetHashCode() { return default(int); }
    public static System.DateTimeOffset operator +(System.DateTimeOffset dateTimeOffset, System.TimeSpan timeSpan) { return default(System.DateTimeOffset); }
    public static bool operator ==(System.DateTimeOffset left, System.DateTimeOffset right) { return default(bool); }
    public static bool operator >(System.DateTimeOffset left, System.DateTimeOffset right) { return default(bool); }
    public static bool operator >=(System.DateTimeOffset left, System.DateTimeOffset right) { return default(bool); }
    public static implicit operator System.DateTimeOffset (System.DateTime dateTime) { return default(System.DateTimeOffset); }
    public static bool operator !=(System.DateTimeOffset left, System.DateTimeOffset right) { return default(bool); }
    public static bool operator <(System.DateTimeOffset left, System.DateTimeOffset right) { return default(bool); }
    public static bool operator <=(System.DateTimeOffset left, System.DateTimeOffset right) { return default(bool); }
    public static System.TimeSpan operator -(System.DateTimeOffset left, System.DateTimeOffset right) { return default(System.TimeSpan); }
    public static System.DateTimeOffset operator -(System.DateTimeOffset dateTimeOffset, System.TimeSpan timeSpan) { return default(System.DateTimeOffset); }
    public static System.DateTimeOffset Parse(string input) { return default(System.DateTimeOffset); }
    public static System.DateTimeOffset Parse(string input, System.IFormatProvider formatProvider) { return default(System.DateTimeOffset); }
    public static System.DateTimeOffset Parse(string input, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles) { return default(System.DateTimeOffset); }
    public static System.DateTimeOffset ParseExact(string input, string format, System.IFormatProvider formatProvider) { return default(System.DateTimeOffset); }
    public static System.DateTimeOffset ParseExact(string input, string format, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles) { return default(System.DateTimeOffset); }
    public static System.DateTimeOffset ParseExact(string input, string[] formats, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles) { return default(System.DateTimeOffset); }
    public System.TimeSpan Subtract(System.DateTimeOffset value) { return default(System.TimeSpan); }
    public System.DateTimeOffset Subtract(System.TimeSpan value) { return default(System.DateTimeOffset); }
    int System.IComparable.CompareTo(object obj) { return default(int); }
    public long ToFileTime() { return default(long); }
    public System.DateTimeOffset ToLocalTime() { return default(System.DateTimeOffset); }
    public System.DateTimeOffset ToOffset(System.TimeSpan offset) { return default(System.DateTimeOffset); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider formatProvider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider formatProvider) { return default(string); }
    public System.DateTimeOffset ToUniversalTime() { return default(System.DateTimeOffset); }
    public long ToUnixTimeMilliseconds() { return default(long); }
    public long ToUnixTimeSeconds() { return default(long); }
    public static bool TryParse(string input, out System.DateTimeOffset result) { result = default(System.DateTimeOffset); return default(bool); }
    public static bool TryParse(string input, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out System.DateTimeOffset result) { result = default(System.DateTimeOffset); return default(bool); }
    public static bool TryParseExact(string input, string format, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out System.DateTimeOffset result) { result = default(System.DateTimeOffset); return default(bool); }
    public static bool TryParseExact(string input, string[] formats, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out System.DateTimeOffset result) { result = default(System.DateTimeOffset); return default(bool); }
  }
  public enum DayOfWeek {
    Friday = 5,
    Monday = 1,
    Saturday = 6,
    Sunday = 0,
    Thursday = 4,
    Tuesday = 2,
    Wednesday = 3,
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Decimal : System.IComparable, System.IComparable<decimal>, System.IConvertible, System.IEquatable<decimal>, System.IFormattable {
    [System.Runtime.CompilerServices.DecimalConstantAttribute((byte)0, (byte)0, (uint)4294967295, (uint)4294967295, (uint)4294967295)]
    public static readonly decimal MaxValue;
    [System.Runtime.CompilerServices.DecimalConstantAttribute((byte)0, (byte)128, (uint)0, (uint)0, (uint)1)]
    public static readonly decimal MinusOne;
    [System.Runtime.CompilerServices.DecimalConstantAttribute((byte)0, (byte)128, (uint)4294967295, (uint)4294967295, (uint)4294967295)]
    public static readonly decimal MinValue;
    [System.Runtime.CompilerServices.DecimalConstantAttribute((byte)0, (byte)0, (uint)0, (uint)0, (uint)1)]
    public static readonly decimal One;
    [System.Runtime.CompilerServices.DecimalConstantAttribute((byte)0, (byte)0, (uint)0, (uint)0, (uint)0)]
    public static readonly decimal Zero;
    public Decimal(double value) { throw new System.NotImplementedException(); }
    public Decimal(int value) { throw new System.NotImplementedException(); }
    public Decimal(int lo, int mid, int hi, bool isNegative, byte scale) { throw new System.NotImplementedException(); }
    public Decimal(int[] bits) { throw new System.NotImplementedException(); }
    public Decimal(long value) { throw new System.NotImplementedException(); }
    public Decimal(float value) { throw new System.NotImplementedException(); }
    [System.CLSCompliantAttribute(false)]
    public Decimal(uint value) { throw new System.NotImplementedException(); }
    [System.CLSCompliantAttribute(false)]
    public Decimal(ulong value) { throw new System.NotImplementedException(); }
    public static decimal Add(decimal d1, decimal d2) { return default(decimal); }
    public static decimal Ceiling(decimal d) { return default(decimal); }
    public static int Compare(decimal d1, decimal d2) { return default(int); }
    public int CompareTo(decimal value) { return default(int); }
    public static decimal Divide(decimal d1, decimal d2) { return default(decimal); }
    public bool Equals(decimal value) { return default(bool); }
    public static bool Equals(decimal d1, decimal d2) { return default(bool); }
    public override bool Equals(object value) { return default(bool); }
    public static decimal Floor(decimal d) { return default(decimal); }
    public static int[] GetBits(decimal d) { return default(int[]); }
    public override int GetHashCode() { return default(int); }
    public static decimal Multiply(decimal d1, decimal d2) { return default(decimal); }
    public static decimal Negate(decimal d) { return default(decimal); }
    public static decimal operator +(decimal d1, decimal d2) { return default(decimal); }
    public static decimal operator --(decimal d) { return default(decimal); }
    public static decimal operator /(decimal d1, decimal d2) { return default(decimal); }
    public static bool operator ==(decimal d1, decimal d2) { return default(bool); }
    public static explicit operator byte (decimal value) { return default(byte); }
    public static explicit operator char (decimal value) { return default(char); }
    public static explicit operator double (decimal value) { return default(double); }
    public static explicit operator short (decimal value) { return default(short); }
    public static explicit operator int (decimal value) { return default(int); }
    public static explicit operator long (decimal value) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator sbyte (decimal value) { return default(sbyte); }
    public static explicit operator float (decimal value) { return default(float); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator ushort (decimal value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator uint (decimal value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator ulong (decimal value) { return default(ulong); }
    public static explicit operator decimal (double value) { return default(decimal); }
    public static explicit operator decimal (float value) { return default(decimal); }
    public static bool operator >(decimal d1, decimal d2) { return default(bool); }
    public static bool operator >=(decimal d1, decimal d2) { return default(bool); }
    public static implicit operator decimal (byte value) { return default(decimal); }
    public static implicit operator decimal (char value) { return default(decimal); }
    public static implicit operator decimal (short value) { return default(decimal); }
    public static implicit operator decimal (int value) { return default(decimal); }
    public static implicit operator decimal (long value) { return default(decimal); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator decimal (sbyte value) { return default(decimal); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator decimal (ushort value) { return default(decimal); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator decimal (uint value) { return default(decimal); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator decimal (ulong value) { return default(decimal); }
    public static decimal operator ++(decimal d) { return default(decimal); }
    public static bool operator !=(decimal d1, decimal d2) { return default(bool); }
    public static bool operator <(decimal d1, decimal d2) { return default(bool); }
    public static bool operator <=(decimal d1, decimal d2) { return default(bool); }
    public static decimal operator %(decimal d1, decimal d2) { return default(decimal); }
    public static decimal operator *(decimal d1, decimal d2) { return default(decimal); }
    public static decimal operator -(decimal d1, decimal d2) { return default(decimal); }
    public static decimal operator -(decimal d) { return default(decimal); }
    public static decimal operator +(decimal d) { return default(decimal); }
    public static decimal Parse(string s) { return default(decimal); }
    public static decimal Parse(string s, System.Globalization.NumberStyles style) { return default(decimal); }
    public static decimal Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider) { return default(decimal); }
    public static decimal Parse(string s, System.IFormatProvider provider) { return default(decimal); }
    public static decimal Remainder(decimal d1, decimal d2) { return default(decimal); }
    public static decimal Subtract(decimal d1, decimal d2) { return default(decimal); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public static byte ToByte(decimal value) { return default(byte); }
    public static double ToDouble(decimal d) { return default(double); }
    public static short ToInt16(decimal value) { return default(short); }
    public static int ToInt32(decimal d) { return default(int); }
    public static long ToInt64(decimal d) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(decimal value) { return default(sbyte); }
    public static float ToSingle(decimal d) { return default(float); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(decimal value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(decimal d) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(decimal d) { return default(ulong); }
    public static decimal Truncate(decimal d) { return default(decimal); }
    public static bool TryParse(string s, out decimal result) { result = default(decimal); return default(bool); }
    public static bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out decimal result) { result = default(decimal); return default(bool); }
  }
  public abstract partial class Delegate {
    internal Delegate() { }
    public object Target { get { return default(object); } }
    public static System.Delegate Combine(System.Delegate a, System.Delegate b) { return default(System.Delegate); }
    public static System.Delegate Combine(params System.Delegate[] delegates) { return default(System.Delegate); }
    public object DynamicInvoke(params object[] args) { return default(object); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public virtual System.Delegate[] GetInvocationList() { return default(System.Delegate[]); }
    public static bool operator ==(System.Delegate d1, System.Delegate d2) { return default(bool); }
    public static bool operator !=(System.Delegate d1, System.Delegate d2) { return default(bool); }
    public static System.Delegate Remove(System.Delegate source, System.Delegate value) { return default(System.Delegate); }
    public static System.Delegate RemoveAll(System.Delegate source, System.Delegate value) { return default(System.Delegate); }
  }
  public partial class DivideByZeroException : System.ArithmeticException {
    public DivideByZeroException() { }
    public DivideByZeroException(string message) { }
    public DivideByZeroException(string message, System.Exception innerException) { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Double : System.IComparable, System.IComparable<double>, System.IConvertible, System.IEquatable<double>, System.IFormattable {
    public const double Epsilon = 4.94065645841247E-324;
    public const double MaxValue = 1.7976931348623157E+308;
    public const double MinValue = -1.7976931348623157E+308;
    public const double NaN = 0.0 / 0.0;
    public const double NegativeInfinity = -1.0 / 0.0;
    public const double PositiveInfinity = 1.0 / 0.0;
    public int CompareTo(double value) { return default(int); }
    public bool Equals(double obj) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool IsInfinity(double d) { return default(bool); }
    public static bool IsNaN(double d) { return default(bool); }
    public static bool IsNegativeInfinity(double d) { return default(bool); }
    public static bool IsPositiveInfinity(double d) { return default(bool); }
    public static bool operator ==(double left, double right) { return default(bool); }
    public static bool operator >(double left, double right) { return default(bool); }
    public static bool operator >=(double left, double right) { return default(bool); }
    public static bool operator !=(double left, double right) { return default(bool); }
    public static bool operator <(double left, double right) { return default(bool); }
    public static bool operator <=(double left, double right) { return default(bool); }
    public static double Parse(string s) { return default(double); }
    public static double Parse(string s, System.Globalization.NumberStyles style) { return default(double); }
    public static double Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider) { return default(double); }
    public static double Parse(string s, System.IFormatProvider provider) { return default(double); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
    public static bool TryParse(string s, out double result) { result = default(double); return default(bool); }
    public static bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out double result) { result = default(double); return default(bool); }
  }
  public abstract partial class Enum : System.ValueType, System.IComparable, System.IConvertible, System.IFormattable {
    protected Enum() { }
    public int CompareTo(object target) { return default(int); }
    public override bool Equals(object obj) { return default(bool); }
    public static string Format(System.Type enumType, object value, string format) { return default(string); }
    public override int GetHashCode() { return default(int); }
    public static string GetName(System.Type enumType, object value) { return default(string); }
    public static string[] GetNames(System.Type enumType) { return default(string[]); }
    public static System.Type GetUnderlyingType(System.Type enumType) { return default(System.Type); }
    public static System.Array GetValues(System.Type enumType) { return default(System.Array); }
    public bool HasFlag(System.Enum flag) { return default(bool); }
    public static bool IsDefined(System.Type enumType, object value) { return default(bool); }
    public static object Parse(System.Type enumType, string value) { return default(object); }
    public static object Parse(System.Type enumType, string value, bool ignoreCase) { return default(object); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    [System.ObsoleteAttribute("The provider argument is not used. Please use ToString().")]
    string System.IConvertible.ToString(System.IFormatProvider provider) { return default(string); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    [System.ObsoleteAttribute("The provider argument is not used. Please use ToString(String).")]
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public static object ToObject(System.Type enumType, object value) { return default(object); }
    public override string ToString() { return default(string); }
    public string ToString(string format) { return default(string); }
    public static bool TryParse<TEnum>(string value, out TEnum result) where TEnum : struct { result = default(TEnum); return default(bool); }
    public static bool TryParse<TEnum>(string value, bool ignoreCase, out TEnum result) where TEnum : struct { result = default(TEnum); return default(bool); }
  }
  public partial class EventArgs {
    public static readonly System.EventArgs Empty;
    public EventArgs() { }
  }
  public delegate void EventHandler(object sender, System.EventArgs e);
  public delegate void EventHandler<TEventArgs>(object sender, TEventArgs e);
  public partial class Exception {
    public Exception() { }
    public Exception(string message) { }
    public Exception(string message, System.Exception innerException) { }
    public virtual System.Collections.IDictionary Data { get { return default(System.Collections.IDictionary); } }
    public virtual string HelpLink { get { return default(string); } set { } }
    public int HResult { get { return default(int); } protected set { } }
    public System.Exception InnerException { get { return default(System.Exception); } }
    public virtual string Message { get { return default(string); } }
    public virtual string Source { get { return default(string); } set { } }
    public virtual string StackTrace { get { return default(string); } }
    public virtual System.Exception GetBaseException() { return default(System.Exception); }
    public override string ToString() { return default(string); }
  }
  public partial class FieldAccessException : System.MemberAccessException {
    public FieldAccessException() { }
    public FieldAccessException(string message) { }
    public FieldAccessException(string message, System.Exception inner) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(16), Inherited=false)]
  public partial class FlagsAttribute : System.Attribute {
    public FlagsAttribute() { }
  }
  public partial class FormatException : System.Exception {
    public FormatException() { }
    public FormatException(string message) { }
    public FormatException(string message, System.Exception innerException) { }
  }
  public abstract partial class FormattableString : System.IFormattable {
    protected FormattableString() { }
    public abstract int ArgumentCount { get; }
    public abstract string Format { get; }
    public abstract object GetArgument(int index);
    public abstract object[] GetArguments();
    public static string Invariant(System.FormattableString formattable) { return default(string); }
    string System.IFormattable.ToString(string ignored, System.IFormatProvider formatProvider) { return default(string); }
    public override string ToString() { return default(string); }
    public abstract string ToString(System.IFormatProvider formatProvider);
  }
  public delegate TResult Func<out TResult>();
  public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
  public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
  public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
  public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
  public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
  public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
  public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
  public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, in T16, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
  public delegate TResult Func<in T, out TResult>(T arg);
  public delegate TResult Func<in T1, in T2, out TResult>(T1 arg1, T2 arg2);
  public delegate TResult Func<in T1, in T2, in T3, out TResult>(T1 arg1, T2 arg2, T3 arg3);
  public delegate TResult Func<in T1, in T2, in T3, in T4, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
  public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
  public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
  public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
  public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
  public static partial class GC {
    public static int MaxGeneration { get { return default(int); } }
    [System.Security.SecurityCriticalAttribute]
    public static void AddMemoryPressure(long bytesAllocated) { }
    public static void Collect() { }
    public static void Collect(int generation) { }
    public static void Collect(int generation, System.GCCollectionMode mode) { }
    public static void Collect(int generation, System.GCCollectionMode mode, bool blocking) { }
    public static int CollectionCount(int generation) { return default(int); }
    public static int GetGeneration(object obj) { return default(int); }
    public static long GetTotalMemory(bool forceFullCollection) { return default(long); }
    public static void KeepAlive(object obj) { }
    [System.Security.SecurityCriticalAttribute]
    public static void RemoveMemoryPressure(long bytesAllocated) { }
    public static void ReRegisterForFinalize(object obj) { }
    public static void SuppressFinalize(object obj) { }
    public static void WaitForPendingFinalizers() { }
  }
  public enum GCCollectionMode {
    Default = 0,
    Forced = 1,
    Optimized = 2,
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Guid : System.IComparable, System.IComparable<System.Guid>, System.IEquatable<System.Guid>, System.IFormattable {
    public static readonly System.Guid Empty;
    public Guid(byte[] b) { throw new System.NotImplementedException(); }
    public Guid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k) { throw new System.NotImplementedException(); }
    public Guid(int a, short b, short c, byte[] d) { throw new System.NotImplementedException(); }
    public Guid(string g) { throw new System.NotImplementedException(); }
    [System.CLSCompliantAttribute(false)]
    public Guid(uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k) { throw new System.NotImplementedException(); }
    public int CompareTo(System.Guid value) { return default(int); }
    public bool Equals(System.Guid g) { return default(bool); }
    public override bool Equals(object o) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Guid NewGuid() { return default(System.Guid); }
    public static bool operator ==(System.Guid a, System.Guid b) { return default(bool); }
    public static bool operator !=(System.Guid a, System.Guid b) { return default(bool); }
    public static System.Guid Parse(string input) { return default(System.Guid); }
    public static System.Guid ParseExact(string input, string format) { return default(System.Guid); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public byte[] ToByteArray() { return default(byte[]); }
    public override string ToString() { return default(string); }
    public string ToString(string format) { return default(string); }
    public static bool TryParse(string input, out System.Guid result) { result = default(System.Guid); return default(bool); }
    public static bool TryParseExact(string input, string format, out System.Guid result) { result = default(System.Guid); return default(bool); }
  }
  public partial interface IAsyncResult {
    object AsyncState { get; }
    System.Threading.WaitHandle AsyncWaitHandle { get; }
    bool CompletedSynchronously { get; }
    bool IsCompleted { get; }
  }
  public partial interface IComparable {
    int CompareTo(object obj);
  }
  public partial interface IComparable<in T> {
    int CompareTo(T other);
  }
  [System.CLSCompliantAttribute(false)]
  public partial interface IConvertible {
    System.TypeCode GetTypeCode();
    bool ToBoolean(System.IFormatProvider provider);
    byte ToByte(System.IFormatProvider provider);
    char ToChar(System.IFormatProvider provider);
    System.DateTime ToDateTime(System.IFormatProvider provider);
    decimal ToDecimal(System.IFormatProvider provider);
    double ToDouble(System.IFormatProvider provider);
    short ToInt16(System.IFormatProvider provider);
    int ToInt32(System.IFormatProvider provider);
    long ToInt64(System.IFormatProvider provider);
    sbyte ToSByte(System.IFormatProvider provider);
    float ToSingle(System.IFormatProvider provider);
    string ToString(System.IFormatProvider provider);
    object ToType(System.Type conversionType, System.IFormatProvider provider);
    ushort ToUInt16(System.IFormatProvider provider);
    uint ToUInt32(System.IFormatProvider provider);
    ulong ToUInt64(System.IFormatProvider provider);
  }
  public partial interface ICustomFormatter {
    string Format(string format, object arg, System.IFormatProvider formatProvider);
  }
  public partial interface IDisposable {
    void Dispose();
  }
  public partial interface IEquatable<T> {
    bool Equals(T other);
  }
  public partial interface IFormatProvider {
    object GetFormat(System.Type formatType);
  }
  public partial interface IFormattable {
    string ToString(string format, System.IFormatProvider formatProvider);
  }
  public sealed partial class IndexOutOfRangeException : System.Exception {
    public IndexOutOfRangeException() { }
    public IndexOutOfRangeException(string message) { }
    public IndexOutOfRangeException(string message, System.Exception innerException) { }
  }
  public sealed partial class InsufficientExecutionStackException : System.Exception {
    public InsufficientExecutionStackException() { }
    public InsufficientExecutionStackException(string message) { }
    public InsufficientExecutionStackException(string message, System.Exception innerException) { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Int16 : System.IComparable, System.IComparable<short>, System.IConvertible, System.IEquatable<short>, System.IFormattable {
    public const short MaxValue = (short)32767;
    public const short MinValue = (short)-32768;
    public int CompareTo(short value) { return default(int); }
    public bool Equals(short obj) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static short Parse(string s) { return default(short); }
    public static short Parse(string s, System.Globalization.NumberStyles style) { return default(short); }
    public static short Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider) { return default(short); }
    public static short Parse(string s, System.IFormatProvider provider) { return default(short); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
    public static bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out short result) { result = default(short); return default(bool); }
    public static bool TryParse(string s, out short result) { result = default(short); return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Int32 : System.IComparable, System.IComparable<int>, System.IConvertible, System.IEquatable<int>, System.IFormattable {
    public const int MaxValue = 2147483647;
    public const int MinValue = -2147483648;
    public int CompareTo(int value) { return default(int); }
    public bool Equals(int obj) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static int Parse(string s) { return default(int); }
    public static int Parse(string s, System.Globalization.NumberStyles style) { return default(int); }
    public static int Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider) { return default(int); }
    public static int Parse(string s, System.IFormatProvider provider) { return default(int); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
    public static bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out int result) { result = default(int); return default(bool); }
    public static bool TryParse(string s, out int result) { result = default(int); return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Int64 : System.IComparable, System.IComparable<long>, System.IConvertible, System.IEquatable<long>, System.IFormattable {
    public const long MaxValue = (long)9223372036854775807;
    public const long MinValue = (long)-9223372036854775808;
    public int CompareTo(long value) { return default(int); }
    public bool Equals(long obj) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static long Parse(string s) { return default(long); }
    public static long Parse(string s, System.Globalization.NumberStyles style) { return default(long); }
    public static long Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider) { return default(long); }
    public static long Parse(string s, System.IFormatProvider provider) { return default(long); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
    public static bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out long result) { result = default(long); return default(bool); }
    public static bool TryParse(string s, out long result) { result = default(long); return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct IntPtr {
    public static readonly System.IntPtr Zero;
    public IntPtr(int value) { throw new System.NotImplementedException(); }
    public IntPtr(long value) { throw new System.NotImplementedException(); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe IntPtr(void* value) { throw new System.NotImplementedException(); }
    public static int Size { get { return default(int); } }
    public static System.IntPtr Add(System.IntPtr pointer, int offset) { return default(System.IntPtr); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.IntPtr operator +(System.IntPtr pointer, int offset) { return default(System.IntPtr); }
    public static bool operator ==(System.IntPtr value1, System.IntPtr value2) { return default(bool); }
    public static explicit operator System.IntPtr (int value) { return default(System.IntPtr); }
    public static explicit operator System.IntPtr (long value) { return default(System.IntPtr); }
    public static explicit operator int (System.IntPtr value) { return default(int); }
    public static explicit operator long (System.IntPtr value) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public unsafe static explicit operator void* (System.IntPtr value) { return default(void*); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe static explicit operator System.IntPtr (void* value) { return default(System.IntPtr); }
    public static bool operator !=(System.IntPtr value1, System.IntPtr value2) { return default(bool); }
    public static System.IntPtr operator -(System.IntPtr pointer, int offset) { return default(System.IntPtr); }
    public static System.IntPtr Subtract(System.IntPtr pointer, int offset) { return default(System.IntPtr); }
    public int ToInt32() { return default(int); }
    public long ToInt64() { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public unsafe void* ToPointer() { return default(void*); }
    public override string ToString() { return default(string); }
    public string ToString(string format) { return default(string); }
  }
  public partial class InvalidCastException : System.Exception {
    public InvalidCastException() { }
    public InvalidCastException(string message) { }
    public InvalidCastException(string message, System.Exception innerException) { }
    public InvalidCastException(string message, int errorCode) { }
  }
  public partial class InvalidOperationException : System.Exception {
    public InvalidOperationException() { }
    public InvalidOperationException(string message) { }
    public InvalidOperationException(string message, System.Exception innerException) { }
  }
  public sealed partial class InvalidProgramException : System.Exception {
    public InvalidProgramException() { }
    public InvalidProgramException(string message) { }
    public InvalidProgramException(string message, System.Exception inner) { }
  }
  public partial class InvalidTimeZoneException : System.Exception {
    public InvalidTimeZoneException() { }
    public InvalidTimeZoneException(string message) { }
    public InvalidTimeZoneException(string message, System.Exception innerException) { }
  }
  public partial interface IObservable<out T> {
    System.IDisposable Subscribe(System.IObserver<T> observer);
  }
  public partial interface IObserver<in T> {
    void OnCompleted();
    void OnError(System.Exception error);
    void OnNext(T value);
  }
  public partial interface IProgress<in T> {
    void Report(T value);
  }
  public partial class Lazy<T> {
    public Lazy() { }
    public Lazy(bool isThreadSafe) { }
    public Lazy(System.Func<T> valueFactory) { }
    public Lazy(System.Func<T> valueFactory, bool isThreadSafe) { }
    public Lazy(System.Func<T> valueFactory, System.Threading.LazyThreadSafetyMode mode) { }
    public Lazy(System.Threading.LazyThreadSafetyMode mode) { }
    public bool IsValueCreated { get { return default(bool); } }
    public T Value { get { return default(T); } }
    public override string ToString() { return default(string); }
  }
  public partial class Lazy<T, TMetadata> : System.Lazy<T> {
    public Lazy(TMetadata metadata) { }
    public Lazy(TMetadata metadata, bool isThreadSafe) { }
    public Lazy(TMetadata metadata, System.Threading.LazyThreadSafetyMode mode) { }
    public Lazy(System.Func<T> valueFactory, TMetadata metadata) { }
    public Lazy(System.Func<T> valueFactory, TMetadata metadata, bool isThreadSafe) { }
    public Lazy(System.Func<T> valueFactory, TMetadata metadata, System.Threading.LazyThreadSafetyMode mode) { }
    public TMetadata Metadata { get { return default(TMetadata); } }
  }
  public partial class MemberAccessException : System.Exception {
    public MemberAccessException() { }
    public MemberAccessException(string message) { }
    public MemberAccessException(string message, System.Exception inner) { }
  }
  public partial class MethodAccessException : System.MemberAccessException {
    public MethodAccessException() { }
    public MethodAccessException(string message) { }
    public MethodAccessException(string message, System.Exception inner) { }
  }
  public partial class MissingFieldException : System.MissingMemberException {
    public MissingFieldException() { }
    public MissingFieldException(string message) { }
    public MissingFieldException(string message, System.Exception inner) { }
    public override string Message { get { return default(string); } }
  }
  public partial class MissingMemberException : System.MemberAccessException {
    public MissingMemberException() { }
    public MissingMemberException(string message) { }
    public MissingMemberException(string message, System.Exception inner) { }
    public override string Message { get { return default(string); } }
  }
  public partial class MissingMethodException : System.MissingMemberException {
    public MissingMethodException() { }
    public MissingMethodException(string message) { }
    public MissingMethodException(string message, System.Exception inner) { }
    public override string Message { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64))]
  public sealed partial class MTAThreadAttribute : System.Attribute {
    public MTAThreadAttribute() { }
  }
  public abstract partial class MulticastDelegate : System.Delegate {
    internal MulticastDelegate() { }
    public sealed override bool Equals(object obj) { return default(bool); }
    public sealed override int GetHashCode() { return default(int); }
    public sealed override System.Delegate[] GetInvocationList() { return default(System.Delegate[]); }
    public static bool operator ==(System.MulticastDelegate d1, System.MulticastDelegate d2) { return default(bool); }
    public static bool operator !=(System.MulticastDelegate d1, System.MulticastDelegate d2) { return default(bool); }
  }
  public partial class NotImplementedException : System.Exception {
    public NotImplementedException() { }
    public NotImplementedException(string message) { }
    public NotImplementedException(string message, System.Exception inner) { }
  }
  public partial class NotSupportedException : System.Exception {
    public NotSupportedException() { }
    public NotSupportedException(string message) { }
    public NotSupportedException(string message, System.Exception innerException) { }
  }
  public static partial class Nullable {
    public static int Compare<T>(System.Nullable<T> n1, System.Nullable<T> n2) where T : struct { return default(int); }
    public static bool Equals<T>(System.Nullable<T> n1, System.Nullable<T> n2) where T : struct { return default(bool); }
    public static System.Type GetUnderlyingType(System.Type nullableType) { return default(System.Type); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Nullable<T> where T : struct {
    public Nullable(T value) { throw new System.NotImplementedException(); }
    public bool HasValue { get { return default(bool); } }
    public T Value { get { return default(T); } }
    public override bool Equals(object other) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public T GetValueOrDefault() { return default(T); }
    public T GetValueOrDefault(T defaultValue) { return default(T); }
    public static explicit operator T (System.Nullable<T> value) { return default(T); }
    public static implicit operator System.Nullable<T> (T value) { return default(System.Nullable<T>); }
    public override string ToString() { return default(string); }
  }
  public partial class NullReferenceException : System.Exception {
    public NullReferenceException() { }
    public NullReferenceException(string message) { }
    public NullReferenceException(string message, System.Exception innerException) { }
  }
  public partial class Object {
    public Object() { }
    public virtual bool Equals(object obj) { return default(bool); }
    public static bool Equals(object objA, object objB) { return default(bool); }
    ~Object() { }
    public virtual int GetHashCode() { return default(int); }
    public System.Type GetType() { return default(System.Type); }
    protected object MemberwiseClone() { return default(object); }
    public static bool ReferenceEquals(object objA, object objB) { return default(bool); }
    public virtual string ToString() { return default(string); }
  }
  public partial class ObjectDisposedException : System.InvalidOperationException {
    public ObjectDisposedException(string objectName) { }
    public ObjectDisposedException(string message, System.Exception innerException) { }
    public ObjectDisposedException(string objectName, string message) { }
    public override string Message { get { return default(string); } }
    public string ObjectName { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(6140), Inherited=false)]
  public sealed partial class ObsoleteAttribute : System.Attribute {
    public ObsoleteAttribute() { }
    public ObsoleteAttribute(string message) { }
    public ObsoleteAttribute(string message, bool error) { }
    public bool IsError { get { return default(bool); } }
    public string Message { get { return default(string); } }
  }
  public partial class OutOfMemoryException : System.Exception {
    public OutOfMemoryException() { }
    public OutOfMemoryException(string message) { }
    public OutOfMemoryException(string message, System.Exception innerException) { }
  }
  public partial class OverflowException : System.ArithmeticException {
    public OverflowException() { }
    public OverflowException(string message) { }
    public OverflowException(string message, System.Exception innerException) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2048), Inherited=true, AllowMultiple=false)]
  public sealed partial class ParamArrayAttribute : System.Attribute {
    public ParamArrayAttribute() { }
  }
  public partial class PlatformNotSupportedException : System.NotSupportedException {
    public PlatformNotSupportedException() { }
    public PlatformNotSupportedException(string message) { }
    public PlatformNotSupportedException(string message, System.Exception inner) { }
  }
  public delegate bool Predicate<in T>(T obj);
  public partial class RankException : System.Exception {
    public RankException() { }
    public RankException(string message) { }
    public RankException(string message, System.Exception innerException) { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct RuntimeFieldHandle {
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.RuntimeFieldHandle handle) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.RuntimeFieldHandle left, System.RuntimeFieldHandle right) { return default(bool); }
    public static bool operator !=(System.RuntimeFieldHandle left, System.RuntimeFieldHandle right) { return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct RuntimeMethodHandle {
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.RuntimeMethodHandle handle) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.RuntimeMethodHandle left, System.RuntimeMethodHandle right) { return default(bool); }
    public static bool operator !=(System.RuntimeMethodHandle left, System.RuntimeMethodHandle right) { return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct RuntimeTypeHandle {
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.RuntimeTypeHandle handle) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(object left, System.RuntimeTypeHandle right) { return default(bool); }
    public static bool operator ==(System.RuntimeTypeHandle left, object right) { return default(bool); }
    public static bool operator !=(object left, System.RuntimeTypeHandle right) { return default(bool); }
    public static bool operator !=(System.RuntimeTypeHandle left, object right) { return default(bool); }
  }
  [System.CLSCompliantAttribute(false)]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SByte : System.IComparable, System.IComparable<sbyte>, System.IConvertible, System.IEquatable<sbyte>, System.IFormattable {
    public const sbyte MaxValue = (sbyte)127;
    public const sbyte MinValue = (sbyte)-128;
    public int CompareTo(sbyte value) { return default(int); }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(sbyte obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte Parse(string s) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte Parse(string s, System.Globalization.NumberStyles style) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte Parse(string s, System.IFormatProvider provider) { return default(sbyte); }
    int System.IComparable.CompareTo(object obj) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out sbyte result) { result = default(sbyte); return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool TryParse(string s, out sbyte result) { result = default(sbyte); return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Single : System.IComparable, System.IComparable<float>, System.IConvertible, System.IEquatable<float>, System.IFormattable {
    public const float Epsilon = 1.401298E-45f;
    public const float MaxValue = 3.40282347E+38f;
    public const float MinValue = -3.40282347E+38f;
    public const float NaN = 0.0f / 0.0f;
    public const float NegativeInfinity = -1.0f / 0.0f;
    public const float PositiveInfinity = 1.0f / 0.0f;
    public int CompareTo(float value) { return default(int); }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(float obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool IsInfinity(float f) { return default(bool); }
    public static bool IsNaN(float f) { return default(bool); }
    public static bool IsNegativeInfinity(float f) { return default(bool); }
    public static bool IsPositiveInfinity(float f) { return default(bool); }
    public static bool operator ==(float left, float right) { return default(bool); }
    public static bool operator >(float left, float right) { return default(bool); }
    public static bool operator >=(float left, float right) { return default(bool); }
    public static bool operator !=(float left, float right) { return default(bool); }
    public static bool operator <(float left, float right) { return default(bool); }
    public static bool operator <=(float left, float right) { return default(bool); }
    public static float Parse(string s) { return default(float); }
    public static float Parse(string s, System.Globalization.NumberStyles style) { return default(float); }
    public static float Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider) { return default(float); }
    public static float Parse(string s, System.IFormatProvider provider) { return default(float); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
    public static bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out float result) { result = default(float); return default(bool); }
    public static bool TryParse(string s, out float result) { result = default(float); return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64))]
  public sealed partial class STAThreadAttribute : System.Attribute {
    public STAThreadAttribute() { }
  }
  public sealed partial class String : System.Collections.Generic.IEnumerable<char>, System.Collections.IEnumerable, System.IComparable, System.IComparable<string>, System.IConvertible, System.IEquatable<string> {
    public static readonly string Empty;
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe String(char* value) { }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe String(char* value, int startIndex, int length) { }
    public String(char c, int count) { }
    public String(char[] value) { }
    public String(char[] value, int startIndex, int length) { }
    [System.Runtime.CompilerServices.IndexerName("Chars")]
    public char this[int index] { get { return default(char); } }
    public int Length { get { return default(int); } }
    public static int Compare(string strA, int indexA, string strB, int indexB, int length) { return default(int); }
    public static int Compare(string strA, int indexA, string strB, int indexB, int length, System.StringComparison comparisonType) { return default(int); }
    public static int Compare(string strA, string strB) { return default(int); }
    public static int Compare(string strA, string strB, bool ignoreCase) { return default(int); }
    public static int Compare(string strA, string strB, System.StringComparison comparisonType) { return default(int); }
    public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length) { return default(int); }
    public static int CompareOrdinal(string strA, string strB) { return default(int); }
    public int CompareTo(string strB) { return default(int); }
    public static string Concat(System.Collections.Generic.IEnumerable<string> values) { return default(string); }
    public static string Concat(object arg0) { return default(string); }
    public static string Concat(object arg0, object arg1) { return default(string); }
    public static string Concat(object arg0, object arg1, object arg2) { return default(string); }
    public static string Concat(params object[] args) { return default(string); }
    public static string Concat(string str0, string str1) { return default(string); }
    public static string Concat(string str0, string str1, string str2) { return default(string); }
    public static string Concat(string str0, string str1, string str2, string str3) { return default(string); }
    public static string Concat(params string[] values) { return default(string); }
    public static string Concat<T>(System.Collections.Generic.IEnumerable<T> values) { return default(string); }
    public bool Contains(string value) { return default(bool); }
    public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) { }
    public bool EndsWith(string value) { return default(bool); }
    public bool EndsWith(string value, System.StringComparison comparisonType) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(string value) { return default(bool); }
    public static bool Equals(string a, string b) { return default(bool); }
    public static bool Equals(string a, string b, System.StringComparison comparisonType) { return default(bool); }
    public bool Equals(string value, System.StringComparison comparisonType) { return default(bool); }
    public static string Format(System.IFormatProvider provider, string format, object arg0) { return default(string); }
    public static string Format(System.IFormatProvider provider, string format, object arg0, object arg1) { return default(string); }
    public static string Format(System.IFormatProvider provider, string format, object arg0, object arg1, object arg2) { return default(string); }
    public static string Format(System.IFormatProvider provider, string format, params object[] args) { return default(string); }
    public static string Format(string format, object arg0) { return default(string); }
    public static string Format(string format, object arg0, object arg1) { return default(string); }
    public static string Format(string format, object arg0, object arg1, object arg2) { return default(string); }
    public static string Format(string format, params object[] args) { return default(string); }
    public override int GetHashCode() { return default(int); }
    public int IndexOf(char value) { return default(int); }
    public int IndexOf(char value, int startIndex) { return default(int); }
    public int IndexOf(char value, int startIndex, int count) { return default(int); }
    public int IndexOf(string value) { return default(int); }
    public int IndexOf(string value, int startIndex) { return default(int); }
    public int IndexOf(string value, int startIndex, int count) { return default(int); }
    public int IndexOf(string value, int startIndex, int count, System.StringComparison comparisonType) { return default(int); }
    public int IndexOf(string value, int startIndex, System.StringComparison comparisonType) { return default(int); }
    public int IndexOf(string value, System.StringComparison comparisonType) { return default(int); }
    public int IndexOfAny(char[] anyOf) { return default(int); }
    public int IndexOfAny(char[] anyOf, int startIndex) { return default(int); }
    public int IndexOfAny(char[] anyOf, int startIndex, int count) { return default(int); }
    public string Insert(int startIndex, string value) { return default(string); }
    public static bool IsNullOrEmpty(string value) { return default(bool); }
    public static bool IsNullOrWhiteSpace(string value) { return default(bool); }
    public static string Join(string separator, System.Collections.Generic.IEnumerable<string> values) { return default(string); }
    public static string Join(string separator, params object[] values) { return default(string); }
    public static string Join(string separator, params string[] value) { return default(string); }
    public static string Join(string separator, string[] value, int startIndex, int count) { return default(string); }
    public static string Join<T>(string separator, System.Collections.Generic.IEnumerable<T> values) { return default(string); }
    public int LastIndexOf(char value) { return default(int); }
    public int LastIndexOf(char value, int startIndex) { return default(int); }
    public int LastIndexOf(char value, int startIndex, int count) { return default(int); }
    public int LastIndexOf(string value) { return default(int); }
    public int LastIndexOf(string value, int startIndex) { return default(int); }
    public int LastIndexOf(string value, int startIndex, int count) { return default(int); }
    public int LastIndexOf(string value, int startIndex, int count, System.StringComparison comparisonType) { return default(int); }
    public int LastIndexOf(string value, int startIndex, System.StringComparison comparisonType) { return default(int); }
    public int LastIndexOf(string value, System.StringComparison comparisonType) { return default(int); }
    public int LastIndexOfAny(char[] anyOf) { return default(int); }
    public int LastIndexOfAny(char[] anyOf, int startIndex) { return default(int); }
    public int LastIndexOfAny(char[] anyOf, int startIndex, int count) { return default(int); }
    public static bool operator ==(string a, string b) { return default(bool); }
    public static bool operator !=(string a, string b) { return default(bool); }
    public string PadLeft(int totalWidth) { return default(string); }
    public string PadLeft(int totalWidth, char paddingChar) { return default(string); }
    public string PadRight(int totalWidth) { return default(string); }
    public string PadRight(int totalWidth, char paddingChar) { return default(string); }
    public string Remove(int startIndex) { return default(string); }
    public string Remove(int startIndex, int count) { return default(string); }
    public string Replace(char oldChar, char newChar) { return default(string); }
    public string Replace(string oldValue, string newValue) { return default(string); }
    public string[] Split(params char[] separator) { return default(string[]); }
    public string[] Split(char[] separator, int count) { return default(string[]); }
    public string[] Split(char[] separator, int count, System.StringSplitOptions options) { return default(string[]); }
    public string[] Split(char[] separator, System.StringSplitOptions options) { return default(string[]); }
    public string[] Split(string[] separator, int count, System.StringSplitOptions options) { return default(string[]); }
    public string[] Split(string[] separator, System.StringSplitOptions options) { return default(string[]); }
    public bool StartsWith(string value) { return default(bool); }
    public bool StartsWith(string value, System.StringComparison comparisonType) { return default(bool); }
    public string Substring(int startIndex) { return default(string); }
    public string Substring(int startIndex, int length) { return default(string); }
    System.Collections.Generic.IEnumerator<char> System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<char>); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    string System.IConvertible.ToString(System.IFormatProvider provider) { return default(string); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public char[] ToCharArray() { return default(char[]); }
    public char[] ToCharArray(int startIndex, int length) { return default(char[]); }
    public string ToLower() { return default(string); }
    public string ToLowerInvariant() { return default(string); }
    public override string ToString() { return default(string); }
    public string ToUpper() { return default(string); }
    public string ToUpperInvariant() { return default(string); }
    public string Trim() { return default(string); }
    public string Trim(params char[] trimChars) { return default(string); }
    public string TrimEnd(params char[] trimChars) { return default(string); }
    public string TrimStart(params char[] trimChars) { return default(string); }
  }
  public enum StringComparison {
    CurrentCulture = 0,
    CurrentCultureIgnoreCase = 1,
    Ordinal = 4,
    OrdinalIgnoreCase = 5,
  }
  [System.FlagsAttribute]
  public enum StringSplitOptions {
    None = 0,
    RemoveEmptyEntries = 1,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(256), Inherited=false)]
  public partial class ThreadStaticAttribute : System.Attribute {
    public ThreadStaticAttribute() { }
  }
  public partial class TimeoutException : System.Exception {
    public TimeoutException() { }
    public TimeoutException(string message) { }
    public TimeoutException(string message, System.Exception innerException) { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct TimeSpan : System.IComparable, System.IComparable<System.TimeSpan>, System.IEquatable<System.TimeSpan>, System.IFormattable {
    public static readonly System.TimeSpan MaxValue;
    public static readonly System.TimeSpan MinValue;
    public const long TicksPerDay = (long)864000000000;
    public const long TicksPerHour = (long)36000000000;
    public const long TicksPerMillisecond = (long)10000;
    public const long TicksPerMinute = (long)600000000;
    public const long TicksPerSecond = (long)10000000;
    public static readonly System.TimeSpan Zero;
    public TimeSpan(int hours, int minutes, int seconds) { throw new System.NotImplementedException(); }
    public TimeSpan(int days, int hours, int minutes, int seconds) { throw new System.NotImplementedException(); }
    public TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds) { throw new System.NotImplementedException(); }
    public TimeSpan(long ticks) { throw new System.NotImplementedException(); }
    public int Days { get { return default(int); } }
    public int Hours { get { return default(int); } }
    public int Milliseconds { get { return default(int); } }
    public int Minutes { get { return default(int); } }
    public int Seconds { get { return default(int); } }
    public long Ticks { get { return default(long); } }
    public double TotalDays { get { return default(double); } }
    public double TotalHours { get { return default(double); } }
    public double TotalMilliseconds { get { return default(double); } }
    public double TotalMinutes { get { return default(double); } }
    public double TotalSeconds { get { return default(double); } }
    public System.TimeSpan Add(System.TimeSpan ts) { return default(System.TimeSpan); }
    public static int Compare(System.TimeSpan t1, System.TimeSpan t2) { return default(int); }
    public int CompareTo(System.TimeSpan value) { return default(int); }
    public System.TimeSpan Duration() { return default(System.TimeSpan); }
    public override bool Equals(object value) { return default(bool); }
    public bool Equals(System.TimeSpan obj) { return default(bool); }
    public static bool Equals(System.TimeSpan t1, System.TimeSpan t2) { return default(bool); }
    public static System.TimeSpan FromDays(double value) { return default(System.TimeSpan); }
    public static System.TimeSpan FromHours(double value) { return default(System.TimeSpan); }
    public static System.TimeSpan FromMilliseconds(double value) { return default(System.TimeSpan); }
    public static System.TimeSpan FromMinutes(double value) { return default(System.TimeSpan); }
    public static System.TimeSpan FromSeconds(double value) { return default(System.TimeSpan); }
    public static System.TimeSpan FromTicks(long value) { return default(System.TimeSpan); }
    public override int GetHashCode() { return default(int); }
    public System.TimeSpan Negate() { return default(System.TimeSpan); }
    public static System.TimeSpan operator +(System.TimeSpan t1, System.TimeSpan t2) { return default(System.TimeSpan); }
    public static bool operator ==(System.TimeSpan t1, System.TimeSpan t2) { return default(bool); }
    public static bool operator >(System.TimeSpan t1, System.TimeSpan t2) { return default(bool); }
    public static bool operator >=(System.TimeSpan t1, System.TimeSpan t2) { return default(bool); }
    public static bool operator !=(System.TimeSpan t1, System.TimeSpan t2) { return default(bool); }
    public static bool operator <(System.TimeSpan t1, System.TimeSpan t2) { return default(bool); }
    public static bool operator <=(System.TimeSpan t1, System.TimeSpan t2) { return default(bool); }
    public static System.TimeSpan operator -(System.TimeSpan t1, System.TimeSpan t2) { return default(System.TimeSpan); }
    public static System.TimeSpan operator -(System.TimeSpan t) { return default(System.TimeSpan); }
    public static System.TimeSpan operator +(System.TimeSpan t) { return default(System.TimeSpan); }
    public static System.TimeSpan Parse(string s) { return default(System.TimeSpan); }
    public static System.TimeSpan Parse(string input, System.IFormatProvider formatProvider) { return default(System.TimeSpan); }
    public static System.TimeSpan ParseExact(string input, string format, System.IFormatProvider formatProvider) { return default(System.TimeSpan); }
    public static System.TimeSpan ParseExact(string input, string format, System.IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles) { return default(System.TimeSpan); }
    public static System.TimeSpan ParseExact(string input, string[] formats, System.IFormatProvider formatProvider) { return default(System.TimeSpan); }
    public static System.TimeSpan ParseExact(string input, string[] formats, System.IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles) { return default(System.TimeSpan); }
    public System.TimeSpan Subtract(System.TimeSpan ts) { return default(System.TimeSpan); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    public override string ToString() { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider formatProvider) { return default(string); }
    public static bool TryParse(string input, System.IFormatProvider formatProvider, out System.TimeSpan result) { result = default(System.TimeSpan); return default(bool); }
    public static bool TryParse(string s, out System.TimeSpan result) { result = default(System.TimeSpan); return default(bool); }
    public static bool TryParseExact(string input, string format, System.IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out System.TimeSpan result) { result = default(System.TimeSpan); return default(bool); }
    public static bool TryParseExact(string input, string format, System.IFormatProvider formatProvider, out System.TimeSpan result) { result = default(System.TimeSpan); return default(bool); }
    public static bool TryParseExact(string input, string[] formats, System.IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out System.TimeSpan result) { result = default(System.TimeSpan); return default(bool); }
    public static bool TryParseExact(string input, string[] formats, System.IFormatProvider formatProvider, out System.TimeSpan result) { result = default(System.TimeSpan); return default(bool); }
  }
  public sealed partial class TimeZoneInfo : System.IEquatable<System.TimeZoneInfo> {
    internal TimeZoneInfo() { }
    public System.TimeSpan BaseUtcOffset { get { return default(System.TimeSpan); } }
    public string DaylightName { get { return default(string); } }
    public string DisplayName { get { return default(string); } }
    public string Id { get { return default(string); } }
    public static System.TimeZoneInfo Local { get { return default(System.TimeZoneInfo); } }
    public string StandardName { get { return default(string); } }
    public bool SupportsDaylightSavingTime { get { return default(bool); } }
    public static System.TimeZoneInfo Utc { get { return default(System.TimeZoneInfo); } }
    public static System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo destinationTimeZone) { return default(System.DateTime); }
    public static System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone) { return default(System.DateTime); }
    public static System.DateTimeOffset ConvertTime(System.DateTimeOffset dateTimeOffset, System.TimeZoneInfo destinationTimeZone) { return default(System.DateTimeOffset); }
    public bool Equals(System.TimeZoneInfo other) { return default(bool); }
    public static System.TimeZoneInfo FindSystemTimeZoneById(string id) { return default(System.TimeZoneInfo); }
    public System.TimeSpan[] GetAmbiguousTimeOffsets(System.DateTime dateTime) { return default(System.TimeSpan[]); }
    public System.TimeSpan[] GetAmbiguousTimeOffsets(System.DateTimeOffset dateTimeOffset) { return default(System.TimeSpan[]); }
    public override int GetHashCode() { return default(int); }
    public static System.Collections.ObjectModel.ReadOnlyCollection<System.TimeZoneInfo> GetSystemTimeZones() { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.TimeZoneInfo>); }
    public System.TimeSpan GetUtcOffset(System.DateTime dateTime) { return default(System.TimeSpan); }
    public System.TimeSpan GetUtcOffset(System.DateTimeOffset dateTimeOffset) { return default(System.TimeSpan); }
    public bool IsAmbiguousTime(System.DateTime dateTime) { return default(bool); }
    public bool IsAmbiguousTime(System.DateTimeOffset dateTimeOffset) { return default(bool); }
    public bool IsDaylightSavingTime(System.DateTime dateTime) { return default(bool); }
    public bool IsDaylightSavingTime(System.DateTimeOffset dateTimeOffset) { return default(bool); }
    public bool IsInvalidTime(System.DateTime dateTime) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  public static partial class Tuple {
    public static System.Tuple<T1> Create<T1>(T1 item1) { return default(System.Tuple<T1>); }
    public static System.Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2) { return default(System.Tuple<T1, T2>); }
    public static System.Tuple<T1, T2, T3> Create<T1, T2, T3>(T1 item1, T2 item2, T3 item3) { return default(System.Tuple<T1, T2, T3>); }
    public static System.Tuple<T1, T2, T3, T4> Create<T1, T2, T3, T4>(T1 item1, T2 item2, T3 item3, T4 item4) { return default(System.Tuple<T1, T2, T3, T4>); }
    public static System.Tuple<T1, T2, T3, T4, T5> Create<T1, T2, T3, T4, T5>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { return default(System.Tuple<T1, T2, T3, T4, T5>); }
    public static System.Tuple<T1, T2, T3, T4, T5, T6> Create<T1, T2, T3, T4, T5, T6>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { return default(System.Tuple<T1, T2, T3, T4, T5, T6>); }
    public static System.Tuple<T1, T2, T3, T4, T5, T6, T7> Create<T1, T2, T3, T4, T5, T6, T7>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { return default(System.Tuple<T1, T2, T3, T4, T5, T6, T7>); }
    public static System.Tuple<T1, T2, T3, T4, T5, T6, T7, System.Tuple<T8>> Create<T1, T2, T3, T4, T5, T6, T7, T8>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8) { return default(System.Tuple<T1, T2, T3, T4, T5, T6, T7, System.Tuple<T8>>); }
  }
  public partial class Tuple<T1> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable {
    public Tuple(T1 item1) { }
    public T1 Item1 { get { return default(T1); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer) { return default(int); }
    bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer) { return default(bool); }
    int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { return default(int); }
    int System.IComparable.CompareTo(object obj) { return default(int); }
    public override string ToString() { return default(string); }
  }
  public partial class Tuple<T1, T2> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable {
    public Tuple(T1 item1, T2 item2) { }
    public T1 Item1 { get { return default(T1); } }
    public T2 Item2 { get { return default(T2); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer) { return default(int); }
    bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer) { return default(bool); }
    int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { return default(int); }
    int System.IComparable.CompareTo(object obj) { return default(int); }
    public override string ToString() { return default(string); }
  }
  public partial class Tuple<T1, T2, T3> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable {
    public Tuple(T1 item1, T2 item2, T3 item3) { }
    public T1 Item1 { get { return default(T1); } }
    public T2 Item2 { get { return default(T2); } }
    public T3 Item3 { get { return default(T3); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer) { return default(int); }
    bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer) { return default(bool); }
    int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { return default(int); }
    int System.IComparable.CompareTo(object obj) { return default(int); }
    public override string ToString() { return default(string); }
  }
  public partial class Tuple<T1, T2, T3, T4> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable {
    public Tuple(T1 item1, T2 item2, T3 item3, T4 item4) { }
    public T1 Item1 { get { return default(T1); } }
    public T2 Item2 { get { return default(T2); } }
    public T3 Item3 { get { return default(T3); } }
    public T4 Item4 { get { return default(T4); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer) { return default(int); }
    bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer) { return default(bool); }
    int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { return default(int); }
    int System.IComparable.CompareTo(object obj) { return default(int); }
    public override string ToString() { return default(string); }
  }
  public partial class Tuple<T1, T2, T3, T4, T5> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable {
    public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { }
    public T1 Item1 { get { return default(T1); } }
    public T2 Item2 { get { return default(T2); } }
    public T3 Item3 { get { return default(T3); } }
    public T4 Item4 { get { return default(T4); } }
    public T5 Item5 { get { return default(T5); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer) { return default(int); }
    bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer) { return default(bool); }
    int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { return default(int); }
    int System.IComparable.CompareTo(object obj) { return default(int); }
    public override string ToString() { return default(string); }
  }
  public partial class Tuple<T1, T2, T3, T4, T5, T6> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable {
    public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { }
    public T1 Item1 { get { return default(T1); } }
    public T2 Item2 { get { return default(T2); } }
    public T3 Item3 { get { return default(T3); } }
    public T4 Item4 { get { return default(T4); } }
    public T5 Item5 { get { return default(T5); } }
    public T6 Item6 { get { return default(T6); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer) { return default(int); }
    bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer) { return default(bool); }
    int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { return default(int); }
    int System.IComparable.CompareTo(object obj) { return default(int); }
    public override string ToString() { return default(string); }
  }
  public partial class Tuple<T1, T2, T3, T4, T5, T6, T7> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable {
    public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { }
    public T1 Item1 { get { return default(T1); } }
    public T2 Item2 { get { return default(T2); } }
    public T3 Item3 { get { return default(T3); } }
    public T4 Item4 { get { return default(T4); } }
    public T5 Item5 { get { return default(T5); } }
    public T6 Item6 { get { return default(T6); } }
    public T7 Item7 { get { return default(T7); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer) { return default(int); }
    bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer) { return default(bool); }
    int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { return default(int); }
    int System.IComparable.CompareTo(object obj) { return default(int); }
    public override string ToString() { return default(string); }
  }
  public partial class Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable {
    public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { }
    public T1 Item1 { get { return default(T1); } }
    public T2 Item2 { get { return default(T2); } }
    public T3 Item3 { get { return default(T3); } }
    public T4 Item4 { get { return default(T4); } }
    public T5 Item5 { get { return default(T5); } }
    public T6 Item6 { get { return default(T6); } }
    public T7 Item7 { get { return default(T7); } }
    public TRest Rest { get { return default(TRest); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer) { return default(int); }
    bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer) { return default(bool); }
    int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer) { return default(int); }
    int System.IComparable.CompareTo(object obj) { return default(int); }
    public override string ToString() { return default(string); }
  }
  public abstract partial class Type {
    internal Type() { }
    public static readonly char Delimiter;
    public static readonly System.Type[] EmptyTypes;
    public static readonly object Missing;
    public abstract string AssemblyQualifiedName { get; }
    public abstract System.Type DeclaringType { get; }
    public abstract string FullName { get; }
    public abstract int GenericParameterPosition { get; }
    public abstract System.Type[] GenericTypeArguments { get; }
    public bool HasElementType { get { return default(bool); } }
    public virtual bool IsArray { get { return default(bool); } }
    public virtual bool IsByRef { get { return default(bool); } }
    public abstract bool IsConstructedGenericType { get; }
    public abstract bool IsGenericParameter { get; }
    public bool IsNested { get { return default(bool); } }
    public virtual bool IsPointer { get { return default(bool); } }
    public abstract string Name { get; }
    public abstract string Namespace { get; }
    public virtual System.RuntimeTypeHandle TypeHandle { get { return default(System.RuntimeTypeHandle); } }
    public override bool Equals(object o) { return default(bool); }
    public bool Equals(System.Type o) { return default(bool); }
    public abstract int GetArrayRank();
    public abstract System.Type GetElementType();
    public abstract System.Type GetGenericTypeDefinition();
    public override int GetHashCode() { return default(int); }
    public static System.Type GetType(string typeName) { return default(System.Type); }
    public static System.Type GetType(string typeName, bool throwOnError) { return default(System.Type); }
    public static System.Type GetType(string typeName, bool throwOnError, bool ignoreCase) { return default(System.Type); }
    public static System.TypeCode GetTypeCode(System.Type type) { return default(System.TypeCode); }
    public static System.Type GetTypeFromHandle(System.RuntimeTypeHandle handle) { return default(System.Type); }
    public abstract System.Type MakeArrayType();
    public abstract System.Type MakeArrayType(int rank);
    public abstract System.Type MakeByRefType();
    public abstract System.Type MakeGenericType(params System.Type[] typeArguments);
    public abstract System.Type MakePointerType();
    public override string ToString() { return default(string); }
  }
  public partial class TypeAccessException : System.TypeLoadException {
    public TypeAccessException() { }
    public TypeAccessException(string message) { }
    public TypeAccessException(string message, System.Exception inner) { }
  }
  public enum TypeCode {
    Boolean = 3,
    Byte = 6,
    Char = 4,
    DateTime = 16,
    Decimal = 15,
    Double = 14,
    Empty = 0,
    Int16 = 7,
    Int32 = 9,
    Int64 = 11,
    Object = 1,
    SByte = 5,
    Single = 13,
    String = 18,
    UInt16 = 8,
    UInt32 = 10,
    UInt64 = 12,
  }
  public sealed partial class TypeInitializationException : System.Exception {
    public TypeInitializationException(string fullTypeName, System.Exception innerException) { }
    public string TypeName { get { return default(string); } }
  }
  public partial class TypeLoadException : System.Exception {
    public TypeLoadException() { }
    public TypeLoadException(string message) { }
    public TypeLoadException(string message, System.Exception inner) { }
    public override string Message { get { return default(string); } }
    public string TypeName { get { return default(string); } }
  }
  [System.CLSCompliantAttribute(false)]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct UInt16 : System.IComparable, System.IComparable<ushort>, System.IConvertible, System.IEquatable<ushort>, System.IFormattable {
    public const ushort MaxValue = (ushort)65535;
    public const ushort MinValue = (ushort)0;
    public int CompareTo(ushort value) { return default(int); }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(ushort obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    [System.CLSCompliantAttribute(false)]
    public static ushort Parse(string s) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort Parse(string s, System.Globalization.NumberStyles style) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort Parse(string s, System.IFormatProvider provider) { return default(ushort); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out ushort result) { result = default(ushort); return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool TryParse(string s, out ushort result) { result = default(ushort); return default(bool); }
  }
  [System.CLSCompliantAttribute(false)]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct UInt32 : System.IComparable, System.IComparable<uint>, System.IConvertible, System.IEquatable<uint>, System.IFormattable {
    public const uint MaxValue = (uint)4294967295;
    public const uint MinValue = (uint)0;
    public int CompareTo(uint value) { return default(int); }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(uint obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    [System.CLSCompliantAttribute(false)]
    public static uint Parse(string s) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint Parse(string s, System.Globalization.NumberStyles style) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint Parse(string s, System.IFormatProvider provider) { return default(uint); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out uint result) { result = default(uint); return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool TryParse(string s, out uint result) { result = default(uint); return default(bool); }
  }
  [System.CLSCompliantAttribute(false)]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct UInt64 : System.IComparable, System.IComparable<ulong>, System.IConvertible, System.IEquatable<ulong>, System.IFormattable {
    public const ulong MaxValue = (ulong)18446744073709551615;
    public const ulong MinValue = (ulong)0;
    public int CompareTo(ulong value) { return default(int); }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(ulong obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    [System.CLSCompliantAttribute(false)]
    public static ulong Parse(string s) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong Parse(string s, System.Globalization.NumberStyles style) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong Parse(string s, System.IFormatProvider provider) { return default(ulong); }
    int System.IComparable.CompareTo(object value) { return default(int); }
    System.TypeCode System.IConvertible.GetTypeCode() { return default(System.TypeCode); }
    bool System.IConvertible.ToBoolean(System.IFormatProvider provider) { return default(bool); }
    byte System.IConvertible.ToByte(System.IFormatProvider provider) { return default(byte); }
    char System.IConvertible.ToChar(System.IFormatProvider provider) { return default(char); }
    System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider) { return default(System.DateTime); }
    decimal System.IConvertible.ToDecimal(System.IFormatProvider provider) { return default(decimal); }
    double System.IConvertible.ToDouble(System.IFormatProvider provider) { return default(double); }
    short System.IConvertible.ToInt16(System.IFormatProvider provider) { return default(short); }
    int System.IConvertible.ToInt32(System.IFormatProvider provider) { return default(int); }
    long System.IConvertible.ToInt64(System.IFormatProvider provider) { return default(long); }
    sbyte System.IConvertible.ToSByte(System.IFormatProvider provider) { return default(sbyte); }
    float System.IConvertible.ToSingle(System.IFormatProvider provider) { return default(float); }
    object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider) { return default(object); }
    ushort System.IConvertible.ToUInt16(System.IFormatProvider provider) { return default(ushort); }
    uint System.IConvertible.ToUInt32(System.IFormatProvider provider) { return default(uint); }
    ulong System.IConvertible.ToUInt64(System.IFormatProvider provider) { return default(ulong); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out ulong result) { result = default(ulong); return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool TryParse(string s, out ulong result) { result = default(ulong); return default(bool); }
  }
  [System.CLSCompliantAttribute(false)]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct UIntPtr {
    public static readonly System.UIntPtr Zero;
    public UIntPtr(uint value) { throw new System.NotImplementedException(); }
    public UIntPtr(ulong value) { throw new System.NotImplementedException(); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe UIntPtr(void* value) { throw new System.NotImplementedException(); }
    public static int Size { get { return default(int); } }
    public static System.UIntPtr Add(System.UIntPtr pointer, int offset) { return default(System.UIntPtr); }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.UIntPtr operator +(System.UIntPtr pointer, int offset) { return default(System.UIntPtr); }
    public static bool operator ==(System.UIntPtr value1, System.UIntPtr value2) { return default(bool); }
    public static explicit operator System.UIntPtr (uint value) { return default(System.UIntPtr); }
    public static explicit operator System.UIntPtr (ulong value) { return default(System.UIntPtr); }
    public static explicit operator uint (System.UIntPtr value) { return default(uint); }
    public static explicit operator ulong (System.UIntPtr value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe static explicit operator void* (System.UIntPtr value) { return default(void*); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe static explicit operator System.UIntPtr (void* value) { return default(System.UIntPtr); }
    public static bool operator !=(System.UIntPtr value1, System.UIntPtr value2) { return default(bool); }
    public static System.UIntPtr operator -(System.UIntPtr pointer, int offset) { return default(System.UIntPtr); }
    public static System.UIntPtr Subtract(System.UIntPtr pointer, int offset) { return default(System.UIntPtr); }
    [System.CLSCompliantAttribute(false)]
    public unsafe void* ToPointer() { return default(void*); }
    public override string ToString() { return default(string); }
    public uint ToUInt32() { return default(uint); }
    public ulong ToUInt64() { return default(ulong); }
  }
  public partial class UnauthorizedAccessException : System.Exception {
    public UnauthorizedAccessException() { }
    public UnauthorizedAccessException(string message) { }
    public UnauthorizedAccessException(string message, System.Exception inner) { }
  }
  public partial class Uri {
    public Uri(string uriString) { }
    public Uri(string uriString, System.UriKind uriKind) { }
    public Uri(System.Uri baseUri, string relativeUri) { }
    public Uri(System.Uri baseUri, System.Uri relativeUri) { }
    public string AbsolutePath { get { return default(string); } }
    public string AbsoluteUri { get { return default(string); } }
    public string Authority { get { return default(string); } }
    public string DnsSafeHost { get { return default(string); } }
    public string Fragment { get { return default(string); } }
    public string Host { get { return default(string); } }
    public System.UriHostNameType HostNameType { get { return default(System.UriHostNameType); } }
    public string IdnHost { get { return default(string); } }
    public bool IsAbsoluteUri { get { return default(bool); } }
    public bool IsDefaultPort { get { return default(bool); } }
    public bool IsFile { get { return default(bool); } }
    public bool IsLoopback { get { return default(bool); } }
    public bool IsUnc { get { return default(bool); } }
    public string LocalPath { get { return default(string); } }
    public string OriginalString { get { return default(string); } }
    public string PathAndQuery { get { return default(string); } }
    public int Port { get { return default(int); } }
    public string Query { get { return default(string); } }
    public string Scheme { get { return default(string); } }
    public string[] Segments { get { return default(string[]); } }
    public bool UserEscaped { get { return default(bool); } }
    public string UserInfo { get { return default(string); } }
    public static System.UriHostNameType CheckHostName(string name) { return default(System.UriHostNameType); }
    public static bool CheckSchemeName(string schemeName) { return default(bool); }
    public static int Compare(System.Uri uri1, System.Uri uri2, System.UriComponents partsToCompare, System.UriFormat compareFormat, System.StringComparison comparisonType) { return default(int); }
    public override bool Equals(object comparand) { return default(bool); }
    public static string EscapeDataString(string stringToEscape) { return default(string); }
    public static string EscapeUriString(string stringToEscape) { return default(string); }
    public string GetComponents(System.UriComponents components, System.UriFormat format) { return default(string); }
    public override int GetHashCode() { return default(int); }
    public bool IsBaseOf(System.Uri uri) { return default(bool); }
    public bool IsWellFormedOriginalString() { return default(bool); }
    public static bool IsWellFormedUriString(string uriString, System.UriKind uriKind) { return default(bool); }
    public System.Uri MakeRelativeUri(System.Uri uri) { return default(System.Uri); }
    public static bool operator ==(System.Uri uri1, System.Uri uri2) { return default(bool); }
    public static bool operator !=(System.Uri uri1, System.Uri uri2) { return default(bool); }
    public override string ToString() { return default(string); }
    public static bool TryCreate(string uriString, System.UriKind uriKind, out System.Uri result) { result = default(System.Uri); return default(bool); }
    public static bool TryCreate(System.Uri baseUri, string relativeUri, out System.Uri result) { result = default(System.Uri); return default(bool); }
    public static bool TryCreate(System.Uri baseUri, System.Uri relativeUri, out System.Uri result) { result = default(System.Uri); return default(bool); }
    public static string UnescapeDataString(string stringToUnescape) { return default(string); }
  }
  [System.FlagsAttribute]
  public enum UriComponents {
    AbsoluteUri = 127,
    Fragment = 64,
    Host = 4,
    HostAndPort = 132,
    HttpRequestUrl = 61,
    KeepDelimiter = 1073741824,
    NormalizedHost = 256,
    Path = 16,
    PathAndQuery = 48,
    Port = 8,
    Query = 32,
    Scheme = 1,
    SchemeAndServer = 13,
    SerializationInfoString = -2147483648,
    StrongAuthority = 134,
    StrongPort = 128,
    UserInfo = 2,
  }
  public enum UriFormat {
    SafeUnescaped = 3,
    Unescaped = 2,
    UriEscaped = 1,
  }
  public partial class UriFormatException : System.FormatException {
    public UriFormatException() { }
    public UriFormatException(string textString) { }
    public UriFormatException(string textString, System.Exception e) { }
  }
  public enum UriHostNameType {
    Basic = 1,
    Dns = 2,
    IPv4 = 3,
    IPv6 = 4,
    Unknown = 0,
  }
  public enum UriKind {
    Absolute = 1,
    Relative = 2,
    RelativeOrAbsolute = 0,
  }
  public abstract partial class ValueType {
    protected ValueType() { }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public override string ToString() { return default(string); }
  }
  public sealed partial class Version : System.IComparable, System.IComparable<System.Version>, System.IEquatable<System.Version> {
    public Version(int major, int minor) { }
    public Version(int major, int minor, int build) { }
    public Version(int major, int minor, int build, int revision) { }
    public Version(string version) { }
    public int Build { get { return default(int); } }
    public int Major { get { return default(int); } }
    public short MajorRevision { get { return default(short); } }
    public int Minor { get { return default(int); } }
    public short MinorRevision { get { return default(short); } }
    public int Revision { get { return default(int); } }
    public int CompareTo(System.Version value) { return default(int); }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Version obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Version v1, System.Version v2) { return default(bool); }
    public static bool operator >(System.Version v1, System.Version v2) { return default(bool); }
    public static bool operator >=(System.Version v1, System.Version v2) { return default(bool); }
    public static bool operator !=(System.Version v1, System.Version v2) { return default(bool); }
    public static bool operator <(System.Version v1, System.Version v2) { return default(bool); }
    public static bool operator <=(System.Version v1, System.Version v2) { return default(bool); }
    public static System.Version Parse(string input) { return default(System.Version); }
    int System.IComparable.CompareTo(object version) { return default(int); }
    public override string ToString() { return default(string); }
    public string ToString(int fieldCount) { return default(string); }
    public static bool TryParse(string input, out System.Version result) { result = default(System.Version); return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Size=1)]
  public partial struct Void {
  }
  public partial class WeakReference {
    public WeakReference(object target) { }
    public WeakReference(object target, bool trackResurrection) { }
    public virtual bool IsAlive { get { return default(bool); } }
    public virtual object Target { get { return default(object); } set { } }
    public virtual bool TrackResurrection { get { return default(bool); } }
    ~WeakReference() { }
  }
  public sealed partial class WeakReference<T> where T : class {
    public WeakReference(T target) { }
    public WeakReference(T target, bool trackResurrection) { }
    ~WeakReference() { }
    public void SetTarget(T target) { }
    public bool TryGetTarget(out T target) { target = default(T); return default(bool); }
  }
}
namespace System.Collections {
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct DictionaryEntry {
    public DictionaryEntry(object key, object value) { throw new System.NotImplementedException(); }
    public object Key { get { return default(object); } set { } }
    public object Value { get { return default(object); } set { } }
  }
  public partial interface ICollection : System.Collections.IEnumerable {
    int Count { get; }
    bool IsSynchronized { get; }
    object SyncRoot { get; }
    void CopyTo(System.Array array, int index);
  }
  public partial interface IComparer {
    int Compare(object x, object y);
  }
  public partial interface IDictionary : System.Collections.ICollection, System.Collections.IEnumerable {
    bool IsFixedSize { get; }
    bool IsReadOnly { get; }
    object this[object key] { get; set; }
    System.Collections.ICollection Keys { get; }
    System.Collections.ICollection Values { get; }
    void Add(object key, object value);
    void Clear();
    bool Contains(object key);
    new System.Collections.IDictionaryEnumerator GetEnumerator();
    void Remove(object key);
  }
  public partial interface IDictionaryEnumerator : System.Collections.IEnumerator {
    System.Collections.DictionaryEntry Entry { get; }
    object Key { get; }
    object Value { get; }
  }
  public partial interface IEnumerable {
    System.Collections.IEnumerator GetEnumerator();
  }
  public partial interface IEnumerator {
    object Current { get; }
    bool MoveNext();
    void Reset();
  }
  public partial interface IEqualityComparer {
    bool Equals(object x, object y);
    int GetHashCode(object obj);
  }
  public partial interface IList : System.Collections.ICollection, System.Collections.IEnumerable {
    bool IsFixedSize { get; }
    bool IsReadOnly { get; }
    object this[int index] { get; set; }
    int Add(object value);
    void Clear();
    bool Contains(object value);
    int IndexOf(object value);
    void Insert(int index, object value);
    void Remove(object value);
    void RemoveAt(int index);
  }
  public partial interface IStructuralComparable {
    int CompareTo(object other, System.Collections.IComparer comparer);
  }
  public partial interface IStructuralEquatable {
    bool Equals(object other, System.Collections.IEqualityComparer comparer);
    int GetHashCode(System.Collections.IEqualityComparer comparer);
  }
}
namespace System.Collections.Generic {
  public partial interface ICollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable {
    int Count { get; }
    bool IsReadOnly { get; }
    void Add(T item);
    void Clear();
    bool Contains(T item);
    void CopyTo(T[] array, int arrayIndex);
    bool Remove(T item);
  }
  public partial interface IComparer<in T> {
    int Compare(T x, T y);
  }
  public partial interface IDictionary<TKey, TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable {
    TValue this[TKey key] { get; set; }
    System.Collections.Generic.ICollection<TKey> Keys { get; }
    System.Collections.Generic.ICollection<TValue> Values { get; }
    void Add(TKey key, TValue value);
    bool ContainsKey(TKey key);
    bool Remove(TKey key);
    bool TryGetValue(TKey key, out TValue value);
  }
  public partial interface IEnumerable<out T> : System.Collections.IEnumerable {
    new System.Collections.Generic.IEnumerator<T> GetEnumerator();
  }
  public partial interface IEnumerator<out T> : System.Collections.IEnumerator, System.IDisposable {
    new T Current { get; }
  }
  public partial interface IEqualityComparer<in T> {
    bool Equals(T x, T y);
    int GetHashCode(T obj);
  }
  public partial interface IList<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable {
    T this[int index] { get; set; }
    int IndexOf(T item);
    void Insert(int index, T item);
    void RemoveAt(int index);
  }
  public partial interface IReadOnlyCollection<out T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable {
    int Count { get; }
  }
  public partial interface IReadOnlyDictionary<TKey, TValue> : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable {
    TValue this[TKey key] { get; }
    System.Collections.Generic.IEnumerable<TKey> Keys { get; }
    System.Collections.Generic.IEnumerable<TValue> Values { get; }
    bool ContainsKey(TKey key);
    bool TryGetValue(TKey key, out TValue value);
  }
  public partial interface IReadOnlyList<out T> : System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.IEnumerable {
    T this[int index] { get; }
  }
  public partial interface ISet<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable {
    new bool Add(T item);
    void ExceptWith(System.Collections.Generic.IEnumerable<T> other);
    void IntersectWith(System.Collections.Generic.IEnumerable<T> other);
    bool IsProperSubsetOf(System.Collections.Generic.IEnumerable<T> other);
    bool IsProperSupersetOf(System.Collections.Generic.IEnumerable<T> other);
    bool IsSubsetOf(System.Collections.Generic.IEnumerable<T> other);
    bool IsSupersetOf(System.Collections.Generic.IEnumerable<T> other);
    bool Overlaps(System.Collections.Generic.IEnumerable<T> other);
    bool SetEquals(System.Collections.Generic.IEnumerable<T> other);
    void SymmetricExceptWith(System.Collections.Generic.IEnumerable<T> other);
    void UnionWith(System.Collections.Generic.IEnumerable<T> other);
  }
  public partial class KeyNotFoundException : System.Exception {
    public KeyNotFoundException() { }
    public KeyNotFoundException(string message) { }
    public KeyNotFoundException(string message, System.Exception innerException) { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct KeyValuePair<TKey, TValue> {
    public KeyValuePair(TKey key, TValue value) { throw new System.NotImplementedException(); }
    public TKey Key { get { return default(TKey); } }
    public TValue Value { get { return default(TValue); } }
    public override string ToString() { return default(string); }
  }
}
namespace System.Collections.ObjectModel {
  public partial class Collection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public Collection() { }
    public Collection(System.Collections.Generic.IList<T> list) { }
    public int Count { get { return default(int); } }
    public T this[int index] { get { return default(T); } set { } }
    protected System.Collections.Generic.IList<T> Items { get { return default(System.Collections.Generic.IList<T>); } }
    bool System.Collections.Generic.ICollection<T>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(T item) { }
    public void Clear() { }
    protected virtual void ClearItems() { }
    public bool Contains(T item) { return default(bool); }
    public void CopyTo(T[] array, int index) { }
    public System.Collections.Generic.IEnumerator<T> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    public int IndexOf(T item) { return default(int); }
    public void Insert(int index, T item) { }
    protected virtual void InsertItem(int index, T item) { }
    public bool Remove(T item) { return default(bool); }
    public void RemoveAt(int index) { }
    protected virtual void RemoveItem(int index) { }
    protected virtual void SetItem(int index, T item) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
  }
  public partial class ReadOnlyCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public ReadOnlyCollection(System.Collections.Generic.IList<T> list) { }
    public int Count { get { return default(int); } }
    public T this[int index] { get { return default(T); } }
    protected System.Collections.Generic.IList<T> Items { get { return default(System.Collections.Generic.IList<T>); } }
    bool System.Collections.Generic.ICollection<T>.IsReadOnly { get { return default(bool); } }
    T System.Collections.Generic.IList<T>.this[int index] { get { return default(T); } set { } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public bool Contains(T value) { return default(bool); }
    public void CopyTo(T[] array, int index) { }
    public System.Collections.Generic.IEnumerator<T> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    public int IndexOf(T value) { return default(int); }
    void System.Collections.Generic.ICollection<T>.Add(T value) { }
    void System.Collections.Generic.ICollection<T>.Clear() { }
    bool System.Collections.Generic.ICollection<T>.Remove(T value) { return default(bool); }
    void System.Collections.Generic.IList<T>.Insert(int index, T value) { }
    void System.Collections.Generic.IList<T>.RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    void System.Collections.IList.Clear() { }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    void System.Collections.IList.RemoveAt(int index) { }
  }
}
namespace System.ComponentModel {
  [System.AttributeUsageAttribute((System.AttributeTargets)(32767))]
  public partial class DefaultValueAttribute : System.Attribute {
    public DefaultValueAttribute(bool value) { }
    public DefaultValueAttribute(byte value) { }
    public DefaultValueAttribute(char value) { }
    public DefaultValueAttribute(double value) { }
    public DefaultValueAttribute(short value) { }
    public DefaultValueAttribute(int value) { }
    public DefaultValueAttribute(long value) { }
    public DefaultValueAttribute(object value) { }
    public DefaultValueAttribute(float value) { }
    public DefaultValueAttribute(string value) { }
    public DefaultValueAttribute(System.Type type, string value) { }
    public virtual object Value { get { return default(object); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(6140))]
  public sealed partial class EditorBrowsableAttribute : System.Attribute {
    public EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState state) { }
    public System.ComponentModel.EditorBrowsableState State { get { return default(System.ComponentModel.EditorBrowsableState); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public enum EditorBrowsableState {
    Advanced = 2,
    Always = 0,
    Never = 1,
  }
}
namespace System.Diagnostics {
  [System.AttributeUsageAttribute((System.AttributeTargets)(68), AllowMultiple=true)]
  public sealed partial class ConditionalAttribute : System.Attribute {
    public ConditionalAttribute(string conditionString) { }
    public string ConditionString { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(3), AllowMultiple=false)]
  public sealed partial class DebuggableAttribute : System.Attribute {
    public DebuggableAttribute(System.Diagnostics.DebuggableAttribute.DebuggingModes modes) { }
    [System.FlagsAttribute]
    public enum DebuggingModes {
      Default = 1,
      DisableOptimizations = 256,
      EnableEditAndContinue = 4,
      IgnoreSymbolStoreSequencePoints = 2,
      None = 0,
    }
  }
}
namespace System.Globalization {
  [System.FlagsAttribute]
  public enum DateTimeStyles {
    AdjustToUniversal = 16,
    AllowInnerWhite = 4,
    AllowLeadingWhite = 1,
    AllowTrailingWhite = 2,
    AllowWhiteSpaces = 7,
    AssumeLocal = 32,
    AssumeUniversal = 64,
    NoCurrentDateDefault = 8,
    None = 0,
    RoundtripKind = 128,
  }
  [System.FlagsAttribute]
  public enum NumberStyles {
    AllowCurrencySymbol = 256,
    AllowDecimalPoint = 32,
    AllowExponent = 128,
    AllowHexSpecifier = 512,
    AllowLeadingSign = 4,
    AllowLeadingWhite = 1,
    AllowParentheses = 16,
    AllowThousands = 64,
    AllowTrailingSign = 8,
    AllowTrailingWhite = 2,
    Any = 511,
    Currency = 383,
    Float = 167,
    HexNumber = 515,
    Integer = 7,
    None = 0,
    Number = 111,
  }
  [System.FlagsAttribute]
  public enum TimeSpanStyles {
    AssumeNegative = 1,
    None = 0,
  }
}
namespace System.IO {
  public partial class DirectoryNotFoundException : System.IO.IOException {
    public DirectoryNotFoundException() { }
    public DirectoryNotFoundException(string message) { }
    public DirectoryNotFoundException(string message, System.Exception innerException) { }
  }
  public partial class FileLoadException : System.IO.IOException {
    public FileLoadException() { }
    public FileLoadException(string message) { }
    public FileLoadException(string message, System.Exception inner) { }
    public FileLoadException(string message, string fileName) { }
    public FileLoadException(string message, string fileName, System.Exception inner) { }
    public string FileName { get { return default(string); } }
    public override string Message { get { return default(string); } }
    public override string ToString() { return default(string); }
  }
  public partial class FileNotFoundException : System.IO.IOException {
    public FileNotFoundException() { }
    public FileNotFoundException(string message) { }
    public FileNotFoundException(string message, System.Exception innerException) { }
    public FileNotFoundException(string message, string fileName) { }
    public FileNotFoundException(string message, string fileName, System.Exception innerException) { }
    public string FileName { get { return default(string); } }
    public override string Message { get { return default(string); } }
    public override string ToString() { return default(string); }
  }
  public partial class IOException : System.Exception {
    public IOException() { }
    public IOException(string message) { }
    public IOException(string message, System.Exception innerException) { }
    public IOException(string message, int hresult) { }
  }
  public partial class PathTooLongException : System.IO.IOException {
    public PathTooLongException() { }
    public PathTooLongException(string message) { }
    public PathTooLongException(string message, System.Exception innerException) { }
  }
}
namespace System.Reflection {
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyCompanyAttribute : System.Attribute {
    public AssemblyCompanyAttribute(string company) { }
    public string Company { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyConfigurationAttribute : System.Attribute {
    public AssemblyConfigurationAttribute(string configuration) { }
    public string Configuration { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyCopyrightAttribute : System.Attribute {
    public AssemblyCopyrightAttribute(string copyright) { }
    public string Copyright { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyCultureAttribute : System.Attribute {
    public AssemblyCultureAttribute(string culture) { }
    public string Culture { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyDefaultAliasAttribute : System.Attribute {
    public AssemblyDefaultAliasAttribute(string defaultAlias) { }
    public string DefaultAlias { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyDelaySignAttribute : System.Attribute {
    public AssemblyDelaySignAttribute(bool delaySign) { }
    public bool DelaySign { get { return default(bool); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyDescriptionAttribute : System.Attribute {
    public AssemblyDescriptionAttribute(string description) { }
    public string Description { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyFileVersionAttribute : System.Attribute {
    public AssemblyFileVersionAttribute(string version) { }
    public string Version { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyFlagsAttribute : System.Attribute {
    public AssemblyFlagsAttribute(System.Reflection.AssemblyNameFlags assemblyFlags) { }
    public int AssemblyFlags { get { return default(int); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyInformationalVersionAttribute : System.Attribute {
    public AssemblyInformationalVersionAttribute(string informationalVersion) { }
    public string InformationalVersion { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyKeyFileAttribute : System.Attribute {
    public AssemblyKeyFileAttribute(string keyFile) { }
    public string KeyFile { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyKeyNameAttribute : System.Attribute {
    public AssemblyKeyNameAttribute(string keyName) { }
    public string KeyName { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), AllowMultiple=true, Inherited=false)]
  public sealed partial class AssemblyMetadataAttribute : System.Attribute {
    public AssemblyMetadataAttribute(string key, string value) { }
    public string Key { get { return default(string); } }
    public string Value { get { return default(string); } }
  }
  [System.FlagsAttribute]
  public enum AssemblyNameFlags {
    None = 0,
    PublicKey = 1,
    Retargetable = 256,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyProductAttribute : System.Attribute {
    public AssemblyProductAttribute(string product) { }
    public string Product { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false, AllowMultiple=false)]
  public sealed partial class AssemblySignatureKeyAttribute : System.Attribute {
    public AssemblySignatureKeyAttribute(string publicKey, string countersignature) { }
    public string Countersignature { get { return default(string); } }
    public string PublicKey { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyTitleAttribute : System.Attribute {
    public AssemblyTitleAttribute(string title) { }
    public string Title { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyTrademarkAttribute : System.Attribute {
    public AssemblyTrademarkAttribute(string trademark) { }
    public string Trademark { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false)]
  public sealed partial class AssemblyVersionAttribute : System.Attribute {
    public AssemblyVersionAttribute(string version) { }
    public string Version { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1036))]
  public sealed partial class DefaultMemberAttribute : System.Attribute {
    public DefaultMemberAttribute(string memberName) { }
    public string MemberName { get { return default(string); } }
  }
  public enum ProcessorArchitecture {
    Amd64 = 4,
    Arm = 5,
    IA64 = 3,
    MSIL = 1,
    None = 0,
    X86 = 2,
  }
}
namespace System.Runtime {
  public enum GCLargeObjectHeapCompactionMode {
    CompactOnce = 2,
    Default = 1,
  }
  public enum GCLatencyMode {
    Batch = 0,
    Interactive = 1,
    LowLatency = 2,
    SustainedLowLatency = 3,
  }
  public static partial class GCSettings {
    public static bool IsServerGC { get { return default(bool); } }
    public static System.Runtime.GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { get { return default(System.Runtime.GCLargeObjectHeapCompactionMode); } [System.Security.SecurityCriticalAttribute]set { } }
    public static System.Runtime.GCLatencyMode LatencyMode { get { return default(System.Runtime.GCLatencyMode); } [System.Security.SecurityCriticalAttribute]set { } }
  }
}
namespace System.Runtime.CompilerServices {
  [System.AttributeUsageAttribute((System.AttributeTargets)(256))]
  public sealed partial class AccessedThroughPropertyAttribute : System.Attribute {
    public AccessedThroughPropertyAttribute(string propertyName) { }
    public string PropertyName { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64), Inherited=false, AllowMultiple=false)]
  public sealed partial class AsyncStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute {
    public AsyncStateMachineAttribute(System.Type stateMachineType) : base (default(System.Type)) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2048), Inherited=false)]
  public sealed partial class CallerFilePathAttribute : System.Attribute {
    public CallerFilePathAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2048), Inherited=false)]
  public sealed partial class CallerLineNumberAttribute : System.Attribute {
    public CallerLineNumberAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2048), Inherited=false)]
  public sealed partial class CallerMemberNameAttribute : System.Attribute {
    public CallerMemberNameAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(71))]
  public partial class CompilationRelaxationsAttribute : System.Attribute {
    public CompilationRelaxationsAttribute(int relaxations) { }
    public int CompilationRelaxations { get { return default(int); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(32767), Inherited=true)]
  public sealed partial class CompilerGeneratedAttribute : System.Attribute {
    public CompilerGeneratedAttribute() { }
  }
  public sealed partial class ConditionalWeakTable<TKey, TValue> where TKey : class where TValue : class {
    public ConditionalWeakTable() { }
    public void Add(TKey key, TValue value) { }
    ~ConditionalWeakTable() { }
    public TValue GetOrCreateValue(TKey key) { return default(TValue); }
    public TValue GetValue(TKey key, System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.CreateValueCallback createValueCallback) { return default(TValue); }
    public bool Remove(TKey key) { return default(bool); }
    public bool TryGetValue(TKey key, out TValue value) { value = default(TValue); return default(bool); }
    public delegate TValue CreateValueCallback(TKey key);
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2304), Inherited=false)]
  public abstract partial class CustomConstantAttribute : System.Attribute {
    protected CustomConstantAttribute() { }
    public abstract object Value { get; }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2304), Inherited=false)]
  public sealed partial class DateTimeConstantAttribute : System.Runtime.CompilerServices.CustomConstantAttribute {
    public DateTimeConstantAttribute(long ticks) { }
    public override object Value { get { return default(object); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2304), Inherited=false)]
  public sealed partial class DecimalConstantAttribute : System.Attribute {
    public DecimalConstantAttribute(byte scale, byte sign, int hi, int mid, int low) { }
    [System.CLSCompliantAttribute(false)]
    public DecimalConstantAttribute(byte scale, byte sign, uint hi, uint mid, uint low) { }
    public decimal Value { get { return default(decimal); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), AllowMultiple=false, Inherited=false)]
  public sealed partial class DisablePrivateReflectionAttribute : System.Attribute {
    public DisablePrivateReflectionAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(69))]
  public sealed partial class ExtensionAttribute : System.Attribute {
    public ExtensionAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(256), Inherited=false)]
  public sealed partial class FixedBufferAttribute : System.Attribute {
    public FixedBufferAttribute(System.Type elementType, int length) { }
    public System.Type ElementType { get { return default(System.Type); } }
    public int Length { get { return default(int); } }
  }
  public static partial class FormattableStringFactory {
    public static System.FormattableString Create(string format, params object[] arguments) { return default(System.FormattableString); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(128), Inherited=true)]
  public sealed partial class IndexerNameAttribute : System.Attribute {
    public IndexerNameAttribute(string indexerName) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), AllowMultiple=true, Inherited=false)]
  public sealed partial class InternalsVisibleToAttribute : System.Attribute {
    public InternalsVisibleToAttribute(string assemblyName) { }
    public string AssemblyName { get { return default(string); } }
  }
  public static partial class IsConst {
  }
  public partial interface IStrongBox {
    object Value { get; set; }
  }
  public static partial class IsVolatile {
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64), Inherited=false, AllowMultiple=false)]
  public sealed partial class IteratorStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute {
    public IteratorStateMachineAttribute(System.Type stateMachineType) : base (default(System.Type)) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(96), Inherited=false)]
  public sealed partial class MethodImplAttribute : System.Attribute {
    public MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions methodImplOptions) { }
    public System.Runtime.CompilerServices.MethodImplOptions Value { get { return default(System.Runtime.CompilerServices.MethodImplOptions); } }
  }
  [System.FlagsAttribute]
  public enum MethodImplOptions {
    AggressiveInlining = 256,
    NoInlining = 8,
    NoOptimization = 64,
    PreserveSig = 128,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), AllowMultiple=false)]
  public sealed partial class ReferenceAssemblyAttribute : System.Attribute {
    public ReferenceAssemblyAttribute() { }
    public ReferenceAssemblyAttribute(string description) { }
    public string Description { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), Inherited=false, AllowMultiple=false)]
  public sealed partial class RuntimeCompatibilityAttribute : System.Attribute {
    public RuntimeCompatibilityAttribute() { }
    public bool WrapNonExceptionThrows { get { return default(bool); } set { } }
  }
  public static partial class RuntimeHelpers {
    public static int OffsetToStringData { get { return default(int); } }
    public static void EnsureSufficientExecutionStack() { }
    public static int GetHashCode(object o) { return default(int); }
    public static object GetObjectValue(object obj) { return default(object); }
    public static void InitializeArray(System.Array array, System.RuntimeFieldHandle fldHandle) { }
    public static void RunClassConstructor(System.RuntimeTypeHandle type) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64), Inherited=false, AllowMultiple=false)]
  public partial class StateMachineAttribute : System.Attribute {
    public StateMachineAttribute(System.Type stateMachineType) { }
    public System.Type StateMachineType { get { return default(System.Type); } }
  }
  public partial class StrongBox<T> : System.Runtime.CompilerServices.IStrongBox {
    public T Value;
    public StrongBox() { }
    public StrongBox(T value) { }
    object System.Runtime.CompilerServices.IStrongBox.Value { get { return default(object); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(5148), Inherited=false, AllowMultiple=false)]
  public sealed partial class TypeForwardedFromAttribute : System.Attribute {
    public TypeForwardedFromAttribute(string assemblyFullName) { }
    public string AssemblyFullName { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), AllowMultiple=true, Inherited=false)]
  public sealed partial class TypeForwardedToAttribute : System.Attribute {
    public TypeForwardedToAttribute(System.Type destination) { }
    public System.Type Destination { get { return default(System.Type); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(8))]
  public sealed partial class UnsafeValueTypeAttribute : System.Attribute {
    public UnsafeValueTypeAttribute() { }
  }
}
namespace System.Runtime.ExceptionServices {
  public sealed partial class ExceptionDispatchInfo {
    internal ExceptionDispatchInfo() { }
    public System.Exception SourceException { get { return default(System.Exception); } }
    public static System.Runtime.ExceptionServices.ExceptionDispatchInfo Capture(System.Exception source) { return default(System.Runtime.ExceptionServices.ExceptionDispatchInfo); }
    public void Throw() { }
  }
}
namespace System.Runtime.InteropServices {
  public enum CharSet {
    Ansi = 2,
    Unicode = 3,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(5597), Inherited=false)]
  public sealed partial class ComVisibleAttribute : System.Attribute {
    public ComVisibleAttribute(bool visibility) { }
    public bool Value { get { return default(bool); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(256), Inherited=false)]
  public sealed partial class FieldOffsetAttribute : System.Attribute {
    public FieldOffsetAttribute(int offset) { }
    public int Value { get { return default(int); } }
  }
  public enum LayoutKind {
    Auto = 3,
    Explicit = 2,
    Sequential = 0,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2048), Inherited=false)]
  public sealed partial class OutAttribute : System.Attribute {
    public OutAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(12), Inherited=false)]
  public sealed partial class StructLayoutAttribute : System.Attribute {
    public System.Runtime.InteropServices.CharSet CharSet;
    public int Pack;
    public int Size;
    public StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind layoutKind) { }
    public System.Runtime.InteropServices.LayoutKind Value { get { return default(System.Runtime.InteropServices.LayoutKind); } }
  }
}
namespace System.Runtime.Versioning {
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), AllowMultiple=false, Inherited=false)]
  public sealed partial class TargetFrameworkAttribute : System.Attribute {
    public TargetFrameworkAttribute(string frameworkName) { }
    public string FrameworkDisplayName { get { return default(string); } set { } }
    public string FrameworkName { get { return default(string); } }
  }
}
namespace System.Security {
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), AllowMultiple=false, Inherited=false)]
  public sealed partial class AllowPartiallyTrustedCallersAttribute : System.Attribute {
    public AllowPartiallyTrustedCallersAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(5501), AllowMultiple=false, Inherited=false)]
  public sealed partial class SecurityCriticalAttribute : System.Attribute {
    public SecurityCriticalAttribute() { }
  }
  public partial class SecurityException : System.Exception {
    public SecurityException() { }
    public SecurityException(string message) { }
    public SecurityException(string message, System.Exception inner) { }
    public override string ToString() { return default(string); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(5500), AllowMultiple=false, Inherited=false)]
  public sealed partial class SecuritySafeCriticalAttribute : System.Attribute {
    public SecuritySafeCriticalAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), AllowMultiple=false, Inherited=false)]
  public sealed partial class SecurityTransparentAttribute : System.Attribute {
    public SecurityTransparentAttribute() { }
  }
  public partial class VerificationException : System.Exception {
    public VerificationException() { }
    public VerificationException(string message) { }
    public VerificationException(string message, System.Exception innerException) { }
  }
}
namespace System.Text {
  public sealed partial class StringBuilder {
    public StringBuilder() { }
    public StringBuilder(int capacity) { }
    public StringBuilder(int capacity, int maxCapacity) { }
    public StringBuilder(string value) { }
    public StringBuilder(string value, int capacity) { }
    public StringBuilder(string value, int startIndex, int length, int capacity) { }
    public int Capacity { get { return default(int); } set { } }
    [System.Runtime.CompilerServices.IndexerName("Chars")]
    public char this[int index] { get { return default(char); } set { } }
    public int Length { get { return default(int); } set { } }
    public int MaxCapacity { get { return default(int); } }
    public System.Text.StringBuilder Append(bool value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(byte value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(char value) { return default(System.Text.StringBuilder); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe System.Text.StringBuilder Append(char* value, int valueCount) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(char value, int repeatCount) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(char[] value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(char[] value, int startIndex, int charCount) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(decimal value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(double value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(short value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(int value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(long value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(object value) { return default(System.Text.StringBuilder); }
    [System.CLSCompliantAttribute(false)]
    public System.Text.StringBuilder Append(sbyte value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(float value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(string value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Append(string value, int startIndex, int count) { return default(System.Text.StringBuilder); }
    [System.CLSCompliantAttribute(false)]
    public System.Text.StringBuilder Append(ushort value) { return default(System.Text.StringBuilder); }
    [System.CLSCompliantAttribute(false)]
    public System.Text.StringBuilder Append(uint value) { return default(System.Text.StringBuilder); }
    [System.CLSCompliantAttribute(false)]
    public System.Text.StringBuilder Append(ulong value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, object arg0) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, object arg0, object arg1) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, object arg0, object arg1, object arg2) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, params object[] args) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder AppendFormat(string format, object arg0) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder AppendFormat(string format, params object[] args) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder AppendLine() { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder AppendLine(string value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Clear() { return default(System.Text.StringBuilder); }
    public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) { }
    public int EnsureCapacity(int capacity) { return default(int); }
    public bool Equals(System.Text.StringBuilder sb) { return default(bool); }
    public System.Text.StringBuilder Insert(int index, bool value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Insert(int index, byte value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Insert(int index, char value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Insert(int index, char[] value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Insert(int index, char[] value, int startIndex, int charCount) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Insert(int index, decimal value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Insert(int index, double value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Insert(int index, short value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Insert(int index, int value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Insert(int index, long value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Insert(int index, object value) { return default(System.Text.StringBuilder); }
    [System.CLSCompliantAttribute(false)]
    public System.Text.StringBuilder Insert(int index, sbyte value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Insert(int index, float value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Insert(int index, string value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Insert(int index, string value, int count) { return default(System.Text.StringBuilder); }
    [System.CLSCompliantAttribute(false)]
    public System.Text.StringBuilder Insert(int index, ushort value) { return default(System.Text.StringBuilder); }
    [System.CLSCompliantAttribute(false)]
    public System.Text.StringBuilder Insert(int index, uint value) { return default(System.Text.StringBuilder); }
    [System.CLSCompliantAttribute(false)]
    public System.Text.StringBuilder Insert(int index, ulong value) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Remove(int startIndex, int length) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Replace(char oldChar, char newChar) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Replace(char oldChar, char newChar, int startIndex, int count) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Replace(string oldValue, string newValue) { return default(System.Text.StringBuilder); }
    public System.Text.StringBuilder Replace(string oldValue, string newValue, int startIndex, int count) { return default(System.Text.StringBuilder); }
    public override string ToString() { return default(string); }
    public string ToString(int startIndex, int length) { return default(string); }
  }
}
namespace System.Threading {
  public enum LazyThreadSafetyMode {
    ExecutionAndPublication = 2,
    None = 0,
    PublicationOnly = 1,
  }
  public static partial class Timeout {
    public const int Infinite = -1;
    public static readonly System.TimeSpan InfiniteTimeSpan;
  }
  public abstract partial class WaitHandle : System.IDisposable {
    protected static readonly System.IntPtr InvalidHandle;
    public const int WaitTimeout = 258;
    protected WaitHandle() { }
    public void Dispose() { }
    protected virtual void Dispose(bool explicitDisposing) { }
    public static bool WaitAll(System.Threading.WaitHandle[] waitHandles) { return default(bool); }
    public static bool WaitAll(System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout) { return default(bool); }
    public static bool WaitAll(System.Threading.WaitHandle[] waitHandles, System.TimeSpan timeout) { return default(bool); }
    public static int WaitAny(System.Threading.WaitHandle[] waitHandles) { return default(int); }
    public static int WaitAny(System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout) { return default(int); }
    public static int WaitAny(System.Threading.WaitHandle[] waitHandles, System.TimeSpan timeout) { return default(int); }
    public virtual bool WaitOne() { return default(bool); }
    public virtual bool WaitOne(int millisecondsTimeout) { return default(bool); }
    public virtual bool WaitOne(System.TimeSpan timeout) { return default(bool); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Runtime.CompilerServices.VisualC")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Runtime.CompilerServices.VisualC")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Runtime.CompilerServices.VisualC")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Runtime.CompilerServices {
  [System.Runtime.InteropServices.ComVisibleAttribute(true)]
  public partial class CallConvCdecl {
    internal CallConvCdecl() { }
  }
  [System.Runtime.InteropServices.ComVisibleAttribute(true)]
  public partial class CallConvFastcall {
    internal CallConvFastcall() { }
  }
  [System.Runtime.InteropServices.ComVisibleAttribute(true)]
  public partial class CallConvStdcall {
    internal CallConvStdcall() { }
  }
  [System.Runtime.InteropServices.ComVisibleAttribute(true)]
  public partial class CallConvThiscall {
    internal CallConvThiscall() { }
  }
  public static partial class IsBoxed {
  }
  public static partial class IsByValue {
  }
  [System.Runtime.InteropServices.ComVisibleAttribute(true)]
  public static partial class IsCopyConstructed {
  }
  public static partial class IsExplicitlyDereferenced {
  }
  public static partial class IsImplicitlyDereferenced {
  }
  public static partial class IsJitIntrinsic {
  }
  public static partial class IsLong {
  }
  public static partial class IsSignUnspecifiedByte {
  }
  public static partial class IsUdtReturn {
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(8), Inherited=true)]
  [System.Runtime.InteropServices.ComVisibleAttribute(true)]
  public sealed partial class NativeCppClassAttribute : System.Attribute {
    public NativeCppClassAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1052), AllowMultiple=true, Inherited=false)]
  [System.Runtime.InteropServices.ComVisibleAttribute(true)]
  public sealed partial class RequiredAttributeAttribute : System.Attribute {
    public RequiredAttributeAttribute(System.Type requiredContract) { }
    public System.Type RequiredContract { get { return default(System.Type); } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Runtime.Extensions")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Runtime.Extensions")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Runtime.Extensions")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System {
  public static partial class BitConverter {
    public static readonly bool IsLittleEndian;
    public static long DoubleToInt64Bits(double value) { return default(long); }
    public static byte[] GetBytes(bool value) { return default(byte[]); }
    public static byte[] GetBytes(char value) { return default(byte[]); }
    public static byte[] GetBytes(double value) { return default(byte[]); }
    public static byte[] GetBytes(short value) { return default(byte[]); }
    public static byte[] GetBytes(int value) { return default(byte[]); }
    public static byte[] GetBytes(long value) { return default(byte[]); }
    public static byte[] GetBytes(float value) { return default(byte[]); }
    [System.CLSCompliantAttribute(false)]
    public static byte[] GetBytes(ushort value) { return default(byte[]); }
    [System.CLSCompliantAttribute(false)]
    public static byte[] GetBytes(uint value) { return default(byte[]); }
    [System.CLSCompliantAttribute(false)]
    public static byte[] GetBytes(ulong value) { return default(byte[]); }
    public static double Int64BitsToDouble(long value) { return default(double); }
    public static bool ToBoolean(byte[] value, int startIndex) { return default(bool); }
    public static char ToChar(byte[] value, int startIndex) { return default(char); }
    public static double ToDouble(byte[] value, int startIndex) { return default(double); }
    public static short ToInt16(byte[] value, int startIndex) { return default(short); }
    public static int ToInt32(byte[] value, int startIndex) { return default(int); }
    public static long ToInt64(byte[] value, int startIndex) { return default(long); }
    public static float ToSingle(byte[] value, int startIndex) { return default(float); }
    public static string ToString(byte[] value) { return default(string); }
    public static string ToString(byte[] value, int startIndex) { return default(string); }
    public static string ToString(byte[] value, int startIndex, int length) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(byte[] value, int startIndex) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(byte[] value, int startIndex) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(byte[] value, int startIndex) { return default(ulong); }
  }
  public static partial class Convert {
    public static object ChangeType(object value, System.Type conversionType) { return default(object); }
    public static object ChangeType(object value, System.Type conversionType, System.IFormatProvider provider) { return default(object); }
    public static object ChangeType(object value, System.TypeCode typeCode, System.IFormatProvider provider) { return default(object); }
    public static byte[] FromBase64CharArray(char[] inArray, int offset, int length) { return default(byte[]); }
    public static byte[] FromBase64String(string s) { return default(byte[]); }
    public static System.TypeCode GetTypeCode(object value) { return default(System.TypeCode); }
    public static int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut) { return default(int); }
    public static string ToBase64String(byte[] inArray) { return default(string); }
    public static string ToBase64String(byte[] inArray, int offset, int length) { return default(string); }
    public static bool ToBoolean(bool value) { return default(bool); }
    public static bool ToBoolean(byte value) { return default(bool); }
    public static bool ToBoolean(decimal value) { return default(bool); }
    public static bool ToBoolean(double value) { return default(bool); }
    public static bool ToBoolean(short value) { return default(bool); }
    public static bool ToBoolean(int value) { return default(bool); }
    public static bool ToBoolean(long value) { return default(bool); }
    public static bool ToBoolean(object value) { return default(bool); }
    public static bool ToBoolean(object value, System.IFormatProvider provider) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool ToBoolean(sbyte value) { return default(bool); }
    public static bool ToBoolean(float value) { return default(bool); }
    public static bool ToBoolean(string value) { return default(bool); }
    public static bool ToBoolean(string value, System.IFormatProvider provider) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool ToBoolean(ushort value) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool ToBoolean(uint value) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool ToBoolean(ulong value) { return default(bool); }
    public static byte ToByte(bool value) { return default(byte); }
    public static byte ToByte(byte value) { return default(byte); }
    public static byte ToByte(char value) { return default(byte); }
    public static byte ToByte(decimal value) { return default(byte); }
    public static byte ToByte(double value) { return default(byte); }
    public static byte ToByte(short value) { return default(byte); }
    public static byte ToByte(int value) { return default(byte); }
    public static byte ToByte(long value) { return default(byte); }
    public static byte ToByte(object value) { return default(byte); }
    public static byte ToByte(object value, System.IFormatProvider provider) { return default(byte); }
    [System.CLSCompliantAttribute(false)]
    public static byte ToByte(sbyte value) { return default(byte); }
    public static byte ToByte(float value) { return default(byte); }
    public static byte ToByte(string value) { return default(byte); }
    public static byte ToByte(string value, System.IFormatProvider provider) { return default(byte); }
    public static byte ToByte(string value, int fromBase) { return default(byte); }
    [System.CLSCompliantAttribute(false)]
    public static byte ToByte(ushort value) { return default(byte); }
    [System.CLSCompliantAttribute(false)]
    public static byte ToByte(uint value) { return default(byte); }
    [System.CLSCompliantAttribute(false)]
    public static byte ToByte(ulong value) { return default(byte); }
    public static char ToChar(byte value) { return default(char); }
    public static char ToChar(short value) { return default(char); }
    public static char ToChar(int value) { return default(char); }
    public static char ToChar(long value) { return default(char); }
    public static char ToChar(object value) { return default(char); }
    public static char ToChar(object value, System.IFormatProvider provider) { return default(char); }
    [System.CLSCompliantAttribute(false)]
    public static char ToChar(sbyte value) { return default(char); }
    public static char ToChar(string value) { return default(char); }
    public static char ToChar(string value, System.IFormatProvider provider) { return default(char); }
    [System.CLSCompliantAttribute(false)]
    public static char ToChar(ushort value) { return default(char); }
    [System.CLSCompliantAttribute(false)]
    public static char ToChar(uint value) { return default(char); }
    [System.CLSCompliantAttribute(false)]
    public static char ToChar(ulong value) { return default(char); }
    public static System.DateTime ToDateTime(object value) { return default(System.DateTime); }
    public static System.DateTime ToDateTime(object value, System.IFormatProvider provider) { return default(System.DateTime); }
    public static System.DateTime ToDateTime(string value) { return default(System.DateTime); }
    public static System.DateTime ToDateTime(string value, System.IFormatProvider provider) { return default(System.DateTime); }
    public static decimal ToDecimal(bool value) { return default(decimal); }
    public static decimal ToDecimal(byte value) { return default(decimal); }
    public static decimal ToDecimal(decimal value) { return default(decimal); }
    public static decimal ToDecimal(double value) { return default(decimal); }
    public static decimal ToDecimal(short value) { return default(decimal); }
    public static decimal ToDecimal(int value) { return default(decimal); }
    public static decimal ToDecimal(long value) { return default(decimal); }
    public static decimal ToDecimal(object value) { return default(decimal); }
    public static decimal ToDecimal(object value, System.IFormatProvider provider) { return default(decimal); }
    [System.CLSCompliantAttribute(false)]
    public static decimal ToDecimal(sbyte value) { return default(decimal); }
    public static decimal ToDecimal(float value) { return default(decimal); }
    public static decimal ToDecimal(string value) { return default(decimal); }
    public static decimal ToDecimal(string value, System.IFormatProvider provider) { return default(decimal); }
    [System.CLSCompliantAttribute(false)]
    public static decimal ToDecimal(ushort value) { return default(decimal); }
    [System.CLSCompliantAttribute(false)]
    public static decimal ToDecimal(uint value) { return default(decimal); }
    [System.CLSCompliantAttribute(false)]
    public static decimal ToDecimal(ulong value) { return default(decimal); }
    public static double ToDouble(bool value) { return default(double); }
    public static double ToDouble(byte value) { return default(double); }
    public static double ToDouble(decimal value) { return default(double); }
    public static double ToDouble(double value) { return default(double); }
    public static double ToDouble(short value) { return default(double); }
    public static double ToDouble(int value) { return default(double); }
    public static double ToDouble(long value) { return default(double); }
    public static double ToDouble(object value) { return default(double); }
    public static double ToDouble(object value, System.IFormatProvider provider) { return default(double); }
    [System.CLSCompliantAttribute(false)]
    public static double ToDouble(sbyte value) { return default(double); }
    public static double ToDouble(float value) { return default(double); }
    public static double ToDouble(string value) { return default(double); }
    public static double ToDouble(string value, System.IFormatProvider provider) { return default(double); }
    [System.CLSCompliantAttribute(false)]
    public static double ToDouble(ushort value) { return default(double); }
    [System.CLSCompliantAttribute(false)]
    public static double ToDouble(uint value) { return default(double); }
    [System.CLSCompliantAttribute(false)]
    public static double ToDouble(ulong value) { return default(double); }
    public static short ToInt16(bool value) { return default(short); }
    public static short ToInt16(byte value) { return default(short); }
    public static short ToInt16(char value) { return default(short); }
    public static short ToInt16(decimal value) { return default(short); }
    public static short ToInt16(double value) { return default(short); }
    public static short ToInt16(short value) { return default(short); }
    public static short ToInt16(int value) { return default(short); }
    public static short ToInt16(long value) { return default(short); }
    public static short ToInt16(object value) { return default(short); }
    public static short ToInt16(object value, System.IFormatProvider provider) { return default(short); }
    [System.CLSCompliantAttribute(false)]
    public static short ToInt16(sbyte value) { return default(short); }
    public static short ToInt16(float value) { return default(short); }
    public static short ToInt16(string value) { return default(short); }
    public static short ToInt16(string value, System.IFormatProvider provider) { return default(short); }
    public static short ToInt16(string value, int fromBase) { return default(short); }
    [System.CLSCompliantAttribute(false)]
    public static short ToInt16(ushort value) { return default(short); }
    [System.CLSCompliantAttribute(false)]
    public static short ToInt16(uint value) { return default(short); }
    [System.CLSCompliantAttribute(false)]
    public static short ToInt16(ulong value) { return default(short); }
    public static int ToInt32(bool value) { return default(int); }
    public static int ToInt32(byte value) { return default(int); }
    public static int ToInt32(char value) { return default(int); }
    public static int ToInt32(decimal value) { return default(int); }
    public static int ToInt32(double value) { return default(int); }
    public static int ToInt32(short value) { return default(int); }
    public static int ToInt32(int value) { return default(int); }
    public static int ToInt32(long value) { return default(int); }
    public static int ToInt32(object value) { return default(int); }
    public static int ToInt32(object value, System.IFormatProvider provider) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    public static int ToInt32(sbyte value) { return default(int); }
    public static int ToInt32(float value) { return default(int); }
    public static int ToInt32(string value) { return default(int); }
    public static int ToInt32(string value, System.IFormatProvider provider) { return default(int); }
    public static int ToInt32(string value, int fromBase) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    public static int ToInt32(ushort value) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    public static int ToInt32(uint value) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    public static int ToInt32(ulong value) { return default(int); }
    public static long ToInt64(bool value) { return default(long); }
    public static long ToInt64(byte value) { return default(long); }
    public static long ToInt64(char value) { return default(long); }
    public static long ToInt64(decimal value) { return default(long); }
    public static long ToInt64(double value) { return default(long); }
    public static long ToInt64(short value) { return default(long); }
    public static long ToInt64(int value) { return default(long); }
    public static long ToInt64(long value) { return default(long); }
    public static long ToInt64(object value) { return default(long); }
    public static long ToInt64(object value, System.IFormatProvider provider) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static long ToInt64(sbyte value) { return default(long); }
    public static long ToInt64(float value) { return default(long); }
    public static long ToInt64(string value) { return default(long); }
    public static long ToInt64(string value, System.IFormatProvider provider) { return default(long); }
    public static long ToInt64(string value, int fromBase) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static long ToInt64(ushort value) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static long ToInt64(uint value) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static long ToInt64(ulong value) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(bool value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(byte value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(char value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(decimal value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(double value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(short value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(int value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(long value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(object value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(object value, System.IFormatProvider provider) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(sbyte value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(float value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(string value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(string value, System.IFormatProvider provider) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(string value, int fromBase) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(ushort value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(uint value) { return default(sbyte); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(ulong value) { return default(sbyte); }
    public static float ToSingle(bool value) { return default(float); }
    public static float ToSingle(byte value) { return default(float); }
    public static float ToSingle(decimal value) { return default(float); }
    public static float ToSingle(double value) { return default(float); }
    public static float ToSingle(short value) { return default(float); }
    public static float ToSingle(int value) { return default(float); }
    public static float ToSingle(long value) { return default(float); }
    public static float ToSingle(object value) { return default(float); }
    public static float ToSingle(object value, System.IFormatProvider provider) { return default(float); }
    [System.CLSCompliantAttribute(false)]
    public static float ToSingle(sbyte value) { return default(float); }
    public static float ToSingle(float value) { return default(float); }
    public static float ToSingle(string value) { return default(float); }
    public static float ToSingle(string value, System.IFormatProvider provider) { return default(float); }
    [System.CLSCompliantAttribute(false)]
    public static float ToSingle(ushort value) { return default(float); }
    [System.CLSCompliantAttribute(false)]
    public static float ToSingle(uint value) { return default(float); }
    [System.CLSCompliantAttribute(false)]
    public static float ToSingle(ulong value) { return default(float); }
    public static string ToString(bool value) { return default(string); }
    public static string ToString(bool value, System.IFormatProvider provider) { return default(string); }
    public static string ToString(byte value) { return default(string); }
    public static string ToString(byte value, System.IFormatProvider provider) { return default(string); }
    public static string ToString(byte value, int toBase) { return default(string); }
    public static string ToString(char value) { return default(string); }
    public static string ToString(char value, System.IFormatProvider provider) { return default(string); }
    public static string ToString(System.DateTime value) { return default(string); }
    public static string ToString(System.DateTime value, System.IFormatProvider provider) { return default(string); }
    public static string ToString(decimal value) { return default(string); }
    public static string ToString(decimal value, System.IFormatProvider provider) { return default(string); }
    public static string ToString(double value) { return default(string); }
    public static string ToString(double value, System.IFormatProvider provider) { return default(string); }
    public static string ToString(short value) { return default(string); }
    public static string ToString(short value, System.IFormatProvider provider) { return default(string); }
    public static string ToString(short value, int toBase) { return default(string); }
    public static string ToString(int value) { return default(string); }
    public static string ToString(int value, System.IFormatProvider provider) { return default(string); }
    public static string ToString(int value, int toBase) { return default(string); }
    public static string ToString(long value) { return default(string); }
    public static string ToString(long value, System.IFormatProvider provider) { return default(string); }
    public static string ToString(long value, int toBase) { return default(string); }
    public static string ToString(object value) { return default(string); }
    public static string ToString(object value, System.IFormatProvider provider) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(sbyte value) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(sbyte value, System.IFormatProvider provider) { return default(string); }
    public static string ToString(float value) { return default(string); }
    public static string ToString(float value, System.IFormatProvider provider) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(ushort value) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(ushort value, System.IFormatProvider provider) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(uint value) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(uint value, System.IFormatProvider provider) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(ulong value) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(ulong value, System.IFormatProvider provider) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(bool value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(byte value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(char value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(decimal value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(double value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(short value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(int value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(long value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(object value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(object value, System.IFormatProvider provider) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(sbyte value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(float value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(string value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(string value, System.IFormatProvider provider) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(string value, int fromBase) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(ushort value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(uint value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(ulong value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(bool value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(byte value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(char value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(decimal value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(double value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(short value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(int value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(long value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(object value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(object value, System.IFormatProvider provider) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(sbyte value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(float value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(string value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(string value, System.IFormatProvider provider) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(string value, int fromBase) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(ushort value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(uint value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(ulong value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(bool value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(byte value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(char value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(decimal value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(double value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(short value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(int value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(long value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(object value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(object value, System.IFormatProvider provider) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(sbyte value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(float value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(string value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(string value, System.IFormatProvider provider) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(string value, int fromBase) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(ushort value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(uint value) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(ulong value) { return default(ulong); }
  }
  public static partial class Environment {
    public static int CurrentManagedThreadId { get { return default(int); } }
    public static bool HasShutdownStarted { get { return default(bool); } }
    public static string MachineName { get { return default(string); } }
    public static string NewLine { get { return default(string); } }
    public static int ProcessorCount { get { return default(int); } }
    public static string StackTrace { get { return default(string); } }
    public static int TickCount { get { return default(int); } }
    public static void Exit(int exitCode) { }
    public static string ExpandEnvironmentVariables(string name) { return default(string); }
    [System.Security.SecurityCriticalAttribute]
    public static void FailFast(string message) { }
    [System.Security.SecurityCriticalAttribute]
    public static void FailFast(string message, System.Exception exception) { }
    public static string[] GetCommandLineArgs() { return default(string[]); }
    public static string GetEnvironmentVariable(string variable) { return default(string); }
    public static System.Collections.IDictionary GetEnvironmentVariables() { return default(System.Collections.IDictionary); }
    public static void SetEnvironmentVariable(string variable, string value) { }
  }
  public static partial class Math {
    public const double E = 2.7182818284590451;
    public const double PI = 3.1415926535897931;
    public static decimal Abs(decimal value) { return default(decimal); }
    public static double Abs(double value) { return default(double); }
    public static short Abs(short value) { return default(short); }
    public static int Abs(int value) { return default(int); }
    public static long Abs(long value) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte Abs(sbyte value) { return default(sbyte); }
    public static float Abs(float value) { return default(float); }
    public static double Acos(double d) { return default(double); }
    public static double Asin(double d) { return default(double); }
    public static double Atan(double d) { return default(double); }
    public static double Atan2(double y, double x) { return default(double); }
    public static decimal Ceiling(decimal d) { return default(decimal); }
    public static double Ceiling(double a) { return default(double); }
    public static double Cos(double d) { return default(double); }
    public static double Cosh(double value) { return default(double); }
    public static double Exp(double d) { return default(double); }
    public static decimal Floor(decimal d) { return default(decimal); }
    public static double Floor(double d) { return default(double); }
    public static double IEEERemainder(double x, double y) { return default(double); }
    public static double Log(double d) { return default(double); }
    public static double Log(double a, double newBase) { return default(double); }
    public static double Log10(double d) { return default(double); }
    public static byte Max(byte val1, byte val2) { return default(byte); }
    public static decimal Max(decimal val1, decimal val2) { return default(decimal); }
    public static double Max(double val1, double val2) { return default(double); }
    public static short Max(short val1, short val2) { return default(short); }
    public static int Max(int val1, int val2) { return default(int); }
    public static long Max(long val1, long val2) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte Max(sbyte val1, sbyte val2) { return default(sbyte); }
    public static float Max(float val1, float val2) { return default(float); }
    [System.CLSCompliantAttribute(false)]
    public static ushort Max(ushort val1, ushort val2) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static uint Max(uint val1, uint val2) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static ulong Max(ulong val1, ulong val2) { return default(ulong); }
    public static byte Min(byte val1, byte val2) { return default(byte); }
    public static decimal Min(decimal val1, decimal val2) { return default(decimal); }
    public static double Min(double val1, double val2) { return default(double); }
    public static short Min(short val1, short val2) { return default(short); }
    public static int Min(int val1, int val2) { return default(int); }
    public static long Min(long val1, long val2) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte Min(sbyte val1, sbyte val2) { return default(sbyte); }
    public static float Min(float val1, float val2) { return default(float); }
    [System.CLSCompliantAttribute(false)]
    public static ushort Min(ushort val1, ushort val2) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static uint Min(uint val1, uint val2) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static ulong Min(ulong val1, ulong val2) { return default(ulong); }
    public static double Pow(double x, double y) { return default(double); }
    public static decimal Round(decimal d) { return default(decimal); }
    public static decimal Round(decimal d, int decimals) { return default(decimal); }
    public static decimal Round(decimal d, int decimals, System.MidpointRounding mode) { return default(decimal); }
    public static decimal Round(decimal d, System.MidpointRounding mode) { return default(decimal); }
    public static double Round(double a) { return default(double); }
    public static double Round(double value, int digits) { return default(double); }
    public static double Round(double value, int digits, System.MidpointRounding mode) { return default(double); }
    public static double Round(double value, System.MidpointRounding mode) { return default(double); }
    public static int Sign(decimal value) { return default(int); }
    public static int Sign(double value) { return default(int); }
    public static int Sign(short value) { return default(int); }
    public static int Sign(int value) { return default(int); }
    public static int Sign(long value) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    public static int Sign(sbyte value) { return default(int); }
    public static int Sign(float value) { return default(int); }
    public static double Sin(double a) { return default(double); }
    public static double Sinh(double value) { return default(double); }
    public static double Sqrt(double d) { return default(double); }
    public static double Tan(double a) { return default(double); }
    public static double Tanh(double value) { return default(double); }
    public static decimal Truncate(decimal d) { return default(decimal); }
    public static double Truncate(double d) { return default(double); }
  }
  public enum MidpointRounding {
    AwayFromZero = 1,
    ToEven = 0,
  }
  public partial class Progress<T> : System.IProgress<T> {
    public Progress() { }
    public Progress(System.Action<T> handler) { }
    public event System.EventHandler<T> ProgressChanged { add { } remove { } }
    protected virtual void OnReport(T value) { }
    void System.IProgress<T>.Report(T value) { }
  }
  public partial class Random {
    public Random() { }
    public Random(int Seed) { }
    public virtual int Next() { return default(int); }
    public virtual int Next(int maxValue) { return default(int); }
    public virtual int Next(int minValue, int maxValue) { return default(int); }
    public virtual void NextBytes(byte[] buffer) { }
    public virtual double NextDouble() { return default(double); }
    protected virtual double Sample() { return default(double); }
  }
  public abstract partial class StringComparer : System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>, System.Collections.IComparer, System.Collections.IEqualityComparer {
    protected StringComparer() { }
    public static System.StringComparer CurrentCulture { get { return default(System.StringComparer); } }
    public static System.StringComparer CurrentCultureIgnoreCase { get { return default(System.StringComparer); } }
    public static System.StringComparer Ordinal { get { return default(System.StringComparer); } }
    public static System.StringComparer OrdinalIgnoreCase { get { return default(System.StringComparer); } }
    public abstract int Compare(string x, string y);
    public abstract bool Equals(string x, string y);
    public abstract int GetHashCode(string obj);
    int System.Collections.IComparer.Compare(object x, object y) { return default(int); }
    bool System.Collections.IEqualityComparer.Equals(object x, object y) { return default(bool); }
    int System.Collections.IEqualityComparer.GetHashCode(object obj) { return default(int); }
  }
  public partial class UriBuilder {
    public UriBuilder() { }
    public UriBuilder(string uri) { }
    public UriBuilder(string schemeName, string hostName) { }
    public UriBuilder(string scheme, string host, int portNumber) { }
    public UriBuilder(string scheme, string host, int port, string pathValue) { }
    public UriBuilder(string scheme, string host, int port, string path, string extraValue) { }
    public UriBuilder(System.Uri uri) { }
    public string Fragment { get { return default(string); } set { } }
    public string Host { get { return default(string); } set { } }
    public string Password { get { return default(string); } set { } }
    public string Path { get { return default(string); } set { } }
    public int Port { get { return default(int); } set { } }
    public string Query { get { return default(string); } set { } }
    public string Scheme { get { return default(string); } set { } }
    public System.Uri Uri { get { return default(System.Uri); } }
    public string UserName { get { return default(string); } set { } }
    public override bool Equals(object rparam) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public override string ToString() { return default(string); }
  }
}
namespace System.Diagnostics {
  public partial class Stopwatch {
    public static readonly long Frequency;
    public static readonly bool IsHighResolution;
    public Stopwatch() { }
    public System.TimeSpan Elapsed { get { return default(System.TimeSpan); } }
    public long ElapsedMilliseconds { get { return default(long); } }
    public long ElapsedTicks { get { return default(long); } }
    public bool IsRunning { get { return default(bool); } }
    public static long GetTimestamp() { return default(long); }
    public void Reset() { }
    public void Restart() { }
    public void Start() { }
    public static System.Diagnostics.Stopwatch StartNew() { return default(System.Diagnostics.Stopwatch); }
    public void Stop() { }
  }
}
namespace System.IO {
  public static partial class Path {
    public static readonly char AltDirectorySeparatorChar;
    public static readonly char DirectorySeparatorChar;
    public static readonly char PathSeparator;
    public static readonly char VolumeSeparatorChar;
    public static string ChangeExtension(string path, string extension) { return default(string); }
    public static string Combine(string path1, string path2) { return default(string); }
    public static string Combine(string path1, string path2, string path3) { return default(string); }
    public static string Combine(params string[] paths) { return default(string); }
    public static string GetDirectoryName(string path) { return default(string); }
    public static string GetExtension(string path) { return default(string); }
    public static string GetFileName(string path) { return default(string); }
    public static string GetFileNameWithoutExtension(string path) { return default(string); }
    public static string GetFullPath(string path) { return default(string); }
    public static char[] GetInvalidFileNameChars() { return default(char[]); }
    public static char[] GetInvalidPathChars() { return default(char[]); }
    public static string GetPathRoot(string path) { return default(string); }
    public static string GetRandomFileName() { return default(string); }
    public static string GetTempFileName() { return default(string); }
    public static string GetTempPath() { return default(string); }
    public static bool HasExtension(string path) { return default(bool); }
    public static bool IsPathRooted(string path) { return default(bool); }
  }
}
namespace System.Net {
  public static partial class WebUtility {
    public static string HtmlDecode(string value) { return default(string); }
    public static string HtmlEncode(string value) { return default(string); }
    public static string UrlDecode(string encodedValue) { return default(string); }
    public static byte[] UrlDecodeToBytes(byte[] encodedValue, int offset, int count) { return default(byte[]); }
    public static string UrlEncode(string value) { return default(string); }
    public static byte[] UrlEncodeToBytes(byte[] value, int offset, int count) { return default(byte[]); }
  }
}
namespace System.Runtime.Versioning {
  public sealed partial class FrameworkName : System.IEquatable<System.Runtime.Versioning.FrameworkName> {
    public FrameworkName(string frameworkName) { }
    public FrameworkName(string identifier, System.Version version) { }
    public FrameworkName(string identifier, System.Version version, string profile) { }
    public string FullName { get { return default(string); } }
    public string Identifier { get { return default(string); } }
    public string Profile { get { return default(string); } }
    public System.Version Version { get { return default(System.Version); } }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Runtime.Versioning.FrameworkName other) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Runtime.Versioning.FrameworkName left, System.Runtime.Versioning.FrameworkName right) { return default(bool); }
    public static bool operator !=(System.Runtime.Versioning.FrameworkName left, System.Runtime.Versioning.FrameworkName right) { return default(bool); }
    public override string ToString() { return default(string); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Runtime.Handles")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Runtime.Handles")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Runtime.Handles")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace Microsoft.Win32.SafeHandles {
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class SafeWaitHandle : System.Runtime.InteropServices.SafeHandle {
    public SafeWaitHandle(System.IntPtr existingHandle, bool ownsHandle) : base (default(System.IntPtr), default(bool)) { }
    public override bool IsInvalid { [System.Security.SecurityCriticalAttribute]get { return default(bool); } }
    [System.Security.SecurityCriticalAttribute]
    protected override bool ReleaseHandle() { return default(bool); }
  }
}
namespace System.IO {
  public enum HandleInheritability {
    Inheritable = 1,
    None = 0,
  }
}
namespace System.Runtime.InteropServices {
  [System.Security.SecurityCriticalAttribute]
  public abstract partial class CriticalHandle : System.IDisposable {
    protected System.IntPtr handle;
    protected CriticalHandle(System.IntPtr invalidHandleValue) { }
    public bool IsClosed { get { return default(bool); } }
    public abstract bool IsInvalid { get; }
    [System.Security.SecuritySafeCriticalAttribute]
    public void Dispose() { }
    [System.Security.SecurityCriticalAttribute]
    protected virtual void Dispose(bool disposing) { }
    ~CriticalHandle() { }
    protected abstract bool ReleaseHandle();
    protected void SetHandle(System.IntPtr handle) { }
    public void SetHandleAsInvalid() { }
  }
  [System.Security.SecurityCriticalAttribute]
  public abstract partial class SafeHandle : System.IDisposable {
    protected System.IntPtr handle;
    protected SafeHandle(System.IntPtr invalidHandleValue, bool ownsHandle) { }
    public bool IsClosed { get { return default(bool); } }
    public abstract bool IsInvalid { get; }
    [System.Security.SecurityCriticalAttribute]
    public void DangerousAddRef(ref bool success) { }
    public System.IntPtr DangerousGetHandle() { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public void DangerousRelease() { }
    [System.Security.SecuritySafeCriticalAttribute]
    public void Dispose() { }
    [System.Security.SecurityCriticalAttribute]
    protected virtual void Dispose(bool disposing) { }
    ~SafeHandle() { }
    protected abstract bool ReleaseHandle();
    protected void SetHandle(System.IntPtr handle) { }
    [System.Security.SecurityCriticalAttribute]
    public void SetHandleAsInvalid() { }
  }
}
namespace System.Threading {
  public static partial class WaitHandleExtensions {
    [System.Security.SecurityCriticalAttribute]
    public static Microsoft.Win32.SafeHandles.SafeWaitHandle GetSafeWaitHandle(this System.Threading.WaitHandle waitHandle) { return default(Microsoft.Win32.SafeHandles.SafeWaitHandle); }
    [System.Security.SecurityCriticalAttribute]
    public static void SetSafeWaitHandle(this System.Threading.WaitHandle waitHandle, Microsoft.Win32.SafeHandles.SafeWaitHandle value) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Runtime.InteropServices")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Runtime.InteropServices")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Runtime.InteropServices")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System {
  public sealed partial class DataMisalignedException : System.Exception {
    public DataMisalignedException() { }
    public DataMisalignedException(string message) { }
    public DataMisalignedException(string message, System.Exception innerException) { }
  }
  public partial class DllNotFoundException : System.TypeLoadException {
    public DllNotFoundException() { }
    public DllNotFoundException(string message) { }
    public DllNotFoundException(string message, System.Exception inner) { }
  }
}
namespace System.Reflection {
  public sealed partial class Missing {
    internal Missing() { }
    public static readonly System.Reflection.Missing Value;
  }
}
namespace System.Runtime.InteropServices {
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct ArrayWithOffset {
    public ArrayWithOffset(object array, int offset) { throw new System.NotImplementedException(); }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Runtime.InteropServices.ArrayWithOffset obj) { return default(bool); }
    public object GetArray() { return default(object); }
    public override int GetHashCode() { return default(int); }
    public int GetOffset() { return default(int); }
    public static bool operator ==(System.Runtime.InteropServices.ArrayWithOffset a, System.Runtime.InteropServices.ArrayWithOffset b) { return default(bool); }
    public static bool operator !=(System.Runtime.InteropServices.ArrayWithOffset a, System.Runtime.InteropServices.ArrayWithOffset b) { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1037), Inherited=false)]
  public sealed partial class BestFitMappingAttribute : System.Attribute {
    public bool ThrowOnUnmappableChar;
    public BestFitMappingAttribute(bool BestFitMapping) { }
    public bool BestFitMapping { get { return default(bool); } }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("BStrWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
  public sealed partial class BStrWrapper {
    public BStrWrapper(object value) { }
    public BStrWrapper(string value) { }
    public string WrappedObject { get { return default(string); } }
  }
  public enum CallingConvention {
    Cdecl = 2,
    StdCall = 3,
    ThisCall = 4,
    Winapi = 1,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(5), Inherited=false)]
  public sealed partial class ClassInterfaceAttribute : System.Attribute {
    public ClassInterfaceAttribute(short classInterfaceType) { }
    public ClassInterfaceAttribute(System.Runtime.InteropServices.ClassInterfaceType classInterfaceType) { }
    public System.Runtime.InteropServices.ClassInterfaceType Value { get { return default(System.Runtime.InteropServices.ClassInterfaceType); } }
  }
  public enum ClassInterfaceType {
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("Support for IDispatch may be unavailable in future releases.")]
    AutoDispatch = 1,
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("Support for IDispatch may be unavailable in future releases.")]
    AutoDual = 2,
    None = 0,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1024), Inherited=false)]
  public sealed partial class CoClassAttribute : System.Attribute {
    public CoClassAttribute(System.Type coClass) { }
    public System.Type CoClass { get { return default(System.Type); } }
  }

    // this type was manually added as we don't have a compatible (with Xamarin) implementation in CoreFx
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("ComAwareEventInfo may be unavailable in future releases.")]
    public partial class ComAwareEventInfo : System.Reflection.EventInfo
    {
        public ComAwareEventInfo(System.Type type, string eventName) { }
        public override System.Reflection.EventAttributes Attributes { get { return default(System.Reflection.EventAttributes); } }
        public override System.Type DeclaringType { get { return default(System.Type); } }
        public override string Name { get { return default(string); } }

        public override Type ReflectedType
        {
            get {
                throw new NotImplementedException();
            }
        }

        public override System.Reflection.MethodInfo GetAddMethod(bool nonPublic)
        {
            throw new NotImplementedException();
        }

        public override object[] GetCustomAttributes(bool inherit)
        {
            throw new NotImplementedException();
        }

        public override object[] GetCustomAttributes(Type attributeType, bool inherit)
        {
            throw new NotImplementedException();
        }

        public override System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic)
        {
            throw new NotImplementedException();
        }

        public override System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic)
        {
            throw new NotImplementedException();
        }

        public override bool IsDefined(Type attributeType, bool inherit)
        {
            throw new NotImplementedException();
        }
    }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4), Inherited=false)]
  public sealed partial class ComDefaultInterfaceAttribute : System.Attribute {
    public ComDefaultInterfaceAttribute(System.Type defaultInterface) { }
    public System.Type Value { get { return default(System.Type); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1024), Inherited=false)]
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("ComEventInterfaceAttribute may be unavailable in future releases.")]
  public sealed partial class ComEventInterfaceAttribute : System.Attribute {
    public ComEventInterfaceAttribute(System.Type SourceInterface, System.Type EventProvider) { }
    public System.Type EventProvider { get { return default(System.Type); } }
    public System.Type SourceInterface { get { return default(System.Type); } }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("ComEventsHelper may be unavailable in future releases.")]
  public static partial class ComEventsHelper {
    [System.Security.SecurityCriticalAttribute]
    public static void Combine(object rcw, System.Guid iid, int dispid, System.Delegate d) { }
    [System.Security.SecurityCriticalAttribute]
    public static System.Delegate Remove(object rcw, System.Guid iid, int dispid, System.Delegate d) { return default(System.Delegate); }
  }
  public partial class COMException : System.Exception {
    public COMException() { }
    public COMException(string message) { }
    public COMException(string message, System.Exception inner) { }
    public COMException(string message, int errorCode) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1028), Inherited=false)]
  public sealed partial class ComImportAttribute : System.Attribute {
    public ComImportAttribute() { }
  }
  public enum ComInterfaceType {
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("Support for IDispatch may be unavailable in future releases.")]
    InterfaceIsDual = 0,
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("Support for IDispatch may be unavailable in future releases.")]
    InterfaceIsIDispatch = 2,
    InterfaceIsIInspectable = 3,
    InterfaceIsIUnknown = 1,
  }
  public enum ComMemberType {
    Method = 0,
    PropGet = 1,
    PropSet = 2,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4), Inherited=true)]
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("ComSourceInterfacesAttribute may be unavailable in future releases.")]
  public sealed partial class ComSourceInterfacesAttribute : System.Attribute {
    public ComSourceInterfacesAttribute(string sourceInterfaces) { }
    public ComSourceInterfacesAttribute(System.Type sourceInterface) { }
    public ComSourceInterfacesAttribute(System.Type sourceInterface1, System.Type sourceInterface2) { }
    public ComSourceInterfacesAttribute(System.Type sourceInterface1, System.Type sourceInterface2, System.Type sourceInterface3) { }
    public ComSourceInterfacesAttribute(System.Type sourceInterface1, System.Type sourceInterface2, System.Type sourceInterface3, System.Type sourceInterface4) { }
    public string Value { get { return default(string); } }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("CurrencyWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
  public sealed partial class CurrencyWrapper {
    public CurrencyWrapper(decimal obj) { }
    public CurrencyWrapper(object obj) { }
    public decimal WrappedObject { get { return default(decimal); } }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("CustomQueryInterfaceMode and support for ICustomQueryInterface may be unavailable in future releases.")]
  public enum CustomQueryInterfaceMode {
    Allow = 1,
    Ignore = 0,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("CustomQueryInterfaceResult and support for ICustomQueryInterface may be unavailable in future releases.")]
  public enum CustomQueryInterfaceResult {
    Failed = 2,
    Handled = 0,
    NotHandled = 1,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2), Inherited=false)]
  public sealed partial class DefaultCharSetAttribute : System.Attribute {
    public DefaultCharSetAttribute(System.Runtime.InteropServices.CharSet charSet) { }
    public System.Runtime.InteropServices.CharSet CharSet { get { return default(System.Runtime.InteropServices.CharSet); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(65), AllowMultiple=false)]
  public sealed partial class DefaultDllImportSearchPathsAttribute : System.Attribute {
    public DefaultDllImportSearchPathsAttribute(System.Runtime.InteropServices.DllImportSearchPath paths) { }
    public System.Runtime.InteropServices.DllImportSearchPath Paths { get { return default(System.Runtime.InteropServices.DllImportSearchPath); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2048))]
  public sealed partial class DefaultParameterValueAttribute : System.Attribute {
    public DefaultParameterValueAttribute(object value) { }
    public object Value { get { return default(object); } }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("DispatchWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
  public sealed partial class DispatchWrapper {
    public DispatchWrapper(object obj) { }
    public object WrappedObject { get { return default(object); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(960), Inherited=false)]
  public sealed partial class DispIdAttribute : System.Attribute {
    public DispIdAttribute(int dispId) { }
    public int Value { get { return default(int); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64), Inherited=false)]
  public sealed partial class DllImportAttribute : System.Attribute {
    public bool BestFitMapping;
    public System.Runtime.InteropServices.CallingConvention CallingConvention;
    public System.Runtime.InteropServices.CharSet CharSet;
    public string EntryPoint;
    public bool ExactSpelling;
    public bool PreserveSig;
    public bool SetLastError;
    public bool ThrowOnUnmappableChar;
    public DllImportAttribute(string dllName) { }
    public string Value { get { return default(string); } }
  }
  [System.FlagsAttribute]
  public enum DllImportSearchPath {
    ApplicationDirectory = 512,
    AssemblyDirectory = 2,
    LegacyBehavior = 0,
    SafeDirectories = 4096,
    System32 = 2048,
    UseDllDirectoryForDependencies = 256,
    UserDirectories = 1024,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("ErrorWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
  public sealed partial class ErrorWrapper {
    public ErrorWrapper(System.Exception e) { }
    public ErrorWrapper(int errorCode) { }
    public ErrorWrapper(object errorCode) { }
    public int ErrorCode { get { return default(int); } }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct GCHandle {
    public bool IsAllocated { get { return default(bool); } }
    public object Target { [System.Security.SecurityCriticalAttribute]get { return default(object); } [System.Security.SecurityCriticalAttribute]set { } }
    [System.Security.SecurityCriticalAttribute]
    public System.IntPtr AddrOfPinnedObject() { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.Runtime.InteropServices.GCHandle Alloc(object value) { return default(System.Runtime.InteropServices.GCHandle); }
    [System.Security.SecurityCriticalAttribute]
    public static System.Runtime.InteropServices.GCHandle Alloc(object value, System.Runtime.InteropServices.GCHandleType type) { return default(System.Runtime.InteropServices.GCHandle); }
    public override bool Equals(object o) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public void Free() { }
    [System.Security.SecurityCriticalAttribute]
    public static System.Runtime.InteropServices.GCHandle FromIntPtr(System.IntPtr value) { return default(System.Runtime.InteropServices.GCHandle); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Runtime.InteropServices.GCHandle a, System.Runtime.InteropServices.GCHandle b) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public static explicit operator System.Runtime.InteropServices.GCHandle (System.IntPtr value) { return default(System.Runtime.InteropServices.GCHandle); }
    public static explicit operator System.IntPtr (System.Runtime.InteropServices.GCHandle value) { return default(System.IntPtr); }
    public static bool operator !=(System.Runtime.InteropServices.GCHandle a, System.Runtime.InteropServices.GCHandle b) { return default(bool); }
    public static System.IntPtr ToIntPtr(System.Runtime.InteropServices.GCHandle value) { return default(System.IntPtr); }
  }
  public enum GCHandleType {
    Normal = 2,
    Pinned = 3,
    Weak = 0,
    WeakTrackResurrection = 1,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(5149), Inherited=false)]
  public sealed partial class GuidAttribute : System.Attribute {
    public GuidAttribute(string guid) { }
    public string Value { get { return default(string); } }
  }
  public sealed partial class HandleCollector {
    public HandleCollector(string name, int initialThreshold) { }
    public HandleCollector(string name, int initialThreshold, int maximumThreshold) { }
    public int Count { get { return default(int); } }
    public int InitialThreshold { get { return default(int); } }
    public int MaximumThreshold { get { return default(int); } }
    public string Name { get { return default(string); } }
    public void Add() { }
    public void Remove() { }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("ICustomAdapter may be unavailable in future releases.")]
  public partial interface ICustomAdapter {
    object GetUnderlyingObject();
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("ICustomQueryInterface may be unavailable in future releases.")]
  public partial interface ICustomQueryInterface {
    [System.Security.SecurityCriticalAttribute]
    System.Runtime.InteropServices.CustomQueryInterfaceResult GetInterface(ref System.Guid iid, out System.IntPtr ppv);
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2048), Inherited=false)]
  public sealed partial class InAttribute : System.Attribute {
    public InAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1024), Inherited=false)]
  public sealed partial class InterfaceTypeAttribute : System.Attribute {
    public InterfaceTypeAttribute(short interfaceType) { }
    public InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType interfaceType) { }
    public System.Runtime.InteropServices.ComInterfaceType Value { get { return default(System.Runtime.InteropServices.ComInterfaceType); } }
  }
  public partial class InvalidComObjectException : System.Exception {
    public InvalidComObjectException() { }
    public InvalidComObjectException(string message) { }
    public InvalidComObjectException(string message, System.Exception inner) { }
  }
  public partial class InvalidOleVariantTypeException : System.Exception {
    public InvalidOleVariantTypeException() { }
    public InvalidOleVariantTypeException(string message) { }
    public InvalidOleVariantTypeException(string message, System.Exception inner) { }
  }
  public static partial class Marshal {
    public static readonly int SystemDefaultCharSize;
    public static readonly int SystemMaxDBCSCharSize;
    [System.Security.SecurityCriticalAttribute]
    public static int AddRef(System.IntPtr pUnk) { return default(int); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr AllocCoTaskMem(int cb) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr AllocHGlobal(int cb) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr AllocHGlobal(System.IntPtr cb) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static bool AreComObjectsAvailableForCleanup() { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(byte[] source, int startIndex, System.IntPtr destination, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(char[] source, int startIndex, System.IntPtr destination, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(double[] source, int startIndex, System.IntPtr destination, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(short[] source, int startIndex, System.IntPtr destination, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(int[] source, int startIndex, System.IntPtr destination, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(long[] source, int startIndex, System.IntPtr destination, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(System.IntPtr source, byte[] destination, int startIndex, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(System.IntPtr source, char[] destination, int startIndex, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(System.IntPtr source, double[] destination, int startIndex, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(System.IntPtr source, short[] destination, int startIndex, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(System.IntPtr source, int[] destination, int startIndex, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(System.IntPtr source, long[] destination, int startIndex, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(System.IntPtr source, System.IntPtr[] destination, int startIndex, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(System.IntPtr source, float[] destination, int startIndex, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(System.IntPtr[] source, int startIndex, System.IntPtr destination, int length) { }
    [System.Security.SecurityCriticalAttribute]
    public static void Copy(float[] source, int startIndex, System.IntPtr destination, int length) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("CreateAggregatedObject(IntPtr, Object) may be unavailable in future releases. Instead, use CreateAggregatedObject<T>(IntPtr, T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296518")]
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr CreateAggregatedObject(System.IntPtr pOuter, object o) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr CreateAggregatedObject<T>(System.IntPtr pOuter, T o) { return default(System.IntPtr); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("CreateWrapperOfType(Object, Type) may be unavailable in future releases. Instead, use CreateWrapperOfType<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296519")]
    [System.Security.SecurityCriticalAttribute]
    public static object CreateWrapperOfType(object o, System.Type t) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public static TWrapper CreateWrapperOfType<T, TWrapper>(T o) { return default(TWrapper); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("DestroyStructure(IntPtr, Type) may be unavailable in future releases. Instead, use DestroyStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296520")]
    [System.Security.SecurityCriticalAttribute]
    public static void DestroyStructure(System.IntPtr ptr, System.Type structuretype) { }
    [System.Security.SecurityCriticalAttribute]
    public static void DestroyStructure<T>(System.IntPtr ptr) { }
    [System.Security.SecurityCriticalAttribute]
    public static int FinalReleaseComObject(object o) { return default(int); }
    [System.Security.SecurityCriticalAttribute]
    public static void FreeBSTR(System.IntPtr ptr) { }
    [System.Security.SecurityCriticalAttribute]
    public static void FreeCoTaskMem(System.IntPtr ptr) { }
    [System.Security.SecurityCriticalAttribute]
    public static void FreeHGlobal(System.IntPtr hglobal) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("GetComInterfaceForObject(Object, Type) may be unavailable in future releases. Instead, use GetComInterfaceForObject<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296509")]
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr GetComInterfaceForObject(object o, System.Type T) { return default(System.IntPtr); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode) and support for ICustomQueryInterface may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr GetComInterfaceForObject(object o, System.Type T, System.Runtime.InteropServices.CustomQueryInterfaceMode mode) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr GetComInterfaceForObject<T, TInterface>(T o) { return default(System.IntPtr); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("GetDelegateForFunctionPointer(IntPtr, Type) may be unavailable in future releases. Instead, use GetDelegateForFunctionPointer<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296521")]
    [System.Security.SecurityCriticalAttribute]
    public static System.Delegate GetDelegateForFunctionPointer(System.IntPtr ptr, System.Type t) { return default(System.Delegate); }
    [System.Security.SecurityCriticalAttribute]
    public static TDelegate GetDelegateForFunctionPointer<TDelegate>(System.IntPtr ptr) { return default(TDelegate); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("GetExceptionCode() may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static int GetExceptionCode() { return default(int); }
    [System.Security.SecurityCriticalAttribute]
    public static System.Exception GetExceptionForHR(int errorCode) { return default(System.Exception); }
    [System.Security.SecurityCriticalAttribute]
    public static System.Exception GetExceptionForHR(int errorCode, System.IntPtr errorInfo) { return default(System.Exception); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("GetFunctionPointerForDelegate(Delegate) may be unavailable in future releases. Instead, use GetFunctionPointerForDelegate<T>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296522")]
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr GetFunctionPointerForDelegate(System.Delegate d) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr GetFunctionPointerForDelegate<TDelegate>(TDelegate d) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static int GetHRForException(System.Exception e) { return default(int); }
    [System.Security.SecurityCriticalAttribute]
    public static int GetHRForLastWin32Error() { return default(int); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr GetIUnknownForObject(object o) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static int GetLastWin32Error() { return default(int); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("GetNativeVariantForObject(Object, IntPtr) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static void GetNativeVariantForObject(object obj, System.IntPtr pDstNativeVariant) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("GetNativeVariantForObject<T>(T, IntPtr) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static void GetNativeVariantForObject<T>(T obj, System.IntPtr pDstNativeVariant) { }
    [System.Security.SecurityCriticalAttribute]
    public static object GetObjectForIUnknown(System.IntPtr pUnk) { return default(object); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("GetObjectForNativeVariant(IntPtr) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static object GetObjectForNativeVariant(System.IntPtr pSrcNativeVariant) { return default(object); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("GetObjectForNativeVariant<T>(IntPtr) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static T GetObjectForNativeVariant<T>(System.IntPtr pSrcNativeVariant) { return default(T); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("GetObjectsForNativeVariants(IntPtr, Int32) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static object[] GetObjectsForNativeVariants(System.IntPtr aSrcNativeVariant, int cVars) { return default(object[]); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("GetObjectsForNativeVariants<T>(IntPtr, Int32) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static T[] GetObjectsForNativeVariants<T>(System.IntPtr aSrcNativeVariant, int cVars) { return default(T[]); }
    [System.Security.SecurityCriticalAttribute]
    public static int GetStartComSlot(System.Type t) { return default(int); }
    public static System.Type GetTypeFromCLSID(System.Guid clsid) { return default(System.Type); }
    [System.Security.SecurityCriticalAttribute]
    public static string GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo) { return default(string); }
    [System.Security.SecurityCriticalAttribute]
    public static object GetUniqueObjectForIUnknown(System.IntPtr unknown) { return default(object); }
    public static bool IsComObject(object o) { return default(bool); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("OffsetOf(Type, string) may be unavailable in future releases. Instead, use OffsetOf<T>(string). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296511")]
    public static System.IntPtr OffsetOf(System.Type t, string fieldName) { return default(System.IntPtr); }
    public static System.IntPtr OffsetOf<T>(string fieldName) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static string PtrToStringAnsi(System.IntPtr ptr) { return default(string); }
    [System.Security.SecurityCriticalAttribute]
    public static string PtrToStringAnsi(System.IntPtr ptr, int len) { return default(string); }
    [System.Security.SecurityCriticalAttribute]
    public static string PtrToStringBSTR(System.IntPtr ptr) { return default(string); }
    [System.Security.SecurityCriticalAttribute]
    public static string PtrToStringUni(System.IntPtr ptr) { return default(string); }
    [System.Security.SecurityCriticalAttribute]
    public static string PtrToStringUni(System.IntPtr ptr, int len) { return default(string); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("PtrToStructure(IntPtr, Object) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296512")]
    [System.Security.SecurityCriticalAttribute]
    public static void PtrToStructure(System.IntPtr ptr, object structure) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("PtrToStructure(IntPtr, Type) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296513")]
    [System.Security.SecurityCriticalAttribute]
    public static object PtrToStructure(System.IntPtr ptr, System.Type structureType) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public static T PtrToStructure<T>(System.IntPtr ptr) { return default(T); }
    [System.Security.SecurityCriticalAttribute]
    public static void PtrToStructure<T>(System.IntPtr ptr, T structure) { }
    [System.Security.SecurityCriticalAttribute]
    public static int QueryInterface(System.IntPtr pUnk, ref System.Guid iid, out System.IntPtr ppv) { ppv = default(System.IntPtr); return default(int); }
    [System.Security.SecurityCriticalAttribute]
    public static byte ReadByte(System.IntPtr ptr) { return default(byte); }
    [System.Security.SecurityCriticalAttribute]
    public static byte ReadByte(System.IntPtr ptr, int ofs) { return default(byte); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("ReadByte(Object, Int32) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static byte ReadByte(object ptr, int ofs) { return default(byte); }
    [System.Security.SecurityCriticalAttribute]
    public static short ReadInt16(System.IntPtr ptr) { return default(short); }
    [System.Security.SecurityCriticalAttribute]
    public static short ReadInt16(System.IntPtr ptr, int ofs) { return default(short); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("ReadInt16(Object, Int32) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static short ReadInt16(object ptr, int ofs) { return default(short); }
    [System.Security.SecurityCriticalAttribute]
    public static int ReadInt32(System.IntPtr ptr) { return default(int); }
    [System.Security.SecurityCriticalAttribute]
    public static int ReadInt32(System.IntPtr ptr, int ofs) { return default(int); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("ReadInt32(Object, Int32) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static int ReadInt32(object ptr, int ofs) { return default(int); }
    [System.Security.SecurityCriticalAttribute]
    public static long ReadInt64(System.IntPtr ptr) { return default(long); }
    [System.Security.SecurityCriticalAttribute]
    public static long ReadInt64(System.IntPtr ptr, int ofs) { return default(long); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("ReadInt64(Object, Int32) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static long ReadInt64(object ptr, int ofs) { return default(long); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr ReadIntPtr(System.IntPtr ptr) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr ReadIntPtr(System.IntPtr ptr, int ofs) { return default(System.IntPtr); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("ReadIntPtr(Object, Int32) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr ReadIntPtr(object ptr, int ofs) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr ReAllocCoTaskMem(System.IntPtr pv, int cb) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr ReAllocHGlobal(System.IntPtr pv, System.IntPtr cb) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static int Release(System.IntPtr pUnk) { return default(int); }
    [System.Security.SecurityCriticalAttribute]
    public static int ReleaseComObject(object o) { return default(int); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("SizeOf(Object) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296514")]
    public static int SizeOf(object structure) { return default(int); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("SizeOf(Type) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296515")]
    public static int SizeOf(System.Type t) { return default(int); }
    public static int SizeOf<T>() { return default(int); }
    public static int SizeOf<T>(T structure) { return default(int); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr StringToBSTR(string s) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr StringToCoTaskMemAnsi(string s) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr StringToCoTaskMemUni(string s) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr StringToHGlobalAnsi(string s) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr StringToHGlobalUni(string s) { return default(System.IntPtr); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("StructureToPtr(Object, IntPtr, Boolean) may be unavailable in future releases. Instead, use StructureToPtr<T>(T, IntPtr, Boolean). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296516")]
    [System.Security.SecurityCriticalAttribute]
    public static void StructureToPtr(object structure, System.IntPtr ptr, bool fDeleteOld) { }
    [System.Security.SecurityCriticalAttribute]
    public static void StructureToPtr<T>(T structure, System.IntPtr ptr, bool fDeleteOld) { }
    [System.Security.SecurityCriticalAttribute]
    public static void ThrowExceptionForHR(int errorCode) { }
    [System.Security.SecurityCriticalAttribute]
    public static void ThrowExceptionForHR(int errorCode, System.IntPtr errorInfo) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("UnsafeAddrOfPinnedArrayElement(Array, Int32) may be unavailable in future releases. Instead, use UnsafeAddrOfPinnedArrayElement<T>(T[], Int32). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296517")]
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr UnsafeAddrOfPinnedArrayElement(System.Array arr, int index) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static System.IntPtr UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index) { return default(System.IntPtr); }
    [System.Security.SecurityCriticalAttribute]
    public static void WriteByte(System.IntPtr ptr, byte val) { }
    [System.Security.SecurityCriticalAttribute]
    public static void WriteByte(System.IntPtr ptr, int ofs, byte val) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("WriteByte(Object, Int32, Byte) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static void WriteByte(object ptr, int ofs, byte val) { }
    [System.Security.SecurityCriticalAttribute]
    public static void WriteInt16(System.IntPtr ptr, char val) { }
    [System.Security.SecurityCriticalAttribute]
    public static void WriteInt16(System.IntPtr ptr, short val) { }
    [System.Security.SecurityCriticalAttribute]
    public static void WriteInt16(System.IntPtr ptr, int ofs, char val) { }
    [System.Security.SecurityCriticalAttribute]
    public static void WriteInt16(System.IntPtr ptr, int ofs, short val) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("WriteInt16(Object, Int32, Char) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static void WriteInt16(object ptr, int ofs, char val) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("WriteInt16(Object, Int32, Int16) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static void WriteInt16(object ptr, int ofs, short val) { }
    [System.Security.SecurityCriticalAttribute]
    public static void WriteInt32(System.IntPtr ptr, int val) { }
    [System.Security.SecurityCriticalAttribute]
    public static void WriteInt32(System.IntPtr ptr, int ofs, int val) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("WriteInt32(Object, Int32, Int32) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static void WriteInt32(object ptr, int ofs, int val) { }
    [System.Security.SecurityCriticalAttribute]
    public static void WriteInt64(System.IntPtr ptr, int ofs, long val) { }
    [System.Security.SecurityCriticalAttribute]
    public static void WriteInt64(System.IntPtr ptr, long val) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("WriteInt64(Object, Int32, Int64) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static void WriteInt64(object ptr, int ofs, long val) { }
    [System.Security.SecurityCriticalAttribute]
    public static void WriteIntPtr(System.IntPtr ptr, int ofs, System.IntPtr val) { }
    [System.Security.SecurityCriticalAttribute]
    public static void WriteIntPtr(System.IntPtr ptr, System.IntPtr val) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("WriteIntPtr(Object, Int32, IntPtr) may be unavailable in future releases.")]
    [System.Security.SecurityCriticalAttribute]
    public static void WriteIntPtr(object ptr, int ofs, System.IntPtr val) { }
    [System.Security.SecurityCriticalAttribute]
    public static void ZeroFreeBSTR(System.IntPtr s) { }
    [System.Security.SecurityCriticalAttribute]
    public static void ZeroFreeCoTaskMemAnsi(System.IntPtr s) { }
    [System.Security.SecurityCriticalAttribute]
    public static void ZeroFreeCoTaskMemUnicode(System.IntPtr s) { }
    [System.Security.SecurityCriticalAttribute]
    public static void ZeroFreeGlobalAllocAnsi(System.IntPtr s) { }
    [System.Security.SecurityCriticalAttribute]
    public static void ZeroFreeGlobalAllocUnicode(System.IntPtr s) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(10496), Inherited=false)]
  public sealed partial class MarshalAsAttribute : System.Attribute {
    public System.Runtime.InteropServices.UnmanagedType ArraySubType;
    public int IidParameterIndex;
    public string MarshalCookie;
    public string MarshalType;
    public System.Type MarshalTypeRef;
    public System.Runtime.InteropServices.VarEnum SafeArraySubType;
    public System.Type SafeArrayUserDefinedSubType;
    public int SizeConst;
    public short SizeParamIndex;
    public MarshalAsAttribute(short unmanagedType) { }
    public MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType unmanagedType) { }
    public System.Runtime.InteropServices.UnmanagedType Value { get { return default(System.Runtime.InteropServices.UnmanagedType); } }
  }
  public partial class MarshalDirectiveException : System.Exception {
    public MarshalDirectiveException() { }
    public MarshalDirectiveException(string message) { }
    public MarshalDirectiveException(string message, System.Exception inner) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(2048), Inherited=false)]
  public sealed partial class OptionalAttribute : System.Attribute {
    public OptionalAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64), Inherited=false)]
  public sealed partial class PreserveSigAttribute : System.Attribute {
    public PreserveSigAttribute() { }
  }
  public partial class SafeArrayRankMismatchException : System.Exception {
    public SafeArrayRankMismatchException() { }
    public SafeArrayRankMismatchException(string message) { }
    public SafeArrayRankMismatchException(string message, System.Exception inner) { }
  }
  public partial class SafeArrayTypeMismatchException : System.Exception {
    public SafeArrayTypeMismatchException() { }
    public SafeArrayTypeMismatchException(string message) { }
    public SafeArrayTypeMismatchException(string message, System.Exception inner) { }
  }
  [System.Security.SecurityCriticalAttribute]
  public abstract partial class SafeBuffer : System.Runtime.InteropServices.SafeHandle {
    protected SafeBuffer(bool ownsHandle) : base (default(System.IntPtr), default(bool)) { }
    [System.CLSCompliantAttribute(false)]
    public ulong ByteLength { get { return default(ulong); } }
    public override bool IsInvalid { get { return default(bool); } }
    [System.CLSCompliantAttribute(false)]
    public unsafe void AcquirePointer(ref byte* pointer) { }
    [System.CLSCompliantAttribute(false)]
    public void Initialize(uint numElements, uint sizeOfEachElement) { }
    [System.CLSCompliantAttribute(false)]
    public void Initialize(ulong numBytes) { }
    [System.CLSCompliantAttribute(false)]
    public void Initialize<T>(uint numElements) where T : struct { }
    [System.CLSCompliantAttribute(false)]
    public T Read<T>(ulong byteOffset) where T : struct { return default(T); }
    [System.CLSCompliantAttribute(false)]
    public void ReadArray<T>(ulong byteOffset, T[] array, int index, int count) where T : struct { }
    public void ReleasePointer() { }
    [System.CLSCompliantAttribute(false)]
    public void Write<T>(ulong byteOffset, T value) where T : struct { }
    [System.CLSCompliantAttribute(false)]
    public void WriteArray<T>(ulong byteOffset, T[] array, int index, int count) where T : struct { }
  }
  public partial class SEHException : System.Exception {
    public SEHException() { }
    public SEHException(string message) { }
    public SEHException(string message, System.Exception inner) { }
    public virtual bool CanResume() { return default(bool); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(5144), AllowMultiple=false, Inherited=false)]
  public sealed partial class TypeIdentifierAttribute : System.Attribute {
    public TypeIdentifierAttribute() { }
    public TypeIdentifierAttribute(string scope, string identifier) { }
    public string Identifier { get { return default(string); } }
    public string Scope { get { return default(string); } }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("UnknownWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
  public sealed partial class UnknownWrapper {
    public UnknownWrapper(object obj) { }
    public object WrappedObject { get { return default(object); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(4096), AllowMultiple=false, Inherited=false)]
  public sealed partial class UnmanagedFunctionPointerAttribute : System.Attribute {
    public bool BestFitMapping;
    public System.Runtime.InteropServices.CharSet CharSet;
    public bool SetLastError;
    public bool ThrowOnUnmappableChar;
    public UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention callingConvention) { }
    public System.Runtime.InteropServices.CallingConvention CallingConvention { get { return default(System.Runtime.InteropServices.CallingConvention); } }
  }
  public enum UnmanagedType {
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("Marshalling as AnsiBStr may be unavailable in future releases.")]
    AnsiBStr = 35,
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("Marshalling arbitrary types may be unavailable in future releases. Please specify the type you wish to marshal as.")]
    AsAny = 40,
    Bool = 2,
    BStr = 19,
    ByValArray = 30,
    ByValTStr = 23,
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("Marshalling as Currency may be unavailable in future releases.")]
    Currency = 15,
    Error = 45,
    FunctionPtr = 38,
    HString = 47,
    I1 = 3,
    I2 = 5,
    I4 = 7,
    I8 = 9,
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("Marshalling as IDispatch may be unavailable in future releases.")]
    IDispatch = 26,
    IInspectable = 46,
    Interface = 28,
    IUnknown = 25,
    LPArray = 42,
    LPStr = 20,
    LPStruct = 43,
    LPTStr = 22,
    LPWStr = 21,
    R4 = 11,
    R8 = 12,
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("Marshalling as SafeArray may be unavailable in future releases.")]
    SafeArray = 29,
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("Applying UnmanagedType.Struct is unnecessary when marshalling a struct. Support for UnmanagedType.Struct when marshalling a reference type may be unavailable in future releases.")]
    Struct = 27,
    SysInt = 31,
    SysUInt = 32,
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("Marshalling as TBstr may be unavailable in future releases.")]
    TBStr = 36,
    U1 = 4,
    U2 = 6,
    U4 = 8,
    U8 = 10,
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("Marshalling as VariantBool may be unavailable in future releases.")]
    VariantBool = 37,
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    [System.ObsoleteAttribute("Marshalling as VBByRefString may be unavailable in future releases.")]
    VBByRefStr = 34,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("Marshalling VARIANTs may be unavailable in future releases.")]
  public enum VarEnum {
    VT_ARRAY = 8192,
    VT_BLOB = 65,
    VT_BLOB_OBJECT = 70,
    VT_BOOL = 11,
    VT_BSTR = 8,
    VT_BYREF = 16384,
    VT_CARRAY = 28,
    VT_CF = 71,
    VT_CLSID = 72,
    VT_CY = 6,
    VT_DATE = 7,
    VT_DECIMAL = 14,
    VT_DISPATCH = 9,
    VT_EMPTY = 0,
    VT_ERROR = 10,
    VT_FILETIME = 64,
    VT_HRESULT = 25,
    VT_I1 = 16,
    VT_I2 = 2,
    VT_I4 = 3,
    VT_I8 = 20,
    VT_INT = 22,
    VT_LPSTR = 30,
    VT_LPWSTR = 31,
    VT_NULL = 1,
    VT_PTR = 26,
    VT_R4 = 4,
    VT_R8 = 5,
    VT_RECORD = 36,
    VT_SAFEARRAY = 27,
    VT_STORAGE = 67,
    VT_STORED_OBJECT = 69,
    VT_STREAM = 66,
    VT_STREAMED_OBJECT = 68,
    VT_UI1 = 17,
    VT_UI2 = 18,
    VT_UI4 = 19,
    VT_UI8 = 21,
    VT_UINT = 23,
    VT_UNKNOWN = 13,
    VT_USERDEFINED = 29,
    VT_VARIANT = 12,
    VT_VECTOR = 4096,
    VT_VOID = 24,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.ObsoleteAttribute("VariantWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
  public sealed partial class VariantWrapper {
    public VariantWrapper(object obj) { }
    public object WrappedObject { get { return default(object); } }
  }
}
namespace System.Runtime.InteropServices.ComTypes {
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.FlagsAttribute]
  public enum ADVF {
    ADVF_DATAONSTOP = 64,
    ADVF_NODATA = 1,
    ADVF_ONLYONCE = 4,
    ADVF_PRIMEFIRST = 2,
    ADVFCACHE_FORCEBUILTIN = 16,
    ADVFCACHE_NOHANDLER = 8,
    ADVFCACHE_ONSAVE = 32,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct BIND_OPTS {
    public int cbStruct;
    public int dwTickCountDeadline;
    public int grfFlags;
    public int grfMode;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit)]
  public partial struct BINDPTR {
    [System.Runtime.InteropServices.FieldOffsetAttribute(0)]
    public System.IntPtr lpfuncdesc;
    [System.Runtime.InteropServices.FieldOffsetAttribute(0)]
    public System.IntPtr lptcomp;
    [System.Runtime.InteropServices.FieldOffsetAttribute(0)]
    public System.IntPtr lpvardesc;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public enum CALLCONV {
    CC_CDECL = 1,
    CC_MACPASCAL = 3,
    CC_MAX = 9,
    CC_MPWCDECL = 7,
    CC_MPWPASCAL = 8,
    CC_MSCPASCAL = 2,
    CC_PASCAL = 2,
    CC_RESERVED = 5,
    CC_STDCALL = 4,
    CC_SYSCALL = 6,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct CONNECTDATA {
    public int dwCookie;
    public object pUnk;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public enum DATADIR {
    DATADIR_GET = 1,
    DATADIR_SET = 2,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public enum DESCKIND {
    DESCKIND_FUNCDESC = 1,
    DESCKIND_IMPLICITAPPOBJ = 4,
    DESCKIND_MAX = 5,
    DESCKIND_NONE = 0,
    DESCKIND_TYPECOMP = 3,
    DESCKIND_VARDESC = 2,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct DISPPARAMS {
    public int cArgs;
    public int cNamedArgs;
    public System.IntPtr rgdispidNamedArgs;
    public System.IntPtr rgvarg;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.FlagsAttribute]
  public enum DVASPECT {
    DVASPECT_CONTENT = 1,
    DVASPECT_DOCPRINT = 8,
    DVASPECT_ICON = 4,
    DVASPECT_THUMBNAIL = 2,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct ELEMDESC {
    public System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION desc;
    public System.Runtime.InteropServices.ComTypes.TYPEDESC tdesc;
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit)]
    public partial struct DESCUNION {
      [System.Runtime.InteropServices.FieldOffsetAttribute(0)]
      public System.Runtime.InteropServices.ComTypes.IDLDESC idldesc;
      [System.Runtime.InteropServices.FieldOffsetAttribute(0)]
      public System.Runtime.InteropServices.ComTypes.PARAMDESC paramdesc;
    }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct EXCEPINFO {
    public string bstrDescription;
    public string bstrHelpFile;
    public string bstrSource;
    public int dwHelpContext;
    public System.IntPtr pfnDeferredFillIn;
    public System.IntPtr pvReserved;
    public int scode;
    public short wCode;
    public short wReserved;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct FILETIME {
    public int dwHighDateTime;
    public int dwLowDateTime;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct FORMATETC {
    public short cfFormat;
    public System.Runtime.InteropServices.ComTypes.DVASPECT dwAspect;
    public int lindex;
    public System.IntPtr ptd;
    public System.Runtime.InteropServices.ComTypes.TYMED tymed;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct FUNCDESC {
    public System.Runtime.InteropServices.ComTypes.CALLCONV callconv;
    public short cParams;
    public short cParamsOpt;
    public short cScodes;
    public System.Runtime.InteropServices.ComTypes.ELEMDESC elemdescFunc;
    public System.Runtime.InteropServices.ComTypes.FUNCKIND funckind;
    public System.Runtime.InteropServices.ComTypes.INVOKEKIND invkind;
    public System.IntPtr lprgelemdescParam;
    public System.IntPtr lprgscode;
    public int memid;
    public short oVft;
    public short wFuncFlags;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.FlagsAttribute]
  public enum FUNCFLAGS : short {
    FUNCFLAG_FBINDABLE = (short)4,
    FUNCFLAG_FDEFAULTBIND = (short)32,
    FUNCFLAG_FDEFAULTCOLLELEM = (short)256,
    FUNCFLAG_FDISPLAYBIND = (short)16,
    FUNCFLAG_FHIDDEN = (short)64,
    FUNCFLAG_FIMMEDIATEBIND = (short)4096,
    FUNCFLAG_FNONBROWSABLE = (short)1024,
    FUNCFLAG_FREPLACEABLE = (short)2048,
    FUNCFLAG_FREQUESTEDIT = (short)8,
    FUNCFLAG_FRESTRICTED = (short)1,
    FUNCFLAG_FSOURCE = (short)2,
    FUNCFLAG_FUIDEFAULT = (short)512,
    FUNCFLAG_FUSESGETLASTERROR = (short)128,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public enum FUNCKIND {
    FUNC_DISPATCH = 4,
    FUNC_NONVIRTUAL = 2,
    FUNC_PUREVIRTUAL = 1,
    FUNC_STATIC = 3,
    FUNC_VIRTUAL = 0,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IAdviseSink {
    void OnClose();
    void OnDataChange(ref System.Runtime.InteropServices.ComTypes.FORMATETC format, ref System.Runtime.InteropServices.ComTypes.STGMEDIUM stgmedium);
    void OnRename(System.Runtime.InteropServices.ComTypes.IMoniker moniker);
    void OnSave();
    void OnViewChange(int aspect, int index);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IBindCtx {
    void EnumObjectParam(out System.Runtime.InteropServices.ComTypes.IEnumString ppenum);
    void GetBindOptions(ref System.Runtime.InteropServices.ComTypes.BIND_OPTS pbindopts);
    void GetObjectParam(string pszKey, out object ppunk);
    void GetRunningObjectTable(out System.Runtime.InteropServices.ComTypes.IRunningObjectTable pprot);
    void RegisterObjectBound(object punk);
    void RegisterObjectParam(string pszKey, object punk);
    void ReleaseBoundObjects();
    void RevokeObjectBound(object punk);
    int RevokeObjectParam(string pszKey);
    void SetBindOptions(ref System.Runtime.InteropServices.ComTypes.BIND_OPTS pbindopts);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IConnectionPoint {
    void Advise(object pUnkSink, out int pdwCookie);
    void EnumConnections(out System.Runtime.InteropServices.ComTypes.IEnumConnections ppEnum);
    void GetConnectionInterface(out System.Guid pIID);
    void GetConnectionPointContainer(out System.Runtime.InteropServices.ComTypes.IConnectionPointContainer ppCPC);
    void Unadvise(int dwCookie);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IConnectionPointContainer {
    void EnumConnectionPoints(out System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints ppEnum);
    void FindConnectionPoint(ref System.Guid riid, out System.Runtime.InteropServices.ComTypes.IConnectionPoint ppCP);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct IDLDESC {
    public System.IntPtr dwReserved;
    public System.Runtime.InteropServices.ComTypes.IDLFLAG wIDLFlags;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.FlagsAttribute]
  public enum IDLFLAG : short {
    IDLFLAG_FIN = (short)1,
    IDLFLAG_FLCID = (short)4,
    IDLFLAG_FOUT = (short)2,
    IDLFLAG_FRETVAL = (short)8,
    IDLFLAG_NONE = (short)0,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IEnumConnectionPoints {
    void Clone(out System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints ppenum);
    int Next(int celt, System.Runtime.InteropServices.ComTypes.IConnectionPoint[] rgelt, System.IntPtr pceltFetched);
    void Reset();
    int Skip(int celt);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IEnumConnections {
    void Clone(out System.Runtime.InteropServices.ComTypes.IEnumConnections ppenum);
    int Next(int celt, System.Runtime.InteropServices.ComTypes.CONNECTDATA[] rgelt, System.IntPtr pceltFetched);
    void Reset();
    int Skip(int celt);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IEnumFORMATETC {
    void Clone(out System.Runtime.InteropServices.ComTypes.IEnumFORMATETC newEnum);
    int Next(int celt, System.Runtime.InteropServices.ComTypes.FORMATETC[] rgelt, int[] pceltFetched);
    int Reset();
    int Skip(int celt);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IEnumMoniker {
    void Clone(out System.Runtime.InteropServices.ComTypes.IEnumMoniker ppenum);
    int Next(int celt, System.Runtime.InteropServices.ComTypes.IMoniker[] rgelt, System.IntPtr pceltFetched);
    void Reset();
    int Skip(int celt);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IEnumString {
    void Clone(out System.Runtime.InteropServices.ComTypes.IEnumString ppenum);
    int Next(int celt, string[] rgelt, System.IntPtr pceltFetched);
    void Reset();
    int Skip(int celt);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IEnumVARIANT {
    System.Runtime.InteropServices.ComTypes.IEnumVARIANT Clone();
    int Next(int celt, object[] rgVar, System.IntPtr pceltFetched);
    int Reset();
    int Skip(int celt);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IMoniker {
    void BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx pbc, System.Runtime.InteropServices.ComTypes.IMoniker pmkToLeft, ref System.Guid riidResult, out object ppvResult);
    void BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx pbc, System.Runtime.InteropServices.ComTypes.IMoniker pmkToLeft, ref System.Guid riid, out object ppvObj);
    void CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker pmkOther, out System.Runtime.InteropServices.ComTypes.IMoniker ppmkPrefix);
    void ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker pmkRight, bool fOnlyIfNotGeneric, out System.Runtime.InteropServices.ComTypes.IMoniker ppmkComposite);
    void Enum(bool fForward, out System.Runtime.InteropServices.ComTypes.IEnumMoniker ppenumMoniker);
    void GetClassID(out System.Guid pClassID);
    void GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx pbc, System.Runtime.InteropServices.ComTypes.IMoniker pmkToLeft, out string ppszDisplayName);
    void GetSizeMax(out long pcbSize);
    void GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx pbc, System.Runtime.InteropServices.ComTypes.IMoniker pmkToLeft, out System.Runtime.InteropServices.ComTypes.FILETIME pFileTime);
    void Hash(out int pdwHash);
    void Inverse(out System.Runtime.InteropServices.ComTypes.IMoniker ppmk);
    int IsDirty();
    int IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker pmkOtherMoniker);
    int IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx pbc, System.Runtime.InteropServices.ComTypes.IMoniker pmkToLeft, System.Runtime.InteropServices.ComTypes.IMoniker pmkNewlyRunning);
    int IsSystemMoniker(out int pdwMksys);
    void Load(System.Runtime.InteropServices.ComTypes.IStream pStm);
    void ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx pbc, System.Runtime.InteropServices.ComTypes.IMoniker pmkToLeft, string pszDisplayName, out int pchEaten, out System.Runtime.InteropServices.ComTypes.IMoniker ppmkOut);
    void Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx pbc, int dwReduceHowFar, ref System.Runtime.InteropServices.ComTypes.IMoniker ppmkToLeft, out System.Runtime.InteropServices.ComTypes.IMoniker ppmkReduced);
    void RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker pmkOther, out System.Runtime.InteropServices.ComTypes.IMoniker ppmkRelPath);
    void Save(System.Runtime.InteropServices.ComTypes.IStream pStm, bool fClearDirty);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.FlagsAttribute]
  public enum IMPLTYPEFLAGS {
    IMPLTYPEFLAG_FDEFAULT = 1,
    IMPLTYPEFLAG_FDEFAULTVTABLE = 8,
    IMPLTYPEFLAG_FRESTRICTED = 4,
    IMPLTYPEFLAG_FSOURCE = 2,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.FlagsAttribute]
  public enum INVOKEKIND {
    INVOKE_FUNC = 1,
    INVOKE_PROPERTYGET = 2,
    INVOKE_PROPERTYPUT = 4,
    INVOKE_PROPERTYPUTREF = 8,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IPersistFile {
    void GetClassID(out System.Guid pClassID);
    void GetCurFile(out string ppszFileName);
    int IsDirty();
    void Load(string pszFileName, int dwMode);
    void Save(string pszFileName, bool fRemember);
    void SaveCompleted(string pszFileName);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IRunningObjectTable {
    void EnumRunning(out System.Runtime.InteropServices.ComTypes.IEnumMoniker ppenumMoniker);
    int GetObject(System.Runtime.InteropServices.ComTypes.IMoniker pmkObjectName, out object ppunkObject);
    int GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker pmkObjectName, out System.Runtime.InteropServices.ComTypes.FILETIME pfiletime);
    int IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker pmkObjectName);
    void NoteChangeTime(int dwRegister, ref System.Runtime.InteropServices.ComTypes.FILETIME pfiletime);
    int Register(int grfFlags, object punkObject, System.Runtime.InteropServices.ComTypes.IMoniker pmkObjectName);
    void Revoke(int dwRegister);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface IStream {
    void Clone(out System.Runtime.InteropServices.ComTypes.IStream ppstm);
    void Commit(int grfCommitFlags);
    void CopyTo(System.Runtime.InteropServices.ComTypes.IStream pstm, long cb, System.IntPtr pcbRead, System.IntPtr pcbWritten);
    void LockRegion(long libOffset, long cb, int dwLockType);
    void Read(byte[] pv, int cb, System.IntPtr pcbRead);
    void Revert();
    void Seek(long dlibMove, int dwOrigin, System.IntPtr plibNewPosition);
    void SetSize(long libNewSize);
    void Stat(out System.Runtime.InteropServices.ComTypes.STATSTG pstatstg, int grfStatFlag);
    void UnlockRegion(long libOffset, long cb, int dwLockType);
    void Write(byte[] pv, int cb, System.IntPtr pcbWritten);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface ITypeComp {
    void Bind(string szName, int lHashVal, short wFlags, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTInfo, out System.Runtime.InteropServices.ComTypes.DESCKIND pDescKind, out System.Runtime.InteropServices.ComTypes.BINDPTR pBindPtr);
    void BindType(string szName, int lHashVal, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTInfo, out System.Runtime.InteropServices.ComTypes.ITypeComp ppTComp);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface ITypeInfo {
    void AddressOfMember(int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, out System.IntPtr ppv);
    void CreateInstance(object pUnkOuter, ref System.Guid riid, out object ppvObj);
    void GetContainingTypeLib(out System.Runtime.InteropServices.ComTypes.ITypeLib ppTLB, out int pIndex);
    void GetDllEntry(int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, System.IntPtr pBstrDllName, System.IntPtr pBstrName, System.IntPtr pwOrdinal);
    void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
    void GetFuncDesc(int index, out System.IntPtr ppFuncDesc);
    void GetIDsOfNames(string[] rgszNames, int cNames, int[] pMemId);
    void GetImplTypeFlags(int index, out System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS pImplTypeFlags);
    void GetMops(int memid, out string pBstrMops);
    void GetNames(int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);
    void GetRefTypeInfo(int hRef, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTI);
    void GetRefTypeOfImplType(int index, out int href);
    void GetTypeAttr(out System.IntPtr ppTypeAttr);
    void GetTypeComp(out System.Runtime.InteropServices.ComTypes.ITypeComp ppTComp);
    void GetVarDesc(int index, out System.IntPtr ppVarDesc);
    void Invoke(object pvInstance, int memid, short wFlags, ref System.Runtime.InteropServices.ComTypes.DISPPARAMS pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, out int puArgErr);
    void ReleaseFuncDesc(System.IntPtr pFuncDesc);
    void ReleaseTypeAttr(System.IntPtr pTypeAttr);
    void ReleaseVarDesc(System.IntPtr pVarDesc);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface ITypeInfo2 : System.Runtime.InteropServices.ComTypes.ITypeInfo {
    new void AddressOfMember(int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, out System.IntPtr ppv);
    new void CreateInstance(object pUnkOuter, ref System.Guid riid, out object ppvObj);
    void GetAllCustData(System.IntPtr pCustData);
    void GetAllFuncCustData(int index, System.IntPtr pCustData);
    void GetAllImplTypeCustData(int index, System.IntPtr pCustData);
    void GetAllParamCustData(int indexFunc, int indexParam, System.IntPtr pCustData);
    void GetAllVarCustData(int index, System.IntPtr pCustData);
    new void GetContainingTypeLib(out System.Runtime.InteropServices.ComTypes.ITypeLib ppTLB, out int pIndex);
    void GetCustData(ref System.Guid guid, out object pVarVal);
    new void GetDllEntry(int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, System.IntPtr pBstrDllName, System.IntPtr pBstrName, System.IntPtr pwOrdinal);
    new void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
    void GetDocumentation2(int memid, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);
    void GetFuncCustData(int index, ref System.Guid guid, out object pVarVal);
    new void GetFuncDesc(int index, out System.IntPtr ppFuncDesc);
    void GetFuncIndexOfMemId(int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, out int pFuncIndex);
    new void GetIDsOfNames(string[] rgszNames, int cNames, int[] pMemId);
    void GetImplTypeCustData(int index, ref System.Guid guid, out object pVarVal);
    new void GetImplTypeFlags(int index, out System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS pImplTypeFlags);
    new void GetMops(int memid, out string pBstrMops);
    new void GetNames(int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);
    void GetParamCustData(int indexFunc, int indexParam, ref System.Guid guid, out object pVarVal);
    new void GetRefTypeInfo(int hRef, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTI);
    new void GetRefTypeOfImplType(int index, out int href);
    new void GetTypeAttr(out System.IntPtr ppTypeAttr);
    new void GetTypeComp(out System.Runtime.InteropServices.ComTypes.ITypeComp ppTComp);
    void GetTypeFlags(out int pTypeFlags);
    void GetTypeKind(out System.Runtime.InteropServices.ComTypes.TYPEKIND pTypeKind);
    void GetVarCustData(int index, ref System.Guid guid, out object pVarVal);
    new void GetVarDesc(int index, out System.IntPtr ppVarDesc);
    void GetVarIndexOfMemId(int memid, out int pVarIndex);
    new void Invoke(object pvInstance, int memid, short wFlags, ref System.Runtime.InteropServices.ComTypes.DISPPARAMS pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, out int puArgErr);
    new void ReleaseFuncDesc(System.IntPtr pFuncDesc);
    new void ReleaseTypeAttr(System.IntPtr pTypeAttr);
    new void ReleaseVarDesc(System.IntPtr pVarDesc);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface ITypeLib {
    void FindName(string szNameBuf, int lHashVal, System.Runtime.InteropServices.ComTypes.ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);
    void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
    void GetLibAttr(out System.IntPtr ppTLibAttr);
    void GetTypeComp(out System.Runtime.InteropServices.ComTypes.ITypeComp ppTComp);
    void GetTypeInfo(int index, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTI);
    int GetTypeInfoCount();
    void GetTypeInfoOfGuid(ref System.Guid guid, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTInfo);
    void GetTypeInfoType(int index, out System.Runtime.InteropServices.ComTypes.TYPEKIND pTKind);
    bool IsName(string szNameBuf, int lHashVal);
    void ReleaseTLibAttr(System.IntPtr pTLibAttr);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.InterfaceTypeAttribute((System.Runtime.InteropServices.ComInterfaceType)(1))]
  public partial interface ITypeLib2 : System.Runtime.InteropServices.ComTypes.ITypeLib {
    new void FindName(string szNameBuf, int lHashVal, System.Runtime.InteropServices.ComTypes.ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);
    void GetAllCustData(System.IntPtr pCustData);
    void GetCustData(ref System.Guid guid, out object pVarVal);
    new void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
    void GetDocumentation2(int index, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);
    new void GetLibAttr(out System.IntPtr ppTLibAttr);
    void GetLibStatistics(System.IntPtr pcUniqueNames, out int pcchUniqueNames);
    new void GetTypeComp(out System.Runtime.InteropServices.ComTypes.ITypeComp ppTComp);
    new void GetTypeInfo(int index, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTI);
    new int GetTypeInfoCount();
    new void GetTypeInfoOfGuid(ref System.Guid guid, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTInfo);
    new void GetTypeInfoType(int index, out System.Runtime.InteropServices.ComTypes.TYPEKIND pTKind);
    new bool IsName(string szNameBuf, int lHashVal);
    new void ReleaseTLibAttr(System.IntPtr pTLibAttr);
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.FlagsAttribute]
  public enum LIBFLAGS : short {
    LIBFLAG_FCONTROL = (short)2,
    LIBFLAG_FHASDISKIMAGE = (short)8,
    LIBFLAG_FHIDDEN = (short)4,
    LIBFLAG_FRESTRICTED = (short)1,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct PARAMDESC {
    public System.IntPtr lpVarValue;
    public System.Runtime.InteropServices.ComTypes.PARAMFLAG wParamFlags;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.FlagsAttribute]
  public enum PARAMFLAG : short {
    PARAMFLAG_FHASCUSTDATA = (short)64,
    PARAMFLAG_FHASDEFAULT = (short)32,
    PARAMFLAG_FIN = (short)1,
    PARAMFLAG_FLCID = (short)4,
    PARAMFLAG_FOPT = (short)16,
    PARAMFLAG_FOUT = (short)2,
    PARAMFLAG_FRETVAL = (short)8,
    PARAMFLAG_NONE = (short)0,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct STATDATA {
    public System.Runtime.InteropServices.ComTypes.ADVF advf;
    public System.Runtime.InteropServices.ComTypes.IAdviseSink advSink;
    public int connection;
    public System.Runtime.InteropServices.ComTypes.FORMATETC formatetc;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct STATSTG {
    public System.Runtime.InteropServices.ComTypes.FILETIME atime;
    public long cbSize;
    public System.Guid clsid;
    public System.Runtime.InteropServices.ComTypes.FILETIME ctime;
    public int grfLocksSupported;
    public int grfMode;
    public int grfStateBits;
    public System.Runtime.InteropServices.ComTypes.FILETIME mtime;
    public string pwcsName;
    public int reserved;
    public int type;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct STGMEDIUM {
    public object pUnkForRelease;
    public System.Runtime.InteropServices.ComTypes.TYMED tymed;
    public System.IntPtr unionmember;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public enum SYSKIND {
    SYS_MAC = 2,
    SYS_WIN16 = 0,
    SYS_WIN32 = 1,
    SYS_WIN64 = 3,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.FlagsAttribute]
  public enum TYMED {
    TYMED_ENHMF = 64,
    TYMED_FILE = 2,
    TYMED_GDI = 16,
    TYMED_HGLOBAL = 1,
    TYMED_ISTORAGE = 8,
    TYMED_ISTREAM = 4,
    TYMED_MFPICT = 32,
    TYMED_NULL = 0,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct TYPEATTR {
    public short cbAlignment;
    public int cbSizeInstance;
    public short cbSizeVft;
    public short cFuncs;
    public short cImplTypes;
    public short cVars;
    public int dwReserved;
    public System.Guid guid;
    public System.Runtime.InteropServices.ComTypes.IDLDESC idldescType;
    public int lcid;
    public System.IntPtr lpstrSchema;
    public const int MEMBER_ID_NIL = -1;
    public int memidConstructor;
    public int memidDestructor;
    public System.Runtime.InteropServices.ComTypes.TYPEDESC tdescAlias;
    public System.Runtime.InteropServices.ComTypes.TYPEKIND typekind;
    public short wMajorVerNum;
    public short wMinorVerNum;
    public System.Runtime.InteropServices.ComTypes.TYPEFLAGS wTypeFlags;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct TYPEDESC {
    public System.IntPtr lpValue;
    public short vt;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.FlagsAttribute]
  public enum TYPEFLAGS : short {
    TYPEFLAG_FAGGREGATABLE = (short)1024,
    TYPEFLAG_FAPPOBJECT = (short)1,
    TYPEFLAG_FCANCREATE = (short)2,
    TYPEFLAG_FCONTROL = (short)32,
    TYPEFLAG_FDISPATCHABLE = (short)4096,
    TYPEFLAG_FDUAL = (short)64,
    TYPEFLAG_FHIDDEN = (short)16,
    TYPEFLAG_FLICENSED = (short)4,
    TYPEFLAG_FNONEXTENSIBLE = (short)128,
    TYPEFLAG_FOLEAUTOMATION = (short)256,
    TYPEFLAG_FPREDECLID = (short)8,
    TYPEFLAG_FPROXY = (short)16384,
    TYPEFLAG_FREPLACEABLE = (short)2048,
    TYPEFLAG_FRESTRICTED = (short)512,
    TYPEFLAG_FREVERSEBIND = (short)8192,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public enum TYPEKIND {
    TKIND_ALIAS = 6,
    TKIND_COCLASS = 5,
    TKIND_DISPATCH = 4,
    TKIND_ENUM = 0,
    TKIND_INTERFACE = 3,
    TKIND_MAX = 8,
    TKIND_MODULE = 2,
    TKIND_RECORD = 1,
    TKIND_UNION = 7,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct TYPELIBATTR {
    public System.Guid guid;
    public int lcid;
    public System.Runtime.InteropServices.ComTypes.SYSKIND syskind;
    public System.Runtime.InteropServices.ComTypes.LIBFLAGS wLibFlags;
    public short wMajorVerNum;
    public short wMinorVerNum;
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct VARDESC {
    public System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION desc;
    public System.Runtime.InteropServices.ComTypes.ELEMDESC elemdescVar;
    public string lpstrSchema;
    public int memid;
    public System.Runtime.InteropServices.ComTypes.VARKIND varkind;
    public short wVarFlags;
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit)]
    public partial struct DESCUNION {
      [System.Runtime.InteropServices.FieldOffsetAttribute(0)]
      public System.IntPtr lpvarValue;
      [System.Runtime.InteropServices.FieldOffsetAttribute(0)]
      public int oInst;
    }
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  [System.FlagsAttribute]
  public enum VARFLAGS : short {
    VARFLAG_FBINDABLE = (short)4,
    VARFLAG_FDEFAULTBIND = (short)32,
    VARFLAG_FDEFAULTCOLLELEM = (short)256,
    VARFLAG_FDISPLAYBIND = (short)16,
    VARFLAG_FHIDDEN = (short)64,
    VARFLAG_FIMMEDIATEBIND = (short)4096,
    VARFLAG_FNONBROWSABLE = (short)1024,
    VARFLAG_FREADONLY = (short)1,
    VARFLAG_FREPLACEABLE = (short)2048,
    VARFLAG_FREQUESTEDIT = (short)8,
    VARFLAG_FRESTRICTED = (short)128,
    VARFLAG_FSOURCE = (short)2,
    VARFLAG_FUIDEFAULT = (short)512,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public enum VARKIND {
    VAR_CONST = 2,
    VAR_DISPATCH = 3,
    VAR_PERINSTANCE = 0,
    VAR_STATIC = 1,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Runtime.InteropServices.RuntimeInformation")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Runtime.InteropServices.RuntimeInformation")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Runtime.InteropServices.RuntimeInformation")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Runtime.InteropServices {
  public enum Architecture {
    Arm = 2,
    Arm64 = 3,
    X64 = 1,
    X86 = 0,
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct OSPlatform : System.IEquatable<System.Runtime.InteropServices.OSPlatform> {
    public static System.Runtime.InteropServices.OSPlatform Linux { get { return default(System.Runtime.InteropServices.OSPlatform); } }
    public static System.Runtime.InteropServices.OSPlatform OSX { get { return default(System.Runtime.InteropServices.OSPlatform); } }
    public static System.Runtime.InteropServices.OSPlatform Windows { get { return default(System.Runtime.InteropServices.OSPlatform); } }
    public static System.Runtime.InteropServices.OSPlatform Create(string osPlatform) { return default(System.Runtime.InteropServices.OSPlatform); }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Runtime.InteropServices.OSPlatform other) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Runtime.InteropServices.OSPlatform left, System.Runtime.InteropServices.OSPlatform right) { return default(bool); }
    public static bool operator !=(System.Runtime.InteropServices.OSPlatform left, System.Runtime.InteropServices.OSPlatform right) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  public static partial class RuntimeInformation {
    public static string FrameworkDescription { get { return default(string); } }
    public static System.Runtime.InteropServices.Architecture OSArchitecture { get { return default(System.Runtime.InteropServices.Architecture); } }
    public static string OSDescription { get { return default(string); } }
    public static System.Runtime.InteropServices.Architecture ProcessArchitecture { get { return default(System.Runtime.InteropServices.Architecture); } }
    public static bool IsOSPlatform(System.Runtime.InteropServices.OSPlatform osPlatform) { return default(bool); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Runtime.Loader")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Runtime.Loader")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Runtime.Loader")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Reflection.Metadata {
  public static partial class AssemblyExtensions {
    [System.CLSCompliantAttribute(false)]
    public unsafe static bool TryGetRawMetadata(this System.Reflection.Assembly assembly, out byte* blob, out int length) { blob = default(byte*); length = default(int); return default(bool); }
  }
}
namespace System.Runtime.Loader {
  public abstract partial class AssemblyLoadContext {
    protected AssemblyLoadContext() { }
    public static System.Runtime.Loader.AssemblyLoadContext Default { get { return default(System.Runtime.Loader.AssemblyLoadContext); } }
    public event System.Func<System.Runtime.Loader.AssemblyLoadContext, System.Reflection.AssemblyName, System.Reflection.Assembly> Resolving { add { } remove { } }
    public event System.Action<System.Runtime.Loader.AssemblyLoadContext> Unloading { add { } remove { } }
    public static System.Reflection.AssemblyName GetAssemblyName(string assemblyPath) { return default(System.Reflection.AssemblyName); }
    public static System.Runtime.Loader.AssemblyLoadContext GetLoadContext(System.Reflection.Assembly assembly) { return default(System.Runtime.Loader.AssemblyLoadContext); }
    protected abstract System.Reflection.Assembly Load(System.Reflection.AssemblyName assemblyName);
    public System.Reflection.Assembly LoadFromAssemblyName(System.Reflection.AssemblyName assemblyName) { return default(System.Reflection.Assembly); }
    public System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) { return default(System.Reflection.Assembly); }
    public System.Reflection.Assembly LoadFromNativeImagePath(string nativeImagePath, string assemblyPath) { return default(System.Reflection.Assembly); }
    public System.Reflection.Assembly LoadFromStream(System.IO.Stream assembly) { return default(System.Reflection.Assembly); }
    public System.Reflection.Assembly LoadFromStream(System.IO.Stream assembly, System.IO.Stream assemblySymbols) { return default(System.Reflection.Assembly); }
    protected virtual System.IntPtr LoadUnmanagedDll(string unmanagedDllName) { return default(System.IntPtr); }
    protected System.IntPtr LoadUnmanagedDllFromPath(string unmanagedDllPath) { return default(System.IntPtr); }
    public void SetProfileOptimizationRoot(string directoryPath) { }
    public void StartProfileOptimization(string profile) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Runtime.Numerics")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Runtime.Numerics")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Runtime.Numerics")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Numerics {
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct BigInteger : System.IComparable, System.IComparable<System.Numerics.BigInteger>, System.IEquatable<System.Numerics.BigInteger>, System.IFormattable {
    [System.CLSCompliantAttribute(false)]
    public BigInteger(byte[] value) { throw new System.NotImplementedException(); }
    public BigInteger(decimal value) { throw new System.NotImplementedException(); }
    public BigInteger(double value) { throw new System.NotImplementedException(); }
    public BigInteger(int value) { throw new System.NotImplementedException(); }
    public BigInteger(long value) { throw new System.NotImplementedException(); }
    public BigInteger(float value) { throw new System.NotImplementedException(); }
    [System.CLSCompliantAttribute(false)]
    public BigInteger(uint value) { throw new System.NotImplementedException(); }
    [System.CLSCompliantAttribute(false)]
    public BigInteger(ulong value) { throw new System.NotImplementedException(); }
    public bool IsEven { get { return default(bool); } }
    public bool IsOne { get { return default(bool); } }
    public bool IsPowerOfTwo { get { return default(bool); } }
    public bool IsZero { get { return default(bool); } }
    public static System.Numerics.BigInteger MinusOne { get { return default(System.Numerics.BigInteger); } }
    public static System.Numerics.BigInteger One { get { return default(System.Numerics.BigInteger); } }
    public int Sign { get { return default(int); } }
    public static System.Numerics.BigInteger Zero { get { return default(System.Numerics.BigInteger); } }
    public static System.Numerics.BigInteger Abs(System.Numerics.BigInteger value) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger Add(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(System.Numerics.BigInteger); }
    public static int Compare(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(int); }
    public int CompareTo(long other) { return default(int); }
    public int CompareTo(System.Numerics.BigInteger other) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    public int CompareTo(ulong other) { return default(int); }
    public static System.Numerics.BigInteger Divide(System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger DivRem(System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor, out System.Numerics.BigInteger remainder) { remainder = default(System.Numerics.BigInteger); return default(System.Numerics.BigInteger); }
    public bool Equals(long other) { return default(bool); }
    public bool Equals(System.Numerics.BigInteger other) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public bool Equals(ulong other) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Numerics.BigInteger GreatestCommonDivisor(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(System.Numerics.BigInteger); }
    public static double Log(System.Numerics.BigInteger value) { return default(double); }
    public static double Log(System.Numerics.BigInteger value, double baseValue) { return default(double); }
    public static double Log10(System.Numerics.BigInteger value) { return default(double); }
    public static System.Numerics.BigInteger Max(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger Min(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger ModPow(System.Numerics.BigInteger value, System.Numerics.BigInteger exponent, System.Numerics.BigInteger modulus) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger Multiply(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger Negate(System.Numerics.BigInteger value) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger operator +(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger operator &(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger operator |(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger operator --(System.Numerics.BigInteger value) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger operator /(System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor) { return default(System.Numerics.BigInteger); }
    public static bool operator ==(long left, System.Numerics.BigInteger right) { return default(bool); }
    public static bool operator ==(System.Numerics.BigInteger left, long right) { return default(bool); }
    public static bool operator ==(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool operator ==(System.Numerics.BigInteger left, ulong right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool operator ==(ulong left, System.Numerics.BigInteger right) { return default(bool); }
    public static System.Numerics.BigInteger operator ^(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(System.Numerics.BigInteger); }
    public static explicit operator System.Numerics.BigInteger (decimal value) { return default(System.Numerics.BigInteger); }
    public static explicit operator System.Numerics.BigInteger (double value) { return default(System.Numerics.BigInteger); }
    public static explicit operator byte (System.Numerics.BigInteger value) { return default(byte); }
    public static explicit operator decimal (System.Numerics.BigInteger value) { return default(decimal); }
    public static explicit operator double (System.Numerics.BigInteger value) { return default(double); }
    public static explicit operator short (System.Numerics.BigInteger value) { return default(short); }
    public static explicit operator int (System.Numerics.BigInteger value) { return default(int); }
    public static explicit operator long (System.Numerics.BigInteger value) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator sbyte (System.Numerics.BigInteger value) { return default(sbyte); }
    public static explicit operator float (System.Numerics.BigInteger value) { return default(float); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator ushort (System.Numerics.BigInteger value) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator uint (System.Numerics.BigInteger value) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator ulong (System.Numerics.BigInteger value) { return default(ulong); }
    public static explicit operator System.Numerics.BigInteger (float value) { return default(System.Numerics.BigInteger); }
    public static bool operator >(long left, System.Numerics.BigInteger right) { return default(bool); }
    public static bool operator >(System.Numerics.BigInteger left, long right) { return default(bool); }
    public static bool operator >(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool operator >(System.Numerics.BigInteger left, ulong right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool operator >(ulong left, System.Numerics.BigInteger right) { return default(bool); }
    public static bool operator >=(long left, System.Numerics.BigInteger right) { return default(bool); }
    public static bool operator >=(System.Numerics.BigInteger left, long right) { return default(bool); }
    public static bool operator >=(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool operator >=(System.Numerics.BigInteger left, ulong right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool operator >=(ulong left, System.Numerics.BigInteger right) { return default(bool); }
    public static implicit operator System.Numerics.BigInteger (byte value) { return default(System.Numerics.BigInteger); }
    public static implicit operator System.Numerics.BigInteger (short value) { return default(System.Numerics.BigInteger); }
    public static implicit operator System.Numerics.BigInteger (int value) { return default(System.Numerics.BigInteger); }
    public static implicit operator System.Numerics.BigInteger (long value) { return default(System.Numerics.BigInteger); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator System.Numerics.BigInteger (sbyte value) { return default(System.Numerics.BigInteger); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator System.Numerics.BigInteger (ushort value) { return default(System.Numerics.BigInteger); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator System.Numerics.BigInteger (uint value) { return default(System.Numerics.BigInteger); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator System.Numerics.BigInteger (ulong value) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger operator ++(System.Numerics.BigInteger value) { return default(System.Numerics.BigInteger); }
    public static bool operator !=(long left, System.Numerics.BigInteger right) { return default(bool); }
    public static bool operator !=(System.Numerics.BigInteger left, long right) { return default(bool); }
    public static bool operator !=(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool operator !=(System.Numerics.BigInteger left, ulong right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool operator !=(ulong left, System.Numerics.BigInteger right) { return default(bool); }
    public static System.Numerics.BigInteger operator <<(System.Numerics.BigInteger value, int shift) { return default(System.Numerics.BigInteger); }
    public static bool operator <(long left, System.Numerics.BigInteger right) { return default(bool); }
    public static bool operator <(System.Numerics.BigInteger left, long right) { return default(bool); }
    public static bool operator <(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool operator <(System.Numerics.BigInteger left, ulong right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool operator <(ulong left, System.Numerics.BigInteger right) { return default(bool); }
    public static bool operator <=(long left, System.Numerics.BigInteger right) { return default(bool); }
    public static bool operator <=(System.Numerics.BigInteger left, long right) { return default(bool); }
    public static bool operator <=(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool operator <=(System.Numerics.BigInteger left, ulong right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static bool operator <=(ulong left, System.Numerics.BigInteger right) { return default(bool); }
    public static System.Numerics.BigInteger operator %(System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger operator *(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger operator ~(System.Numerics.BigInteger value) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger operator >>(System.Numerics.BigInteger value, int shift) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger operator -(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger operator -(System.Numerics.BigInteger value) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger operator +(System.Numerics.BigInteger value) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger Parse(string value) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger Parse(string value, System.Globalization.NumberStyles style) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger Parse(string value, System.Globalization.NumberStyles style, System.IFormatProvider provider) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger Parse(string value, System.IFormatProvider provider) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger Pow(System.Numerics.BigInteger value, int exponent) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger Remainder(System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor) { return default(System.Numerics.BigInteger); }
    public static System.Numerics.BigInteger Subtract(System.Numerics.BigInteger left, System.Numerics.BigInteger right) { return default(System.Numerics.BigInteger); }
    int System.IComparable.CompareTo(object obj) { return default(int); }
    public byte[] ToByteArray() { return default(byte[]); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
    public static bool TryParse(string value, System.Globalization.NumberStyles style, System.IFormatProvider provider, out System.Numerics.BigInteger result) { result = default(System.Numerics.BigInteger); return default(bool); }
    public static bool TryParse(string value, out System.Numerics.BigInteger result) { result = default(System.Numerics.BigInteger); return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Complex : System.IEquatable<System.Numerics.Complex>, System.IFormattable {
    public static readonly System.Numerics.Complex ImaginaryOne;
    public static readonly System.Numerics.Complex One;
    public static readonly System.Numerics.Complex Zero;
    public Complex(double real, double imaginary) { throw new System.NotImplementedException(); }
    public double Imaginary { get { return default(double); } }
    public double Magnitude { get { return default(double); } }
    public double Phase { get { return default(double); } }
    public double Real { get { return default(double); } }
    public static double Abs(System.Numerics.Complex value) { return default(double); }
    public static System.Numerics.Complex Acos(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Add(System.Numerics.Complex left, System.Numerics.Complex right) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Asin(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Atan(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Conjugate(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Cos(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Cosh(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Divide(System.Numerics.Complex dividend, System.Numerics.Complex divisor) { return default(System.Numerics.Complex); }
    public bool Equals(System.Numerics.Complex value) { return default(bool); }
    public override bool Equals(object obj) { return default(bool); }
    public static System.Numerics.Complex Exp(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex FromPolarCoordinates(double magnitude, double phase) { return default(System.Numerics.Complex); }
    public override int GetHashCode() { return default(int); }
    public static System.Numerics.Complex Log(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Log(System.Numerics.Complex value, double baseValue) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Log10(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Multiply(System.Numerics.Complex left, System.Numerics.Complex right) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Negate(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex operator +(System.Numerics.Complex left, System.Numerics.Complex right) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex operator /(System.Numerics.Complex left, System.Numerics.Complex right) { return default(System.Numerics.Complex); }
    public static bool operator ==(System.Numerics.Complex left, System.Numerics.Complex right) { return default(bool); }
    public static explicit operator System.Numerics.Complex (decimal value) { return default(System.Numerics.Complex); }
    public static explicit operator System.Numerics.Complex (System.Numerics.BigInteger value) { return default(System.Numerics.Complex); }
    public static implicit operator System.Numerics.Complex (byte value) { return default(System.Numerics.Complex); }
    public static implicit operator System.Numerics.Complex (double value) { return default(System.Numerics.Complex); }
    public static implicit operator System.Numerics.Complex (short value) { return default(System.Numerics.Complex); }
    public static implicit operator System.Numerics.Complex (int value) { return default(System.Numerics.Complex); }
    public static implicit operator System.Numerics.Complex (long value) { return default(System.Numerics.Complex); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator System.Numerics.Complex (sbyte value) { return default(System.Numerics.Complex); }
    public static implicit operator System.Numerics.Complex (float value) { return default(System.Numerics.Complex); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator System.Numerics.Complex (ushort value) { return default(System.Numerics.Complex); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator System.Numerics.Complex (uint value) { return default(System.Numerics.Complex); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator System.Numerics.Complex (ulong value) { return default(System.Numerics.Complex); }
    public static bool operator !=(System.Numerics.Complex left, System.Numerics.Complex right) { return default(bool); }
    public static System.Numerics.Complex operator *(System.Numerics.Complex left, System.Numerics.Complex right) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex operator -(System.Numerics.Complex left, System.Numerics.Complex right) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex operator -(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Pow(System.Numerics.Complex value, double power) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Pow(System.Numerics.Complex value, System.Numerics.Complex power) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Reciprocal(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Sin(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Sinh(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Sqrt(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Subtract(System.Numerics.Complex left, System.Numerics.Complex right) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Tan(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public static System.Numerics.Complex Tanh(System.Numerics.Complex value) { return default(System.Numerics.Complex); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public string ToString(string format) { return default(string); }
    public string ToString(string format, System.IFormatProvider provider) { return default(string); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Runtime.Serialization.Json")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Runtime.Serialization.Json")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Runtime.Serialization.Json")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Runtime.Serialization {
  public partial class DateTimeFormat {
    public DateTimeFormat(string formatString) { }
    public DateTimeFormat(string formatString, System.IFormatProvider formatProvider) { }
    public System.Globalization.DateTimeStyles DateTimeStyles { get { return default(System.Globalization.DateTimeStyles); } set { } }
    public System.IFormatProvider FormatProvider { get { return default(System.IFormatProvider); } }
    public string FormatString { get { return default(string); } }
  }
  public enum EmitTypeInformation {
    Always = 1,
    AsNeeded = 0,
    Never = 2,
  }
}
namespace System.Runtime.Serialization.Json {
  public sealed partial class DataContractJsonSerializer {
    public DataContractJsonSerializer(System.Type type) { }
    public DataContractJsonSerializer(System.Type type, System.Collections.Generic.IEnumerable<System.Type> knownTypes) { }
    public DataContractJsonSerializer(System.Type type, System.Runtime.Serialization.Json.DataContractJsonSerializerSettings settings) { }
    public System.Runtime.Serialization.DateTimeFormat DateTimeFormat { get { return default(System.Runtime.Serialization.DateTimeFormat); } }
    public System.Runtime.Serialization.EmitTypeInformation EmitTypeInformation { get { return default(System.Runtime.Serialization.EmitTypeInformation); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Type> KnownTypes { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Type>); } }
    public bool SerializeReadOnlyTypes { get { return default(bool); } }
    public bool UseSimpleDictionaryFormat { get { return default(bool); } }
    public object ReadObject(System.IO.Stream stream) { return default(object); }
    public void WriteObject(System.IO.Stream stream, object graph) { }
  }
  public partial class DataContractJsonSerializerSettings {
    public DataContractJsonSerializerSettings() { }
    public System.Runtime.Serialization.DateTimeFormat DateTimeFormat { get { return default(System.Runtime.Serialization.DateTimeFormat); } set { } }
    public System.Runtime.Serialization.EmitTypeInformation EmitTypeInformation { get { return default(System.Runtime.Serialization.EmitTypeInformation); } set { } }
    public System.Collections.Generic.IEnumerable<System.Type> KnownTypes { get { return default(System.Collections.Generic.IEnumerable<System.Type>); } set { } }
    public int MaxItemsInObjectGraph { get { return default(int); } set { } }
    public string RootName { get { return default(string); } set { } }
    public bool SerializeReadOnlyTypes { get { return default(bool); } set { } }
    public bool UseSimpleDictionaryFormat { get { return default(bool); } set { } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Runtime.Serialization.Primitives")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Runtime.Serialization.Primitives")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Runtime.Serialization.Primitives")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Runtime.Serialization {
  [System.AttributeUsageAttribute((System.AttributeTargets)(12), Inherited=false, AllowMultiple=false)]
  public sealed partial class CollectionDataContractAttribute : System.Attribute {
    public CollectionDataContractAttribute() { }
    public bool IsItemNameSetExplicitly { get { return default(bool); } }
    public bool IsKeyNameSetExplicitly { get { return default(bool); } }
    public bool IsNameSetExplicitly { get { return default(bool); } }
    public bool IsNamespaceSetExplicitly { get { return default(bool); } }
    public bool IsReference { get { return default(bool); } set { } }
    public bool IsReferenceSetExplicitly { get { return default(bool); } }
    public bool IsValueNameSetExplicitly { get { return default(bool); } }
    public string ItemName { get { return default(string); } set { } }
    public string KeyName { get { return default(string); } set { } }
    public string Name { get { return default(string); } set { } }
    public string Namespace { get { return default(string); } set { } }
    public string ValueName { get { return default(string); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(3), Inherited=false, AllowMultiple=true)]
  public sealed partial class ContractNamespaceAttribute : System.Attribute {
    public ContractNamespaceAttribute(string contractNamespace) { }
    public string ClrNamespace { get { return default(string); } set { } }
    public string ContractNamespace { get { return default(string); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(28), Inherited=false, AllowMultiple=false)]
  public sealed partial class DataContractAttribute : System.Attribute {
    public DataContractAttribute() { }
    public bool IsNameSetExplicitly { get { return default(bool); } }
    public bool IsNamespaceSetExplicitly { get { return default(bool); } }
    public bool IsReference { get { return default(bool); } set { } }
    public bool IsReferenceSetExplicitly { get { return default(bool); } }
    public string Name { get { return default(string); } set { } }
    public string Namespace { get { return default(string); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), Inherited=false, AllowMultiple=false)]
  public sealed partial class DataMemberAttribute : System.Attribute {
    public DataMemberAttribute() { }
    public bool EmitDefaultValue { get { return default(bool); } set { } }
    public bool IsNameSetExplicitly { get { return default(bool); } }
    public bool IsRequired { get { return default(bool); } set { } }
    public string Name { get { return default(string); } set { } }
    public int Order { get { return default(int); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(256), Inherited=false, AllowMultiple=false)]
  public sealed partial class EnumMemberAttribute : System.Attribute {
    public EnumMemberAttribute() { }
    public bool IsValueSetExplicitly { get { return default(bool); } }
    public string Value { get { return default(string); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(384), Inherited=false, AllowMultiple=false)]
  public sealed partial class IgnoreDataMemberAttribute : System.Attribute {
    public IgnoreDataMemberAttribute() { }
  }
  public partial class InvalidDataContractException : System.Exception {
    public InvalidDataContractException() { }
    public InvalidDataContractException(string message) { }
    public InvalidDataContractException(string message, System.Exception innerException) { }
  }
  public partial interface ISerializationSurrogateProvider {
    object GetDeserializedObject(object obj, System.Type targetType);
    object GetObjectToSerialize(object obj, System.Type targetType);
    System.Type GetSurrogateType(System.Type type);
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(12), Inherited=true, AllowMultiple=true)]
  public sealed partial class KnownTypeAttribute : System.Attribute {
    public KnownTypeAttribute(string methodName) { }
    public KnownTypeAttribute(System.Type type) { }
    public string MethodName { get { return default(string); } }
    public System.Type Type { get { return default(System.Type); } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64), Inherited=false)]
  public sealed partial class OnDeserializedAttribute : System.Attribute {
    public OnDeserializedAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64), Inherited=false)]
  public sealed partial class OnDeserializingAttribute : System.Attribute {
    public OnDeserializingAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64), Inherited=false)]
  public sealed partial class OnSerializedAttribute : System.Attribute {
    public OnSerializedAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(64), Inherited=false)]
  public sealed partial class OnSerializingAttribute : System.Attribute {
    public OnSerializingAttribute() { }
  }
  public partial class SerializationException : System.Exception {
    public SerializationException() { }
    public SerializationException(string message) { }
    public SerializationException(string message, System.Exception innerException) { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct StreamingContext {
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Runtime.Serialization.Xml")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Runtime.Serialization.Xml")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Runtime.Serialization.Xml")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Runtime.Serialization {
  public abstract partial class DataContractResolver {
    protected DataContractResolver() { }
    public abstract System.Type ResolveName(string typeName, string typeNamespace, System.Type declaredType, System.Runtime.Serialization.DataContractResolver knownTypeResolver);
    public abstract bool TryResolveType(System.Type type, System.Type declaredType, System.Runtime.Serialization.DataContractResolver knownTypeResolver, out System.Xml.XmlDictionaryString typeName, out System.Xml.XmlDictionaryString typeNamespace);
  }
  public sealed partial class DataContractSerializer : System.Runtime.Serialization.XmlObjectSerializer {
    public DataContractSerializer(System.Type type) { }
    public DataContractSerializer(System.Type type, System.Collections.Generic.IEnumerable<System.Type> knownTypes) { }
    public DataContractSerializer(System.Type type, System.Runtime.Serialization.DataContractSerializerSettings settings) { }
    public DataContractSerializer(System.Type type, string rootName, string rootNamespace) { }
    public DataContractSerializer(System.Type type, string rootName, string rootNamespace, System.Collections.Generic.IEnumerable<System.Type> knownTypes) { }
    public DataContractSerializer(System.Type type, System.Xml.XmlDictionaryString rootName, System.Xml.XmlDictionaryString rootNamespace) { }
    public DataContractSerializer(System.Type type, System.Xml.XmlDictionaryString rootName, System.Xml.XmlDictionaryString rootNamespace, System.Collections.Generic.IEnumerable<System.Type> knownTypes) { }
    public bool IgnoreExtensionDataObject { get { return default(bool); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Type> KnownTypes { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Type>); } }
    public int MaxItemsInObjectGraph { get { return default(int); } }
    public bool PreserveObjectReferences { get { return default(bool); } }
    public bool SerializeReadOnlyTypes { get { return default(bool); } }
    public override bool IsStartObject(System.Xml.XmlDictionaryReader reader) { return default(bool); }
    public override bool IsStartObject(System.Xml.XmlReader reader) { return default(bool); }
    public override object ReadObject(System.Xml.XmlDictionaryReader reader, bool verifyObjectName) { return default(object); }
    public override object ReadObject(System.Xml.XmlReader reader) { return default(object); }
    public override object ReadObject(System.Xml.XmlReader reader, bool verifyObjectName) { return default(object); }
    public override void WriteEndObject(System.Xml.XmlDictionaryWriter writer) { }
    public override void WriteEndObject(System.Xml.XmlWriter writer) { }
    public override void WriteObject(System.Xml.XmlWriter writer, object graph) { }
    public override void WriteObjectContent(System.Xml.XmlDictionaryWriter writer, object graph) { }
    public override void WriteObjectContent(System.Xml.XmlWriter writer, object graph) { }
    public override void WriteStartObject(System.Xml.XmlDictionaryWriter writer, object graph) { }
    public override void WriteStartObject(System.Xml.XmlWriter writer, object graph) { }
  }
  public static partial class DataContractSerializerExtensions {
    public static System.Runtime.Serialization.ISerializationSurrogateProvider GetSerializationSurrogateProvider(this System.Runtime.Serialization.DataContractSerializer serializer) { return default(System.Runtime.Serialization.ISerializationSurrogateProvider); }
    public static void SetSerializationSurrogateProvider(this System.Runtime.Serialization.DataContractSerializer serializer, System.Runtime.Serialization.ISerializationSurrogateProvider provider) { }
  }
  public partial class DataContractSerializerSettings {
    public DataContractSerializerSettings() { }
    public System.Runtime.Serialization.DataContractResolver DataContractResolver { get { return default(System.Runtime.Serialization.DataContractResolver); } set { } }
    public System.Collections.Generic.IEnumerable<System.Type> KnownTypes { get { return default(System.Collections.Generic.IEnumerable<System.Type>); } set { } }
    public int MaxItemsInObjectGraph { get { return default(int); } set { } }
    public bool PreserveObjectReferences { get { return default(bool); } set { } }
    public System.Xml.XmlDictionaryString RootName { get { return default(System.Xml.XmlDictionaryString); } set { } }
    public System.Xml.XmlDictionaryString RootNamespace { get { return default(System.Xml.XmlDictionaryString); } set { } }
    public bool SerializeReadOnlyTypes { get { return default(bool); } set { } }
  }
  public abstract partial class XmlObjectSerializer {
    protected XmlObjectSerializer() { }
    public abstract bool IsStartObject(System.Xml.XmlDictionaryReader reader);
    public virtual bool IsStartObject(System.Xml.XmlReader reader) { return default(bool); }
    public virtual object ReadObject(System.IO.Stream stream) { return default(object); }
    public virtual object ReadObject(System.Xml.XmlDictionaryReader reader) { return default(object); }
    public abstract object ReadObject(System.Xml.XmlDictionaryReader reader, bool verifyObjectName);
    public virtual object ReadObject(System.Xml.XmlReader reader) { return default(object); }
    public virtual object ReadObject(System.Xml.XmlReader reader, bool verifyObjectName) { return default(object); }
    public abstract void WriteEndObject(System.Xml.XmlDictionaryWriter writer);
    public virtual void WriteEndObject(System.Xml.XmlWriter writer) { }
    public virtual void WriteObject(System.IO.Stream stream, object graph) { }
    public virtual void WriteObject(System.Xml.XmlDictionaryWriter writer, object graph) { }
    public virtual void WriteObject(System.Xml.XmlWriter writer, object graph) { }
    public abstract void WriteObjectContent(System.Xml.XmlDictionaryWriter writer, object graph);
    public virtual void WriteObjectContent(System.Xml.XmlWriter writer, object graph) { }
    public abstract void WriteStartObject(System.Xml.XmlDictionaryWriter writer, object graph);
    public virtual void WriteStartObject(System.Xml.XmlWriter writer, object graph) { }
  }
}
namespace System.Xml {
  public partial interface IXmlDictionary {
    bool TryLookup(int key, out System.Xml.XmlDictionaryString result);
    bool TryLookup(string value, out System.Xml.XmlDictionaryString result);
    bool TryLookup(System.Xml.XmlDictionaryString value, out System.Xml.XmlDictionaryString result);
  }
  public delegate void OnXmlDictionaryReaderClose(System.Xml.XmlDictionaryReader reader);
  public partial class UniqueId {
    public UniqueId() { }
    public UniqueId(byte[] guid) { }
    public UniqueId(byte[] guid, int offset) { }
    public UniqueId(char[] chars, int offset, int count) { }
    public UniqueId(System.Guid guid) { }
    public UniqueId(string value) { }
    public int CharArrayLength { get { return default(int); } }
    public bool IsGuid { get { return default(bool); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Xml.UniqueId id1, System.Xml.UniqueId id2) { return default(bool); }
    public static bool operator !=(System.Xml.UniqueId id1, System.Xml.UniqueId id2) { return default(bool); }
    public int ToCharArray(char[] chars, int offset) { return default(int); }
    public override string ToString() { return default(string); }
    public bool TryGetGuid(byte[] buffer, int offset) { return default(bool); }
    public bool TryGetGuid(out System.Guid guid) { guid = default(System.Guid); return default(bool); }
  }
  public partial class XmlBinaryReaderSession : System.Xml.IXmlDictionary {
    public XmlBinaryReaderSession() { }
    public System.Xml.XmlDictionaryString Add(int id, string value) { return default(System.Xml.XmlDictionaryString); }
    public void Clear() { }
    public bool TryLookup(int key, out System.Xml.XmlDictionaryString result) { result = default(System.Xml.XmlDictionaryString); return default(bool); }
    public bool TryLookup(string value, out System.Xml.XmlDictionaryString result) { result = default(System.Xml.XmlDictionaryString); return default(bool); }
    public bool TryLookup(System.Xml.XmlDictionaryString value, out System.Xml.XmlDictionaryString result) { result = default(System.Xml.XmlDictionaryString); return default(bool); }
  }
  public partial class XmlBinaryWriterSession {
    public XmlBinaryWriterSession() { }
    public void Reset() { }
    public virtual bool TryAdd(System.Xml.XmlDictionaryString value, out int key) { key = default(int); return default(bool); }
  }
  public partial class XmlDictionary : System.Xml.IXmlDictionary {
    public XmlDictionary() { }
    public XmlDictionary(int capacity) { }
    public static System.Xml.IXmlDictionary Empty { get { return default(System.Xml.IXmlDictionary); } }
    public virtual System.Xml.XmlDictionaryString Add(string value) { return default(System.Xml.XmlDictionaryString); }
    public virtual bool TryLookup(int key, out System.Xml.XmlDictionaryString result) { result = default(System.Xml.XmlDictionaryString); return default(bool); }
    public virtual bool TryLookup(string value, out System.Xml.XmlDictionaryString result) { result = default(System.Xml.XmlDictionaryString); return default(bool); }
    public virtual bool TryLookup(System.Xml.XmlDictionaryString value, out System.Xml.XmlDictionaryString result) { result = default(System.Xml.XmlDictionaryString); return default(bool); }
  }
  public abstract partial class XmlDictionaryReader : System.Xml.XmlReader {
    protected XmlDictionaryReader() { }
    public virtual bool CanCanonicalize { get { return default(bool); } }
    public virtual System.Xml.XmlDictionaryReaderQuotas Quotas { get { return default(System.Xml.XmlDictionaryReaderQuotas); } }
    public static System.Xml.XmlDictionaryReader CreateBinaryReader(byte[] buffer, int offset, int count, System.Xml.IXmlDictionary dictionary, System.Xml.XmlDictionaryReaderQuotas quotas) { return default(System.Xml.XmlDictionaryReader); }
    public static System.Xml.XmlDictionaryReader CreateBinaryReader(byte[] buffer, int offset, int count, System.Xml.IXmlDictionary dictionary, System.Xml.XmlDictionaryReaderQuotas quotas, System.Xml.XmlBinaryReaderSession session) { return default(System.Xml.XmlDictionaryReader); }
    public static System.Xml.XmlDictionaryReader CreateBinaryReader(byte[] buffer, int offset, int count, System.Xml.XmlDictionaryReaderQuotas quotas) { return default(System.Xml.XmlDictionaryReader); }
    public static System.Xml.XmlDictionaryReader CreateBinaryReader(byte[] buffer, System.Xml.XmlDictionaryReaderQuotas quotas) { return default(System.Xml.XmlDictionaryReader); }
    public static System.Xml.XmlDictionaryReader CreateBinaryReader(System.IO.Stream stream, System.Xml.IXmlDictionary dictionary, System.Xml.XmlDictionaryReaderQuotas quotas) { return default(System.Xml.XmlDictionaryReader); }
    public static System.Xml.XmlDictionaryReader CreateBinaryReader(System.IO.Stream stream, System.Xml.IXmlDictionary dictionary, System.Xml.XmlDictionaryReaderQuotas quotas, System.Xml.XmlBinaryReaderSession session) { return default(System.Xml.XmlDictionaryReader); }
    public static System.Xml.XmlDictionaryReader CreateBinaryReader(System.IO.Stream stream, System.Xml.XmlDictionaryReaderQuotas quotas) { return default(System.Xml.XmlDictionaryReader); }
    public static System.Xml.XmlDictionaryReader CreateDictionaryReader(System.Xml.XmlReader reader) { return default(System.Xml.XmlDictionaryReader); }
    public static System.Xml.XmlDictionaryReader CreateTextReader(byte[] buffer, int offset, int count, System.Xml.XmlDictionaryReaderQuotas quotas) { return default(System.Xml.XmlDictionaryReader); }
    public static System.Xml.XmlDictionaryReader CreateTextReader(byte[] buffer, System.Xml.XmlDictionaryReaderQuotas quotas) { return default(System.Xml.XmlDictionaryReader); }
    public static System.Xml.XmlDictionaryReader CreateTextReader(System.IO.Stream stream, System.Text.Encoding encoding, System.Xml.XmlDictionaryReaderQuotas quotas, System.Xml.OnXmlDictionaryReaderClose onClose) { return default(System.Xml.XmlDictionaryReader); }
    public static System.Xml.XmlDictionaryReader CreateTextReader(System.IO.Stream stream, System.Xml.XmlDictionaryReaderQuotas quotas) { return default(System.Xml.XmlDictionaryReader); }
    public virtual void EndCanonicalization() { }
    public virtual string GetAttribute(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { return default(string); }
    public virtual int IndexOfLocalName(string[] localNames, string namespaceUri) { return default(int); }
    public virtual int IndexOfLocalName(System.Xml.XmlDictionaryString[] localNames, System.Xml.XmlDictionaryString namespaceUri) { return default(int); }
    public virtual bool IsLocalName(string localName) { return default(bool); }
    public virtual bool IsLocalName(System.Xml.XmlDictionaryString localName) { return default(bool); }
    public virtual bool IsNamespaceUri(string namespaceUri) { return default(bool); }
    public virtual bool IsNamespaceUri(System.Xml.XmlDictionaryString namespaceUri) { return default(bool); }
    public virtual bool IsStartArray(out System.Type type) { type = default(System.Type); return default(bool); }
    public virtual bool IsStartElement(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { return default(bool); }
    protected bool IsTextNode(System.Xml.XmlNodeType nodeType) { return default(bool); }
    public virtual void MoveToStartElement() { }
    public virtual void MoveToStartElement(string name) { }
    public virtual void MoveToStartElement(string localName, string namespaceUri) { }
    public virtual void MoveToStartElement(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { }
    public virtual int ReadArray(string localName, string namespaceUri, bool[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(string localName, string namespaceUri, System.DateTime[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(string localName, string namespaceUri, decimal[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(string localName, string namespaceUri, double[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(string localName, string namespaceUri, System.Guid[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(string localName, string namespaceUri, short[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(string localName, string namespaceUri, int[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(string localName, string namespaceUri, long[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(string localName, string namespaceUri, float[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(string localName, string namespaceUri, System.TimeSpan[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, bool[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, System.DateTime[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, decimal[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, double[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, System.Guid[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, short[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, int[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, long[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, float[] array, int offset, int count) { return default(int); }
    public virtual int ReadArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, System.TimeSpan[] array, int offset, int count) { return default(int); }
    public virtual bool[] ReadBooleanArray(string localName, string namespaceUri) { return default(bool[]); }
    public virtual bool[] ReadBooleanArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { return default(bool[]); }
    public override object ReadContentAs(System.Type type, System.Xml.IXmlNamespaceResolver namespaceResolver) { return default(object); }
    public virtual byte[] ReadContentAsBase64() { return default(byte[]); }
    public virtual byte[] ReadContentAsBinHex() { return default(byte[]); }
    protected byte[] ReadContentAsBinHex(int maxByteArrayContentLength) { return default(byte[]); }
    public virtual int ReadContentAsChars(char[] chars, int offset, int count) { return default(int); }
    public override decimal ReadContentAsDecimal() { return default(decimal); }
    public override float ReadContentAsFloat() { return default(float); }
    public virtual System.Guid ReadContentAsGuid() { return default(System.Guid); }
    public virtual void ReadContentAsQualifiedName(out string localName, out string namespaceUri) { localName = default(string); namespaceUri = default(string); }
    public override string ReadContentAsString() { return default(string); }
    protected string ReadContentAsString(int maxStringContentLength) { return default(string); }
    public virtual string ReadContentAsString(string[] strings, out int index) { index = default(int); return default(string); }
    public virtual string ReadContentAsString(System.Xml.XmlDictionaryString[] strings, out int index) { index = default(int); return default(string); }
    public virtual System.TimeSpan ReadContentAsTimeSpan() { return default(System.TimeSpan); }
    public virtual System.Xml.UniqueId ReadContentAsUniqueId() { return default(System.Xml.UniqueId); }
    public virtual System.DateTime[] ReadDateTimeArray(string localName, string namespaceUri) { return default(System.DateTime[]); }
    public virtual System.DateTime[] ReadDateTimeArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { return default(System.DateTime[]); }
    public virtual decimal[] ReadDecimalArray(string localName, string namespaceUri) { return default(decimal[]); }
    public virtual decimal[] ReadDecimalArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { return default(decimal[]); }
    public virtual double[] ReadDoubleArray(string localName, string namespaceUri) { return default(double[]); }
    public virtual double[] ReadDoubleArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { return default(double[]); }
    public virtual byte[] ReadElementContentAsBase64() { return default(byte[]); }
    public virtual byte[] ReadElementContentAsBinHex() { return default(byte[]); }
    public override bool ReadElementContentAsBoolean() { return default(bool); }
    public override decimal ReadElementContentAsDecimal() { return default(decimal); }
    public override double ReadElementContentAsDouble() { return default(double); }
    public override float ReadElementContentAsFloat() { return default(float); }
    public virtual System.Guid ReadElementContentAsGuid() { return default(System.Guid); }
    public override int ReadElementContentAsInt() { return default(int); }
    public override long ReadElementContentAsLong() { return default(long); }
    public override string ReadElementContentAsString() { return default(string); }
    public virtual System.TimeSpan ReadElementContentAsTimeSpan() { return default(System.TimeSpan); }
    public virtual System.Xml.UniqueId ReadElementContentAsUniqueId() { return default(System.Xml.UniqueId); }
    public virtual void ReadFullStartElement() { }
    public virtual void ReadFullStartElement(string name) { }
    public virtual void ReadFullStartElement(string localName, string namespaceUri) { }
    public virtual void ReadFullStartElement(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { }
    public virtual System.Guid[] ReadGuidArray(string localName, string namespaceUri) { return default(System.Guid[]); }
    public virtual System.Guid[] ReadGuidArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { return default(System.Guid[]); }
    public virtual short[] ReadInt16Array(string localName, string namespaceUri) { return default(short[]); }
    public virtual short[] ReadInt16Array(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { return default(short[]); }
    public virtual int[] ReadInt32Array(string localName, string namespaceUri) { return default(int[]); }
    public virtual int[] ReadInt32Array(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { return default(int[]); }
    public virtual long[] ReadInt64Array(string localName, string namespaceUri) { return default(long[]); }
    public virtual long[] ReadInt64Array(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { return default(long[]); }
    public virtual float[] ReadSingleArray(string localName, string namespaceUri) { return default(float[]); }
    public virtual float[] ReadSingleArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { return default(float[]); }
    public virtual void ReadStartElement(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { }
    public virtual System.TimeSpan[] ReadTimeSpanArray(string localName, string namespaceUri) { return default(System.TimeSpan[]); }
    public virtual System.TimeSpan[] ReadTimeSpanArray(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { return default(System.TimeSpan[]); }
    public virtual int ReadValueAsBase64(byte[] buffer, int offset, int count) { return default(int); }
    public virtual void StartCanonicalization(System.IO.Stream stream, bool includeComments, string[] inclusivePrefixes) { }
    public virtual bool TryGetArrayLength(out int count) { count = default(int); return default(bool); }
    public virtual bool TryGetBase64ContentLength(out int length) { length = default(int); return default(bool); }
    public virtual bool TryGetLocalNameAsDictionaryString(out System.Xml.XmlDictionaryString localName) { localName = default(System.Xml.XmlDictionaryString); return default(bool); }
    public virtual bool TryGetNamespaceUriAsDictionaryString(out System.Xml.XmlDictionaryString namespaceUri) { namespaceUri = default(System.Xml.XmlDictionaryString); return default(bool); }
    public virtual bool TryGetValueAsDictionaryString(out System.Xml.XmlDictionaryString value) { value = default(System.Xml.XmlDictionaryString); return default(bool); }
  }
  public sealed partial class XmlDictionaryReaderQuotas {
    public XmlDictionaryReaderQuotas() { }
    public static System.Xml.XmlDictionaryReaderQuotas Max { get { return default(System.Xml.XmlDictionaryReaderQuotas); } }
    [System.ComponentModel.DefaultValueAttribute(16384)]
    public int MaxArrayLength { get { return default(int); } set { } }
    [System.ComponentModel.DefaultValueAttribute(4096)]
    public int MaxBytesPerRead { get { return default(int); } set { } }
    [System.ComponentModel.DefaultValueAttribute(32)]
    public int MaxDepth { get { return default(int); } set { } }
    [System.ComponentModel.DefaultValueAttribute(16384)]
    public int MaxNameTableCharCount { get { return default(int); } set { } }
    [System.ComponentModel.DefaultValueAttribute(8192)]
    public int MaxStringContentLength { get { return default(int); } set { } }
    public System.Xml.XmlDictionaryReaderQuotaTypes ModifiedQuotas { get { return default(System.Xml.XmlDictionaryReaderQuotaTypes); } }
    public void CopyTo(System.Xml.XmlDictionaryReaderQuotas quotas) { }
  }
  [System.FlagsAttribute]
  public enum XmlDictionaryReaderQuotaTypes {
    MaxArrayLength = 4,
    MaxBytesPerRead = 8,
    MaxDepth = 1,
    MaxNameTableCharCount = 16,
    MaxStringContentLength = 2,
  }
  public partial class XmlDictionaryString {
    public XmlDictionaryString(System.Xml.IXmlDictionary dictionary, string value, int key) { }
    public System.Xml.IXmlDictionary Dictionary { get { return default(System.Xml.IXmlDictionary); } }
    public static System.Xml.XmlDictionaryString Empty { get { return default(System.Xml.XmlDictionaryString); } }
    public int Key { get { return default(int); } }
    public string Value { get { return default(string); } }
    public override string ToString() { return default(string); }
  }
  public abstract partial class XmlDictionaryWriter : System.Xml.XmlWriter {
    protected XmlDictionaryWriter() { }
    public virtual bool CanCanonicalize { get { return default(bool); } }
    public static System.Xml.XmlDictionaryWriter CreateBinaryWriter(System.IO.Stream stream) { return default(System.Xml.XmlDictionaryWriter); }
    public static System.Xml.XmlDictionaryWriter CreateBinaryWriter(System.IO.Stream stream, System.Xml.IXmlDictionary dictionary) { return default(System.Xml.XmlDictionaryWriter); }
    public static System.Xml.XmlDictionaryWriter CreateBinaryWriter(System.IO.Stream stream, System.Xml.IXmlDictionary dictionary, System.Xml.XmlBinaryWriterSession session) { return default(System.Xml.XmlDictionaryWriter); }
    public static System.Xml.XmlDictionaryWriter CreateBinaryWriter(System.IO.Stream stream, System.Xml.IXmlDictionary dictionary, System.Xml.XmlBinaryWriterSession session, bool ownsStream) { return default(System.Xml.XmlDictionaryWriter); }
    public static System.Xml.XmlDictionaryWriter CreateDictionaryWriter(System.Xml.XmlWriter writer) { return default(System.Xml.XmlDictionaryWriter); }
    public static System.Xml.XmlDictionaryWriter CreateTextWriter(System.IO.Stream stream) { return default(System.Xml.XmlDictionaryWriter); }
    public static System.Xml.XmlDictionaryWriter CreateTextWriter(System.IO.Stream stream, System.Text.Encoding encoding) { return default(System.Xml.XmlDictionaryWriter); }
    public static System.Xml.XmlDictionaryWriter CreateTextWriter(System.IO.Stream stream, System.Text.Encoding encoding, bool ownsStream) { return default(System.Xml.XmlDictionaryWriter); }
    public virtual void EndCanonicalization() { }
    public virtual void StartCanonicalization(System.IO.Stream stream, bool includeComments, string[] inclusivePrefixes) { }
    public virtual void WriteArray(string prefix, string localName, string namespaceUri, bool[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, string localName, string namespaceUri, System.DateTime[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, string localName, string namespaceUri, decimal[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, string localName, string namespaceUri, double[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, string localName, string namespaceUri, System.Guid[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, string localName, string namespaceUri, short[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, string localName, string namespaceUri, int[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, string localName, string namespaceUri, long[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, string localName, string namespaceUri, float[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, string localName, string namespaceUri, System.TimeSpan[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, bool[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, System.DateTime[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, decimal[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, double[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, System.Guid[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, short[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, int[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, long[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, float[] array, int offset, int count) { }
    public virtual void WriteArray(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, System.TimeSpan[] array, int offset, int count) { }
    public void WriteAttributeString(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, string value) { }
    public void WriteAttributeString(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, string value) { }
    public void WriteElementString(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, string value) { }
    public void WriteElementString(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri, string value) { }
    public virtual void WriteNode(System.Xml.XmlDictionaryReader reader, bool defattr) { }
    public override void WriteNode(System.Xml.XmlReader reader, bool defattr) { }
    public virtual void WriteQualifiedName(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { }
    public virtual void WriteStartAttribute(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { }
    public void WriteStartAttribute(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { }
    public virtual void WriteStartElement(string prefix, System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { }
    public void WriteStartElement(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString namespaceUri) { }
    public virtual void WriteString(System.Xml.XmlDictionaryString value) { }
    protected virtual void WriteTextNode(System.Xml.XmlDictionaryReader reader, bool isAttribute) { }
    public virtual void WriteValue(System.Guid value) { }
    public virtual void WriteValue(System.TimeSpan value) { }
    public virtual void WriteValue(System.Xml.UniqueId value) { }
    public virtual void WriteValue(System.Xml.XmlDictionaryString value) { }
    public virtual void WriteXmlAttribute(string localName, string value) { }
    public virtual void WriteXmlAttribute(System.Xml.XmlDictionaryString localName, System.Xml.XmlDictionaryString value) { }
    public virtual void WriteXmlnsAttribute(string prefix, string namespaceUri) { }
    public virtual void WriteXmlnsAttribute(string prefix, System.Xml.XmlDictionaryString namespaceUri) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Security.AccessControl")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Security.AccessControl")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Security.AccessControl")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Security.AccessControl {
  [System.FlagsAttribute]
  public enum AccessControlActions {
    Change = 2,
    None = 0,
    View = 1,
  }
  public enum AccessControlModification {
    Add = 0,
    Remove = 3,
    RemoveAll = 4,
    RemoveSpecific = 5,
    Reset = 2,
    Set = 1,
  }
  [System.FlagsAttribute]
  public enum AccessControlSections {
    Access = 2,
    All = 15,
    Audit = 1,
    Group = 8,
    None = 0,
    Owner = 4,
  }
  public enum AccessControlType {
    Allow = 0,
    Deny = 1,
  }
  public abstract partial class AccessRule : System.Security.AccessControl.AuthorizationRule {
    protected AccessRule(System.Security.Principal.IdentityReference identity, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags)) { }
    public System.Security.AccessControl.AccessControlType AccessControlType { get { return default(System.Security.AccessControl.AccessControlType); } }
  }
  public partial class AccessRule<T> : System.Security.AccessControl.AccessRule where T : struct {
    public AccessRule(System.Security.Principal.IdentityReference identity, T rights, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public AccessRule(System.Security.Principal.IdentityReference identity, T rights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public AccessRule(string identity, T rights, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public AccessRule(string identity, T rights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public T Rights { get { return default(T); } }
  }
  public sealed partial class AceEnumerator : System.Collections.IEnumerator {
    internal AceEnumerator() { }
    public System.Security.AccessControl.GenericAce Current { get { return default(System.Security.AccessControl.GenericAce); } }
    object System.Collections.IEnumerator.Current { get { return default(object); } }
    public bool MoveNext() { return default(bool); }
    public void Reset() { }
  }
  [System.FlagsAttribute]
  public enum AceFlags : byte {
    AuditFlags = (byte)192,
    ContainerInherit = (byte)2,
    FailedAccess = (byte)128,
    InheritanceFlags = (byte)15,
    Inherited = (byte)16,
    InheritOnly = (byte)8,
    None = (byte)0,
    NoPropagateInherit = (byte)4,
    ObjectInherit = (byte)1,
    SuccessfulAccess = (byte)64,
  }
  public enum AceQualifier {
    AccessAllowed = 0,
    AccessDenied = 1,
    SystemAlarm = 3,
    SystemAudit = 2,
  }
  public enum AceType : byte {
    AccessAllowed = (byte)0,
    AccessAllowedCallback = (byte)9,
    AccessAllowedCallbackObject = (byte)11,
    AccessAllowedCompound = (byte)4,
    AccessAllowedObject = (byte)5,
    AccessDenied = (byte)1,
    AccessDeniedCallback = (byte)10,
    AccessDeniedCallbackObject = (byte)12,
    AccessDeniedObject = (byte)6,
    MaxDefinedAceType = (byte)16,
    SystemAlarm = (byte)3,
    SystemAlarmCallback = (byte)14,
    SystemAlarmCallbackObject = (byte)16,
    SystemAlarmObject = (byte)8,
    SystemAudit = (byte)2,
    SystemAuditCallback = (byte)13,
    SystemAuditCallbackObject = (byte)15,
    SystemAuditObject = (byte)7,
  }
  [System.FlagsAttribute]
  public enum AuditFlags {
    Failure = 2,
    None = 0,
    Success = 1,
  }
  public abstract partial class AuditRule : System.Security.AccessControl.AuthorizationRule {
    protected AuditRule(System.Security.Principal.IdentityReference identity, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags auditFlags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags)) { }
    public System.Security.AccessControl.AuditFlags AuditFlags { get { return default(System.Security.AccessControl.AuditFlags); } }
  }
  public partial class AuditRule<T> : System.Security.AccessControl.AuditRule where T : struct {
    public AuditRule(System.Security.Principal.IdentityReference identity, T rights, System.Security.AccessControl.AuditFlags flags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public AuditRule(System.Security.Principal.IdentityReference identity, T rights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public AuditRule(string identity, T rights, System.Security.AccessControl.AuditFlags flags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public AuditRule(string identity, T rights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public T Rights { get { return default(T); } }
  }
  public abstract partial class AuthorizationRule {
    protected internal AuthorizationRule(System.Security.Principal.IdentityReference identity, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags) { }
    protected internal int AccessMask { get { return default(int); } }
    public System.Security.Principal.IdentityReference IdentityReference { get { return default(System.Security.Principal.IdentityReference); } }
    public System.Security.AccessControl.InheritanceFlags InheritanceFlags { get { return default(System.Security.AccessControl.InheritanceFlags); } }
    public bool IsInherited { get { return default(bool); } }
    public System.Security.AccessControl.PropagationFlags PropagationFlags { get { return default(System.Security.AccessControl.PropagationFlags); } }
  }
  public sealed partial class AuthorizationRuleCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    public AuthorizationRuleCollection() { }
    public int Count { get { return default(int); } }
    public System.Security.AccessControl.AuthorizationRule this[int index] { get { return default(System.Security.AccessControl.AuthorizationRule); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public void AddRule(System.Security.AccessControl.AuthorizationRule rule) { }
    public void CopyTo(System.Security.AccessControl.AuthorizationRule[] rules, int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public sealed partial class CommonAce : System.Security.AccessControl.QualifiedAce {
    public CommonAce(System.Security.AccessControl.AceFlags flags, System.Security.AccessControl.AceQualifier qualifier, int accessMask, System.Security.Principal.SecurityIdentifier sid, bool isCallback, byte[] opaque) { }
    public override int BinaryLength { get { return default(int); } }
    public override void GetBinaryForm(byte[] binaryForm, int offset) { }
    public static int MaxOpaqueLength(bool isCallback) { return default(int); }
  }
  public abstract partial class CommonAcl : System.Security.AccessControl.GenericAcl {
    internal CommonAcl() { }
    public sealed override int BinaryLength { get { return default(int); } }
    public sealed override int Count { get { return default(int); } }
    public bool IsCanonical { get { return default(bool); } }
    public bool IsContainer { get { return default(bool); } }
    public bool IsDS { get { return default(bool); } }
    public sealed override System.Security.AccessControl.GenericAce this[int index] { get { return default(System.Security.AccessControl.GenericAce); } set { } }
    public sealed override byte Revision { get { return default(byte); } }
    public sealed override void GetBinaryForm(byte[] binaryForm, int offset) { }
    public void Purge(System.Security.Principal.SecurityIdentifier sid) { }
    public void RemoveInheritedAces() { }
  }
  public abstract partial class CommonObjectSecurity : System.Security.AccessControl.ObjectSecurity {
    protected CommonObjectSecurity(bool isContainer) { }
    protected void AddAccessRule(System.Security.AccessControl.AccessRule rule) { }
    protected void AddAuditRule(System.Security.AccessControl.AuditRule rule) { }
    public System.Security.AccessControl.AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, System.Type targetType) { return default(System.Security.AccessControl.AuthorizationRuleCollection); }
    public System.Security.AccessControl.AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, System.Type targetType) { return default(System.Security.AccessControl.AuthorizationRuleCollection); }
    protected override bool ModifyAccess(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out bool modified) { modified = default(bool); return default(bool); }
    protected override bool ModifyAudit(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out bool modified) { modified = default(bool); return default(bool); }
    protected bool RemoveAccessRule(System.Security.AccessControl.AccessRule rule) { return default(bool); }
    protected void RemoveAccessRuleAll(System.Security.AccessControl.AccessRule rule) { }
    protected void RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule rule) { }
    protected bool RemoveAuditRule(System.Security.AccessControl.AuditRule rule) { return default(bool); }
    protected void RemoveAuditRuleAll(System.Security.AccessControl.AuditRule rule) { }
    protected void RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule rule) { }
    protected void ResetAccessRule(System.Security.AccessControl.AccessRule rule) { }
    protected void SetAccessRule(System.Security.AccessControl.AccessRule rule) { }
    protected void SetAuditRule(System.Security.AccessControl.AuditRule rule) { }
  }
  public sealed partial class CommonSecurityDescriptor : System.Security.AccessControl.GenericSecurityDescriptor {
    public CommonSecurityDescriptor(bool isContainer, bool isDS, byte[] binaryForm, int offset) { }
    public CommonSecurityDescriptor(bool isContainer, bool isDS, System.Security.AccessControl.ControlFlags flags, System.Security.Principal.SecurityIdentifier owner, System.Security.Principal.SecurityIdentifier group, System.Security.AccessControl.SystemAcl systemAcl, System.Security.AccessControl.DiscretionaryAcl discretionaryAcl) { }
    public CommonSecurityDescriptor(bool isContainer, bool isDS, System.Security.AccessControl.RawSecurityDescriptor rawSecurityDescriptor) { }
    public CommonSecurityDescriptor(bool isContainer, bool isDS, string sddlForm) { }
    public override System.Security.AccessControl.ControlFlags ControlFlags { get { return default(System.Security.AccessControl.ControlFlags); } }
    public System.Security.AccessControl.DiscretionaryAcl DiscretionaryAcl { get { return default(System.Security.AccessControl.DiscretionaryAcl); } set { } }
    public override System.Security.Principal.SecurityIdentifier Group { get { return default(System.Security.Principal.SecurityIdentifier); } set { } }
    public bool IsContainer { get { return default(bool); } }
    public bool IsDiscretionaryAclCanonical { get { return default(bool); } }
    public bool IsDS { get { return default(bool); } }
    public bool IsSystemAclCanonical { get { return default(bool); } }
    public override System.Security.Principal.SecurityIdentifier Owner { get { return default(System.Security.Principal.SecurityIdentifier); } set { } }
    public System.Security.AccessControl.SystemAcl SystemAcl { get { return default(System.Security.AccessControl.SystemAcl); } set { } }
    public void AddDiscretionaryAcl(byte revision, int trusted) { }
    public void AddSystemAcl(byte revision, int trusted) { }
    public void PurgeAccessControl(System.Security.Principal.SecurityIdentifier sid) { }
    public void PurgeAudit(System.Security.Principal.SecurityIdentifier sid) { }
    public void SetDiscretionaryAclProtection(bool isProtected, bool preserveInheritance) { }
    public void SetSystemAclProtection(bool isProtected, bool preserveInheritance) { }
  }
  public sealed partial class CompoundAce : System.Security.AccessControl.KnownAce {
    public CompoundAce(System.Security.AccessControl.AceFlags flags, int accessMask, System.Security.AccessControl.CompoundAceType compoundAceType, System.Security.Principal.SecurityIdentifier sid) { }
    public override int BinaryLength { get { return default(int); } }
    public System.Security.AccessControl.CompoundAceType CompoundAceType { get { return default(System.Security.AccessControl.CompoundAceType); } set { } }
    public override void GetBinaryForm(byte[] binaryForm, int offset) { }
  }
  public enum CompoundAceType {
    Impersonation = 1,
  }
  [System.FlagsAttribute]
  public enum ControlFlags {
    DiscretionaryAclAutoInherited = 1024,
    DiscretionaryAclAutoInheritRequired = 256,
    DiscretionaryAclDefaulted = 8,
    DiscretionaryAclPresent = 4,
    DiscretionaryAclProtected = 4096,
    DiscretionaryAclUntrusted = 64,
    GroupDefaulted = 2,
    None = 0,
    OwnerDefaulted = 1,
    RMControlValid = 16384,
    SelfRelative = 32768,
    ServerSecurity = 128,
    SystemAclAutoInherited = 2048,
    SystemAclAutoInheritRequired = 512,
    SystemAclDefaulted = 32,
    SystemAclPresent = 16,
    SystemAclProtected = 8192,
  }
  public sealed partial class CustomAce : System.Security.AccessControl.GenericAce {
    public static readonly int MaxOpaqueLength;
    public CustomAce(System.Security.AccessControl.AceType type, System.Security.AccessControl.AceFlags flags, byte[] opaque) { }
    public override int BinaryLength { get { return default(int); } }
    public int OpaqueLength { get { return default(int); } }
    public override void GetBinaryForm(byte[] binaryForm, int offset) { }
    public byte[] GetOpaque() { return default(byte[]); }
    public void SetOpaque(byte[] opaque) { }
  }
  public sealed partial class DiscretionaryAcl : System.Security.AccessControl.CommonAcl {
    public DiscretionaryAcl(bool isContainer, bool isDS, byte revision, int capacity) { }
    public DiscretionaryAcl(bool isContainer, bool isDS, int capacity) { }
    public DiscretionaryAcl(bool isContainer, bool isDS, System.Security.AccessControl.RawAcl rawAcl) { }
    public void AddAccess(System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags) { }
    public void AddAccess(System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, System.Guid objectType, System.Guid inheritedObjectType) { }
    public void AddAccess(System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAccessRule rule) { }
    public bool RemoveAccess(System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags) { return default(bool); }
    public bool RemoveAccess(System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, System.Guid objectType, System.Guid inheritedObjectType) { return default(bool); }
    public bool RemoveAccess(System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAccessRule rule) { return default(bool); }
    public void RemoveAccessSpecific(System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags) { }
    public void RemoveAccessSpecific(System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, System.Guid objectType, System.Guid inheritedObjectType) { }
    public void RemoveAccessSpecific(System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAccessRule rule) { }
    public void SetAccess(System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags) { }
    public void SetAccess(System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, System.Guid objectType, System.Guid inheritedObjectType) { }
    public void SetAccess(System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAccessRule rule) { }
  }
  public abstract partial class GenericAce {
    internal GenericAce() { }
    public System.Security.AccessControl.AceFlags AceFlags { get { return default(System.Security.AccessControl.AceFlags); } set { } }
    public System.Security.AccessControl.AceType AceType { get { return default(System.Security.AccessControl.AceType); } }
    public System.Security.AccessControl.AuditFlags AuditFlags { get { return default(System.Security.AccessControl.AuditFlags); } }
    public abstract int BinaryLength { get; }
    public System.Security.AccessControl.InheritanceFlags InheritanceFlags { get { return default(System.Security.AccessControl.InheritanceFlags); } }
    public bool IsInherited { get { return default(bool); } }
    public System.Security.AccessControl.PropagationFlags PropagationFlags { get { return default(System.Security.AccessControl.PropagationFlags); } }
    public System.Security.AccessControl.GenericAce Copy() { return default(System.Security.AccessControl.GenericAce); }
    public static System.Security.AccessControl.GenericAce CreateFromBinaryForm(byte[] binaryForm, int offset) { return default(System.Security.AccessControl.GenericAce); }
    public sealed override bool Equals(object o) { return default(bool); }
    public abstract void GetBinaryForm(byte[] binaryForm, int offset);
    public sealed override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right) { return default(bool); }
    public static bool operator !=(System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right) { return default(bool); }
  }
  public abstract partial class GenericAcl : System.Collections.ICollection, System.Collections.IEnumerable {
    public static readonly byte AclRevision;
    public static readonly byte AclRevisionDS;
    public static readonly int MaxBinaryLength;
    protected GenericAcl() { }
    public abstract int BinaryLength { get; }
    public abstract int Count { get; }
    public bool IsSynchronized { get { return default(bool); } }
    public abstract System.Security.AccessControl.GenericAce this[int index] { get; set; }
    public abstract byte Revision { get; }
    public virtual object SyncRoot { get { return default(object); } }
    public void CopyTo(System.Security.AccessControl.GenericAce[] array, int index) { }
    public abstract void GetBinaryForm(byte[] binaryForm, int offset);
    public System.Security.AccessControl.AceEnumerator GetEnumerator() { return default(System.Security.AccessControl.AceEnumerator); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public abstract partial class GenericSecurityDescriptor {
    protected GenericSecurityDescriptor() { }
    public int BinaryLength { get { return default(int); } }
    public abstract System.Security.AccessControl.ControlFlags ControlFlags { get; }
    public abstract System.Security.Principal.SecurityIdentifier Group { get; set; }
    public abstract System.Security.Principal.SecurityIdentifier Owner { get; set; }
    public static byte Revision { get { return default(byte); } }
    public void GetBinaryForm(byte[] binaryForm, int offset) { }
    public string GetSddlForm(System.Security.AccessControl.AccessControlSections includeSections) { return default(string); }
    public static bool IsSddlConversionSupported() { return default(bool); }
  }
  [System.FlagsAttribute]
  public enum InheritanceFlags {
    ContainerInherit = 1,
    None = 0,
    ObjectInherit = 2,
  }
  public abstract partial class KnownAce : System.Security.AccessControl.GenericAce {
    internal KnownAce() { }
    public int AccessMask { get { return default(int); } set { } }
    public System.Security.Principal.SecurityIdentifier SecurityIdentifier { get { return default(System.Security.Principal.SecurityIdentifier); } set { } }
  }
  public abstract partial class NativeObjectSecurity : System.Security.AccessControl.CommonObjectSecurity {
    protected NativeObjectSecurity(bool isContainer, System.Security.AccessControl.ResourceType resourceType) : base (default(bool)) { }
    protected NativeObjectSecurity(bool isContainer, System.Security.AccessControl.ResourceType resourceType, System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections) : base (default(bool)) { }
    protected NativeObjectSecurity(bool isContainer, System.Security.AccessControl.ResourceType resourceType, System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections, System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext) : base (default(bool)) { }
    protected NativeObjectSecurity(bool isContainer, System.Security.AccessControl.ResourceType resourceType, System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext) : base (default(bool)) { }
    protected NativeObjectSecurity(bool isContainer, System.Security.AccessControl.ResourceType resourceType, string name, System.Security.AccessControl.AccessControlSections includeSections) : base (default(bool)) { }
    protected NativeObjectSecurity(bool isContainer, System.Security.AccessControl.ResourceType resourceType, string name, System.Security.AccessControl.AccessControlSections includeSections, System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext) : base (default(bool)) { }
    protected sealed override void Persist(System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections) { }
    protected void Persist(System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections, object exceptionContext) { }
    protected sealed override void Persist(string name, System.Security.AccessControl.AccessControlSections includeSections) { }
    protected void Persist(string name, System.Security.AccessControl.AccessControlSections includeSections, object exceptionContext) { }
    protected internal delegate System.Exception ExceptionFromErrorCode(int errorCode, string name, System.Runtime.InteropServices.SafeHandle handle, object context);
  }
  public abstract partial class ObjectAccessRule : System.Security.AccessControl.AccessRule {
    protected ObjectAccessRule(System.Security.Principal.IdentityReference identity, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Guid objectType, System.Guid inheritedObjectType, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public System.Guid InheritedObjectType { get { return default(System.Guid); } }
    public System.Security.AccessControl.ObjectAceFlags ObjectFlags { get { return default(System.Security.AccessControl.ObjectAceFlags); } }
    public System.Guid ObjectType { get { return default(System.Guid); } }
  }
  public sealed partial class ObjectAce : System.Security.AccessControl.QualifiedAce {
    public ObjectAce(System.Security.AccessControl.AceFlags aceFlags, System.Security.AccessControl.AceQualifier qualifier, int accessMask, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAceFlags flags, System.Guid type, System.Guid inheritedType, bool isCallback, byte[] opaque) { }
    public override int BinaryLength { get { return default(int); } }
    public System.Guid InheritedObjectAceType { get { return default(System.Guid); } set { } }
    public System.Security.AccessControl.ObjectAceFlags ObjectAceFlags { get { return default(System.Security.AccessControl.ObjectAceFlags); } set { } }
    public System.Guid ObjectAceType { get { return default(System.Guid); } set { } }
    public override void GetBinaryForm(byte[] binaryForm, int offset) { }
    public static int MaxOpaqueLength(bool isCallback) { return default(int); }
  }
  [System.FlagsAttribute]
  public enum ObjectAceFlags {
    InheritedObjectAceTypePresent = 2,
    None = 0,
    ObjectAceTypePresent = 1,
  }
  public abstract partial class ObjectAuditRule : System.Security.AccessControl.AuditRule {
    protected ObjectAuditRule(System.Security.Principal.IdentityReference identity, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Guid objectType, System.Guid inheritedObjectType, System.Security.AccessControl.AuditFlags auditFlags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public System.Guid InheritedObjectType { get { return default(System.Guid); } }
    public System.Security.AccessControl.ObjectAceFlags ObjectFlags { get { return default(System.Security.AccessControl.ObjectAceFlags); } }
    public System.Guid ObjectType { get { return default(System.Guid); } }
  }
  public abstract partial class ObjectSecurity {
    protected ObjectSecurity() { }
    protected ObjectSecurity(bool isContainer, bool isDS) { }
    protected ObjectSecurity(System.Security.AccessControl.CommonSecurityDescriptor securityDescriptor) { }
    public abstract System.Type AccessRightType { get; }
    protected bool AccessRulesModified { get { return default(bool); } set { } }
    public abstract System.Type AccessRuleType { get; }
    public bool AreAccessRulesCanonical { get { return default(bool); } }
    public bool AreAccessRulesProtected { get { return default(bool); } }
    public bool AreAuditRulesCanonical { get { return default(bool); } }
    public bool AreAuditRulesProtected { get { return default(bool); } }
    protected bool AuditRulesModified { get { return default(bool); } set { } }
    public abstract System.Type AuditRuleType { get; }
    protected bool GroupModified { get { return default(bool); } set { } }
    protected bool IsContainer { get { return default(bool); } }
    protected bool IsDS { get { return default(bool); } }
    protected bool OwnerModified { get { return default(bool); } set { } }
    public abstract System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    public abstract System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
    public System.Security.Principal.IdentityReference GetGroup(System.Type targetType) { return default(System.Security.Principal.IdentityReference); }
    public System.Security.Principal.IdentityReference GetOwner(System.Type targetType) { return default(System.Security.Principal.IdentityReference); }
    public byte[] GetSecurityDescriptorBinaryForm() { return default(byte[]); }
    public string GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections includeSections) { return default(string); }
    public static bool IsSddlConversionSupported() { return default(bool); }
    protected abstract bool ModifyAccess(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out bool modified);
    public virtual bool ModifyAccessRule(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out bool modified) { modified = default(bool); return default(bool); }
    protected abstract bool ModifyAudit(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out bool modified);
    public virtual bool ModifyAuditRule(System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out bool modified) { modified = default(bool); return default(bool); }
    protected virtual void Persist(bool enableOwnershipPrivilege, string name, System.Security.AccessControl.AccessControlSections includeSections) { }
    protected virtual void Persist(System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections) { }
    protected virtual void Persist(string name, System.Security.AccessControl.AccessControlSections includeSections) { }
    public virtual void PurgeAccessRules(System.Security.Principal.IdentityReference identity) { }
    public virtual void PurgeAuditRules(System.Security.Principal.IdentityReference identity) { }
    protected void ReadLock() { }
    protected void ReadUnlock() { }
    public void SetAccessRuleProtection(bool isProtected, bool preserveInheritance) { }
    public void SetAuditRuleProtection(bool isProtected, bool preserveInheritance) { }
    public void SetGroup(System.Security.Principal.IdentityReference identity) { }
    public void SetOwner(System.Security.Principal.IdentityReference identity) { }
    public void SetSecurityDescriptorBinaryForm(byte[] binaryForm) { }
    public void SetSecurityDescriptorBinaryForm(byte[] binaryForm, System.Security.AccessControl.AccessControlSections includeSections) { }
    public void SetSecurityDescriptorSddlForm(string sddlForm) { }
    public void SetSecurityDescriptorSddlForm(string sddlForm, System.Security.AccessControl.AccessControlSections includeSections) { }
    protected void WriteLock() { }
    protected void WriteUnlock() { }
  }
  public abstract partial class ObjectSecurity<T> : System.Security.AccessControl.NativeObjectSecurity where T : struct {
    protected ObjectSecurity(bool isContainer, System.Security.AccessControl.ResourceType resourceType) : base (default(bool), default(System.Security.AccessControl.ResourceType)) { }
    protected ObjectSecurity(bool isContainer, System.Security.AccessControl.ResourceType resourceType, System.Runtime.InteropServices.SafeHandle safeHandle, System.Security.AccessControl.AccessControlSections includeSections) : base (default(bool), default(System.Security.AccessControl.ResourceType)) { }
    protected ObjectSecurity(bool isContainer, System.Security.AccessControl.ResourceType resourceType, System.Runtime.InteropServices.SafeHandle safeHandle, System.Security.AccessControl.AccessControlSections includeSections, System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext) : base (default(bool), default(System.Security.AccessControl.ResourceType)) { }
    protected ObjectSecurity(bool isContainer, System.Security.AccessControl.ResourceType resourceType, string name, System.Security.AccessControl.AccessControlSections includeSections) : base (default(bool), default(System.Security.AccessControl.ResourceType)) { }
    protected ObjectSecurity(bool isContainer, System.Security.AccessControl.ResourceType resourceType, string name, System.Security.AccessControl.AccessControlSections includeSections, System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext) : base (default(bool), default(System.Security.AccessControl.ResourceType)) { }
    public override System.Type AccessRightType { get { return default(System.Type); } }
    public override System.Type AccessRuleType { get { return default(System.Type); } }
    public override System.Type AuditRuleType { get { return default(System.Type); } }
    public override System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type) { return default(System.Security.AccessControl.AccessRule); }
    public virtual void AddAccessRule(System.Security.AccessControl.AccessRule<T> rule) { }
    public virtual void AddAuditRule(System.Security.AccessControl.AuditRule<T> rule) { }
    public override System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags) { return default(System.Security.AccessControl.AuditRule); }
    protected internal void Persist(System.Runtime.InteropServices.SafeHandle handle) { }
    protected internal void Persist(string name) { }
    public virtual bool RemoveAccessRule(System.Security.AccessControl.AccessRule<T> rule) { return default(bool); }
    public virtual void RemoveAccessRuleAll(System.Security.AccessControl.AccessRule<T> rule) { }
    public virtual void RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule<T> rule) { }
    public virtual bool RemoveAuditRule(System.Security.AccessControl.AuditRule<T> rule) { return default(bool); }
    public virtual void RemoveAuditRuleAll(System.Security.AccessControl.AuditRule<T> rule) { }
    public virtual void RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule<T> rule) { }
    public virtual void ResetAccessRule(System.Security.AccessControl.AccessRule<T> rule) { }
    public virtual void SetAccessRule(System.Security.AccessControl.AccessRule<T> rule) { }
    public virtual void SetAuditRule(System.Security.AccessControl.AuditRule<T> rule) { }
  }
  public sealed partial class PrivilegeNotHeldException : System.UnauthorizedAccessException {
    public PrivilegeNotHeldException() { }
    public PrivilegeNotHeldException(string privilege) { }
    public PrivilegeNotHeldException(string privilege, System.Exception inner) { }
    public string PrivilegeName { get { return default(string); } }
  }
  [System.FlagsAttribute]
  public enum PropagationFlags {
    InheritOnly = 2,
    None = 0,
    NoPropagateInherit = 1,
  }
  public abstract partial class QualifiedAce : System.Security.AccessControl.KnownAce {
    internal QualifiedAce() { }
    public System.Security.AccessControl.AceQualifier AceQualifier { get { return default(System.Security.AccessControl.AceQualifier); } }
    public bool IsCallback { get { return default(bool); } }
    public int OpaqueLength { get { return default(int); } }
    public byte[] GetOpaque() { return default(byte[]); }
    public void SetOpaque(byte[] opaque) { }
  }
  public sealed partial class RawAcl : System.Security.AccessControl.GenericAcl {
    public RawAcl(byte revision, int capacity) { }
    public RawAcl(byte[] binaryForm, int offset) { }
    public override int BinaryLength { get { return default(int); } }
    public override int Count { get { return default(int); } }
    public override System.Security.AccessControl.GenericAce this[int index] { get { return default(System.Security.AccessControl.GenericAce); } set { } }
    public override byte Revision { get { return default(byte); } }
    public override void GetBinaryForm(byte[] binaryForm, int offset) { }
    public void InsertAce(int index, System.Security.AccessControl.GenericAce ace) { }
    public void RemoveAce(int index) { }
  }
  public sealed partial class RawSecurityDescriptor : System.Security.AccessControl.GenericSecurityDescriptor {
    public RawSecurityDescriptor(byte[] binaryForm, int offset) { }
    public RawSecurityDescriptor(System.Security.AccessControl.ControlFlags flags, System.Security.Principal.SecurityIdentifier owner, System.Security.Principal.SecurityIdentifier group, System.Security.AccessControl.RawAcl systemAcl, System.Security.AccessControl.RawAcl discretionaryAcl) { }
    public RawSecurityDescriptor(string sddlForm) { }
    public override System.Security.AccessControl.ControlFlags ControlFlags { get { return default(System.Security.AccessControl.ControlFlags); } }
    public System.Security.AccessControl.RawAcl DiscretionaryAcl { get { return default(System.Security.AccessControl.RawAcl); } set { } }
    public override System.Security.Principal.SecurityIdentifier Group { get { return default(System.Security.Principal.SecurityIdentifier); } set { } }
    public override System.Security.Principal.SecurityIdentifier Owner { get { return default(System.Security.Principal.SecurityIdentifier); } set { } }
    public byte ResourceManagerControl { get { return default(byte); } set { } }
    public System.Security.AccessControl.RawAcl SystemAcl { get { return default(System.Security.AccessControl.RawAcl); } set { } }
    public void SetFlags(System.Security.AccessControl.ControlFlags flags) { }
  }
  public enum ResourceType {
    DSObject = 8,
    DSObjectAll = 9,
    FileObject = 1,
    KernelObject = 6,
    LMShare = 5,
    Printer = 3,
    ProviderDefined = 10,
    RegistryKey = 4,
    RegistryWow6432Key = 12,
    Service = 2,
    Unknown = 0,
    WindowObject = 7,
    WmiGuidObject = 11,
  }
  [System.FlagsAttribute]
  public enum SecurityInfos {
    DiscretionaryAcl = 4,
    Group = 2,
    Owner = 1,
    SystemAcl = 8,
  }
  public sealed partial class SystemAcl : System.Security.AccessControl.CommonAcl {
    public SystemAcl(bool isContainer, bool isDS, byte revision, int capacity) { }
    public SystemAcl(bool isContainer, bool isDS, int capacity) { }
    public SystemAcl(bool isContainer, bool isDS, System.Security.AccessControl.RawAcl rawAcl) { }
    public void AddAudit(System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags) { }
    public void AddAudit(System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, System.Guid objectType, System.Guid inheritedObjectType) { }
    public void AddAudit(System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAuditRule rule) { }
    public bool RemoveAudit(System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags) { return default(bool); }
    public bool RemoveAudit(System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, System.Guid objectType, System.Guid inheritedObjectType) { return default(bool); }
    public bool RemoveAudit(System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAuditRule rule) { return default(bool); }
    public void RemoveAuditSpecific(System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags) { }
    public void RemoveAuditSpecific(System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, System.Guid objectType, System.Guid inheritedObjectType) { }
    public void RemoveAuditSpecific(System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAuditRule rule) { }
    public void SetAudit(System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags) { }
    public void SetAudit(System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, System.Guid objectType, System.Guid inheritedObjectType) { }
    public void SetAudit(System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAuditRule rule) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Security.Claims")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Security.Claims")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Security.Claims")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Security.Claims {
  public partial class Claim {
    public Claim(System.IO.BinaryReader reader) { }
    public Claim(System.IO.BinaryReader reader, System.Security.Claims.ClaimsIdentity subject) { }
    protected Claim(System.Security.Claims.Claim other) { }
    protected Claim(System.Security.Claims.Claim other, System.Security.Claims.ClaimsIdentity subject) { }
    public Claim(string type, string value) { }
    public Claim(string type, string value, string valueType) { }
    public Claim(string type, string value, string valueType, string issuer) { }
    public Claim(string type, string value, string valueType, string issuer, string originalIssuer) { }
    public Claim(string type, string value, string valueType, string issuer, string originalIssuer, System.Security.Claims.ClaimsIdentity subject) { }
    protected virtual byte[] CustomSerializationData { get { return default(byte[]); } }
    public string Issuer { get { return default(string); } }
    public string OriginalIssuer { get { return default(string); } }
    public System.Collections.Generic.IDictionary<string, string> Properties { get { return default(System.Collections.Generic.IDictionary<string, string>); } }
    public System.Security.Claims.ClaimsIdentity Subject { get { return default(System.Security.Claims.ClaimsIdentity); } }
    public string Type { get { return default(string); } }
    public string Value { get { return default(string); } }
    public string ValueType { get { return default(string); } }
    public virtual System.Security.Claims.Claim Clone() { return default(System.Security.Claims.Claim); }
    public virtual System.Security.Claims.Claim Clone(System.Security.Claims.ClaimsIdentity identity) { return default(System.Security.Claims.Claim); }
    public override string ToString() { return default(string); }
    public virtual void WriteTo(System.IO.BinaryWriter writer) { }
    protected virtual void WriteTo(System.IO.BinaryWriter writer, byte[] userData) { }
  }
  public partial class ClaimsIdentity : System.Security.Principal.IIdentity {
    public const string DefaultIssuer = "LOCAL AUTHORITY";
    public const string DefaultNameClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name";
    public const string DefaultRoleClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role";
    public ClaimsIdentity() { }
    public ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims) { }
    public ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType) { }
    public ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType) { }
    public ClaimsIdentity(System.IO.BinaryReader reader) { }
    protected ClaimsIdentity(System.Security.Claims.ClaimsIdentity other) { }
    public ClaimsIdentity(System.Security.Principal.IIdentity identity) { }
    public ClaimsIdentity(System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims) { }
    public ClaimsIdentity(System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType) { }
    public ClaimsIdentity(string authenticationType) { }
    public ClaimsIdentity(string authenticationType, string nameType, string roleType) { }
    public System.Security.Claims.ClaimsIdentity Actor { get { return default(System.Security.Claims.ClaimsIdentity); } set { } }
    public virtual string AuthenticationType { get { return default(string); } }
    public object BootstrapContext { get { return default(object); } [System.Security.SecurityCriticalAttribute]set { } }
    public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get { return default(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>); } }
    protected virtual byte[] CustomSerializationData { get { return default(byte[]); } }
    public virtual bool IsAuthenticated { get { return default(bool); } }
    public string Label { get { return default(string); } set { } }
    public virtual string Name { get { return default(string); } }
    public string NameClaimType { get { return default(string); } }
    public string RoleClaimType { get { return default(string); } }
    [System.Security.SecurityCriticalAttribute]
    public virtual void AddClaim(System.Security.Claims.Claim claim) { }
    [System.Security.SecurityCriticalAttribute]
    public virtual void AddClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims) { }
    public virtual System.Security.Claims.ClaimsIdentity Clone() { return default(System.Security.Claims.ClaimsIdentity); }
    protected virtual System.Security.Claims.Claim CreateClaim(System.IO.BinaryReader reader) { return default(System.Security.Claims.Claim); }
    public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll(System.Predicate<System.Security.Claims.Claim> match) { return default(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>); }
    public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll(string type) { return default(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>); }
    public virtual System.Security.Claims.Claim FindFirst(System.Predicate<System.Security.Claims.Claim> match) { return default(System.Security.Claims.Claim); }
    public virtual System.Security.Claims.Claim FindFirst(string type) { return default(System.Security.Claims.Claim); }
    public virtual bool HasClaim(System.Predicate<System.Security.Claims.Claim> match) { return default(bool); }
    public virtual bool HasClaim(string type, string value) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public virtual void RemoveClaim(System.Security.Claims.Claim claim) { }
    [System.Security.SecurityCriticalAttribute]
    public virtual bool TryRemoveClaim(System.Security.Claims.Claim claim) { return default(bool); }
    public virtual void WriteTo(System.IO.BinaryWriter writer) { }
    protected virtual void WriteTo(System.IO.BinaryWriter writer, byte[] userData) { }
  }
  public partial class ClaimsPrincipal : System.Security.Principal.IPrincipal {
    public ClaimsPrincipal() { }
    public ClaimsPrincipal(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities) { }
    public ClaimsPrincipal(System.IO.BinaryReader reader) { }
    public ClaimsPrincipal(System.Security.Principal.IIdentity identity) { }
    public ClaimsPrincipal(System.Security.Principal.IPrincipal principal) { }
    public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get { return default(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>); } }
    public static System.Func<System.Security.Claims.ClaimsPrincipal> ClaimsPrincipalSelector { get { return default(System.Func<System.Security.Claims.ClaimsPrincipal>); } [System.Security.SecurityCriticalAttribute]set { } }
    public static System.Security.Claims.ClaimsPrincipal Current { get { return default(System.Security.Claims.ClaimsPrincipal); } }
    protected virtual byte[] CustomSerializationData { get { return default(byte[]); } }
    public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> Identities { get { return default(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>); } }
    public virtual System.Security.Principal.IIdentity Identity { get { return default(System.Security.Principal.IIdentity); } }
    public static System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>, System.Security.Claims.ClaimsIdentity> PrimaryIdentitySelector { get { return default(System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>, System.Security.Claims.ClaimsIdentity>); } [System.Security.SecurityCriticalAttribute]set { } }
    [System.Security.SecurityCriticalAttribute]
    public virtual void AddIdentities(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities) { }
    [System.Security.SecurityCriticalAttribute]
    public virtual void AddIdentity(System.Security.Claims.ClaimsIdentity identity) { }
    public virtual System.Security.Claims.ClaimsPrincipal Clone() { return default(System.Security.Claims.ClaimsPrincipal); }
    protected virtual System.Security.Claims.ClaimsIdentity CreateClaimsIdentity(System.IO.BinaryReader reader) { return default(System.Security.Claims.ClaimsIdentity); }
    public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll(System.Predicate<System.Security.Claims.Claim> match) { return default(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>); }
    public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll(string type) { return default(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>); }
    public virtual System.Security.Claims.Claim FindFirst(System.Predicate<System.Security.Claims.Claim> match) { return default(System.Security.Claims.Claim); }
    public virtual System.Security.Claims.Claim FindFirst(string type) { return default(System.Security.Claims.Claim); }
    public virtual bool HasClaim(System.Predicate<System.Security.Claims.Claim> match) { return default(bool); }
    public virtual bool HasClaim(string type, string value) { return default(bool); }
    public virtual bool IsInRole(string role) { return default(bool); }
    public virtual void WriteTo(System.IO.BinaryWriter writer) { }
    protected virtual void WriteTo(System.IO.BinaryWriter writer, byte[] userData) { }
  }
  public static partial class ClaimTypes {
    public const string Actor = "http://schemas.xmlsoap.org/ws/2009/09/identity/claims/actor";
    public const string Anonymous = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/anonymous";
    public const string Authentication = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication";
    public const string AuthenticationInstant = "http://schemas.microsoft.com/ws/2008/06/identity/claims/authenticationinstant";
    public const string AuthenticationMethod = "http://schemas.microsoft.com/ws/2008/06/identity/claims/authenticationmethod";
    public const string AuthorizationDecision = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authorizationdecision";
    public const string CookiePath = "http://schemas.microsoft.com/ws/2008/06/identity/claims/cookiepath";
    public const string Country = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country";
    public const string DateOfBirth = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth";
    public const string DenyOnlyPrimaryGroupSid = "http://schemas.microsoft.com/ws/2008/06/identity/claims/denyonlyprimarygroupsid";
    public const string DenyOnlyPrimarySid = "http://schemas.microsoft.com/ws/2008/06/identity/claims/denyonlyprimarysid";
    public const string DenyOnlySid = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/denyonlysid";
    public const string DenyOnlyWindowsDeviceGroup = "http://schemas.microsoft.com/ws/2008/06/identity/claims/denyonlywindowsdevicegroup";
    public const string Dns = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dns";
    public const string Dsa = "http://schemas.microsoft.com/ws/2008/06/identity/claims/dsa";
    public const string Email = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress";
    public const string Expiration = "http://schemas.microsoft.com/ws/2008/06/identity/claims/expiration";
    public const string Expired = "http://schemas.microsoft.com/ws/2008/06/identity/claims/expired";
    public const string Gender = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/gender";
    public const string GivenName = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname";
    public const string GroupSid = "http://schemas.microsoft.com/ws/2008/06/identity/claims/groupsid";
    public const string Hash = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/hash";
    public const string HomePhone = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/homephone";
    public const string IsPersistent = "http://schemas.microsoft.com/ws/2008/06/identity/claims/ispersistent";
    public const string Locality = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/locality";
    public const string MobilePhone = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/mobilephone";
    public const string Name = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name";
    public const string NameIdentifier = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier";
    public const string OtherPhone = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/otherphone";
    public const string PostalCode = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/postalcode";
    public const string PrimaryGroupSid = "http://schemas.microsoft.com/ws/2008/06/identity/claims/primarygroupsid";
    public const string PrimarySid = "http://schemas.microsoft.com/ws/2008/06/identity/claims/primarysid";
    public const string Role = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role";
    public const string Rsa = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/rsa";
    public const string SerialNumber = "http://schemas.microsoft.com/ws/2008/06/identity/claims/serialnumber";
    public const string Sid = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/sid";
    public const string Spn = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/spn";
    public const string StateOrProvince = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/stateorprovince";
    public const string StreetAddress = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/streetaddress";
    public const string Surname = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname";
    public const string System = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/system";
    public const string Thumbprint = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/thumbprint";
    public const string Upn = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn";
    public const string Uri = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/uri";
    public const string UserData = "http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata";
    public const string Version = "http://schemas.microsoft.com/ws/2008/06/identity/claims/version";
    public const string Webpage = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/webpage";
    public const string WindowsAccountName = "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname";
    public const string WindowsDeviceClaim = "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsdeviceclaim";
    public const string WindowsDeviceGroup = "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsdevicegroup";
    public const string WindowsFqbnVersion = "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsfqbnversion";
    public const string WindowsSubAuthority = "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowssubauthority";
    public const string WindowsUserClaim = "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsuserclaim";
    public const string X500DistinguishedName = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/x500distinguishedname";
  }
  public static partial class ClaimValueTypes {
    public const string Base64Binary = "http://www.w3.org/2001/XMLSchema#base64Binary";
    public const string Base64Octet = "http://www.w3.org/2001/XMLSchema#base64Octet";
    public const string Boolean = "http://www.w3.org/2001/XMLSchema#boolean";
    public const string Date = "http://www.w3.org/2001/XMLSchema#date";
    public const string DateTime = "http://www.w3.org/2001/XMLSchema#dateTime";
    public const string DaytimeDuration = "http://www.w3.org/TR/2002/WD-xquery-operators-20020816#dayTimeDuration";
    public const string DnsName = "http://schemas.xmlsoap.org/claims/dns";
    public const string Double = "http://www.w3.org/2001/XMLSchema#double";
    public const string DsaKeyValue = "http://www.w3.org/2000/09/xmldsig#DSAKeyValue";
    public const string Email = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress";
    public const string Fqbn = "http://www.w3.org/2001/XMLSchema#fqbn";
    public const string HexBinary = "http://www.w3.org/2001/XMLSchema#hexBinary";
    public const string Integer = "http://www.w3.org/2001/XMLSchema#integer";
    public const string Integer32 = "http://www.w3.org/2001/XMLSchema#integer32";
    public const string Integer64 = "http://www.w3.org/2001/XMLSchema#integer64";
    public const string KeyInfo = "http://www.w3.org/2000/09/xmldsig#KeyInfo";
    public const string Rfc822Name = "urn:oasis:names:tc:xacml:1.0:data-type:rfc822Name";
    public const string Rsa = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/rsa";
    public const string RsaKeyValue = "http://www.w3.org/2000/09/xmldsig#RSAKeyValue";
    public const string Sid = "http://www.w3.org/2001/XMLSchema#sid";
    public const string String = "http://www.w3.org/2001/XMLSchema#string";
    public const string Time = "http://www.w3.org/2001/XMLSchema#time";
    public const string UInteger32 = "http://www.w3.org/2001/XMLSchema#uinteger32";
    public const string UInteger64 = "http://www.w3.org/2001/XMLSchema#uinteger64";
    public const string UpnName = "http://schemas.xmlsoap.org/claims/UPN";
    public const string X500Name = "urn:oasis:names:tc:xacml:1.0:data-type:x500Name";
    public const string YearMonthDuration = "http://www.w3.org/TR/2002/WD-xquery-operators-20020816#yearMonthDuration";
  }
}
namespace System.Security.Principal {
  public partial class GenericIdentity : System.Security.Claims.ClaimsIdentity {
    protected GenericIdentity(System.Security.Principal.GenericIdentity identity) { }
    public GenericIdentity(string name) { }
    public GenericIdentity(string name, string type) { }
    public override string AuthenticationType { get { return default(string); } }
    public override System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get { return default(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>); } }
    public override bool IsAuthenticated { get { return default(bool); } }
    public override string Name { get { return default(string); } }
    public override System.Security.Claims.ClaimsIdentity Clone() { return default(System.Security.Claims.ClaimsIdentity); }
  }
  public partial class GenericPrincipal : System.Security.Claims.ClaimsPrincipal {
    public GenericPrincipal(System.Security.Principal.IIdentity identity, string[] roles) { }
    public override System.Security.Principal.IIdentity Identity { get { return default(System.Security.Principal.IIdentity); } }
    public override bool IsInRole(string role) { return default(bool); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Security.Cryptography.Algorithms")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Security.Cryptography.Algorithms")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Security.Cryptography.Algorithms")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Security.Cryptography {
  public abstract partial class Aes : System.Security.Cryptography.SymmetricAlgorithm {
    protected Aes() { }
    public override System.Security.Cryptography.KeySizes[] LegalBlockSizes { get { return default(System.Security.Cryptography.KeySizes[]); } }
    public override System.Security.Cryptography.KeySizes[] LegalKeySizes { get { return default(System.Security.Cryptography.KeySizes[]); } }
    public static System.Security.Cryptography.Aes Create() { return default(System.Security.Cryptography.Aes); }
  }
  public abstract partial class DeriveBytes : System.IDisposable {
    protected DeriveBytes() { }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public abstract byte[] GetBytes(int cb);
    public abstract void Reset();
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct ECCurve {
    public byte[] A;
    public byte[] B;
    public byte[] Cofactor;
    public System.Security.Cryptography.ECCurve.ECCurveType CurveType;
    public System.Security.Cryptography.ECPoint G;
    public System.Nullable<System.Security.Cryptography.HashAlgorithmName> Hash;
    public byte[] Order;
    public byte[] Polynomial;
    public byte[] Prime;
    public byte[] Seed;
    public bool IsCharacteristic2 { get { return default(bool); } }
    public bool IsExplicit { get { return default(bool); } }
    public bool IsNamed { get { return default(bool); } }
    public bool IsPrime { get { return default(bool); } }
    public System.Security.Cryptography.Oid Oid { get { return default(System.Security.Cryptography.Oid); } }
    public static System.Security.Cryptography.ECCurve CreateFromFriendlyName(string oidFriendlyName) { return default(System.Security.Cryptography.ECCurve); }
    public static System.Security.Cryptography.ECCurve CreateFromOid(System.Security.Cryptography.Oid curveOid) { return default(System.Security.Cryptography.ECCurve); }
    public static System.Security.Cryptography.ECCurve CreateFromValue(string oidValue) { return default(System.Security.Cryptography.ECCurve); }
    public void Validate() { }
    public enum ECCurveType {
      Characteristic2 = 4,
      Implicit = 0,
      Named = 5,
      PrimeMontgomery = 3,
      PrimeShortWeierstrass = 1,
      PrimeTwistedEdwards = 2,
    }
    public static partial class NamedCurves {
      public static System.Security.Cryptography.ECCurve brainpoolP160r1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve brainpoolP160t1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve brainpoolP192r1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve brainpoolP192t1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve brainpoolP224r1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve brainpoolP224t1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve brainpoolP256r1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve brainpoolP256t1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve brainpoolP320r1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve brainpoolP320t1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve brainpoolP384r1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve brainpoolP384t1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve brainpoolP512r1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve brainpoolP512t1 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve nistP256 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve nistP384 { get { return default(System.Security.Cryptography.ECCurve); } }
      public static System.Security.Cryptography.ECCurve nistP521 { get { return default(System.Security.Cryptography.ECCurve); } }
    }
  }
  public abstract partial class ECDsa : System.Security.Cryptography.AsymmetricAlgorithm {
    protected ECDsa() { }
    public static System.Security.Cryptography.ECDsa Create() { return default(System.Security.Cryptography.ECDsa); }
    public static System.Security.Cryptography.ECDsa Create(System.Security.Cryptography.ECCurve curve) { return default(System.Security.Cryptography.ECDsa); }
    public static System.Security.Cryptography.ECDsa Create(System.Security.Cryptography.ECParameters parameters) { return default(System.Security.Cryptography.ECDsa); }
    public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) { return default(System.Security.Cryptography.ECParameters); }
    public virtual System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) { return default(System.Security.Cryptography.ECParameters); }
    public virtual void GenerateKey(System.Security.Cryptography.ECCurve curve) { }
    protected abstract byte[] HashData(byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    protected abstract byte[] HashData(System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    public virtual void ImportParameters(System.Security.Cryptography.ECParameters parameters) { }
    public virtual byte[] SignData(byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm) { return default(byte[]); }
    public virtual byte[] SignData(byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm) { return default(byte[]); }
    public virtual byte[] SignData(System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm) { return default(byte[]); }
    public abstract byte[] SignHash(byte[] hash);
    public bool VerifyData(byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm) { return default(bool); }
    public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm) { return default(bool); }
    public bool VerifyData(System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm) { return default(bool); }
    public abstract bool VerifyHash(byte[] hash, byte[] signature);
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct ECParameters {
    public System.Security.Cryptography.ECCurve Curve;
    public byte[] D;
    public System.Security.Cryptography.ECPoint Q;
    public void Validate() { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct ECPoint {
    public byte[] X;
    public byte[] Y;
  }
  public partial class HMACMD5 : System.Security.Cryptography.HMAC {
    public HMACMD5() { }
    public HMACMD5(byte[] key) { }
    public override int HashSize { get { return default(int); } }
    public override byte[] Key { get { return default(byte[]); } set { } }
    protected override void Dispose(bool disposing) { }
    protected override void HashCore(byte[] rgb, int ib, int cb) { }
    protected override byte[] HashFinal() { return default(byte[]); }
    public override void Initialize() { }
  }
  public partial class HMACSHA1 : System.Security.Cryptography.HMAC {
    public HMACSHA1() { }
    public HMACSHA1(byte[] key) { }
    public override int HashSize { get { return default(int); } }
    public override byte[] Key { get { return default(byte[]); } set { } }
    protected override void Dispose(bool disposing) { }
    protected override void HashCore(byte[] rgb, int ib, int cb) { }
    protected override byte[] HashFinal() { return default(byte[]); }
    public override void Initialize() { }
  }
  public partial class HMACSHA256 : System.Security.Cryptography.HMAC {
    public HMACSHA256() { }
    public HMACSHA256(byte[] key) { }
    public override int HashSize { get { return default(int); } }
    public override byte[] Key { get { return default(byte[]); } set { } }
    protected override void Dispose(bool disposing) { }
    protected override void HashCore(byte[] rgb, int ib, int cb) { }
    protected override byte[] HashFinal() { return default(byte[]); }
    public override void Initialize() { }
  }
  public partial class HMACSHA384 : System.Security.Cryptography.HMAC {
    public HMACSHA384() { }
    public HMACSHA384(byte[] key) { }
    public override int HashSize { get { return default(int); } }
    public override byte[] Key { get { return default(byte[]); } set { } }
    protected override void Dispose(bool disposing) { }
    protected override void HashCore(byte[] rgb, int ib, int cb) { }
    protected override byte[] HashFinal() { return default(byte[]); }
    public override void Initialize() { }
  }
  public partial class HMACSHA512 : System.Security.Cryptography.HMAC {
    public HMACSHA512() { }
    public HMACSHA512(byte[] key) { }
    public override int HashSize { get { return default(int); } }
    public override byte[] Key { get { return default(byte[]); } set { } }
    protected override void Dispose(bool disposing) { }
    protected override void HashCore(byte[] rgb, int ib, int cb) { }
    protected override byte[] HashFinal() { return default(byte[]); }
    public override void Initialize() { }
  }
  public sealed partial class IncrementalHash : System.IDisposable {
    internal IncrementalHash() { }
    public System.Security.Cryptography.HashAlgorithmName AlgorithmName { get { return default(System.Security.Cryptography.HashAlgorithmName); } }
    public void AppendData(byte[] data) { }
    public void AppendData(byte[] data, int offset, int count) { }
    public static System.Security.Cryptography.IncrementalHash CreateHash(System.Security.Cryptography.HashAlgorithmName hashAlgorithm) { return default(System.Security.Cryptography.IncrementalHash); }
    public static System.Security.Cryptography.IncrementalHash CreateHMAC(System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] key) { return default(System.Security.Cryptography.IncrementalHash); }
    public void Dispose() { }
    public byte[] GetHashAndReset() { return default(byte[]); }
  }
  public abstract partial class MD5 : System.Security.Cryptography.HashAlgorithm {
    protected MD5() { }
    public static System.Security.Cryptography.MD5 Create() { return default(System.Security.Cryptography.MD5); }
  }
  public abstract partial class RandomNumberGenerator : System.IDisposable {
    protected RandomNumberGenerator() { }
    public static System.Security.Cryptography.RandomNumberGenerator Create() { return default(System.Security.Cryptography.RandomNumberGenerator); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public abstract void GetBytes(byte[] data);
  }
  public partial class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes {
    public Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations) { }
    public Rfc2898DeriveBytes(string password, byte[] salt) { }
    public Rfc2898DeriveBytes(string password, byte[] salt, int iterations) { }
    public Rfc2898DeriveBytes(string password, int saltSize) { }
    public Rfc2898DeriveBytes(string password, int saltSize, int iterations) { }
    public int IterationCount { get { return default(int); } set { } }
    public byte[] Salt { get { return default(byte[]); } set { } }
    protected override void Dispose(bool disposing) { }
    public override byte[] GetBytes(int cb) { return default(byte[]); }
    public override void Reset() { }
  }
  public abstract partial class RSA : System.Security.Cryptography.AsymmetricAlgorithm {
    protected RSA() { }
    public static System.Security.Cryptography.RSA Create() { return default(System.Security.Cryptography.RSA); }
    public abstract byte[] Decrypt(byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);
    public abstract byte[] Encrypt(byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);
    public abstract System.Security.Cryptography.RSAParameters ExportParameters(bool includePrivateParameters);
    protected abstract byte[] HashData(byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    protected abstract byte[] HashData(System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    public abstract void ImportParameters(System.Security.Cryptography.RSAParameters parameters);
    public virtual byte[] SignData(byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding) { return default(byte[]); }
    public byte[] SignData(byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding) { return default(byte[]); }
    public virtual byte[] SignData(System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding) { return default(byte[]); }
    public abstract byte[] SignHash(byte[] hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
    public bool VerifyData(byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding) { return default(bool); }
    public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding) { return default(bool); }
    public bool VerifyData(System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding) { return default(bool); }
    public abstract bool VerifyHash(byte[] hash, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
  }
  public sealed partial class RSAEncryptionPadding : System.IEquatable<System.Security.Cryptography.RSAEncryptionPadding> {
    internal RSAEncryptionPadding() { }
    public System.Security.Cryptography.RSAEncryptionPaddingMode Mode { get { return default(System.Security.Cryptography.RSAEncryptionPaddingMode); } }
    public System.Security.Cryptography.HashAlgorithmName OaepHashAlgorithm { get { return default(System.Security.Cryptography.HashAlgorithmName); } }
    public static System.Security.Cryptography.RSAEncryptionPadding OaepSHA1 { get { return default(System.Security.Cryptography.RSAEncryptionPadding); } }
    public static System.Security.Cryptography.RSAEncryptionPadding OaepSHA256 { get { return default(System.Security.Cryptography.RSAEncryptionPadding); } }
    public static System.Security.Cryptography.RSAEncryptionPadding OaepSHA384 { get { return default(System.Security.Cryptography.RSAEncryptionPadding); } }
    public static System.Security.Cryptography.RSAEncryptionPadding OaepSHA512 { get { return default(System.Security.Cryptography.RSAEncryptionPadding); } }
    public static System.Security.Cryptography.RSAEncryptionPadding Pkcs1 { get { return default(System.Security.Cryptography.RSAEncryptionPadding); } }
    public static System.Security.Cryptography.RSAEncryptionPadding CreateOaep(System.Security.Cryptography.HashAlgorithmName hashAlgorithm) { return default(System.Security.Cryptography.RSAEncryptionPadding); }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Security.Cryptography.RSAEncryptionPadding other) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Security.Cryptography.RSAEncryptionPadding left, System.Security.Cryptography.RSAEncryptionPadding right) { return default(bool); }
    public static bool operator !=(System.Security.Cryptography.RSAEncryptionPadding left, System.Security.Cryptography.RSAEncryptionPadding right) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  public enum RSAEncryptionPaddingMode {
    Oaep = 1,
    Pkcs1 = 0,
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct RSAParameters {
    public byte[] D;
    public byte[] DP;
    public byte[] DQ;
    public byte[] Exponent;
    public byte[] InverseQ;
    public byte[] Modulus;
    public byte[] P;
    public byte[] Q;
  }
  public sealed partial class RSASignaturePadding : System.IEquatable<System.Security.Cryptography.RSASignaturePadding> {
    internal RSASignaturePadding() { }
    public System.Security.Cryptography.RSASignaturePaddingMode Mode { get { return default(System.Security.Cryptography.RSASignaturePaddingMode); } }
    public static System.Security.Cryptography.RSASignaturePadding Pkcs1 { get { return default(System.Security.Cryptography.RSASignaturePadding); } }
    public static System.Security.Cryptography.RSASignaturePadding Pss { get { return default(System.Security.Cryptography.RSASignaturePadding); } }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Security.Cryptography.RSASignaturePadding other) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Security.Cryptography.RSASignaturePadding left, System.Security.Cryptography.RSASignaturePadding right) { return default(bool); }
    public static bool operator !=(System.Security.Cryptography.RSASignaturePadding left, System.Security.Cryptography.RSASignaturePadding right) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  public enum RSASignaturePaddingMode {
    Pkcs1 = 0,
    Pss = 1,
  }
  public abstract partial class SHA1 : System.Security.Cryptography.HashAlgorithm {
    protected SHA1() { }
    public static System.Security.Cryptography.SHA1 Create() { return default(System.Security.Cryptography.SHA1); }
  }
  public abstract partial class SHA256 : System.Security.Cryptography.HashAlgorithm {
    protected SHA256() { }
    public static System.Security.Cryptography.SHA256 Create() { return default(System.Security.Cryptography.SHA256); }
  }
  public abstract partial class SHA384 : System.Security.Cryptography.HashAlgorithm {
    protected SHA384() { }
    public static System.Security.Cryptography.SHA384 Create() { return default(System.Security.Cryptography.SHA384); }
  }
  public abstract partial class SHA512 : System.Security.Cryptography.HashAlgorithm {
    protected SHA512() { }
    public static System.Security.Cryptography.SHA512 Create() { return default(System.Security.Cryptography.SHA512); }
  }
  public abstract partial class TripleDES : System.Security.Cryptography.SymmetricAlgorithm {
    protected TripleDES() { }
    public override byte[] Key { get { return default(byte[]); } set { } }
    public override System.Security.Cryptography.KeySizes[] LegalBlockSizes { get { return default(System.Security.Cryptography.KeySizes[]); } }
    public override System.Security.Cryptography.KeySizes[] LegalKeySizes { get { return default(System.Security.Cryptography.KeySizes[]); } }
    public static System.Security.Cryptography.TripleDES Create() { return default(System.Security.Cryptography.TripleDES); }
    public static bool IsWeakKey(byte[] rgbKey) { return default(bool); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Security.Cryptography.Encoding")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Security.Cryptography.Encoding")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Security.Cryptography.Encoding")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Security.Cryptography {
  public partial class AsnEncodedData {
    protected AsnEncodedData() { }
    public AsnEncodedData(byte[] rawData) { }
    public AsnEncodedData(System.Security.Cryptography.AsnEncodedData asnEncodedData) { }
    public AsnEncodedData(System.Security.Cryptography.Oid oid, byte[] rawData) { }
    public AsnEncodedData(string oid, byte[] rawData) { }
    public System.Security.Cryptography.Oid Oid { get { return default(System.Security.Cryptography.Oid); } set { } }
    public byte[] RawData { get { return default(byte[]); } set { } }
    public virtual void CopyFrom(System.Security.Cryptography.AsnEncodedData asnEncodedData) { }
    public virtual string Format(bool multiLine) { return default(string); }
  }
  public sealed partial class AsnEncodedDataCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    public AsnEncodedDataCollection() { }
    public AsnEncodedDataCollection(System.Security.Cryptography.AsnEncodedData asnEncodedData) { }
    public int Count { get { return default(int); } }
    public System.Security.Cryptography.AsnEncodedData this[int index] { get { return default(System.Security.Cryptography.AsnEncodedData); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public int Add(System.Security.Cryptography.AsnEncodedData asnEncodedData) { return default(int); }
    public void CopyTo(System.Security.Cryptography.AsnEncodedData[] array, int index) { }
    public System.Security.Cryptography.AsnEncodedDataEnumerator GetEnumerator() { return default(System.Security.Cryptography.AsnEncodedDataEnumerator); }
    public void Remove(System.Security.Cryptography.AsnEncodedData asnEncodedData) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public sealed partial class AsnEncodedDataEnumerator : System.Collections.IEnumerator {
    internal AsnEncodedDataEnumerator() { }
    public System.Security.Cryptography.AsnEncodedData Current { get { return default(System.Security.Cryptography.AsnEncodedData); } }
    object System.Collections.IEnumerator.Current { get { return default(object); } }
    public bool MoveNext() { return default(bool); }
    public void Reset() { }
  }
  public sealed partial class Oid {
    public Oid(System.Security.Cryptography.Oid oid) { }
    public Oid(string oid) { }
    public Oid(string value, string friendlyName) { }
    public string FriendlyName { get { return default(string); } set { } }
    public string Value { get { return default(string); } set { } }
    public static System.Security.Cryptography.Oid FromFriendlyName(string friendlyName, System.Security.Cryptography.OidGroup group) { return default(System.Security.Cryptography.Oid); }
    public static System.Security.Cryptography.Oid FromOidValue(string oidValue, System.Security.Cryptography.OidGroup group) { return default(System.Security.Cryptography.Oid); }
  }
  public sealed partial class OidCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    public OidCollection() { }
    public int Count { get { return default(int); } }
    public System.Security.Cryptography.Oid this[int index] { get { return default(System.Security.Cryptography.Oid); } }
    public System.Security.Cryptography.Oid this[string oid] { get { return default(System.Security.Cryptography.Oid); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public int Add(System.Security.Cryptography.Oid oid) { return default(int); }
    public void CopyTo(System.Security.Cryptography.Oid[] array, int index) { }
    public System.Security.Cryptography.OidEnumerator GetEnumerator() { return default(System.Security.Cryptography.OidEnumerator); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public sealed partial class OidEnumerator : System.Collections.IEnumerator {
    internal OidEnumerator() { }
    public System.Security.Cryptography.Oid Current { get { return default(System.Security.Cryptography.Oid); } }
    object System.Collections.IEnumerator.Current { get { return default(object); } }
    public bool MoveNext() { return default(bool); }
    public void Reset() { }
  }
  public enum OidGroup {
    All = 0,
    Attribute = 5,
    EncryptionAlgorithm = 2,
    EnhancedKeyUsage = 7,
    ExtensionOrAttribute = 6,
    HashAlgorithm = 1,
    KeyDerivationFunction = 10,
    Policy = 8,
    PublicKeyAlgorithm = 3,
    SignatureAlgorithm = 4,
    Template = 9,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Security.Cryptography.Primitives")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Security.Cryptography.Primitives")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Security.Cryptography.Primitives")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Security.Cryptography {
  public abstract partial class AsymmetricAlgorithm : System.IDisposable {
    protected int KeySizeValue;
    protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
    protected AsymmetricAlgorithm() { }
    public virtual int KeySize { get { return default(int); } set { } }
    public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get { return default(System.Security.Cryptography.KeySizes[]); } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
  }
  public enum CipherMode {
    CBC = 1,
    CTS = 5,
    ECB = 2,
  }
  public partial class CryptographicException : System.Exception {
    public CryptographicException() { }
    public CryptographicException(int hr) { }
    public CryptographicException(string message) { }
    public CryptographicException(string message, System.Exception inner) { }
    public CryptographicException(string format, string insert) { }
  }
  public partial class CryptoStream : System.IO.Stream, System.IDisposable {
    public CryptoStream(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode) { }
    public override bool CanRead { get { return default(bool); } }
    public override bool CanSeek { get { return default(bool); } }
    public override bool CanWrite { get { return default(bool); } }
    public bool HasFlushedFinalBlock { get { return default(bool); } }
    public override long Length { get { return default(long); } }
    public override long Position { get { return default(long); } set { } }
    protected override void Dispose(bool disposing) { }
    public override void Flush() { }
    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public void FlushFinalBlock() { }
    public override int Read(byte[] buffer, int offset, int count) { return default(int); }
    public override System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<int>); }
    public override long Seek(long offset, System.IO.SeekOrigin origin) { return default(long); }
    public override void SetLength(long value) { }
    public override void Write(byte[] buffer, int offset, int count) { }
    public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
  }
  public enum CryptoStreamMode {
    Read = 0,
    Write = 1,
  }
  public abstract partial class HashAlgorithm : System.IDisposable {
    protected HashAlgorithm() { }
    public virtual int HashSize { get { return default(int); } }
    public byte[] ComputeHash(byte[] buffer) { return default(byte[]); }
    public byte[] ComputeHash(byte[] buffer, int offset, int count) { return default(byte[]); }
    public byte[] ComputeHash(System.IO.Stream inputStream) { return default(byte[]); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    protected abstract void HashCore(byte[] array, int ibStart, int cbSize);
    protected abstract byte[] HashFinal();
    public abstract void Initialize();
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct HashAlgorithmName : System.IEquatable<System.Security.Cryptography.HashAlgorithmName> {
    public HashAlgorithmName(string name) { throw new System.NotImplementedException(); }
    public static System.Security.Cryptography.HashAlgorithmName MD5 { get { return default(System.Security.Cryptography.HashAlgorithmName); } }
    public string Name { get { return default(string); } }
    public static System.Security.Cryptography.HashAlgorithmName SHA1 { get { return default(System.Security.Cryptography.HashAlgorithmName); } }
    public static System.Security.Cryptography.HashAlgorithmName SHA256 { get { return default(System.Security.Cryptography.HashAlgorithmName); } }
    public static System.Security.Cryptography.HashAlgorithmName SHA384 { get { return default(System.Security.Cryptography.HashAlgorithmName); } }
    public static System.Security.Cryptography.HashAlgorithmName SHA512 { get { return default(System.Security.Cryptography.HashAlgorithmName); } }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Security.Cryptography.HashAlgorithmName other) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Security.Cryptography.HashAlgorithmName left, System.Security.Cryptography.HashAlgorithmName right) { return default(bool); }
    public static bool operator !=(System.Security.Cryptography.HashAlgorithmName left, System.Security.Cryptography.HashAlgorithmName right) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  public abstract partial class HMAC : System.Security.Cryptography.KeyedHashAlgorithm {
    protected HMAC() { }
    public string HashName { get { return default(string); } set { } }
    public override byte[] Key { get { return default(byte[]); } set { } }
    protected override void Dispose(bool disposing) { }
    protected override void HashCore(byte[] rgb, int ib, int cb) { }
    protected override byte[] HashFinal() { return default(byte[]); }
    public override void Initialize() { }
  }
  public partial interface ICryptoTransform : System.IDisposable {
    bool CanReuseTransform { get; }
    bool CanTransformMultipleBlocks { get; }
    int InputBlockSize { get; }
    int OutputBlockSize { get; }
    int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
  }
  public abstract partial class KeyedHashAlgorithm : System.Security.Cryptography.HashAlgorithm {
    protected KeyedHashAlgorithm() { }
    public virtual byte[] Key { get { return default(byte[]); } set { } }
    protected override void Dispose(bool disposing) { }
  }
  public sealed partial class KeySizes {
    public KeySizes(int minSize, int maxSize, int skipSize) { }
    public int MaxSize { get { return default(int); } }
    public int MinSize { get { return default(int); } }
    public int SkipSize { get { return default(int); } }
  }
  public enum PaddingMode {
    None = 1,
    PKCS7 = 2,
    Zeros = 3,
  }
  public abstract partial class SymmetricAlgorithm : System.IDisposable {
    protected int BlockSizeValue;
    protected byte[] IVValue;
    protected int KeySizeValue;
    protected byte[] KeyValue;
    protected System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;
    protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
    protected System.Security.Cryptography.CipherMode ModeValue;
    protected System.Security.Cryptography.PaddingMode PaddingValue;
    protected SymmetricAlgorithm() { }
    public virtual int BlockSize { get { return default(int); } set { } }
    public virtual byte[] IV { get { return default(byte[]); } set { } }
    public virtual byte[] Key { get { return default(byte[]); } set { } }
    public virtual int KeySize { get { return default(int); } set { } }
    public virtual System.Security.Cryptography.KeySizes[] LegalBlockSizes { get { return default(System.Security.Cryptography.KeySizes[]); } }
    public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get { return default(System.Security.Cryptography.KeySizes[]); } }
    public virtual System.Security.Cryptography.CipherMode Mode { get { return default(System.Security.Cryptography.CipherMode); } set { } }
    public virtual System.Security.Cryptography.PaddingMode Padding { get { return default(System.Security.Cryptography.PaddingMode); } set { } }
    public virtual System.Security.Cryptography.ICryptoTransform CreateDecryptor() { return default(System.Security.Cryptography.ICryptoTransform); }
    public abstract System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
    public virtual System.Security.Cryptography.ICryptoTransform CreateEncryptor() { return default(System.Security.Cryptography.ICryptoTransform); }
    public abstract System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public abstract void GenerateIV();
    public abstract void GenerateKey();
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Security.Cryptography.X509Certificates")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Security.Cryptography.X509Certificates")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Security.Cryptography.X509Certificates")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace Microsoft.Win32.SafeHandles {
  public sealed partial class SafeX509ChainHandle : System.Runtime.InteropServices.SafeHandle {
    internal SafeX509ChainHandle() : base (default(System.IntPtr), default(bool)) { }
    public override bool IsInvalid { [System.Security.SecurityCriticalAttribute]get { return default(bool); } }
    protected override bool ReleaseHandle() { return default(bool); }
  }
}
namespace System.Security.Cryptography.X509Certificates {
  public static partial class ECDsaCertificateExtensions {
    public static System.Security.Cryptography.ECDsa GetECDsaPrivateKey(this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { return default(System.Security.Cryptography.ECDsa); }
    public static System.Security.Cryptography.ECDsa GetECDsaPublicKey(this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { return default(System.Security.Cryptography.ECDsa); }
  }
  [System.FlagsAttribute]
  public enum OpenFlags {
    IncludeArchived = 8,
    MaxAllowed = 2,
    OpenExistingOnly = 4,
    ReadOnly = 0,
    ReadWrite = 1,
  }
  public sealed partial class PublicKey {
    public PublicKey(System.Security.Cryptography.Oid oid, System.Security.Cryptography.AsnEncodedData parameters, System.Security.Cryptography.AsnEncodedData keyValue) { }
    public System.Security.Cryptography.AsnEncodedData EncodedKeyValue { get { return default(System.Security.Cryptography.AsnEncodedData); } }
    public System.Security.Cryptography.AsnEncodedData EncodedParameters { get { return default(System.Security.Cryptography.AsnEncodedData); } }
    public System.Security.Cryptography.Oid Oid { get { return default(System.Security.Cryptography.Oid); } }
  }
  public static partial class RSACertificateExtensions {
    public static System.Security.Cryptography.RSA GetRSAPrivateKey(this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { return default(System.Security.Cryptography.RSA); }
    public static System.Security.Cryptography.RSA GetRSAPublicKey(this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { return default(System.Security.Cryptography.RSA); }
  }
  public enum StoreLocation {
    CurrentUser = 1,
    LocalMachine = 2,
  }
  public enum StoreName {
    AddressBook = 1,
    AuthRoot = 2,
    CertificateAuthority = 3,
    Disallowed = 4,
    My = 5,
    Root = 6,
    TrustedPeople = 7,
    TrustedPublisher = 8,
  }
  public sealed partial class X500DistinguishedName : System.Security.Cryptography.AsnEncodedData {
    public X500DistinguishedName(byte[] encodedDistinguishedName) { }
    public X500DistinguishedName(System.Security.Cryptography.AsnEncodedData encodedDistinguishedName) { }
    public X500DistinguishedName(System.Security.Cryptography.X509Certificates.X500DistinguishedName distinguishedName) { }
    public X500DistinguishedName(string distinguishedName) { }
    public X500DistinguishedName(string distinguishedName, System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags flag) { }
    public string Name { get { return default(string); } }
    public string Decode(System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags flag) { return default(string); }
    public override string Format(bool multiLine) { return default(string); }
  }
  [System.FlagsAttribute]
  public enum X500DistinguishedNameFlags {
    DoNotUsePlusSign = 32,
    DoNotUseQuotes = 64,
    ForceUTF8Encoding = 16384,
    None = 0,
    Reversed = 1,
    UseCommas = 128,
    UseNewLines = 256,
    UseSemicolons = 16,
    UseT61Encoding = 8192,
    UseUTF8Encoding = 4096,
  }
  public sealed partial class X509BasicConstraintsExtension : System.Security.Cryptography.X509Certificates.X509Extension {
    public X509BasicConstraintsExtension() { }
    public X509BasicConstraintsExtension(bool certificateAuthority, bool hasPathLengthConstraint, int pathLengthConstraint, bool critical) { }
    public X509BasicConstraintsExtension(System.Security.Cryptography.AsnEncodedData encodedBasicConstraints, bool critical) { }
    public bool CertificateAuthority { get { return default(bool); } }
    public bool HasPathLengthConstraint { get { return default(bool); } }
    public int PathLengthConstraint { get { return default(int); } }
    public override void CopyFrom(System.Security.Cryptography.AsnEncodedData asnEncodedData) { }
  }
  public partial class X509Certificate : System.IDisposable {
    public X509Certificate() { }
    public X509Certificate(byte[] data) { }
    public X509Certificate(byte[] rawData, string password) { }
    public X509Certificate(byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) { }
    [System.Security.SecurityCriticalAttribute]
    public X509Certificate(System.IntPtr handle) { }
    public X509Certificate(string fileName) { }
    public X509Certificate(string fileName, string password) { }
    public X509Certificate(string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) { }
    public System.IntPtr Handle { [System.Security.SecurityCriticalAttribute]get { return default(System.IntPtr); } }
    public string Issuer { get { return default(string); } }
    public string Subject { get { return default(string); } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public override bool Equals(object obj) { return default(bool); }
    public virtual bool Equals(System.Security.Cryptography.X509Certificates.X509Certificate other) { return default(bool); }
    public virtual byte[] Export(System.Security.Cryptography.X509Certificates.X509ContentType contentType) { return default(byte[]); }
    public virtual byte[] Export(System.Security.Cryptography.X509Certificates.X509ContentType contentType, string password) { return default(byte[]); }
    public virtual byte[] GetCertHash() { return default(byte[]); }
    public virtual string GetFormat() { return default(string); }
    public override int GetHashCode() { return default(int); }
    public virtual string GetKeyAlgorithm() { return default(string); }
    public virtual byte[] GetKeyAlgorithmParameters() { return default(byte[]); }
    public virtual string GetKeyAlgorithmParametersString() { return default(string); }
    public virtual byte[] GetPublicKey() { return default(byte[]); }
    public virtual byte[] GetSerialNumber() { return default(byte[]); }
    public override string ToString() { return default(string); }
    public virtual string ToString(bool fVerbose) { return default(string); }
  }
  public partial class X509Certificate2 : System.Security.Cryptography.X509Certificates.X509Certificate {
    public X509Certificate2() { }
    public X509Certificate2(byte[] rawData) { }
    public X509Certificate2(byte[] rawData, string password) { }
    public X509Certificate2(byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) { }
    public X509Certificate2(System.IntPtr handle) { }
    public X509Certificate2(string fileName) { }
    public X509Certificate2(string fileName, string password) { }
    public X509Certificate2(string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) { }
    public bool Archived { get { return default(bool); } set { } }
    public System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions { get { return default(System.Security.Cryptography.X509Certificates.X509ExtensionCollection); } }
    public string FriendlyName { get { return default(string); } set { } }
    public bool HasPrivateKey { get { return default(bool); } }
    public System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName { get { return default(System.Security.Cryptography.X509Certificates.X500DistinguishedName); } }
    public System.DateTime NotAfter { get { return default(System.DateTime); } }
    public System.DateTime NotBefore { get { return default(System.DateTime); } }
    public System.Security.Cryptography.X509Certificates.PublicKey PublicKey { get { return default(System.Security.Cryptography.X509Certificates.PublicKey); } }
    public byte[] RawData { get { return default(byte[]); } }
    public string SerialNumber { get { return default(string); } }
    public System.Security.Cryptography.Oid SignatureAlgorithm { get { return default(System.Security.Cryptography.Oid); } }
    public System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName { get { return default(System.Security.Cryptography.X509Certificates.X500DistinguishedName); } }
    public string Thumbprint { get { return default(string); } }
    public int Version { get { return default(int); } }
    public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType(byte[] rawData) { return default(System.Security.Cryptography.X509Certificates.X509ContentType); }
    public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType(string fileName) { return default(System.Security.Cryptography.X509Certificates.X509ContentType); }
    public string GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType nameType, bool forIssuer) { return default(string); }
    public override string ToString() { return default(string); }
    public override string ToString(bool verbose) { return default(string); }
  }
  public partial class X509Certificate2Collection : System.Security.Cryptography.X509Certificates.X509CertificateCollection {
    public X509Certificate2Collection() { }
    public X509Certificate2Collection(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { }
    public X509Certificate2Collection(System.Security.Cryptography.X509Certificates.X509Certificate2[] certificates) { }
    public X509Certificate2Collection(System.Security.Cryptography.X509Certificates.X509Certificate2Collection certificates) { }
    public new System.Security.Cryptography.X509Certificates.X509Certificate2 this[int index] { get { return default(System.Security.Cryptography.X509Certificates.X509Certificate2); } set { } }
    public int Add(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { return default(int); }
    public void AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2[] certificates) { }
    public void AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection certificates) { }
    public bool Contains(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { return default(bool); }
    public byte[] Export(System.Security.Cryptography.X509Certificates.X509ContentType contentType) { return default(byte[]); }
    public byte[] Export(System.Security.Cryptography.X509Certificates.X509ContentType contentType, string password) { return default(byte[]); }
    public System.Security.Cryptography.X509Certificates.X509Certificate2Collection Find(System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue, bool validOnly) { return default(System.Security.Cryptography.X509Certificates.X509Certificate2Collection); }
    public new System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator GetEnumerator() { return default(System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator); }
    public void Import(byte[] rawData) { }
    public void Import(byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) { }
    public void Import(string fileName) { }
    public void Import(string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) { }
    public void Insert(int index, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { }
    public void Remove(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { }
    public void RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2[] certificates) { }
    public void RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection certificates) { }
  }
  public sealed partial class X509Certificate2Enumerator : System.Collections.IEnumerator {
    internal X509Certificate2Enumerator() { }
    public System.Security.Cryptography.X509Certificates.X509Certificate2 Current { get { return default(System.Security.Cryptography.X509Certificates.X509Certificate2); } }
    object System.Collections.IEnumerator.Current { get { return default(object); } }
    public bool MoveNext() { return default(bool); }
    public void Reset() { }
    bool System.Collections.IEnumerator.MoveNext() { return default(bool); }
    void System.Collections.IEnumerator.Reset() { }
  }
  public partial class X509CertificateCollection : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public X509CertificateCollection() { }
    public X509CertificateCollection(System.Security.Cryptography.X509Certificates.X509Certificate[] value) { }
    public X509CertificateCollection(System.Security.Cryptography.X509Certificates.X509CertificateCollection value) { }
    public int Count { get { return default(int); } }
    public System.Security.Cryptography.X509Certificates.X509Certificate this[int index] { get { return default(System.Security.Cryptography.X509Certificates.X509Certificate); } set { } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Security.Cryptography.X509Certificates.X509Certificate value) { return default(int); }
    public void AddRange(System.Security.Cryptography.X509Certificates.X509Certificate[] value) { }
    public void AddRange(System.Security.Cryptography.X509Certificates.X509CertificateCollection value) { }
    public void Clear() { }
    public bool Contains(System.Security.Cryptography.X509Certificates.X509Certificate value) { return default(bool); }
    public void CopyTo(System.Security.Cryptography.X509Certificates.X509Certificate[] array, int index) { }
    public System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator GetEnumerator() { return default(System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator); }
    public override int GetHashCode() { return default(int); }
    public int IndexOf(System.Security.Cryptography.X509Certificates.X509Certificate value) { return default(int); }
    public void Insert(int index, System.Security.Cryptography.X509Certificates.X509Certificate value) { }
    public void Remove(System.Security.Cryptography.X509Certificates.X509Certificate value) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    public partial class X509CertificateEnumerator : System.Collections.IEnumerator {
      public X509CertificateEnumerator(System.Security.Cryptography.X509Certificates.X509CertificateCollection mappings) { }
      public System.Security.Cryptography.X509Certificates.X509Certificate Current { get { return default(System.Security.Cryptography.X509Certificates.X509Certificate); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      bool System.Collections.IEnumerator.MoveNext() { return default(bool); }
      void System.Collections.IEnumerator.Reset() { }
    }
  }
  public partial class X509Chain : System.IDisposable {
    public X509Chain() { }
    public System.Security.Cryptography.X509Certificates.X509ChainElementCollection ChainElements { get { return default(System.Security.Cryptography.X509Certificates.X509ChainElementCollection); } }
    public System.Security.Cryptography.X509Certificates.X509ChainPolicy ChainPolicy { get { return default(System.Security.Cryptography.X509Certificates.X509ChainPolicy); } set { } }
    public System.Security.Cryptography.X509Certificates.X509ChainStatus[] ChainStatus { get { return default(System.Security.Cryptography.X509Certificates.X509ChainStatus[]); } }
    public Microsoft.Win32.SafeHandles.SafeX509ChainHandle SafeHandle { get { return default(Microsoft.Win32.SafeHandles.SafeX509ChainHandle); } }
    public bool Build(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { return default(bool); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
  }
  public partial class X509ChainElement {
    internal X509ChainElement() { }
    public System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate { get { return default(System.Security.Cryptography.X509Certificates.X509Certificate2); } }
    public System.Security.Cryptography.X509Certificates.X509ChainStatus[] ChainElementStatus { get { return default(System.Security.Cryptography.X509Certificates.X509ChainStatus[]); } }
    public string Information { get { return default(string); } }
  }
  public sealed partial class X509ChainElementCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    internal X509ChainElementCollection() { }
    public int Count { get { return default(int); } }
    public System.Security.Cryptography.X509Certificates.X509ChainElement this[int index] { get { return default(System.Security.Cryptography.X509Certificates.X509ChainElement); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public void CopyTo(System.Security.Cryptography.X509Certificates.X509ChainElement[] array, int index) { }
    public System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator GetEnumerator() { return default(System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public sealed partial class X509ChainElementEnumerator : System.Collections.IEnumerator {
    internal X509ChainElementEnumerator() { }
    public System.Security.Cryptography.X509Certificates.X509ChainElement Current { get { return default(System.Security.Cryptography.X509Certificates.X509ChainElement); } }
    object System.Collections.IEnumerator.Current { get { return default(object); } }
    public bool MoveNext() { return default(bool); }
    public void Reset() { }
  }
  public sealed partial class X509ChainPolicy {
    public X509ChainPolicy() { }
    public System.Security.Cryptography.OidCollection ApplicationPolicy { get { return default(System.Security.Cryptography.OidCollection); } }
    public System.Security.Cryptography.OidCollection CertificatePolicy { get { return default(System.Security.Cryptography.OidCollection); } }
    public System.Security.Cryptography.X509Certificates.X509Certificate2Collection ExtraStore { get { return default(System.Security.Cryptography.X509Certificates.X509Certificate2Collection); } }
    public System.Security.Cryptography.X509Certificates.X509RevocationFlag RevocationFlag { get { return default(System.Security.Cryptography.X509Certificates.X509RevocationFlag); } set { } }
    public System.Security.Cryptography.X509Certificates.X509RevocationMode RevocationMode { get { return default(System.Security.Cryptography.X509Certificates.X509RevocationMode); } set { } }
    public System.TimeSpan UrlRetrievalTimeout { get { return default(System.TimeSpan); } set { } }
    public System.Security.Cryptography.X509Certificates.X509VerificationFlags VerificationFlags { get { return default(System.Security.Cryptography.X509Certificates.X509VerificationFlags); } set { } }
    public System.DateTime VerificationTime { get { return default(System.DateTime); } set { } }
    public void Reset() { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct X509ChainStatus {
    public System.Security.Cryptography.X509Certificates.X509ChainStatusFlags Status { get { return default(System.Security.Cryptography.X509Certificates.X509ChainStatusFlags); } set { } }
    public string StatusInformation { get { return default(string); } set { } }
  }
  [System.FlagsAttribute]
  public enum X509ChainStatusFlags {
    CtlNotSignatureValid = 262144,
    CtlNotTimeValid = 131072,
    CtlNotValidForUsage = 524288,
    Cyclic = 128,
    ExplicitDistrust = 67108864,
    HasExcludedNameConstraint = 32768,
    HasNotDefinedNameConstraint = 8192,
    HasNotPermittedNameConstraint = 16384,
    HasNotSupportedCriticalExtension = 134217728,
    HasNotSupportedNameConstraint = 4096,
    HasWeakSignature = 1048576,
    InvalidBasicConstraints = 1024,
    InvalidExtension = 256,
    InvalidNameConstraints = 2048,
    InvalidPolicyConstraints = 512,
    NoError = 0,
    NoIssuanceChainPolicy = 33554432,
    NotSignatureValid = 8,
    NotTimeNested = 2,
    NotTimeValid = 1,
    NotValidForUsage = 16,
    OfflineRevocation = 16777216,
    PartialChain = 65536,
    RevocationStatusUnknown = 64,
    Revoked = 4,
    UntrustedRoot = 32,
  }
  public enum X509ContentType {
    Authenticode = 6,
    Cert = 1,
    Pfx = 3,
    Pkcs12 = 3,
    Pkcs7 = 5,
    SerializedCert = 2,
    SerializedStore = 4,
    Unknown = 0,
  }
  public sealed partial class X509EnhancedKeyUsageExtension : System.Security.Cryptography.X509Certificates.X509Extension {
    public X509EnhancedKeyUsageExtension() { }
    public X509EnhancedKeyUsageExtension(System.Security.Cryptography.AsnEncodedData encodedEnhancedKeyUsages, bool critical) { }
    public X509EnhancedKeyUsageExtension(System.Security.Cryptography.OidCollection enhancedKeyUsages, bool critical) { }
    public System.Security.Cryptography.OidCollection EnhancedKeyUsages { get { return default(System.Security.Cryptography.OidCollection); } }
    public override void CopyFrom(System.Security.Cryptography.AsnEncodedData asnEncodedData) { }
  }
  public partial class X509Extension : System.Security.Cryptography.AsnEncodedData {
    protected X509Extension() { }
    public X509Extension(System.Security.Cryptography.AsnEncodedData encodedExtension, bool critical) { }
    public X509Extension(System.Security.Cryptography.Oid oid, byte[] rawData, bool critical) { }
    public X509Extension(string oid, byte[] rawData, bool critical) { }
    public bool Critical { get { return default(bool); } set { } }
    public override void CopyFrom(System.Security.Cryptography.AsnEncodedData asnEncodedData) { }
  }
  public sealed partial class X509ExtensionCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    public X509ExtensionCollection() { }
    public int Count { get { return default(int); } }
    public System.Security.Cryptography.X509Certificates.X509Extension this[int index] { get { return default(System.Security.Cryptography.X509Certificates.X509Extension); } }
    public System.Security.Cryptography.X509Certificates.X509Extension this[string oid] { get { return default(System.Security.Cryptography.X509Certificates.X509Extension); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public int Add(System.Security.Cryptography.X509Certificates.X509Extension extension) { return default(int); }
    public void CopyTo(System.Security.Cryptography.X509Certificates.X509Extension[] array, int index) { }
    public System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator GetEnumerator() { return default(System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public sealed partial class X509ExtensionEnumerator : System.Collections.IEnumerator {
    internal X509ExtensionEnumerator() { }
    public System.Security.Cryptography.X509Certificates.X509Extension Current { get { return default(System.Security.Cryptography.X509Certificates.X509Extension); } }
    object System.Collections.IEnumerator.Current { get { return default(object); } }
    public bool MoveNext() { return default(bool); }
    public void Reset() { }
  }
  public enum X509FindType {
    FindByApplicationPolicy = 10,
    FindByCertificatePolicy = 11,
    FindByExtension = 12,
    FindByIssuerDistinguishedName = 4,
    FindByIssuerName = 3,
    FindByKeyUsage = 13,
    FindBySerialNumber = 5,
    FindBySubjectDistinguishedName = 2,
    FindBySubjectKeyIdentifier = 14,
    FindBySubjectName = 1,
    FindByTemplateName = 9,
    FindByThumbprint = 0,
    FindByTimeExpired = 8,
    FindByTimeNotYetValid = 7,
    FindByTimeValid = 6,
  }
  [System.FlagsAttribute]
  public enum X509KeyStorageFlags {
    DefaultKeySet = 0,
    Exportable = 4,
    MachineKeySet = 2,
    PersistKeySet = 16,
    UserKeySet = 1,
    UserProtected = 8,
  }
  public sealed partial class X509KeyUsageExtension : System.Security.Cryptography.X509Certificates.X509Extension {
    public X509KeyUsageExtension() { }
    public X509KeyUsageExtension(System.Security.Cryptography.AsnEncodedData encodedKeyUsage, bool critical) { }
    public X509KeyUsageExtension(System.Security.Cryptography.X509Certificates.X509KeyUsageFlags keyUsages, bool critical) { }
    public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags KeyUsages { get { return default(System.Security.Cryptography.X509Certificates.X509KeyUsageFlags); } }
    public override void CopyFrom(System.Security.Cryptography.AsnEncodedData asnEncodedData) { }
  }
  [System.FlagsAttribute]
  public enum X509KeyUsageFlags {
    CrlSign = 2,
    DataEncipherment = 16,
    DecipherOnly = 32768,
    DigitalSignature = 128,
    EncipherOnly = 1,
    KeyAgreement = 8,
    KeyCertSign = 4,
    KeyEncipherment = 32,
    None = 0,
    NonRepudiation = 64,
  }
  public enum X509NameType {
    DnsFromAlternativeName = 4,
    DnsName = 3,
    EmailName = 1,
    SimpleName = 0,
    UpnName = 2,
    UrlName = 5,
  }
  public enum X509RevocationFlag {
    EndCertificateOnly = 0,
    EntireChain = 1,
    ExcludeRoot = 2,
  }
  public enum X509RevocationMode {
    NoCheck = 0,
    Offline = 2,
    Online = 1,
  }
  public sealed partial class X509Store : System.IDisposable {
    public X509Store() { }
    public X509Store(System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) { }
    public X509Store(string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) { }
    public System.Security.Cryptography.X509Certificates.X509Certificate2Collection Certificates { get { return default(System.Security.Cryptography.X509Certificates.X509Certificate2Collection); } }
    public System.Security.Cryptography.X509Certificates.StoreLocation Location { get { return default(System.Security.Cryptography.X509Certificates.StoreLocation); } }
    public string Name { get { return default(string); } }
    public void Add(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { }
    public void Dispose() { }
    public void Open(System.Security.Cryptography.X509Certificates.OpenFlags flags) { }
    public void Remove(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { }
  }
  public sealed partial class X509SubjectKeyIdentifierExtension : System.Security.Cryptography.X509Certificates.X509Extension {
    public X509SubjectKeyIdentifierExtension() { }
    public X509SubjectKeyIdentifierExtension(byte[] subjectKeyIdentifier, bool critical) { }
    public X509SubjectKeyIdentifierExtension(System.Security.Cryptography.AsnEncodedData encodedSubjectKeyIdentifier, bool critical) { }
    public X509SubjectKeyIdentifierExtension(System.Security.Cryptography.X509Certificates.PublicKey key, bool critical) { }
    public X509SubjectKeyIdentifierExtension(System.Security.Cryptography.X509Certificates.PublicKey key, System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm algorithm, bool critical) { }
    public X509SubjectKeyIdentifierExtension(string subjectKeyIdentifier, bool critical) { }
    public string SubjectKeyIdentifier { get { return default(string); } }
    public override void CopyFrom(System.Security.Cryptography.AsnEncodedData asnEncodedData) { }
  }
  public enum X509SubjectKeyIdentifierHashAlgorithm {
    CapiSha1 = 2,
    Sha1 = 0,
    ShortSha1 = 1,
  }
  [System.FlagsAttribute]
  public enum X509VerificationFlags {
    AllFlags = 4095,
    AllowUnknownCertificateAuthority = 16,
    IgnoreCertificateAuthorityRevocationUnknown = 1024,
    IgnoreCtlNotTimeValid = 2,
    IgnoreCtlSignerRevocationUnknown = 512,
    IgnoreEndRevocationUnknown = 256,
    IgnoreInvalidBasicConstraints = 8,
    IgnoreInvalidName = 64,
    IgnoreInvalidPolicy = 128,
    IgnoreNotTimeNested = 4,
    IgnoreNotTimeValid = 1,
    IgnoreRootRevocationUnknown = 2048,
    IgnoreWrongUsage = 32,
    NoFlag = 0,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Security.Principal")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Security.Principal")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Security.Principal")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Security.Principal {
  public partial interface IIdentity {
    string AuthenticationType { get; }
    bool IsAuthenticated { get; }
    string Name { get; }
  }
  public partial interface IPrincipal {
    System.Security.Principal.IIdentity Identity { get; }
    bool IsInRole(string role);
  }
  public enum TokenImpersonationLevel {
    Anonymous = 1,
    Delegation = 4,
    Identification = 2,
    Impersonation = 3,
    None = 0,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Security.Principal.Windows")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Security.Principal.Windows")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Security.Principal.Windows")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace Microsoft.Win32.SafeHandles {
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class SafeAccessTokenHandle : System.Runtime.InteropServices.SafeHandle {
    public SafeAccessTokenHandle(System.IntPtr handle) : base (default(System.IntPtr), default(bool)) { }
    public static Microsoft.Win32.SafeHandles.SafeAccessTokenHandle InvalidHandle { [System.Security.SecurityCriticalAttribute]get { return default(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle); } }
    public override bool IsInvalid { [System.Security.SecurityCriticalAttribute]get { return default(bool); } }
    [System.Security.SecurityCriticalAttribute]
    protected override bool ReleaseHandle() { return default(bool); }
  }
}
namespace System.Security.Principal {
  public sealed partial class IdentityNotMappedException : System.Exception {
    public IdentityNotMappedException() { }
    public IdentityNotMappedException(string message) { }
    public IdentityNotMappedException(string message, System.Exception inner) { }
    public System.Security.Principal.IdentityReferenceCollection UnmappedIdentities { get { return default(System.Security.Principal.IdentityReferenceCollection); } }
  }
  public abstract partial class IdentityReference {
    internal IdentityReference() { }
    public abstract string Value { get; }
    public abstract override bool Equals(object o);
    public abstract override int GetHashCode();
    public abstract bool IsValidTargetType(System.Type targetType);
    public static bool operator ==(System.Security.Principal.IdentityReference left, System.Security.Principal.IdentityReference right) { return default(bool); }
    public static bool operator !=(System.Security.Principal.IdentityReference left, System.Security.Principal.IdentityReference right) { return default(bool); }
    public abstract override string ToString();
    public abstract System.Security.Principal.IdentityReference Translate(System.Type targetType);
  }
  public partial class IdentityReferenceCollection : System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>, System.Collections.Generic.IEnumerable<System.Security.Principal.IdentityReference>, System.Collections.IEnumerable {
    public IdentityReferenceCollection() { }
    public IdentityReferenceCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Security.Principal.IdentityReference this[int index] { get { return default(System.Security.Principal.IdentityReference); } set { } }
    bool System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.IsReadOnly { get { return default(bool); } }
    public void Add(System.Security.Principal.IdentityReference identity) { }
    public void Clear() { }
    public bool Contains(System.Security.Principal.IdentityReference identity) { return default(bool); }
    public void CopyTo(System.Security.Principal.IdentityReference[] array, int offset) { }
    public System.Collections.Generic.IEnumerator<System.Security.Principal.IdentityReference> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Security.Principal.IdentityReference>); }
    public bool Remove(System.Security.Principal.IdentityReference identity) { return default(bool); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public System.Security.Principal.IdentityReferenceCollection Translate(System.Type targetType) { return default(System.Security.Principal.IdentityReferenceCollection); }
    public System.Security.Principal.IdentityReferenceCollection Translate(System.Type targetType, bool forceSuccess) { return default(System.Security.Principal.IdentityReferenceCollection); }
  }
  public sealed partial class NTAccount : System.Security.Principal.IdentityReference {
    public NTAccount(string name) { }
    public NTAccount(string domainName, string accountName) { }
    public override string Value { get { return default(string); } }
    public override bool Equals(object o) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public override bool IsValidTargetType(System.Type targetType) { return default(bool); }
    public static bool operator ==(System.Security.Principal.NTAccount left, System.Security.Principal.NTAccount right) { return default(bool); }
    public static bool operator !=(System.Security.Principal.NTAccount left, System.Security.Principal.NTAccount right) { return default(bool); }
    public override string ToString() { return default(string); }
    public override System.Security.Principal.IdentityReference Translate(System.Type targetType) { return default(System.Security.Principal.IdentityReference); }
  }
  public sealed partial class SecurityIdentifier : System.Security.Principal.IdentityReference, System.IComparable<System.Security.Principal.SecurityIdentifier> {
    public static readonly int MaxBinaryLength;
    public static readonly int MinBinaryLength;
    public SecurityIdentifier(byte[] binaryForm, int offset) { }
    public SecurityIdentifier(System.IntPtr binaryForm) { }
    public SecurityIdentifier(System.Security.Principal.WellKnownSidType sidType, System.Security.Principal.SecurityIdentifier domainSid) { }
    public SecurityIdentifier(string sddlForm) { }
    public System.Security.Principal.SecurityIdentifier AccountDomainSid { get { return default(System.Security.Principal.SecurityIdentifier); } }
    public int BinaryLength { get { return default(int); } }
    public override string Value { get { return default(string); } }
    public int CompareTo(System.Security.Principal.SecurityIdentifier sid) { return default(int); }
    public override bool Equals(object o) { return default(bool); }
    public bool Equals(System.Security.Principal.SecurityIdentifier sid) { return default(bool); }
    public void GetBinaryForm(byte[] binaryForm, int offset) { }
    public override int GetHashCode() { return default(int); }
    public bool IsAccountSid() { return default(bool); }
    public bool IsEqualDomainSid(System.Security.Principal.SecurityIdentifier sid) { return default(bool); }
    public override bool IsValidTargetType(System.Type targetType) { return default(bool); }
    public bool IsWellKnown(System.Security.Principal.WellKnownSidType type) { return default(bool); }
    public static bool operator ==(System.Security.Principal.SecurityIdentifier left, System.Security.Principal.SecurityIdentifier right) { return default(bool); }
    public static bool operator !=(System.Security.Principal.SecurityIdentifier left, System.Security.Principal.SecurityIdentifier right) { return default(bool); }
    public override string ToString() { return default(string); }
    public override System.Security.Principal.IdentityReference Translate(System.Type targetType) { return default(System.Security.Principal.IdentityReference); }
  }
  [System.FlagsAttribute]
  public enum TokenAccessLevels {
    AdjustDefault = 128,
    AdjustGroups = 64,
    AdjustPrivileges = 32,
    AdjustSessionId = 256,
    AllAccess = 983551,
    AssignPrimary = 1,
    Duplicate = 2,
    Impersonate = 4,
    MaximumAllowed = 33554432,
    Query = 8,
    QuerySource = 16,
    Read = 131080,
    Write = 131296,
  }
  public enum WellKnownSidType {
    AccountAdministratorSid = 38,
    AccountCertAdminsSid = 46,
    AccountComputersSid = 44,
    AccountControllersSid = 45,
    AccountDomainAdminsSid = 41,
    AccountDomainGuestsSid = 43,
    AccountDomainUsersSid = 42,
    AccountEnterpriseAdminsSid = 48,
    AccountGuestSid = 39,
    AccountKrbtgtSid = 40,
    AccountPolicyAdminsSid = 49,
    AccountRasAndIasServersSid = 50,
    AccountSchemaAdminsSid = 47,
    AnonymousSid = 13,
    AuthenticatedUserSid = 17,
    BatchSid = 10,
    BuiltinAccountOperatorsSid = 30,
    BuiltinAdministratorsSid = 26,
    BuiltinAuthorizationAccessSid = 59,
    BuiltinBackupOperatorsSid = 33,
    BuiltinDomainSid = 25,
    BuiltinGuestsSid = 28,
    BuiltinIncomingForestTrustBuildersSid = 56,
    BuiltinNetworkConfigurationOperatorsSid = 37,
    BuiltinPerformanceLoggingUsersSid = 58,
    BuiltinPerformanceMonitoringUsersSid = 57,
    BuiltinPowerUsersSid = 29,
    BuiltinPreWindows2000CompatibleAccessSid = 35,
    BuiltinPrintOperatorsSid = 32,
    BuiltinRemoteDesktopUsersSid = 36,
    BuiltinReplicatorSid = 34,
    BuiltinSystemOperatorsSid = 31,
    BuiltinUsersSid = 27,
    CreatorGroupServerSid = 6,
    CreatorGroupSid = 4,
    CreatorOwnerServerSid = 5,
    CreatorOwnerSid = 3,
    DialupSid = 8,
    DigestAuthenticationSid = 52,
    EnterpriseControllersSid = 15,
    InteractiveSid = 11,
    LocalServiceSid = 23,
    LocalSid = 2,
    LocalSystemSid = 22,
    LogonIdsSid = 21,
    MaxDefined = 60,
    NetworkServiceSid = 24,
    NetworkSid = 9,
    NTAuthoritySid = 7,
    NtlmAuthenticationSid = 51,
    NullSid = 0,
    OtherOrganizationSid = 55,
    ProxySid = 14,
    RemoteLogonIdSid = 20,
    RestrictedCodeSid = 18,
    SChannelAuthenticationSid = 53,
    SelfSid = 16,
    ServiceSid = 12,
    TerminalServerSid = 19,
    ThisOrganizationSid = 54,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WorldSid = 1,
  }
  public enum WindowsBuiltInRole {
    AccountOperator = 548,
    Administrator = 544,
    BackupOperator = 551,
    Guest = 546,
    PowerUser = 547,
    PrintOperator = 550,
    Replicator = 552,
    SystemOperator = 549,
    User = 545,
  }
  public partial class WindowsIdentity : System.Security.Claims.ClaimsIdentity, System.IDisposable {
    public const string DefaultIssuer = "AD AUTHORITY";
    public WindowsIdentity(System.IntPtr userToken) { }
    public WindowsIdentity(System.IntPtr userToken, string type) { }
    public WindowsIdentity(string sUserPrincipalName) { }
    public Microsoft.Win32.SafeHandles.SafeAccessTokenHandle AccessToken { [System.Security.SecurityCriticalAttribute]get { return default(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle); } }
    public sealed override string AuthenticationType { get { return default(string); } }
    public override System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get { return default(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>); } }
    public System.Security.Principal.IdentityReferenceCollection Groups { get { return default(System.Security.Principal.IdentityReferenceCollection); } }
    public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get { return default(System.Security.Principal.TokenImpersonationLevel); } }
    public virtual bool IsAnonymous { get { return default(bool); } }
    public override bool IsAuthenticated { get { return default(bool); } }
    public virtual bool IsGuest { get { return default(bool); } }
    public virtual bool IsSystem { get { return default(bool); } }
    public override string Name { get { return default(string); } }
    public System.Security.Principal.SecurityIdentifier Owner { get { return default(System.Security.Principal.SecurityIdentifier); } }
    public System.Security.Principal.SecurityIdentifier User { get { return default(System.Security.Principal.SecurityIdentifier); } }
    public override System.Security.Claims.ClaimsIdentity Clone() { return default(System.Security.Claims.ClaimsIdentity); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public static System.Security.Principal.WindowsIdentity GetAnonymous() { return default(System.Security.Principal.WindowsIdentity); }
    public static System.Security.Principal.WindowsIdentity GetCurrent() { return default(System.Security.Principal.WindowsIdentity); }
    public static System.Security.Principal.WindowsIdentity GetCurrent(bool ifImpersonating) { return default(System.Security.Principal.WindowsIdentity); }
    public static System.Security.Principal.WindowsIdentity GetCurrent(System.Security.Principal.TokenAccessLevels desiredAccess) { return default(System.Security.Principal.WindowsIdentity); }
    public static void RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, System.Action action) { }
    public static T RunImpersonated<T>(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, System.Func<T> func) { return default(T); }
  }
  public partial class WindowsPrincipal : System.Security.Claims.ClaimsPrincipal {
    public WindowsPrincipal(System.Security.Principal.WindowsIdentity ntIdentity) { }
    public override System.Security.Principal.IIdentity Identity { get { return default(System.Security.Principal.IIdentity); } }
    public virtual bool IsInRole(int rid) { return default(bool); }
    public virtual bool IsInRole(System.Security.Principal.SecurityIdentifier sid) { return default(bool); }
    public virtual bool IsInRole(System.Security.Principal.WindowsBuiltInRole role) { return default(bool); }
    public override bool IsInRole(string role) { return default(bool); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Security.SecureString")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Security.SecureString")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Security.SecureString")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Security {
  public sealed partial class SecureString : System.IDisposable {
    public SecureString() { }
    [System.CLSCompliantAttribute(false)]
    public unsafe SecureString(char* value, int length) { }
    public int Length { get { return default(int); } }
    public void AppendChar(char c) { }
    public void Clear() { }
    public System.Security.SecureString Copy() { return default(System.Security.SecureString); }
    public void Dispose() { }
    public void InsertAt(int index, char c) { }
    public bool IsReadOnly() { return default(bool); }
    public void MakeReadOnly() { }
    public void RemoveAt(int index) { }
    public void SetAt(int index, char c) { }
  }
  public static partial class SecureStringMarshal {
    public static System.IntPtr SecureStringToCoTaskMemAnsi(System.Security.SecureString s) { return default(System.IntPtr); }
    public static System.IntPtr SecureStringToCoTaskMemUnicode(System.Security.SecureString s) { return default(System.IntPtr); }
    public static System.IntPtr SecureStringToGlobalAllocAnsi(System.Security.SecureString s) { return default(System.IntPtr); }
    public static System.IntPtr SecureStringToGlobalAllocUnicode(System.Security.SecureString s) { return default(System.IntPtr); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.ServiceProcess.ServiceController")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.ServiceProcess.ServiceController")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.ServiceProcess.ServiceController")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.ServiceProcess {
  public partial class ServiceController : System.IDisposable {
    public ServiceController(string name) { }
    public ServiceController(string name, string machineName) { }
    public bool CanPauseAndContinue { get { return default(bool); } }
    public bool CanShutdown { get { return default(bool); } }
    public bool CanStop { get { return default(bool); } }
    public System.ServiceProcess.ServiceController[] DependentServices { get { return default(System.ServiceProcess.ServiceController[]); } }
    public string DisplayName { get { return default(string); } }
    public string MachineName { get { return default(string); } }
    public System.Runtime.InteropServices.SafeHandle ServiceHandle { get { return default(System.Runtime.InteropServices.SafeHandle); } }
    public string ServiceName { get { return default(string); } }
    public System.ServiceProcess.ServiceController[] ServicesDependedOn { get { return default(System.ServiceProcess.ServiceController[]); } }
    public System.ServiceProcess.ServiceType ServiceType { get { return default(System.ServiceProcess.ServiceType); } }
    public System.ServiceProcess.ServiceStartMode StartType { get { return default(System.ServiceProcess.ServiceStartMode); } }
    public System.ServiceProcess.ServiceControllerStatus Status { get { return default(System.ServiceProcess.ServiceControllerStatus); } }
    public void Continue() { }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public static System.ServiceProcess.ServiceController[] GetDevices() { return default(System.ServiceProcess.ServiceController[]); }
    public static System.ServiceProcess.ServiceController[] GetDevices(string machineName) { return default(System.ServiceProcess.ServiceController[]); }
    public static System.ServiceProcess.ServiceController[] GetServices() { return default(System.ServiceProcess.ServiceController[]); }
    public static System.ServiceProcess.ServiceController[] GetServices(string machineName) { return default(System.ServiceProcess.ServiceController[]); }
    public void Pause() { }
    public void Refresh() { }
    public void Start() { }
    public void Start(string[] args) { }
    public void Stop() { }
    public void WaitForStatus(System.ServiceProcess.ServiceControllerStatus desiredStatus) { }
    public void WaitForStatus(System.ServiceProcess.ServiceControllerStatus desiredStatus, System.TimeSpan timeout) { }
  }
  public enum ServiceControllerStatus {
    ContinuePending = 5,
    Paused = 7,
    PausePending = 6,
    Running = 4,
    StartPending = 2,
    Stopped = 1,
    StopPending = 3,
  }
  public enum ServiceStartMode {
    Automatic = 2,
    Boot = 0,
    Disabled = 4,
    Manual = 3,
    System = 1,
  }
  [System.FlagsAttribute]
  public enum ServiceType {
    Adapter = 4,
    FileSystemDriver = 2,
    InteractiveProcess = 256,
    KernelDriver = 1,
    RecognizerDriver = 8,
    Win32OwnProcess = 16,
    Win32ShareProcess = 32,
  }
  public partial class TimeoutException : System.Exception {
    public TimeoutException() { }
    public TimeoutException(string message) { }
    public TimeoutException(string message, System.Exception innerException) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Text.Encoding")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Text.Encoding")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Text.Encoding")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Text {
  public abstract partial class Decoder {
    protected Decoder() { }
    public System.Text.DecoderFallback Fallback { get { return default(System.Text.DecoderFallback); } set { } }
    public System.Text.DecoderFallbackBuffer FallbackBuffer { get { return default(System.Text.DecoderFallbackBuffer); } }
    public virtual void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed) { bytesUsed = default(int); charsUsed = default(int); completed = default(bool); }
    public abstract int GetCharCount(byte[] bytes, int index, int count);
    public virtual int GetCharCount(byte[] bytes, int index, int count, bool flush) { return default(int); }
    public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
    public virtual int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush) { return default(int); }
    public virtual void Reset() { }
  }
  public sealed partial class DecoderExceptionFallback : System.Text.DecoderFallback {
    public DecoderExceptionFallback() { }
    public override int MaxCharCount { get { return default(int); } }
    public override System.Text.DecoderFallbackBuffer CreateFallbackBuffer() { return default(System.Text.DecoderFallbackBuffer); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public abstract partial class DecoderFallback {
    protected DecoderFallback() { }
    public static System.Text.DecoderFallback ExceptionFallback { get { return default(System.Text.DecoderFallback); } }
    public abstract int MaxCharCount { get; }
    public static System.Text.DecoderFallback ReplacementFallback { get { return default(System.Text.DecoderFallback); } }
    public abstract System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
  }
  public abstract partial class DecoderFallbackBuffer {
    protected DecoderFallbackBuffer() { }
    public abstract int Remaining { get; }
    public abstract bool Fallback(byte[] bytesUnknown, int index);
    public abstract char GetNextChar();
    public abstract bool MovePrevious();
    public virtual void Reset() { }
  }
  public sealed partial class DecoderFallbackException : System.ArgumentException {
    public DecoderFallbackException() { }
    public DecoderFallbackException(string message) { }
    public DecoderFallbackException(string message, byte[] bytesUnknown, int index) { }
    public DecoderFallbackException(string message, System.Exception innerException) { }
    public byte[] BytesUnknown { get { return default(byte[]); } }
    public int Index { get { return default(int); } }
  }
  public sealed partial class DecoderReplacementFallback : System.Text.DecoderFallback {
    public DecoderReplacementFallback() { }
    public DecoderReplacementFallback(string replacement) { }
    public string DefaultString { get { return default(string); } }
    public override int MaxCharCount { get { return default(int); } }
    public override System.Text.DecoderFallbackBuffer CreateFallbackBuffer() { return default(System.Text.DecoderFallbackBuffer); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public abstract partial class Encoder {
    protected Encoder() { }
    public System.Text.EncoderFallback Fallback { get { return default(System.Text.EncoderFallback); } set { } }
    public System.Text.EncoderFallbackBuffer FallbackBuffer { get { return default(System.Text.EncoderFallbackBuffer); } }
    public virtual void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed) { charsUsed = default(int); bytesUsed = default(int); completed = default(bool); }
    public abstract int GetByteCount(char[] chars, int index, int count, bool flush);
    public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
    public virtual void Reset() { }
  }
  public sealed partial class EncoderExceptionFallback : System.Text.EncoderFallback {
    public EncoderExceptionFallback() { }
    public override int MaxCharCount { get { return default(int); } }
    public override System.Text.EncoderFallbackBuffer CreateFallbackBuffer() { return default(System.Text.EncoderFallbackBuffer); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public abstract partial class EncoderFallback {
    protected EncoderFallback() { }
    public static System.Text.EncoderFallback ExceptionFallback { get { return default(System.Text.EncoderFallback); } }
    public abstract int MaxCharCount { get; }
    public static System.Text.EncoderFallback ReplacementFallback { get { return default(System.Text.EncoderFallback); } }
    public abstract System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
  }
  public abstract partial class EncoderFallbackBuffer {
    protected EncoderFallbackBuffer() { }
    public abstract int Remaining { get; }
    public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
    public abstract bool Fallback(char charUnknown, int index);
    public abstract char GetNextChar();
    public abstract bool MovePrevious();
    public virtual void Reset() { }
  }
  public sealed partial class EncoderFallbackException : System.ArgumentException {
    public EncoderFallbackException() { }
    public EncoderFallbackException(string message) { }
    public EncoderFallbackException(string message, System.Exception innerException) { }
    public char CharUnknown { get { return default(char); } }
    public char CharUnknownHigh { get { return default(char); } }
    public char CharUnknownLow { get { return default(char); } }
    public int Index { get { return default(int); } }
    public bool IsUnknownSurrogate() { return default(bool); }
  }
  public sealed partial class EncoderReplacementFallback : System.Text.EncoderFallback {
    public EncoderReplacementFallback() { }
    public EncoderReplacementFallback(string replacement) { }
    public string DefaultString { get { return default(string); } }
    public override int MaxCharCount { get { return default(int); } }
    public override System.Text.EncoderFallbackBuffer CreateFallbackBuffer() { return default(System.Text.EncoderFallbackBuffer); }
    public override bool Equals(object value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public abstract partial class Encoding {
    protected Encoding() { }
    protected Encoding(int codePage) { }
    protected Encoding(int codePage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback) { }
    public static System.Text.Encoding ASCII { get { return default(System.Text.Encoding); } }
    public static System.Text.Encoding BigEndianUnicode { get { return default(System.Text.Encoding); } }
    public virtual int CodePage { get { return default(int); } }
    public System.Text.DecoderFallback DecoderFallback { get { return default(System.Text.DecoderFallback); } }
    public System.Text.EncoderFallback EncoderFallback { get { return default(System.Text.EncoderFallback); } }
    public virtual string EncodingName { get { return default(string); } }
    public virtual bool IsSingleByte { get { return default(bool); } }
    public static System.Text.Encoding Unicode { get { return default(System.Text.Encoding); } }
    public static System.Text.Encoding UTF32 { get { return default(System.Text.Encoding); } }
    public static System.Text.Encoding UTF7 { get { return default(System.Text.Encoding); } }
    public static System.Text.Encoding UTF8 { get { return default(System.Text.Encoding); } }
    public virtual string WebName { get { return default(string); } }
    public virtual object Clone() { return default(object); }
    public static byte[] Convert(System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes) { return default(byte[]); }
    public static byte[] Convert(System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes, int index, int count) { return default(byte[]); }
    public override bool Equals(object value) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe virtual int GetByteCount(char* chars, int count) { return default(int); }
    public virtual int GetByteCount(char[] chars) { return default(int); }
    public abstract int GetByteCount(char[] chars, int index, int count);
    public virtual int GetByteCount(string s) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe virtual int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { return default(int); }
    public virtual byte[] GetBytes(char[] chars) { return default(byte[]); }
    public virtual byte[] GetBytes(char[] chars, int index, int count) { return default(byte[]); }
    public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
    public virtual byte[] GetBytes(string s) { return default(byte[]); }
    public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe virtual int GetCharCount(byte* bytes, int count) { return default(int); }
    public virtual int GetCharCount(byte[] bytes) { return default(int); }
    public abstract int GetCharCount(byte[] bytes, int index, int count);
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe virtual int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { return default(int); }
    public virtual char[] GetChars(byte[] bytes) { return default(char[]); }
    public virtual char[] GetChars(byte[] bytes, int index, int count) { return default(char[]); }
    public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
    public virtual System.Text.Decoder GetDecoder() { return default(System.Text.Decoder); }
    public virtual System.Text.Encoder GetEncoder() { return default(System.Text.Encoder); }
    public static System.Text.Encoding GetEncoding(int codepage) { return default(System.Text.Encoding); }
    public static System.Text.Encoding GetEncoding(int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback) { return default(System.Text.Encoding); }
    public static System.Text.Encoding GetEncoding(string name) { return default(System.Text.Encoding); }
    public static System.Text.Encoding GetEncoding(string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback) { return default(System.Text.Encoding); }
    public override int GetHashCode() { return default(int); }
    public abstract int GetMaxByteCount(int charCount);
    public abstract int GetMaxCharCount(int byteCount);
    public virtual byte[] GetPreamble() { return default(byte[]); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe string GetString(byte* bytes, int byteCount) { return default(string); }
    public virtual string GetString(byte[] bytes) { return default(string); }
    public virtual string GetString(byte[] bytes, int index, int count) { return default(string); }
    [System.Security.SecurityCriticalAttribute]
    public static void RegisterProvider(System.Text.EncodingProvider provider) { }
  }
  public abstract partial class EncodingProvider {
    public EncodingProvider() { }
    public abstract System.Text.Encoding GetEncoding(int codepage);
    public virtual System.Text.Encoding GetEncoding(int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback) { return default(System.Text.Encoding); }
    public abstract System.Text.Encoding GetEncoding(string name);
    public virtual System.Text.Encoding GetEncoding(string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback) { return default(System.Text.Encoding); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Text.Encoding.CodePages")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Text.Encoding.CodePages")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Text.Encoding.CodePages")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Text {
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class CodePagesEncodingProvider {
    internal CodePagesEncodingProvider() { }
    public static System.Text.EncodingProvider Instance { get { return default(System.Text.EncodingProvider); } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Text.Encoding.Extensions")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Text.Encoding.Extensions")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Text.Encoding.Extensions")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Text {
  public partial class ASCIIEncoding : System.Text.Encoding {
    public ASCIIEncoding() { }
    public override bool IsSingleByte { get { return default(bool); } }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetByteCount(char* chars, int count) { return default(int); }
    public override int GetByteCount(char[] chars, int index, int count) { return default(int); }
    public override int GetByteCount(string chars) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { return default(int); }
    public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { return default(int); }
    public override int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetCharCount(byte* bytes, int count) { return default(int); }
    public override int GetCharCount(byte[] bytes, int index, int count) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { return default(int); }
    public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { return default(int); }
    public override System.Text.Decoder GetDecoder() { return default(System.Text.Decoder); }
    public override System.Text.Encoder GetEncoder() { return default(System.Text.Encoder); }
    public override int GetMaxByteCount(int charCount) { return default(int); }
    public override int GetMaxCharCount(int byteCount) { return default(int); }
    public override string GetString(byte[] bytes, int byteIndex, int byteCount) { return default(string); }
  }
  public partial class UnicodeEncoding : System.Text.Encoding {
    public UnicodeEncoding() { }
    public UnicodeEncoding(bool bigEndian, bool byteOrderMark) { }
    public UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) { }
    public override bool Equals(object value) { return default(bool); }
    public override int GetByteCount(char[] chars, int index, int count) { return default(int); }
    public override int GetByteCount(string s) { return default(int); }
    public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { return default(int); }
    public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { return default(int); }
    public override int GetCharCount(byte[] bytes, int index, int count) { return default(int); }
    public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { return default(int); }
    public override System.Text.Decoder GetDecoder() { return default(System.Text.Decoder); }
    public override System.Text.Encoder GetEncoder() { return default(System.Text.Encoder); }
    public override int GetHashCode() { return default(int); }
    public override int GetMaxByteCount(int charCount) { return default(int); }
    public override int GetMaxCharCount(int byteCount) { return default(int); }
    public override byte[] GetPreamble() { return default(byte[]); }
    public override string GetString(byte[] bytes, int index, int count) { return default(string); }
  }
  public sealed partial class UTF32Encoding : System.Text.Encoding {
    public UTF32Encoding() { }
    public UTF32Encoding(bool bigEndian, bool byteOrderMark) { }
    public UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters) { }
    public override bool Equals(object value) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetByteCount(char* chars, int count) { return default(int); }
    public override int GetByteCount(char[] chars, int index, int count) { return default(int); }
    public override int GetByteCount(string s) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { return default(int); }
    public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { return default(int); }
    public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetCharCount(byte* bytes, int count) { return default(int); }
    public override int GetCharCount(byte[] bytes, int index, int count) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { return default(int); }
    public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { return default(int); }
    public override System.Text.Decoder GetDecoder() { return default(System.Text.Decoder); }
    public override System.Text.Encoder GetEncoder() { return default(System.Text.Encoder); }
    public override int GetHashCode() { return default(int); }
    public override int GetMaxByteCount(int charCount) { return default(int); }
    public override int GetMaxCharCount(int byteCount) { return default(int); }
    public override byte[] GetPreamble() { return default(byte[]); }
    public override string GetString(byte[] bytes, int index, int count) { return default(string); }
  }
  public partial class UTF7Encoding : System.Text.Encoding {
    public UTF7Encoding() { }
    public UTF7Encoding(bool allowOptionals) { }
    public override bool Equals(object value) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetByteCount(char* chars, int count) { return default(int); }
    public override int GetByteCount(char[] chars, int index, int count) { return default(int); }
    public override int GetByteCount(string s) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { return default(int); }
    public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { return default(int); }
    public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetCharCount(byte* bytes, int count) { return default(int); }
    public override int GetCharCount(byte[] bytes, int index, int count) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { return default(int); }
    public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { return default(int); }
    public override System.Text.Decoder GetDecoder() { return default(System.Text.Decoder); }
    public override System.Text.Encoder GetEncoder() { return default(System.Text.Encoder); }
    public override int GetHashCode() { return default(int); }
    public override int GetMaxByteCount(int charCount) { return default(int); }
    public override int GetMaxCharCount(int byteCount) { return default(int); }
    public override string GetString(byte[] bytes, int index, int count) { return default(string); }
  }
  public partial class UTF8Encoding : System.Text.Encoding {
    public UTF8Encoding() { }
    public UTF8Encoding(bool encoderShouldEmitUTF8Identifier) { }
    public UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) { }
    public override bool Equals(object value) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetByteCount(char* chars, int count) { return default(int); }
    public override int GetByteCount(char[] chars, int index, int count) { return default(int); }
    public override int GetByteCount(string chars) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { return default(int); }
    public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { return default(int); }
    public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetCharCount(byte* bytes, int count) { return default(int); }
    public override int GetCharCount(byte[] bytes, int index, int count) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { return default(int); }
    public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { return default(int); }
    public override System.Text.Decoder GetDecoder() { return default(System.Text.Decoder); }
    public override System.Text.Encoder GetEncoder() { return default(System.Text.Encoder); }
    public override int GetHashCode() { return default(int); }
    public override int GetMaxByteCount(int charCount) { return default(int); }
    public override int GetMaxCharCount(int byteCount) { return default(int); }
    public override byte[] GetPreamble() { return default(byte[]); }
    public override string GetString(byte[] bytes, int index, int count) { return default(string); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Text.RegularExpressions")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Text.RegularExpressions")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Text.RegularExpressions")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Text.RegularExpressions {
  public partial class Capture {
    internal Capture() { }
    public int Index { get { return default(int); } }
    public int Length { get { return default(int); } }
    public string Value { get { return default(string); } }
    public override string ToString() { return default(string); }
  }
  public partial class CaptureCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    internal CaptureCollection() { }
    public int Count { get { return default(int); } }
    public System.Text.RegularExpressions.Capture this[int i] { get { return default(System.Text.RegularExpressions.Capture); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex) { }
  }
  public partial class Group : System.Text.RegularExpressions.Capture {
    internal Group() { }
    public System.Text.RegularExpressions.CaptureCollection Captures { get { return default(System.Text.RegularExpressions.CaptureCollection); } }
    public bool Success { get { return default(bool); } }
  }
  public partial class GroupCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    internal GroupCollection() { }
    public int Count { get { return default(int); } }
    public System.Text.RegularExpressions.Group this[int groupnum] { get { return default(System.Text.RegularExpressions.Group); } }
    public System.Text.RegularExpressions.Group this[string groupname] { get { return default(System.Text.RegularExpressions.Group); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex) { }
  }
  public partial class Match : System.Text.RegularExpressions.Group {
    internal Match() { }
    public static System.Text.RegularExpressions.Match Empty { get { return default(System.Text.RegularExpressions.Match); } }
    public virtual System.Text.RegularExpressions.GroupCollection Groups { get { return default(System.Text.RegularExpressions.GroupCollection); } }
    public System.Text.RegularExpressions.Match NextMatch() { return default(System.Text.RegularExpressions.Match); }
    public virtual string Result(string replacement) { return default(string); }
  }
  public partial class MatchCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    internal MatchCollection() { }
    public int Count { get { return default(int); } }
    public virtual System.Text.RegularExpressions.Match this[int i] { get { return default(System.Text.RegularExpressions.Match); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex) { }
  }
  public delegate string MatchEvaluator(System.Text.RegularExpressions.Match match);
  public partial class Regex {
    protected internal int capsize;
    protected internal string[] capslist;
    protected internal System.Text.RegularExpressions.RegexRunnerFactory factory;
    public static readonly System.TimeSpan InfiniteMatchTimeout;
    protected internal System.TimeSpan internalMatchTimeout;
    protected internal string pattern;
    protected internal System.Text.RegularExpressions.RegexOptions roptions;
    protected Regex() { }
    public Regex(string pattern) { }
    public Regex(string pattern, System.Text.RegularExpressions.RegexOptions options) { }
    public Regex(string pattern, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) { }
    public static int CacheSize { get { return default(int); } set { } }
    protected System.Collections.IDictionary CapNames { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Collections.IDictionary); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    protected System.Collections.IDictionary Caps { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Collections.IDictionary); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    public System.TimeSpan MatchTimeout { get { return default(System.TimeSpan); } }
    public System.Text.RegularExpressions.RegexOptions Options { get { return default(System.Text.RegularExpressions.RegexOptions); } }
    public bool RightToLeft { get { return default(bool); } }
    public static string Escape(string str) { return default(string); }
    public string[] GetGroupNames() { return default(string[]); }
    public int[] GetGroupNumbers() { return default(int[]); }
    public string GroupNameFromNumber(int i) { return default(string); }
    public int GroupNumberFromName(string name) { return default(int); }
    protected void InitializeReferences() { }
    public bool IsMatch(string input) { return default(bool); }
    public bool IsMatch(string input, int startat) { return default(bool); }
    public static bool IsMatch(string input, string pattern) { return default(bool); }
    public static bool IsMatch(string input, string pattern, System.Text.RegularExpressions.RegexOptions options) { return default(bool); }
    public static bool IsMatch(string input, string pattern, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) { return default(bool); }
    public System.Text.RegularExpressions.Match Match(string input) { return default(System.Text.RegularExpressions.Match); }
    public System.Text.RegularExpressions.Match Match(string input, int startat) { return default(System.Text.RegularExpressions.Match); }
    public System.Text.RegularExpressions.Match Match(string input, int beginning, int length) { return default(System.Text.RegularExpressions.Match); }
    public static System.Text.RegularExpressions.Match Match(string input, string pattern) { return default(System.Text.RegularExpressions.Match); }
    public static System.Text.RegularExpressions.Match Match(string input, string pattern, System.Text.RegularExpressions.RegexOptions options) { return default(System.Text.RegularExpressions.Match); }
    public static System.Text.RegularExpressions.Match Match(string input, string pattern, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) { return default(System.Text.RegularExpressions.Match); }
    public System.Text.RegularExpressions.MatchCollection Matches(string input) { return default(System.Text.RegularExpressions.MatchCollection); }
    public System.Text.RegularExpressions.MatchCollection Matches(string input, int startat) { return default(System.Text.RegularExpressions.MatchCollection); }
    public static System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern) { return default(System.Text.RegularExpressions.MatchCollection); }
    public static System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, System.Text.RegularExpressions.RegexOptions options) { return default(System.Text.RegularExpressions.MatchCollection); }
    public static System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) { return default(System.Text.RegularExpressions.MatchCollection); }
    public string Replace(string input, string replacement) { return default(string); }
    public string Replace(string input, string replacement, int count) { return default(string); }
    public string Replace(string input, string replacement, int count, int startat) { return default(string); }
    public static string Replace(string input, string pattern, string replacement) { return default(string); }
    public static string Replace(string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options) { return default(string); }
    public static string Replace(string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) { return default(string); }
    public static string Replace(string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator) { return default(string); }
    public static string Replace(string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options) { return default(string); }
    public static string Replace(string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) { return default(string); }
    public string Replace(string input, System.Text.RegularExpressions.MatchEvaluator evaluator) { return default(string); }
    public string Replace(string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count) { return default(string); }
    public string Replace(string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count, int startat) { return default(string); }
    public string[] Split(string input) { return default(string[]); }
    public string[] Split(string input, int count) { return default(string[]); }
    public string[] Split(string input, int count, int startat) { return default(string[]); }
    public static string[] Split(string input, string pattern) { return default(string[]); }
    public static string[] Split(string input, string pattern, System.Text.RegularExpressions.RegexOptions options) { return default(string[]); }
    public static string[] Split(string input, string pattern, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) { return default(string[]); }
    public override string ToString() { return default(string); }
    public static string Unescape(string str) { return default(string); }
    protected internal static void ValidateMatchTimeout(System.TimeSpan matchTimeout) { }
  }
  public partial class RegexMatchTimeoutException : System.TimeoutException {
    public RegexMatchTimeoutException() { }
    public RegexMatchTimeoutException(string message) { }
    public RegexMatchTimeoutException(string message, System.Exception inner) { }
    public RegexMatchTimeoutException(string regexInput, string regexPattern, System.TimeSpan matchTimeout) { }
    public string Input { get { return default(string); } }
    public System.TimeSpan MatchTimeout { get { return default(System.TimeSpan); } }
    public string Pattern { get { return default(string); } }
  }
  [System.FlagsAttribute]
  public enum RegexOptions {
    Compiled = 8,
    CultureInvariant = 512,
    ECMAScript = 256,
    ExplicitCapture = 4,
    IgnoreCase = 1,
    IgnorePatternWhitespace = 32,
    Multiline = 2,
    None = 0,
    RightToLeft = 64,
    Singleline = 16,
  }
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public abstract partial class RegexRunner {
    protected internal int[] runcrawl;
    protected internal int runcrawlpos;
    protected internal System.Text.RegularExpressions.Match runmatch;
    protected internal System.Text.RegularExpressions.Regex runregex;
    protected internal int[] runstack;
    protected internal int runstackpos;
    protected internal string runtext;
    protected internal int runtextbeg;
    protected internal int runtextend;
    protected internal int runtextpos;
    protected internal int runtextstart;
    protected internal int[] runtrack;
    protected internal int runtrackcount;
    protected internal int runtrackpos;
    protected internal RegexRunner() { }
    protected void Capture(int capnum, int start, int end) { }
    protected static bool CharInClass(char ch, string charClass) { return default(bool); }
    protected static bool CharInSet(char ch, string @set, string category) { return default(bool); }
    protected void CheckTimeout() { }
    protected void Crawl(int i) { }
    protected int Crawlpos() { return default(int); }
    protected void DoubleCrawl() { }
    protected void DoubleStack() { }
    protected void DoubleTrack() { }
    protected void EnsureStorage() { }
    protected abstract bool FindFirstChar();
    protected abstract void Go();
    protected abstract void InitTrackCount();
    protected bool IsBoundary(int index, int startpos, int endpos) { return default(bool); }
    protected bool IsECMABoundary(int index, int startpos, int endpos) { return default(bool); }
    protected bool IsMatched(int cap) { return default(bool); }
    protected int MatchIndex(int cap) { return default(int); }
    protected int MatchLength(int cap) { return default(int); }
    protected int Popcrawl() { return default(int); }
    protected internal System.Text.RegularExpressions.Match Scan(System.Text.RegularExpressions.Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick) { return default(System.Text.RegularExpressions.Match); }
    protected internal System.Text.RegularExpressions.Match Scan(System.Text.RegularExpressions.Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, System.TimeSpan timeout) { return default(System.Text.RegularExpressions.Match); }
    protected void TransferCapture(int capnum, int uncapnum, int start, int end) { }
    protected void Uncapture() { }
  }
  public abstract partial class RegexRunnerFactory {
    protected RegexRunnerFactory() { }
    protected internal abstract System.Text.RegularExpressions.RegexRunner CreateInstance();
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Threading")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Threading")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Threading")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Threading {
  public partial class AbandonedMutexException : System.Exception {
    public AbandonedMutexException() { }
    public AbandonedMutexException(int location, System.Threading.WaitHandle handle) { }
    public AbandonedMutexException(string message) { }
    public AbandonedMutexException(string message, System.Exception inner) { }
    public AbandonedMutexException(string message, System.Exception inner, int location, System.Threading.WaitHandle handle) { }
    public AbandonedMutexException(string message, int location, System.Threading.WaitHandle handle) { }
    public System.Threading.Mutex Mutex { get { return default(System.Threading.Mutex); } }
    public int MutexIndex { get { return default(int); } }
  }
  public sealed partial class AsyncLocal<T> {
    public AsyncLocal() { }
    [System.Security.SecurityCriticalAttribute]
    public AsyncLocal(System.Action<System.Threading.AsyncLocalValueChangedArgs<T>> valueChangedHandler) { }
    public T Value { get { return default(T); } set { } }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct AsyncLocalValueChangedArgs<T> {
    public T CurrentValue { get { return default(T); } }
    public T PreviousValue { get { return default(T); } }
    public bool ThreadContextChanged { get { return default(bool); } }
  }
  public sealed partial class AutoResetEvent : System.Threading.EventWaitHandle {
    public AutoResetEvent(bool initialState) : base (default(bool), default(System.Threading.EventResetMode)) { }
  }
  public partial class Barrier : System.IDisposable {
    public Barrier(int participantCount) { }
    public Barrier(int participantCount, System.Action<System.Threading.Barrier> postPhaseAction) { }
    public long CurrentPhaseNumber { get { return default(long); } }
    public int ParticipantCount { get { return default(int); } }
    public int ParticipantsRemaining { get { return default(int); } }
    public long AddParticipant() { return default(long); }
    public long AddParticipants(int participantCount) { return default(long); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public void RemoveParticipant() { }
    public void RemoveParticipants(int participantCount) { }
    public void SignalAndWait() { }
    public bool SignalAndWait(int millisecondsTimeout) { return default(bool); }
    public bool SignalAndWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) { return default(bool); }
    public void SignalAndWait(System.Threading.CancellationToken cancellationToken) { }
    public bool SignalAndWait(System.TimeSpan timeout) { return default(bool); }
    public bool SignalAndWait(System.TimeSpan timeout, System.Threading.CancellationToken cancellationToken) { return default(bool); }
  }
  public partial class BarrierPostPhaseException : System.Exception {
    public BarrierPostPhaseException() { }
    public BarrierPostPhaseException(System.Exception innerException) { }
    public BarrierPostPhaseException(string message) { }
    public BarrierPostPhaseException(string message, System.Exception innerException) { }
  }
  public delegate void ContextCallback(object state);
  public partial class CountdownEvent : System.IDisposable {
    public CountdownEvent(int initialCount) { }
    public int CurrentCount { get { return default(int); } }
    public int InitialCount { get { return default(int); } }
    public bool IsSet { get { return default(bool); } }
    public System.Threading.WaitHandle WaitHandle { get { return default(System.Threading.WaitHandle); } }
    public void AddCount() { }
    public void AddCount(int signalCount) { }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public void Reset() { }
    public void Reset(int count) { }
    public bool Signal() { return default(bool); }
    public bool Signal(int signalCount) { return default(bool); }
    public bool TryAddCount() { return default(bool); }
    public bool TryAddCount(int signalCount) { return default(bool); }
    public void Wait() { }
    public bool Wait(int millisecondsTimeout) { return default(bool); }
    public bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) { return default(bool); }
    public void Wait(System.Threading.CancellationToken cancellationToken) { }
    public bool Wait(System.TimeSpan timeout) { return default(bool); }
    public bool Wait(System.TimeSpan timeout, System.Threading.CancellationToken cancellationToken) { return default(bool); }
  }
  public enum EventResetMode {
    AutoReset = 0,
    ManualReset = 1,
  }
  public partial class EventWaitHandle : System.Threading.WaitHandle {
    public EventWaitHandle(bool initialState, System.Threading.EventResetMode mode) { }
    [System.Security.SecurityCriticalAttribute]
    public EventWaitHandle(bool initialState, System.Threading.EventResetMode mode, string name) { }
    [System.Security.SecurityCriticalAttribute]
    public EventWaitHandle(bool initialState, System.Threading.EventResetMode mode, string name, out bool createdNew) { createdNew = default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public static System.Threading.EventWaitHandle OpenExisting(string name) { return default(System.Threading.EventWaitHandle); }
    public bool Reset() { return default(bool); }
    public bool Set() { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public static bool TryOpenExisting(string name, out System.Threading.EventWaitHandle result) { result = default(System.Threading.EventWaitHandle); return default(bool); }
  }
  public sealed partial class ExecutionContext {
    internal ExecutionContext() { }
    public static System.Threading.ExecutionContext Capture() { return default(System.Threading.ExecutionContext); }
    [System.Security.SecurityCriticalAttribute]
    public static void Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) { }
  }
  public static partial class Interlocked {
    public static int Add(ref int location1, int value) { return default(int); }
    public static long Add(ref long location1, long value) { return default(long); }
    public static double CompareExchange(ref double location1, double value, double comparand) { return default(double); }
    public static int CompareExchange(ref int location1, int value, int comparand) { return default(int); }
    public static long CompareExchange(ref long location1, long value, long comparand) { return default(long); }
    public static System.IntPtr CompareExchange(ref System.IntPtr location1, System.IntPtr value, System.IntPtr comparand) { return default(System.IntPtr); }
    public static object CompareExchange(ref object location1, object value, object comparand) { return default(object); }
    public static float CompareExchange(ref float location1, float value, float comparand) { return default(float); }
    public static T CompareExchange<T>(ref T location1, T value, T comparand) where T : class { return default(T); }
    public static int Decrement(ref int location) { return default(int); }
    public static long Decrement(ref long location) { return default(long); }
    public static double Exchange(ref double location1, double value) { return default(double); }
    public static int Exchange(ref int location1, int value) { return default(int); }
    public static long Exchange(ref long location1, long value) { return default(long); }
    public static System.IntPtr Exchange(ref System.IntPtr location1, System.IntPtr value) { return default(System.IntPtr); }
    public static object Exchange(ref object location1, object value) { return default(object); }
    public static float Exchange(ref float location1, float value) { return default(float); }
    public static T Exchange<T>(ref T location1, T value) where T : class { return default(T); }
    public static int Increment(ref int location) { return default(int); }
    public static long Increment(ref long location) { return default(long); }
    public static void MemoryBarrier() { }
    public static long Read(ref long location) { return default(long); }
  }
  public static partial class LazyInitializer {
    public static T EnsureInitialized<T>(ref T target) where T : class { return default(T); }
    public static T EnsureInitialized<T>(ref T target, ref bool initialized, ref object syncLock) { return default(T); }
    public static T EnsureInitialized<T>(ref T target, ref bool initialized, ref object syncLock, System.Func<T> valueFactory) { return default(T); }
    public static T EnsureInitialized<T>(ref T target, System.Func<T> valueFactory) where T : class { return default(T); }
  }
  public partial class LockRecursionException : System.Exception {
    public LockRecursionException() { }
    public LockRecursionException(string message) { }
    public LockRecursionException(string message, System.Exception innerException) { }
  }
  public enum LockRecursionPolicy {
    NoRecursion = 0,
    SupportsRecursion = 1,
  }
  public sealed partial class ManualResetEvent : System.Threading.EventWaitHandle {
    public ManualResetEvent(bool initialState) : base (default(bool), default(System.Threading.EventResetMode)) { }
  }
  public partial class ManualResetEventSlim : System.IDisposable {
    public ManualResetEventSlim() { }
    public ManualResetEventSlim(bool initialState) { }
    public ManualResetEventSlim(bool initialState, int spinCount) { }
    public bool IsSet { get { return default(bool); } }
    public int SpinCount { get { return default(int); } }
    public System.Threading.WaitHandle WaitHandle { get { return default(System.Threading.WaitHandle); } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public void Reset() { }
    public void Set() { }
    public void Wait() { }
    public bool Wait(int millisecondsTimeout) { return default(bool); }
    public bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) { return default(bool); }
    public void Wait(System.Threading.CancellationToken cancellationToken) { }
    public bool Wait(System.TimeSpan timeout) { return default(bool); }
    public bool Wait(System.TimeSpan timeout, System.Threading.CancellationToken cancellationToken) { return default(bool); }
  }
  public static partial class Monitor {
    public static void Enter(object obj) { }
    public static void Enter(object obj, ref bool lockTaken) { }
    public static void Exit(object obj) { }
    public static bool IsEntered(object obj) { return default(bool); }
    public static void Pulse(object obj) { }
    public static void PulseAll(object obj) { }
    public static bool TryEnter(object obj) { return default(bool); }
    public static void TryEnter(object obj, ref bool lockTaken) { }
    public static bool TryEnter(object obj, int millisecondsTimeout) { return default(bool); }
    public static void TryEnter(object obj, int millisecondsTimeout, ref bool lockTaken) { }
    public static bool TryEnter(object obj, System.TimeSpan timeout) { return default(bool); }
    public static void TryEnter(object obj, System.TimeSpan timeout, ref bool lockTaken) { }
    public static bool Wait(object obj) { return default(bool); }
    public static bool Wait(object obj, int millisecondsTimeout) { return default(bool); }
    public static bool Wait(object obj, System.TimeSpan timeout) { return default(bool); }
  }
  public sealed partial class Mutex : System.Threading.WaitHandle {
    public Mutex() { }
    public Mutex(bool initiallyOwned) { }
    [System.Security.SecurityCriticalAttribute]
    public Mutex(bool initiallyOwned, string name) { }
    [System.Security.SecurityCriticalAttribute]
    public Mutex(bool initiallyOwned, string name, out bool createdNew) { createdNew = default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public static System.Threading.Mutex OpenExisting(string name) { return default(System.Threading.Mutex); }
    public void ReleaseMutex() { }
    [System.Security.SecurityCriticalAttribute]
    public static bool TryOpenExisting(string name, out System.Threading.Mutex result) { result = default(System.Threading.Mutex); return default(bool); }
  }
  public partial class ReaderWriterLockSlim : System.IDisposable {
    public ReaderWriterLockSlim() { }
    public ReaderWriterLockSlim(System.Threading.LockRecursionPolicy recursionPolicy) { }
    public int CurrentReadCount { get { return default(int); } }
    public bool IsReadLockHeld { get { return default(bool); } }
    public bool IsUpgradeableReadLockHeld { get { return default(bool); } }
    public bool IsWriteLockHeld { get { return default(bool); } }
    public System.Threading.LockRecursionPolicy RecursionPolicy { get { return default(System.Threading.LockRecursionPolicy); } }
    public int RecursiveReadCount { get { return default(int); } }
    public int RecursiveUpgradeCount { get { return default(int); } }
    public int RecursiveWriteCount { get { return default(int); } }
    public int WaitingReadCount { get { return default(int); } }
    public int WaitingUpgradeCount { get { return default(int); } }
    public int WaitingWriteCount { get { return default(int); } }
    public void Dispose() { }
    public void EnterReadLock() { }
    public void EnterUpgradeableReadLock() { }
    public void EnterWriteLock() { }
    public void ExitReadLock() { }
    public void ExitUpgradeableReadLock() { }
    public void ExitWriteLock() { }
    public bool TryEnterReadLock(int millisecondsTimeout) { return default(bool); }
    public bool TryEnterReadLock(System.TimeSpan timeout) { return default(bool); }
    public bool TryEnterUpgradeableReadLock(int millisecondsTimeout) { return default(bool); }
    public bool TryEnterUpgradeableReadLock(System.TimeSpan timeout) { return default(bool); }
    public bool TryEnterWriteLock(int millisecondsTimeout) { return default(bool); }
    public bool TryEnterWriteLock(System.TimeSpan timeout) { return default(bool); }
  }
  public sealed partial class Semaphore : System.Threading.WaitHandle {
    public Semaphore(int initialCount, int maximumCount) { }
    public Semaphore(int initialCount, int maximumCount, string name) { }
    public Semaphore(int initialCount, int maximumCount, string name, out bool createdNew) { createdNew = default(bool); }
    public static System.Threading.Semaphore OpenExisting(string name) { return default(System.Threading.Semaphore); }
    public int Release() { return default(int); }
    public int Release(int releaseCount) { return default(int); }
    public static bool TryOpenExisting(string name, out System.Threading.Semaphore result) { result = default(System.Threading.Semaphore); return default(bool); }
  }
  public partial class SemaphoreFullException : System.Exception {
    public SemaphoreFullException() { }
    public SemaphoreFullException(string message) { }
    public SemaphoreFullException(string message, System.Exception innerException) { }
  }
  public partial class SemaphoreSlim : System.IDisposable {
    public SemaphoreSlim(int initialCount) { }
    public SemaphoreSlim(int initialCount, int maxCount) { }
    public System.Threading.WaitHandle AvailableWaitHandle { get { return default(System.Threading.WaitHandle); } }
    public int CurrentCount { get { return default(int); } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public int Release() { return default(int); }
    public int Release(int releaseCount) { return default(int); }
    public void Wait() { }
    public bool Wait(int millisecondsTimeout) { return default(bool); }
    public bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) { return default(bool); }
    public void Wait(System.Threading.CancellationToken cancellationToken) { }
    public bool Wait(System.TimeSpan timeout) { return default(bool); }
    public bool Wait(System.TimeSpan timeout, System.Threading.CancellationToken cancellationToken) { return default(bool); }
    public System.Threading.Tasks.Task WaitAsync() { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task<bool> WaitAsync(int millisecondsTimeout) { return default(System.Threading.Tasks.Task<bool>); }
    public System.Threading.Tasks.Task<bool> WaitAsync(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<bool>); }
    public System.Threading.Tasks.Task WaitAsync(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task<bool> WaitAsync(System.TimeSpan timeout) { return default(System.Threading.Tasks.Task<bool>); }
    public System.Threading.Tasks.Task<bool> WaitAsync(System.TimeSpan timeout, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<bool>); }
  }
  public delegate void SendOrPostCallback(object state);
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SpinLock {
    public SpinLock(bool enableThreadOwnerTracking) { throw new System.NotImplementedException(); }
    public bool IsHeld { get { return default(bool); } }
    public bool IsHeldByCurrentThread { get { return default(bool); } }
    public bool IsThreadOwnerTrackingEnabled { get { return default(bool); } }
    public void Enter(ref bool lockTaken) { }
    public void Exit() { }
    public void Exit(bool useMemoryBarrier) { }
    public void TryEnter(ref bool lockTaken) { }
    public void TryEnter(int millisecondsTimeout, ref bool lockTaken) { }
    public void TryEnter(System.TimeSpan timeout, ref bool lockTaken) { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct SpinWait {
    public int Count { get { return default(int); } }
    public bool NextSpinWillYield { get { return default(bool); } }
    public void Reset() { }
    public void SpinOnce() { }
    public static void SpinUntil(System.Func<bool> condition) { }
    public static bool SpinUntil(System.Func<bool> condition, int millisecondsTimeout) { return default(bool); }
    public static bool SpinUntil(System.Func<bool> condition, System.TimeSpan timeout) { return default(bool); }
  }
  public partial class SynchronizationContext {
    public SynchronizationContext() { }
    public static System.Threading.SynchronizationContext Current { get { return default(System.Threading.SynchronizationContext); } }
    public virtual System.Threading.SynchronizationContext CreateCopy() { return default(System.Threading.SynchronizationContext); }
    public virtual void OperationCompleted() { }
    public virtual void OperationStarted() { }
    public virtual void Post(System.Threading.SendOrPostCallback d, object state) { }
    public virtual void Send(System.Threading.SendOrPostCallback d, object state) { }
    [System.Security.SecurityCriticalAttribute]
    public static void SetSynchronizationContext(System.Threading.SynchronizationContext syncContext) { }
  }
  public partial class SynchronizationLockException : System.Exception {
    public SynchronizationLockException() { }
    public SynchronizationLockException(string message) { }
    public SynchronizationLockException(string message, System.Exception innerException) { }
  }
  public partial class ThreadLocal<T> : System.IDisposable {
    public ThreadLocal() { }
    public ThreadLocal(bool trackAllValues) { }
    public ThreadLocal(System.Func<T> valueFactory) { }
    public ThreadLocal(System.Func<T> valueFactory, bool trackAllValues) { }
    public bool IsValueCreated { get { return default(bool); } }
    public T Value { get { return default(T); } set { } }
    public System.Collections.Generic.IList<T> Values { get { return default(System.Collections.Generic.IList<T>); } }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    ~ThreadLocal() { }
    public override string ToString() { return default(string); }
  }
  public static partial class Volatile {
    public static bool Read(ref bool location) { return default(bool); }
    public static byte Read(ref byte location) { return default(byte); }
    public static double Read(ref double location) { return default(double); }
    public static short Read(ref short location) { return default(short); }
    public static int Read(ref int location) { return default(int); }
    public static long Read(ref long location) { return default(long); }
    public static System.IntPtr Read(ref System.IntPtr location) { return default(System.IntPtr); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte Read(ref sbyte location) { return default(sbyte); }
    public static float Read(ref float location) { return default(float); }
    [System.CLSCompliantAttribute(false)]
    public static ushort Read(ref ushort location) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static uint Read(ref uint location) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static ulong Read(ref ulong location) { return default(ulong); }
    [System.CLSCompliantAttribute(false)]
    public static System.UIntPtr Read(ref System.UIntPtr location) { return default(System.UIntPtr); }
    public static T Read<T>(ref T location) where T : class { return default(T); }
    public static void Write(ref bool location, bool value) { }
    public static void Write(ref byte location, byte value) { }
    public static void Write(ref double location, double value) { }
    public static void Write(ref short location, short value) { }
    public static void Write(ref int location, int value) { }
    public static void Write(ref long location, long value) { }
    public static void Write(ref System.IntPtr location, System.IntPtr value) { }
    [System.CLSCompliantAttribute(false)]
    public static void Write(ref sbyte location, sbyte value) { }
    public static void Write(ref float location, float value) { }
    [System.CLSCompliantAttribute(false)]
    public static void Write(ref ushort location, ushort value) { }
    [System.CLSCompliantAttribute(false)]
    public static void Write(ref uint location, uint value) { }
    [System.CLSCompliantAttribute(false)]
    public static void Write(ref ulong location, ulong value) { }
    [System.CLSCompliantAttribute(false)]
    public static void Write(ref System.UIntPtr location, System.UIntPtr value) { }
    public static void Write<T>(ref T location, T value) where T : class { }
  }
  public partial class WaitHandleCannotBeOpenedException : System.Exception {
    public WaitHandleCannotBeOpenedException() { }
    public WaitHandleCannotBeOpenedException(string message) { }
    public WaitHandleCannotBeOpenedException(string message, System.Exception innerException) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Threading.AccessControl")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Threading.AccessControl")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Threading.AccessControl")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Security.AccessControl {
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule {
    public EventWaitHandleAccessRule(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public EventWaitHandleAccessRule(string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get { return default(System.Security.AccessControl.EventWaitHandleRights); } }
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class EventWaitHandleAuditRule : System.Security.AccessControl.AuditRule {
    public EventWaitHandleAuditRule(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AuditFlags flags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get { return default(System.Security.AccessControl.EventWaitHandleRights); } }
  }
  [System.FlagsAttribute]
  [System.Security.SecurityCriticalAttribute]
  public enum EventWaitHandleRights {
    ChangePermissions = 262144,
    Delete = 65536,
    FullControl = 2031619,
    Modify = 2,
    ReadPermissions = 131072,
    Synchronize = 1048576,
    TakeOwnership = 524288,
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class EventWaitHandleSecurity : System.Security.AccessControl.NativeObjectSecurity {
    public EventWaitHandleSecurity() : base (default(bool), default(System.Security.AccessControl.ResourceType)) { }
    public override System.Type AccessRightType { get { return default(System.Type); } }
    public override System.Type AccessRuleType { get { return default(System.Type); } }
    public override System.Type AuditRuleType { get { return default(System.Type); } }
    public override System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type) { return default(System.Security.AccessControl.AccessRule); }
    public void AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule rule) { }
    public void AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule rule) { }
    public override System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags) { return default(System.Security.AccessControl.AuditRule); }
    public bool RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule rule) { return default(bool); }
    public void RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule rule) { }
    public void RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule rule) { }
    public bool RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule rule) { return default(bool); }
    public void RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule rule) { }
    public void RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule rule) { }
    public void ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule rule) { }
    public void SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule rule) { }
    public void SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule rule) { }
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class MutexAccessRule : System.Security.AccessControl.AccessRule {
    public MutexAccessRule(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public MutexAccessRule(string identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public System.Security.AccessControl.MutexRights MutexRights { get { return default(System.Security.AccessControl.MutexRights); } }
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class MutexAuditRule : System.Security.AccessControl.AuditRule {
    public MutexAuditRule(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AuditFlags flags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public System.Security.AccessControl.MutexRights MutexRights { get { return default(System.Security.AccessControl.MutexRights); } }
  }
  [System.FlagsAttribute]
  [System.Security.SecurityCriticalAttribute]
  public enum MutexRights {
    ChangePermissions = 262144,
    Delete = 65536,
    FullControl = 2031617,
    Modify = 1,
    ReadPermissions = 131072,
    Synchronize = 1048576,
    TakeOwnership = 524288,
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class MutexSecurity : System.Security.AccessControl.NativeObjectSecurity {
    public MutexSecurity() : base (default(bool), default(System.Security.AccessControl.ResourceType)) { }
    public MutexSecurity(string name, System.Security.AccessControl.AccessControlSections includeSections) : base (default(bool), default(System.Security.AccessControl.ResourceType)) { }
    public override System.Type AccessRightType { get { return default(System.Type); } }
    public override System.Type AccessRuleType { get { return default(System.Type); } }
    public override System.Type AuditRuleType { get { return default(System.Type); } }
    public override System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type) { return default(System.Security.AccessControl.AccessRule); }
    public void AddAccessRule(System.Security.AccessControl.MutexAccessRule rule) { }
    public void AddAuditRule(System.Security.AccessControl.MutexAuditRule rule) { }
    public override System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags) { return default(System.Security.AccessControl.AuditRule); }
    public bool RemoveAccessRule(System.Security.AccessControl.MutexAccessRule rule) { return default(bool); }
    public void RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule rule) { }
    public void RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule rule) { }
    public bool RemoveAuditRule(System.Security.AccessControl.MutexAuditRule rule) { return default(bool); }
    public void RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule rule) { }
    public void RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule rule) { }
    public void ResetAccessRule(System.Security.AccessControl.MutexAccessRule rule) { }
    public void SetAccessRule(System.Security.AccessControl.MutexAccessRule rule) { }
    public void SetAuditRule(System.Security.AccessControl.MutexAuditRule rule) { }
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class SemaphoreAccessRule : System.Security.AccessControl.AccessRule {
    public SemaphoreAccessRule(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public SemaphoreAccessRule(string identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AccessControlType)) { }
    public System.Security.AccessControl.SemaphoreRights SemaphoreRights { get { return default(System.Security.AccessControl.SemaphoreRights); } }
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class SemaphoreAuditRule : System.Security.AccessControl.AuditRule {
    public SemaphoreAuditRule(System.Security.Principal.IdentityReference identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AuditFlags flags) : base (default(System.Security.Principal.IdentityReference), default(int), default(bool), default(System.Security.AccessControl.InheritanceFlags), default(System.Security.AccessControl.PropagationFlags), default(System.Security.AccessControl.AuditFlags)) { }
    public System.Security.AccessControl.SemaphoreRights SemaphoreRights { get { return default(System.Security.AccessControl.SemaphoreRights); } }
  }
  [System.FlagsAttribute]
  [System.Security.SecurityCriticalAttribute]
  public enum SemaphoreRights {
    ChangePermissions = 262144,
    Delete = 65536,
    FullControl = 2031619,
    Modify = 2,
    ReadPermissions = 131072,
    Synchronize = 1048576,
    TakeOwnership = 524288,
  }
  [System.Security.SecurityCriticalAttribute]
  public sealed partial class SemaphoreSecurity : System.Security.AccessControl.NativeObjectSecurity {
    public SemaphoreSecurity() : base (default(bool), default(System.Security.AccessControl.ResourceType)) { }
    public SemaphoreSecurity(string name, System.Security.AccessControl.AccessControlSections includeSections) : base (default(bool), default(System.Security.AccessControl.ResourceType)) { }
    public override System.Type AccessRightType { get { return default(System.Type); } }
    public override System.Type AccessRuleType { get { return default(System.Type); } }
    public override System.Type AuditRuleType { get { return default(System.Type); } }
    public override System.Security.AccessControl.AccessRule AccessRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type) { return default(System.Security.AccessControl.AccessRule); }
    public void AddAccessRule(System.Security.AccessControl.SemaphoreAccessRule rule) { }
    public void AddAuditRule(System.Security.AccessControl.SemaphoreAuditRule rule) { }
    public override System.Security.AccessControl.AuditRule AuditRuleFactory(System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags) { return default(System.Security.AccessControl.AuditRule); }
    public bool RemoveAccessRule(System.Security.AccessControl.SemaphoreAccessRule rule) { return default(bool); }
    public void RemoveAccessRuleAll(System.Security.AccessControl.SemaphoreAccessRule rule) { }
    public void RemoveAccessRuleSpecific(System.Security.AccessControl.SemaphoreAccessRule rule) { }
    public bool RemoveAuditRule(System.Security.AccessControl.SemaphoreAuditRule rule) { return default(bool); }
    public void RemoveAuditRuleAll(System.Security.AccessControl.SemaphoreAuditRule rule) { }
    public void RemoveAuditRuleSpecific(System.Security.AccessControl.SemaphoreAuditRule rule) { }
    public void ResetAccessRule(System.Security.AccessControl.SemaphoreAccessRule rule) { }
    public void SetAccessRule(System.Security.AccessControl.SemaphoreAccessRule rule) { }
    public void SetAuditRule(System.Security.AccessControl.SemaphoreAuditRule rule) { }
  }
}
namespace System.Threading {
  [System.Security.SecurityCriticalAttribute]
  public static partial class ThreadingAclExtensions {
    public static System.Security.AccessControl.EventWaitHandleSecurity GetAccessControl(this System.Threading.EventWaitHandle handle) { return default(System.Security.AccessControl.EventWaitHandleSecurity); }
    public static System.Security.AccessControl.MutexSecurity GetAccessControl(this System.Threading.Mutex mutex) { return default(System.Security.AccessControl.MutexSecurity); }
    public static System.Security.AccessControl.SemaphoreSecurity GetAccessControl(this System.Threading.Semaphore semaphore) { return default(System.Security.AccessControl.SemaphoreSecurity); }
    public static void SetAccessControl(this System.Threading.EventWaitHandle handle, System.Security.AccessControl.EventWaitHandleSecurity eventSecurity) { }
    public static void SetAccessControl(this System.Threading.Mutex mutex, System.Security.AccessControl.MutexSecurity mutexSecurity) { }
    public static void SetAccessControl(this System.Threading.Semaphore semaphore, System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Threading.Overlapped")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Threading.Overlapped")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Threading.Overlapped")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Threading {
  [System.CLSCompliantAttribute(false)]
  [System.Security.SecurityCriticalAttribute]
  public unsafe delegate void IOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP);
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct NativeOverlapped {
    public System.IntPtr EventHandle;
    public System.IntPtr InternalHigh;
    public System.IntPtr InternalLow;
    public int OffsetHigh;
    public int OffsetLow;
  }
  public sealed partial class PreAllocatedOverlapped : System.IDisposable {
    [System.CLSCompliantAttribute(false)]
    public PreAllocatedOverlapped(System.Threading.IOCompletionCallback callback, object state, object pinData) { }
    public void Dispose() { }
  }
  public sealed partial class ThreadPoolBoundHandle : System.IDisposable {
    internal ThreadPoolBoundHandle() { }
    public System.Runtime.InteropServices.SafeHandle Handle { get { return default(System.Runtime.InteropServices.SafeHandle); } }
    [System.CLSCompliantAttribute(false)]
    public unsafe System.Threading.NativeOverlapped* AllocateNativeOverlapped(System.Threading.IOCompletionCallback callback, object state, object pinData) { return default(System.Threading.NativeOverlapped*); }
    [System.CLSCompliantAttribute(false)]
    public unsafe System.Threading.NativeOverlapped* AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped preAllocated) { return default(System.Threading.NativeOverlapped*); }
    public static System.Threading.ThreadPoolBoundHandle BindHandle(System.Runtime.InteropServices.SafeHandle handle) { return default(System.Threading.ThreadPoolBoundHandle); }
    public void Dispose() { }
    [System.CLSCompliantAttribute(false)]
    public unsafe void FreeNativeOverlapped(System.Threading.NativeOverlapped* overlapped) { }
    [System.CLSCompliantAttribute(false)]
    public unsafe static object GetNativeOverlappedState(System.Threading.NativeOverlapped* overlapped) { return default(object); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Threading.Tasks")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Threading.Tasks")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Threading.Tasks")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System {
  public partial class AggregateException : System.Exception {
    public AggregateException() { }
    public AggregateException(System.Collections.Generic.IEnumerable<System.Exception> innerExceptions) { }
    public AggregateException(params System.Exception[] innerExceptions) { }
    public AggregateException(string message) { }
    public AggregateException(string message, System.Collections.Generic.IEnumerable<System.Exception> innerExceptions) { }
    public AggregateException(string message, System.Exception innerException) { }
    public AggregateException(string message, params System.Exception[] innerExceptions) { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Exception> InnerExceptions { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Exception>); } }
    public System.AggregateException Flatten() { return default(System.AggregateException); }
    public override System.Exception GetBaseException() { return default(System.Exception); }
    public void Handle(System.Func<System.Exception, bool> predicate) { }
    public override string ToString() { return default(string); }
  }
  public partial class OperationCanceledException : System.Exception {
    public OperationCanceledException() { }
    public OperationCanceledException(string message) { }
    public OperationCanceledException(string message, System.Exception innerException) { }
    public OperationCanceledException(string message, System.Exception innerException, System.Threading.CancellationToken token) { }
    public OperationCanceledException(string message, System.Threading.CancellationToken token) { }
    public OperationCanceledException(System.Threading.CancellationToken token) { }
    public System.Threading.CancellationToken CancellationToken { get { return default(System.Threading.CancellationToken); } }
  }
}
namespace System.Runtime.CompilerServices {
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct AsyncTaskMethodBuilder {
    public System.Threading.Tasks.Task Task { get { return default(System.Threading.Tasks.Task); } }
    public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : System.Runtime.CompilerServices.INotifyCompletion where TStateMachine : System.Runtime.CompilerServices.IAsyncStateMachine { }
    public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion where TStateMachine : System.Runtime.CompilerServices.IAsyncStateMachine { }
    public static System.Runtime.CompilerServices.AsyncTaskMethodBuilder Create() { return default(System.Runtime.CompilerServices.AsyncTaskMethodBuilder); }
    public void SetException(System.Exception exception) { }
    public void SetResult() { }
    public void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine) { }
    public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : System.Runtime.CompilerServices.IAsyncStateMachine { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct AsyncTaskMethodBuilder<TResult> {
    public System.Threading.Tasks.Task<TResult> Task { get { return default(System.Threading.Tasks.Task<TResult>); } }
    public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : System.Runtime.CompilerServices.INotifyCompletion where TStateMachine : System.Runtime.CompilerServices.IAsyncStateMachine { }
    public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion where TStateMachine : System.Runtime.CompilerServices.IAsyncStateMachine { }
    public static System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult> Create() { return default(System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>); }
    public void SetException(System.Exception exception) { }
    public void SetResult(TResult result) { }
    public void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine) { }
    public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : System.Runtime.CompilerServices.IAsyncStateMachine { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct AsyncVoidMethodBuilder {
    public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : System.Runtime.CompilerServices.INotifyCompletion where TStateMachine : System.Runtime.CompilerServices.IAsyncStateMachine { }
    public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine) where TAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion where TStateMachine : System.Runtime.CompilerServices.IAsyncStateMachine { }
    public static System.Runtime.CompilerServices.AsyncVoidMethodBuilder Create() { return default(System.Runtime.CompilerServices.AsyncVoidMethodBuilder); }
    public void SetException(System.Exception exception) { }
    public void SetResult() { }
    public void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine) { }
    public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : System.Runtime.CompilerServices.IAsyncStateMachine { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct ConfiguredTaskAwaitable {
    public System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter GetAwaiter() { return default(System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct ConfiguredTaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion {
      public bool IsCompleted { get { return default(bool); } }
      public void GetResult() { }
      public void OnCompleted(System.Action continuation) { }
      [System.Security.SecurityCriticalAttribute]
      public void UnsafeOnCompleted(System.Action continuation) { }
    }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct ConfiguredTaskAwaitable<TResult> {
    public System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult>.ConfiguredTaskAwaiter GetAwaiter() { return default(System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult>.ConfiguredTaskAwaiter); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct ConfiguredTaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion {
      public bool IsCompleted { get { return default(bool); } }
      public TResult GetResult() { return default(TResult); }
      public void OnCompleted(System.Action continuation) { }
      [System.Security.SecurityCriticalAttribute]
      public void UnsafeOnCompleted(System.Action continuation) { }
    }
  }
  public partial interface IAsyncStateMachine {
    void MoveNext();
    void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
  }
  public partial interface ICriticalNotifyCompletion : System.Runtime.CompilerServices.INotifyCompletion {
    [System.Security.SecurityCriticalAttribute]
    void UnsafeOnCompleted(System.Action continuation);
  }
  public partial interface INotifyCompletion {
    void OnCompleted(System.Action continuation);
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct TaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion {
    public bool IsCompleted { get { return default(bool); } }
    public void GetResult() { }
    public void OnCompleted(System.Action continuation) { }
    [System.Security.SecurityCriticalAttribute]
    public void UnsafeOnCompleted(System.Action continuation) { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct TaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion {
    public bool IsCompleted { get { return default(bool); } }
    public TResult GetResult() { return default(TResult); }
    public void OnCompleted(System.Action continuation) { }
    [System.Security.SecurityCriticalAttribute]
    public void UnsafeOnCompleted(System.Action continuation) { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Size=1)]
  public partial struct YieldAwaitable {
    public System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter GetAwaiter() { return default(System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, Size=1)]
    public partial struct YieldAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion {
      public bool IsCompleted { get { return default(bool); } }
      public void GetResult() { }
      public void OnCompleted(System.Action continuation) { }
      [System.Security.SecurityCriticalAttribute]
      public void UnsafeOnCompleted(System.Action continuation) { }
    }
  }
}
namespace System.Threading {
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct CancellationToken {
    public CancellationToken(bool canceled) { throw new System.NotImplementedException(); }
    public bool CanBeCanceled { get { return default(bool); } }
    public bool IsCancellationRequested { get { return default(bool); } }
    public static System.Threading.CancellationToken None { get { return default(System.Threading.CancellationToken); } }
    public System.Threading.WaitHandle WaitHandle { get { return default(System.Threading.WaitHandle); } }
    public override bool Equals(object other) { return default(bool); }
    public bool Equals(System.Threading.CancellationToken other) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Threading.CancellationToken left, System.Threading.CancellationToken right) { return default(bool); }
    public static bool operator !=(System.Threading.CancellationToken left, System.Threading.CancellationToken right) { return default(bool); }
    public System.Threading.CancellationTokenRegistration Register(System.Action callback) { return default(System.Threading.CancellationTokenRegistration); }
    public System.Threading.CancellationTokenRegistration Register(System.Action callback, bool useSynchronizationContext) { return default(System.Threading.CancellationTokenRegistration); }
    public System.Threading.CancellationTokenRegistration Register(System.Action<object> callback, object state) { return default(System.Threading.CancellationTokenRegistration); }
    public System.Threading.CancellationTokenRegistration Register(System.Action<object> callback, object state, bool useSynchronizationContext) { return default(System.Threading.CancellationTokenRegistration); }
    public void ThrowIfCancellationRequested() { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct CancellationTokenRegistration : System.IDisposable, System.IEquatable<System.Threading.CancellationTokenRegistration> {
    public void Dispose() { }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Threading.CancellationTokenRegistration other) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Threading.CancellationTokenRegistration left, System.Threading.CancellationTokenRegistration right) { return default(bool); }
    public static bool operator !=(System.Threading.CancellationTokenRegistration left, System.Threading.CancellationTokenRegistration right) { return default(bool); }
  }
  public partial class CancellationTokenSource : System.IDisposable {
    public CancellationTokenSource() { }
    public CancellationTokenSource(int millisecondsDelay) { }
    public CancellationTokenSource(System.TimeSpan delay) { }
    public bool IsCancellationRequested { get { return default(bool); } }
    public System.Threading.CancellationToken Token { get { return default(System.Threading.CancellationToken); } }
    public void Cancel() { }
    public void Cancel(bool throwOnFirstException) { }
    public void CancelAfter(int millisecondsDelay) { }
    public void CancelAfter(System.TimeSpan delay) { }
    public static System.Threading.CancellationTokenSource CreateLinkedTokenSource(System.Threading.CancellationToken token1, System.Threading.CancellationToken token2) { return default(System.Threading.CancellationTokenSource); }
    public static System.Threading.CancellationTokenSource CreateLinkedTokenSource(params System.Threading.CancellationToken[] tokens) { return default(System.Threading.CancellationTokenSource); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
  }
}
namespace System.Threading.Tasks {
  public partial class ConcurrentExclusiveSchedulerPair {
    public ConcurrentExclusiveSchedulerPair() { }
    public ConcurrentExclusiveSchedulerPair(System.Threading.Tasks.TaskScheduler taskScheduler) { }
    public ConcurrentExclusiveSchedulerPair(System.Threading.Tasks.TaskScheduler taskScheduler, int maxConcurrencyLevel) { }
    public ConcurrentExclusiveSchedulerPair(System.Threading.Tasks.TaskScheduler taskScheduler, int maxConcurrencyLevel, int maxItemsPerTask) { }
    public System.Threading.Tasks.Task Completion { get { return default(System.Threading.Tasks.Task); } }
    public System.Threading.Tasks.TaskScheduler ConcurrentScheduler { get { return default(System.Threading.Tasks.TaskScheduler); } }
    public System.Threading.Tasks.TaskScheduler ExclusiveScheduler { get { return default(System.Threading.Tasks.TaskScheduler); } }
    public void Complete() { }
  }
  public partial class Task : System.IAsyncResult {
    public Task(System.Action action) { }
    public Task(System.Action action, System.Threading.CancellationToken cancellationToken) { }
    public Task(System.Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions) { }
    public Task(System.Action action, System.Threading.Tasks.TaskCreationOptions creationOptions) { }
    public Task(System.Action<object> action, object state) { }
    public Task(System.Action<object> action, object state, System.Threading.CancellationToken cancellationToken) { }
    public Task(System.Action<object> action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions) { }
    public Task(System.Action<object> action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { }
    public object AsyncState { get { return default(object); } }
    public static System.Threading.Tasks.Task CompletedTask { get { return default(System.Threading.Tasks.Task); } }
    public System.Threading.Tasks.TaskCreationOptions CreationOptions { get { return default(System.Threading.Tasks.TaskCreationOptions); } }
    public static System.Nullable<int> CurrentId { get { return default(System.Nullable<int>); } }
    public System.AggregateException Exception { get { return default(System.AggregateException); } }
    public static System.Threading.Tasks.TaskFactory Factory { get { return default(System.Threading.Tasks.TaskFactory); } }
    public int Id { get { return default(int); } }
    public bool IsCanceled { get { return default(bool); } }
    public bool IsCompleted { get { return default(bool); } }
    public bool IsFaulted { get { return default(bool); } }
    public System.Threading.Tasks.TaskStatus Status { get { return default(System.Threading.Tasks.TaskStatus); } }
    System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get { return default(System.Threading.WaitHandle); } }
    bool System.IAsyncResult.CompletedSynchronously { get { return default(bool); } }
    public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext) { return default(System.Runtime.CompilerServices.ConfiguredTaskAwaitable); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult> continuationFunction) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, object, TResult> continuationFunction, object state) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, object, TResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, object, TResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, object, TResult> continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, object, TResult> continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public static System.Threading.Tasks.Task Delay(int millisecondsDelay) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task Delay(int millisecondsDelay, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task Delay(System.TimeSpan delay) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task Delay(System.TimeSpan delay, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task FromCanceled(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task<TResult> FromCanceled<TResult>(System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public static System.Threading.Tasks.Task FromException(System.Exception exception) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task<TResult> FromException<TResult>(System.Exception exception) { return default(System.Threading.Tasks.Task<TResult>); }
    public static System.Threading.Tasks.Task<TResult> FromResult<TResult>(TResult result) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter() { return default(System.Runtime.CompilerServices.TaskAwaiter); }
    public static System.Threading.Tasks.Task Run(System.Action action) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task Run(System.Action action, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task Run(System.Func<System.Threading.Tasks.Task> function) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task Run(System.Func<System.Threading.Tasks.Task> function, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<TResult> function) { return default(System.Threading.Tasks.Task<TResult>); }
    public static System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<TResult> function, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public static System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>> function) { return default(System.Threading.Tasks.Task<TResult>); }
    public static System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>> function, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public void RunSynchronously() { }
    public void RunSynchronously(System.Threading.Tasks.TaskScheduler scheduler) { }
    public void Start() { }
    public void Start(System.Threading.Tasks.TaskScheduler scheduler) { }
    public void Wait() { }
    public bool Wait(int millisecondsTimeout) { return default(bool); }
    public bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) { return default(bool); }
    public void Wait(System.Threading.CancellationToken cancellationToken) { }
    public bool Wait(System.TimeSpan timeout) { return default(bool); }
    public static void WaitAll(params System.Threading.Tasks.Task[] tasks) { }
    public static bool WaitAll(System.Threading.Tasks.Task[] tasks, int millisecondsTimeout) { return default(bool); }
    public static bool WaitAll(System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) { return default(bool); }
    public static void WaitAll(System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken) { }
    public static bool WaitAll(System.Threading.Tasks.Task[] tasks, System.TimeSpan timeout) { return default(bool); }
    public static int WaitAny(params System.Threading.Tasks.Task[] tasks) { return default(int); }
    public static int WaitAny(System.Threading.Tasks.Task[] tasks, int millisecondsTimeout) { return default(int); }
    public static int WaitAny(System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) { return default(int); }
    public static int WaitAny(System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken) { return default(int); }
    public static int WaitAny(System.Threading.Tasks.Task[] tasks, System.TimeSpan timeout) { return default(int); }
    public static System.Threading.Tasks.Task WhenAll(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> tasks) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task WhenAll(params System.Threading.Tasks.Task[] tasks) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task<TResult[]> WhenAll<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>> tasks) { return default(System.Threading.Tasks.Task<TResult[]>); }
    public static System.Threading.Tasks.Task<TResult[]> WhenAll<TResult>(params System.Threading.Tasks.Task<TResult>[] tasks) { return default(System.Threading.Tasks.Task<TResult[]>); }
    public static System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> tasks) { return default(System.Threading.Tasks.Task<System.Threading.Tasks.Task>); }
    public static System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny(params System.Threading.Tasks.Task[] tasks) { return default(System.Threading.Tasks.Task<System.Threading.Tasks.Task>); }
    public static System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>> WhenAny<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>> tasks) { return default(System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>); }
    public static System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>> WhenAny<TResult>(params System.Threading.Tasks.Task<TResult>[] tasks) { return default(System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>); }
    public static System.Runtime.CompilerServices.YieldAwaitable Yield() { return default(System.Runtime.CompilerServices.YieldAwaitable); }
  }
  public partial class Task<TResult> : System.Threading.Tasks.Task {
    public Task(System.Func<TResult> function) : base (default(System.Action)) { }
    public Task(System.Func<TResult> function, System.Threading.CancellationToken cancellationToken) : base (default(System.Action)) { }
    public Task(System.Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions) : base (default(System.Action)) { }
    public Task(System.Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions) : base (default(System.Action)) { }
    public Task(System.Func<object, TResult> function, object state) : base (default(System.Action)) { }
    public Task(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken) : base (default(System.Action)) { }
    public Task(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions) : base (default(System.Action)) { }
    public Task(System.Func<object, TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) : base (default(System.Action)) { }
    public static new System.Threading.Tasks.TaskFactory<TResult> Factory { get { return default(System.Threading.Tasks.TaskFactory<TResult>); } }
    public TResult Result { get { return default(TResult); } }
    public new System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext) { return default(System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult>); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, object> continuationAction, object state) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, object> continuationAction, object state, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, object> continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>, object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction) { return default(System.Threading.Tasks.Task<TNewResult>); }
    public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TNewResult>); }
    public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TNewResult>); }
    public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task<TNewResult>); }
    public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TNewResult>); }
    public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, object, TNewResult> continuationFunction, object state) { return default(System.Threading.Tasks.Task<TNewResult>); }
    public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, object, TNewResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TNewResult>); }
    public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, object, TNewResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TNewResult>); }
    public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, object, TNewResult> continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task<TNewResult>); }
    public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, object, TNewResult> continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TNewResult>); }
    public new System.Runtime.CompilerServices.TaskAwaiter<TResult> GetAwaiter() { return default(System.Runtime.CompilerServices.TaskAwaiter<TResult>); }
  }
  public partial class TaskCanceledException : System.OperationCanceledException {
    public TaskCanceledException() { }
    public TaskCanceledException(string message) { }
    public TaskCanceledException(string message, System.Exception innerException) { }
    public TaskCanceledException(System.Threading.Tasks.Task task) { }
    public System.Threading.Tasks.Task Task { get { return default(System.Threading.Tasks.Task); } }
  }
  public partial class TaskCompletionSource<TResult> {
    public TaskCompletionSource() { }
    public TaskCompletionSource(object state) { }
    public TaskCompletionSource(object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { }
    public TaskCompletionSource(System.Threading.Tasks.TaskCreationOptions creationOptions) { }
    public System.Threading.Tasks.Task<TResult> Task { get { return default(System.Threading.Tasks.Task<TResult>); } }
    public void SetCanceled() { }
    public void SetException(System.Collections.Generic.IEnumerable<System.Exception> exceptions) { }
    public void SetException(System.Exception exception) { }
    public void SetResult(TResult result) { }
    public bool TrySetCanceled() { return default(bool); }
    public bool TrySetCanceled(System.Threading.CancellationToken cancellationToken) { return default(bool); }
    public bool TrySetException(System.Collections.Generic.IEnumerable<System.Exception> exceptions) { return default(bool); }
    public bool TrySetException(System.Exception exception) { return default(bool); }
    public bool TrySetResult(TResult result) { return default(bool); }
  }
  [System.FlagsAttribute]
  public enum TaskContinuationOptions {
    AttachedToParent = 4,
    DenyChildAttach = 8,
    ExecuteSynchronously = 524288,
    HideScheduler = 16,
    LazyCancellation = 32,
    LongRunning = 2,
    None = 0,
    NotOnCanceled = 262144,
    NotOnFaulted = 131072,
    NotOnRanToCompletion = 65536,
    OnlyOnCanceled = 196608,
    OnlyOnFaulted = 327680,
    OnlyOnRanToCompletion = 393216,
    PreferFairness = 1,
    RunContinuationsAsynchronously = 64,
  }
  [System.FlagsAttribute]
  public enum TaskCreationOptions {
    AttachedToParent = 4,
    DenyChildAttach = 8,
    HideScheduler = 16,
    LongRunning = 2,
    None = 0,
    PreferFairness = 1,
    RunContinuationsAsynchronously = 64,
  }
  public static partial class TaskExtensions {
    public static System.Threading.Tasks.Task Unwrap(this System.Threading.Tasks.Task<System.Threading.Tasks.Task> task) { return default(System.Threading.Tasks.Task); }
    public static System.Threading.Tasks.Task<TResult> Unwrap<TResult>(this System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>> task) { return default(System.Threading.Tasks.Task<TResult>); }
  }
  public partial class TaskFactory {
    public TaskFactory() { }
    public TaskFactory(System.Threading.CancellationToken cancellationToken) { }
    public TaskFactory(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { }
    public TaskFactory(System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { }
    public TaskFactory(System.Threading.Tasks.TaskScheduler scheduler) { }
    public System.Threading.CancellationToken CancellationToken { get { return default(System.Threading.CancellationToken); } }
    public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get { return default(System.Threading.Tasks.TaskContinuationOptions); } }
    public System.Threading.Tasks.TaskCreationOptions CreationOptions { get { return default(System.Threading.Tasks.TaskCreationOptions); } }
    public System.Threading.Tasks.TaskScheduler Scheduler { get { return default(System.Threading.Tasks.TaskScheduler); } }
    public System.Threading.Tasks.Task ContinueWhenAll(System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task[]> continuationAction) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWhenAll(System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWhenAll(System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWhenAll(System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult>(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task[], TResult> continuationFunction) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult>(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task[], TResult> continuationFunction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult>(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task[], TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult>(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task[], TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult> continuationFunction) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult> continuationFunction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task ContinueWhenAny(System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task> continuationAction) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWhenAny(System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWhenAny(System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWhenAny(System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult>(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task, TResult> continuationFunction) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult>(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult>(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult>(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task FromAsync(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, object state) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task FromAsync(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task FromAsync(System.IAsyncResult asyncResult, System.Action<System.IAsyncResult> endMethod) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task FromAsync(System.IAsyncResult asyncResult, System.Action<System.IAsyncResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task FromAsync(System.IAsyncResult asyncResult, System.Action<System.IAsyncResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, object state) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TResult>(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, object state) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TResult>(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TResult>(System.IAsyncResult asyncResult, System.Func<System.IAsyncResult, TResult> endMethod) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TResult>(System.IAsyncResult asyncResult, System.Func<System.IAsyncResult, TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TResult>(System.IAsyncResult asyncResult, System.Func<System.IAsyncResult, TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TResult>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, object state) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TResult>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2, TResult>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2, TResult>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task StartNew(System.Action action) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task StartNew(System.Action action, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task StartNew(System.Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task StartNew(System.Action action, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task StartNew(System.Action<object> action, object state) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task StartNew(System.Action<object> action, object state, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task StartNew(System.Action<object> action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task StartNew(System.Action<object> action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task); }
    public System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<TResult> function) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<TResult> function, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<object, TResult> function, object state) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<object, TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
  }
  public partial class TaskFactory<TResult> {
    public TaskFactory() { }
    public TaskFactory(System.Threading.CancellationToken cancellationToken) { }
    public TaskFactory(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { }
    public TaskFactory(System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { }
    public TaskFactory(System.Threading.Tasks.TaskScheduler scheduler) { }
    public System.Threading.CancellationToken CancellationToken { get { return default(System.Threading.CancellationToken); } }
    public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get { return default(System.Threading.Tasks.TaskContinuationOptions); } }
    public System.Threading.Tasks.TaskCreationOptions CreationOptions { get { return default(System.Threading.Tasks.TaskCreationOptions); } }
    public System.Threading.Tasks.TaskScheduler Scheduler { get { return default(System.Threading.Tasks.TaskScheduler); } }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task[], TResult> continuationFunction) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task[], TResult> continuationFunction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task[], TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task[], TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult> continuationFunction) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult> continuationFunction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task, TResult> continuationFunction) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny(System.Threading.Tasks.Task[] tasks, System.Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[] tasks, System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, object state) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync(System.IAsyncResult asyncResult, System.Func<System.IAsyncResult, TResult> endMethod) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync(System.IAsyncResult asyncResult, System.Func<System.IAsyncResult, TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync(System.IAsyncResult asyncResult, System.Func<System.IAsyncResult, TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, object state) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew(System.Func<TResult> function) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew(System.Func<TResult> function, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew(System.Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew(System.Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew(System.Func<object, TResult> function, object state) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler) { return default(System.Threading.Tasks.Task<TResult>); }
    public System.Threading.Tasks.Task<TResult> StartNew(System.Func<object, TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions) { return default(System.Threading.Tasks.Task<TResult>); }
  }
  public abstract partial class TaskScheduler {
    protected TaskScheduler() { }
    public static System.Threading.Tasks.TaskScheduler Current { get { return default(System.Threading.Tasks.TaskScheduler); } }
    public static System.Threading.Tasks.TaskScheduler Default { get { return default(System.Threading.Tasks.TaskScheduler); } }
    public int Id { get { return default(int); } }
    public virtual int MaximumConcurrencyLevel { get { return default(int); } }
    public static event System.EventHandler<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> UnobservedTaskException { add { } remove { } }
    public static System.Threading.Tasks.TaskScheduler FromCurrentSynchronizationContext() { return default(System.Threading.Tasks.TaskScheduler); }
    [System.Security.SecurityCriticalAttribute]
    protected abstract System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> GetScheduledTasks();
    [System.Security.SecurityCriticalAttribute]
    protected internal abstract void QueueTask(System.Threading.Tasks.Task task);
    [System.Security.SecurityCriticalAttribute]
    protected internal virtual bool TryDequeue(System.Threading.Tasks.Task task) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    protected bool TryExecuteTask(System.Threading.Tasks.Task task) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    protected abstract bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
  }
  public partial class TaskSchedulerException : System.Exception {
    public TaskSchedulerException() { }
    public TaskSchedulerException(System.Exception innerException) { }
    public TaskSchedulerException(string message) { }
    public TaskSchedulerException(string message, System.Exception innerException) { }
  }
  public enum TaskStatus {
    Canceled = 6,
    Created = 0,
    Faulted = 7,
    RanToCompletion = 5,
    Running = 3,
    WaitingForActivation = 1,
    WaitingForChildrenToComplete = 4,
    WaitingToRun = 2,
  }
  public partial class UnobservedTaskExceptionEventArgs : System.EventArgs {
    public UnobservedTaskExceptionEventArgs(System.AggregateException exception) { }
    public System.AggregateException Exception { get { return default(System.AggregateException); } }
    public bool Observed { get { return default(bool); } }
    public void SetObserved() { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Threading.Tasks.Parallel")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Threading.Tasks.Parallel")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Threading.Tasks.Parallel")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Threading.Tasks {
  public static partial class Parallel {
    public static System.Threading.Tasks.ParallelLoopResult For(int fromInclusive, int toExclusive, System.Action<int, System.Threading.Tasks.ParallelLoopState> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult For(int fromInclusive, int toExclusive, System.Action<int> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult For(int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<int, System.Threading.Tasks.ParallelLoopState> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult For(int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<int> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult For(long fromInclusive, long toExclusive, System.Action<long, System.Threading.Tasks.ParallelLoopState> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult For(long fromInclusive, long toExclusive, System.Action<long> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult For(long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<long, System.Threading.Tasks.ParallelLoopState> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult For(long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<long> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, System.Func<TLocal> localInit, System.Func<int, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, System.Action<TLocal> localFinally) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, System.Func<TLocal> localInit, System.Func<int, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, System.Action<TLocal> localFinally) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, System.Func<TLocal> localInit, System.Func<long, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, System.Action<TLocal> localFinally) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, System.Func<TLocal> localInit, System.Func<long, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, System.Action<TLocal> localFinally) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource> source, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, long> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, long> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource> source, System.Action<TSource, System.Threading.Tasks.ParallelLoopState> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource> source, System.Action<TSource> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<TSource> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource> source, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, long> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource> source, System.Action<TSource, System.Threading.Tasks.ParallelLoopState> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource> source, System.Action<TSource> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, long> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<TSource> body) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource> source, System.Func<TLocal> localInit, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, long, TLocal, TLocal> body, System.Action<TLocal> localFinally) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, System.Func<TLocal> localInit, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, long, TLocal, TLocal> body, System.Action<TLocal> localFinally) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource> source, System.Func<TLocal> localInit, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, System.Action<TLocal> localFinally) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, System.Func<TLocal> localInit, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, System.Action<TLocal> localFinally) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource> source, System.Func<TLocal> localInit, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, System.Action<TLocal> localFinally) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource> source, System.Func<TLocal> localInit, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, long, TLocal, TLocal> body, System.Action<TLocal> localFinally) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, System.Func<TLocal> localInit, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, System.Action<TLocal> localFinally) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, System.Func<TLocal> localInit, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, long, TLocal, TLocal> body, System.Action<TLocal> localFinally) { return default(System.Threading.Tasks.ParallelLoopResult); }
    public static void Invoke(params System.Action[] actions) { }
    public static void Invoke(System.Threading.Tasks.ParallelOptions parallelOptions, params System.Action[] actions) { }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct ParallelLoopResult {
    public bool IsCompleted { get { return default(bool); } }
    public System.Nullable<long> LowestBreakIteration { get { return default(System.Nullable<long>); } }
  }
  public partial class ParallelLoopState {
    internal ParallelLoopState() { }
    public bool IsExceptional { get { return default(bool); } }
    public bool IsStopped { get { return default(bool); } }
    public System.Nullable<long> LowestBreakIteration { get { return default(System.Nullable<long>); } }
    public bool ShouldExitCurrentIteration { get { return default(bool); } }
    public void Break() { }
    public void Stop() { }
  }
  public partial class ParallelOptions {
    public ParallelOptions() { }
    public System.Threading.CancellationToken CancellationToken { get { return default(System.Threading.CancellationToken); } set { } }
    public int MaxDegreeOfParallelism { get { return default(int); } set { } }
    public System.Threading.Tasks.TaskScheduler TaskScheduler { get { return default(System.Threading.Tasks.TaskScheduler); } set { } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Threading.Thread")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Threading.Thread")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Threading.Thread")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Threading {
  [System.Runtime.InteropServices.ComVisibleAttribute(false)]
  public delegate void ParameterizedThreadStart(object obj);
  [System.Runtime.InteropServices.ComVisibleAttribute(true)]
  public sealed partial class Thread {
    public Thread(System.Threading.ParameterizedThreadStart start) { }
    public Thread(System.Threading.ThreadStart start) { }
    public static System.Threading.Thread CurrentThread { get { return default(System.Threading.Thread); } }
    public bool IsAlive { get { return default(bool); } }
    public bool IsBackground { get { return default(bool); } set { } }
    public int ManagedThreadId { get { return default(int); } }
    public string Name { get { return default(string); } set { } }
    public System.Threading.ThreadState ThreadState { get { return default(System.Threading.ThreadState); } }
    public void Join() { }
    public bool Join(int millisecondsTimeout) { return default(bool); }
    public static void Sleep(int millisecondsTimeout) { }
    public static void Sleep(System.TimeSpan timeout) { }
    public void Start() { }
    public void Start(object parameter) { }
  }
  [System.Runtime.InteropServices.ComVisibleAttribute(true)]
  public delegate void ThreadStart();
  public sealed partial class ThreadStartException : System.Exception {
    internal ThreadStartException() { }
  }
  [System.FlagsAttribute]
  [System.Runtime.InteropServices.ComVisibleAttribute(true)]
  public enum ThreadState {
    Aborted = 256,
    AbortRequested = 128,
    Background = 4,
    Running = 0,
    Stopped = 16,
    StopRequested = 1,
    Suspended = 64,
    SuspendRequested = 2,
    Unstarted = 8,
    WaitSleepJoin = 32,
  }
  [System.Runtime.InteropServices.ComVisibleAttribute(true)]
  public partial class ThreadStateException : System.Exception {
    public ThreadStateException() { }
    public ThreadStateException(string message) { }
    public ThreadStateException(string message, System.Exception innerException) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Threading.ThreadPool")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Threading.ThreadPool")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Threading.ThreadPool")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Threading {
  public sealed partial class RegisteredWaitHandle {
    internal RegisteredWaitHandle() { }
    public bool Unregister(System.Threading.WaitHandle waitObject) { return default(bool); }
  }
  public static partial class ThreadPool {
    [System.Security.SecurityCriticalAttribute]
    public static bool BindHandle(System.Runtime.InteropServices.SafeHandle osHandle) { return default(bool); }
    public static bool QueueUserWorkItem(System.Threading.WaitCallback callBack) { return default(bool); }
    public static bool QueueUserWorkItem(System.Threading.WaitCallback callBack, object state) { return default(bool); }
    public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce) { return default(System.Threading.RegisteredWaitHandle); }
    public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce) { return default(System.Threading.RegisteredWaitHandle); }
    public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, System.TimeSpan timeout, bool executeOnlyOnce) { return default(System.Threading.RegisteredWaitHandle); }
    [System.CLSCompliantAttribute(false)]
    public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce) { return default(System.Threading.RegisteredWaitHandle); }
  }
  public delegate void WaitCallback(object state);
  public delegate void WaitOrTimerCallback(object state, bool timedOut);
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Threading.Timer")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Threading.Timer")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Threading.Timer")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Threading {
  [System.Runtime.InteropServices.ComVisibleAttribute(true)]
  public sealed partial class Timer : System.IDisposable {
    public Timer(System.Threading.TimerCallback callback, object state, int dueTime, int period) { }
    public Timer(System.Threading.TimerCallback callback, object state, System.TimeSpan dueTime, System.TimeSpan period) { }
    public bool Change(int dueTime, int period) { return default(bool); }
    public bool Change(System.TimeSpan dueTime, System.TimeSpan period) { return default(bool); }
    public void Dispose() { }
  }
  [System.Runtime.InteropServices.ComVisibleAttribute(true)]
  public delegate void TimerCallback(object state);
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Xml.ReaderWriter")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Xml.ReaderWriter")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Xml.ReaderWriter")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Xml {
  public enum ConformanceLevel {
    Auto = 0,
    Document = 2,
    Fragment = 1,
  }
  public enum DtdProcessing {
    Ignore = 1,
    Prohibit = 0,
  }
  public partial interface IXmlLineInfo {
    int LineNumber { get; }
    int LinePosition { get; }
    bool HasLineInfo();
  }
  public partial interface IXmlNamespaceResolver {
    System.Collections.Generic.IDictionary<string, string> GetNamespacesInScope(System.Xml.XmlNamespaceScope scope);
    string LookupNamespace(string prefix);
    string LookupPrefix(string namespaceName);
  }
  [System.FlagsAttribute]
  public enum NamespaceHandling {
    Default = 0,
    OmitDuplicates = 1,
  }
  public partial class NameTable : System.Xml.XmlNameTable {
    public NameTable() { }
    public override string Add(char[] key, int start, int len) { return default(string); }
    public override string Add(string key) { return default(string); }
    public override string Get(char[] key, int start, int len) { return default(string); }
    public override string Get(string value) { return default(string); }
  }
  public enum NewLineHandling {
    Entitize = 1,
    None = 2,
    Replace = 0,
  }
  public enum ReadState {
    Closed = 4,
    EndOfFile = 3,
    Error = 2,
    Initial = 0,
    Interactive = 1,
  }
  public enum WriteState {
    Attribute = 3,
    Closed = 5,
    Content = 4,
    Element = 2,
    Error = 6,
    Prolog = 1,
    Start = 0,
  }
  public static partial class XmlConvert {
    public static string DecodeName(string name) { return default(string); }
    public static string EncodeLocalName(string name) { return default(string); }
    public static string EncodeName(string name) { return default(string); }
    public static string EncodeNmToken(string name) { return default(string); }
    public static bool ToBoolean(string s) { return default(bool); }
    public static byte ToByte(string s) { return default(byte); }
    public static char ToChar(string s) { return default(char); }
    public static System.DateTime ToDateTime(string s, System.Xml.XmlDateTimeSerializationMode dateTimeOption) { return default(System.DateTime); }
    public static System.DateTimeOffset ToDateTimeOffset(string s) { return default(System.DateTimeOffset); }
    public static System.DateTimeOffset ToDateTimeOffset(string s, string format) { return default(System.DateTimeOffset); }
    public static System.DateTimeOffset ToDateTimeOffset(string s, string[] formats) { return default(System.DateTimeOffset); }
    public static decimal ToDecimal(string s) { return default(decimal); }
    public static double ToDouble(string s) { return default(double); }
    public static System.Guid ToGuid(string s) { return default(System.Guid); }
    public static short ToInt16(string s) { return default(short); }
    public static int ToInt32(string s) { return default(int); }
    public static long ToInt64(string s) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static sbyte ToSByte(string s) { return default(sbyte); }
    public static float ToSingle(string s) { return default(float); }
    public static string ToString(bool value) { return default(string); }
    public static string ToString(byte value) { return default(string); }
    public static string ToString(char value) { return default(string); }
    public static string ToString(System.DateTime value, System.Xml.XmlDateTimeSerializationMode dateTimeOption) { return default(string); }
    public static string ToString(System.DateTimeOffset value) { return default(string); }
    public static string ToString(System.DateTimeOffset value, string format) { return default(string); }
    public static string ToString(decimal value) { return default(string); }
    public static string ToString(double value) { return default(string); }
    public static string ToString(System.Guid value) { return default(string); }
    public static string ToString(short value) { return default(string); }
    public static string ToString(int value) { return default(string); }
    public static string ToString(long value) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(sbyte value) { return default(string); }
    public static string ToString(float value) { return default(string); }
    public static string ToString(System.TimeSpan value) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(ushort value) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(uint value) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static string ToString(ulong value) { return default(string); }
    public static System.TimeSpan ToTimeSpan(string s) { return default(System.TimeSpan); }
    [System.CLSCompliantAttribute(false)]
    public static ushort ToUInt16(string s) { return default(ushort); }
    [System.CLSCompliantAttribute(false)]
    public static uint ToUInt32(string s) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static ulong ToUInt64(string s) { return default(ulong); }
    public static string VerifyName(string name) { return default(string); }
    public static string VerifyNCName(string name) { return default(string); }
    public static string VerifyNMTOKEN(string name) { return default(string); }
    public static string VerifyPublicId(string publicId) { return default(string); }
    public static string VerifyWhitespace(string content) { return default(string); }
    public static string VerifyXmlChars(string content) { return default(string); }
  }
  public enum XmlDateTimeSerializationMode {
    Local = 0,
    RoundtripKind = 3,
    Unspecified = 2,
    Utc = 1,
  }
  public partial class XmlException : System.Exception {
    public XmlException() { }
    public XmlException(string message) { }
    public XmlException(string message, System.Exception innerException) { }
    public XmlException(string message, System.Exception innerException, int lineNumber, int linePosition) { }
    public int LineNumber { get { return default(int); } }
    public int LinePosition { get { return default(int); } }
    public override string Message { get { return default(string); } }
  }
  public partial class XmlNamespaceManager : System.Collections.IEnumerable, System.Xml.IXmlNamespaceResolver {
    public XmlNamespaceManager(System.Xml.XmlNameTable nameTable) { }
    public virtual string DefaultNamespace { get { return default(string); } }
    public virtual System.Xml.XmlNameTable NameTable { get { return default(System.Xml.XmlNameTable); } }
    public virtual void AddNamespace(string prefix, string uri) { }
    public virtual System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public virtual System.Collections.Generic.IDictionary<string, string> GetNamespacesInScope(System.Xml.XmlNamespaceScope scope) { return default(System.Collections.Generic.IDictionary<string, string>); }
    public virtual bool HasNamespace(string prefix) { return default(bool); }
    public virtual string LookupNamespace(string prefix) { return default(string); }
    public virtual string LookupPrefix(string uri) { return default(string); }
    public virtual bool PopScope() { return default(bool); }
    public virtual void PushScope() { }
    public virtual void RemoveNamespace(string prefix, string uri) { }
  }
  public enum XmlNamespaceScope {
    All = 0,
    ExcludeXml = 1,
    Local = 2,
  }
  public abstract partial class XmlNameTable {
    protected XmlNameTable() { }
    public abstract string Add(char[] array, int offset, int length);
    public abstract string Add(string array);
    public abstract string Get(char[] array, int offset, int length);
    public abstract string Get(string array);
  }
  public enum XmlNodeType {
    Attribute = 2,
    CDATA = 4,
    Comment = 8,
    Document = 9,
    DocumentFragment = 11,
    DocumentType = 10,
    Element = 1,
    EndElement = 15,
    EndEntity = 16,
    Entity = 6,
    EntityReference = 5,
    None = 0,
    Notation = 12,
    ProcessingInstruction = 7,
    SignificantWhitespace = 14,
    Text = 3,
    Whitespace = 13,
    XmlDeclaration = 17,
  }
  public partial class XmlParserContext {
    public XmlParserContext(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, System.Xml.XmlSpace xmlSpace) { }
    public XmlParserContext(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, System.Xml.XmlSpace xmlSpace, System.Text.Encoding enc) { }
    public XmlParserContext(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, string xmlLang, System.Xml.XmlSpace xmlSpace) { }
    public XmlParserContext(System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, string xmlLang, System.Xml.XmlSpace xmlSpace, System.Text.Encoding enc) { }
    public string BaseURI { get { return default(string); } set { } }
    public string DocTypeName { get { return default(string); } set { } }
    public System.Text.Encoding Encoding { get { return default(System.Text.Encoding); } set { } }
    public string InternalSubset { get { return default(string); } set { } }
    public System.Xml.XmlNamespaceManager NamespaceManager { get { return default(System.Xml.XmlNamespaceManager); } set { } }
    public System.Xml.XmlNameTable NameTable { get { return default(System.Xml.XmlNameTable); } set { } }
    public string PublicId { get { return default(string); } set { } }
    public string SystemId { get { return default(string); } set { } }
    public string XmlLang { get { return default(string); } set { } }
    public System.Xml.XmlSpace XmlSpace { get { return default(System.Xml.XmlSpace); } set { } }
  }
  public partial class XmlQualifiedName {
    public static readonly System.Xml.XmlQualifiedName Empty;
    public XmlQualifiedName() { }
    public XmlQualifiedName(string name) { }
    public XmlQualifiedName(string name, string ns) { }
    public bool IsEmpty { get { return default(bool); } }
    public string Name { get { return default(string); } }
    public string Namespace { get { return default(string); } }
    public override bool Equals(object other) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Xml.XmlQualifiedName a, System.Xml.XmlQualifiedName b) { return default(bool); }
    public static bool operator !=(System.Xml.XmlQualifiedName a, System.Xml.XmlQualifiedName b) { return default(bool); }
    public override string ToString() { return default(string); }
    public static string ToString(string name, string ns) { return default(string); }
  }
  public abstract partial class XmlReader : System.IDisposable {
    protected XmlReader() { }
    public abstract int AttributeCount { get; }
    public abstract string BaseURI { get; }
    public virtual bool CanReadBinaryContent { get { return default(bool); } }
    public virtual bool CanReadValueChunk { get { return default(bool); } }
    public virtual bool CanResolveEntity { get { return default(bool); } }
    public abstract int Depth { get; }
    public abstract bool EOF { get; }
    public virtual bool HasAttributes { get { return default(bool); } }
    public virtual bool HasValue { get { return default(bool); } }
    public virtual bool IsDefault { get { return default(bool); } }
    public abstract bool IsEmptyElement { get; }
    public virtual string this[int i] { get { return default(string); } }
    public virtual string this[string name] { get { return default(string); } }
    public virtual string this[string name, string namespaceURI] { get { return default(string); } }
    public abstract string LocalName { get; }
    public virtual string Name { get { return default(string); } }
    public abstract string NamespaceURI { get; }
    public abstract System.Xml.XmlNameTable NameTable { get; }
    public abstract System.Xml.XmlNodeType NodeType { get; }
    public abstract string Prefix { get; }
    public abstract System.Xml.ReadState ReadState { get; }
    public virtual System.Xml.XmlReaderSettings Settings { get { return default(System.Xml.XmlReaderSettings); } }
    public abstract string Value { get; }
    public virtual System.Type ValueType { get { return default(System.Type); } }
    public virtual string XmlLang { get { return default(string); } }
    public virtual System.Xml.XmlSpace XmlSpace { get { return default(System.Xml.XmlSpace); } }
    public static System.Xml.XmlReader Create(System.IO.Stream input) { return default(System.Xml.XmlReader); }
    public static System.Xml.XmlReader Create(System.IO.Stream input, System.Xml.XmlReaderSettings settings) { return default(System.Xml.XmlReader); }
    public static System.Xml.XmlReader Create(System.IO.Stream input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext) { return default(System.Xml.XmlReader); }
    public static System.Xml.XmlReader Create(System.IO.TextReader input) { return default(System.Xml.XmlReader); }
    public static System.Xml.XmlReader Create(System.IO.TextReader input, System.Xml.XmlReaderSettings settings) { return default(System.Xml.XmlReader); }
    public static System.Xml.XmlReader Create(System.IO.TextReader input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext) { return default(System.Xml.XmlReader); }
    public static System.Xml.XmlReader Create(string inputUri) { return default(System.Xml.XmlReader); }
    public static System.Xml.XmlReader Create(string inputUri, System.Xml.XmlReaderSettings settings) { return default(System.Xml.XmlReader); }
    public static System.Xml.XmlReader Create(System.Xml.XmlReader reader, System.Xml.XmlReaderSettings settings) { return default(System.Xml.XmlReader); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public abstract string GetAttribute(int i);
    public abstract string GetAttribute(string name);
    public abstract string GetAttribute(string name, string namespaceURI);
    public virtual System.Threading.Tasks.Task<string> GetValueAsync() { return default(System.Threading.Tasks.Task<string>); }
    public static bool IsName(string str) { return default(bool); }
    public static bool IsNameToken(string str) { return default(bool); }
    public virtual bool IsStartElement() { return default(bool); }
    public virtual bool IsStartElement(string name) { return default(bool); }
    public virtual bool IsStartElement(string localname, string ns) { return default(bool); }
    public abstract string LookupNamespace(string prefix);
    public virtual void MoveToAttribute(int i) { }
    public abstract bool MoveToAttribute(string name);
    public abstract bool MoveToAttribute(string name, string ns);
    public virtual System.Xml.XmlNodeType MoveToContent() { return default(System.Xml.XmlNodeType); }
    public virtual System.Threading.Tasks.Task<System.Xml.XmlNodeType> MoveToContentAsync() { return default(System.Threading.Tasks.Task<System.Xml.XmlNodeType>); }
    public abstract bool MoveToElement();
    public abstract bool MoveToFirstAttribute();
    public abstract bool MoveToNextAttribute();
    public abstract bool Read();
    public virtual System.Threading.Tasks.Task<bool> ReadAsync() { return default(System.Threading.Tasks.Task<bool>); }
    public abstract bool ReadAttributeValue();
    public virtual object ReadContentAs(System.Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver) { return default(object); }
    public virtual System.Threading.Tasks.Task<object> ReadContentAsAsync(System.Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver) { return default(System.Threading.Tasks.Task<object>); }
    public virtual int ReadContentAsBase64(byte[] buffer, int index, int count) { return default(int); }
    public virtual System.Threading.Tasks.Task<int> ReadContentAsBase64Async(byte[] buffer, int index, int count) { return default(System.Threading.Tasks.Task<int>); }
    public virtual int ReadContentAsBinHex(byte[] buffer, int index, int count) { return default(int); }
    public virtual System.Threading.Tasks.Task<int> ReadContentAsBinHexAsync(byte[] buffer, int index, int count) { return default(System.Threading.Tasks.Task<int>); }
    public virtual bool ReadContentAsBoolean() { return default(bool); }
    public virtual System.DateTimeOffset ReadContentAsDateTimeOffset() { return default(System.DateTimeOffset); }
    public virtual decimal ReadContentAsDecimal() { return default(decimal); }
    public virtual double ReadContentAsDouble() { return default(double); }
    public virtual float ReadContentAsFloat() { return default(float); }
    public virtual int ReadContentAsInt() { return default(int); }
    public virtual long ReadContentAsLong() { return default(long); }
    public virtual object ReadContentAsObject() { return default(object); }
    public virtual System.Threading.Tasks.Task<object> ReadContentAsObjectAsync() { return default(System.Threading.Tasks.Task<object>); }
    public virtual string ReadContentAsString() { return default(string); }
    public virtual System.Threading.Tasks.Task<string> ReadContentAsStringAsync() { return default(System.Threading.Tasks.Task<string>); }
    public virtual object ReadElementContentAs(System.Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver) { return default(object); }
    public virtual object ReadElementContentAs(System.Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI) { return default(object); }
    public virtual System.Threading.Tasks.Task<object> ReadElementContentAsAsync(System.Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver) { return default(System.Threading.Tasks.Task<object>); }
    public virtual int ReadElementContentAsBase64(byte[] buffer, int index, int count) { return default(int); }
    public virtual System.Threading.Tasks.Task<int> ReadElementContentAsBase64Async(byte[] buffer, int index, int count) { return default(System.Threading.Tasks.Task<int>); }
    public virtual int ReadElementContentAsBinHex(byte[] buffer, int index, int count) { return default(int); }
    public virtual System.Threading.Tasks.Task<int> ReadElementContentAsBinHexAsync(byte[] buffer, int index, int count) { return default(System.Threading.Tasks.Task<int>); }
    public virtual bool ReadElementContentAsBoolean() { return default(bool); }
    public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI) { return default(bool); }
    public virtual decimal ReadElementContentAsDecimal() { return default(decimal); }
    public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI) { return default(decimal); }
    public virtual double ReadElementContentAsDouble() { return default(double); }
    public virtual double ReadElementContentAsDouble(string localName, string namespaceURI) { return default(double); }
    public virtual float ReadElementContentAsFloat() { return default(float); }
    public virtual float ReadElementContentAsFloat(string localName, string namespaceURI) { return default(float); }
    public virtual int ReadElementContentAsInt() { return default(int); }
    public virtual int ReadElementContentAsInt(string localName, string namespaceURI) { return default(int); }
    public virtual long ReadElementContentAsLong() { return default(long); }
    public virtual long ReadElementContentAsLong(string localName, string namespaceURI) { return default(long); }
    public virtual object ReadElementContentAsObject() { return default(object); }
    public virtual object ReadElementContentAsObject(string localName, string namespaceURI) { return default(object); }
    public virtual System.Threading.Tasks.Task<object> ReadElementContentAsObjectAsync() { return default(System.Threading.Tasks.Task<object>); }
    public virtual string ReadElementContentAsString() { return default(string); }
    public virtual string ReadElementContentAsString(string localName, string namespaceURI) { return default(string); }
    public virtual System.Threading.Tasks.Task<string> ReadElementContentAsStringAsync() { return default(System.Threading.Tasks.Task<string>); }
    public virtual void ReadEndElement() { }
    public virtual string ReadInnerXml() { return default(string); }
    public virtual System.Threading.Tasks.Task<string> ReadInnerXmlAsync() { return default(System.Threading.Tasks.Task<string>); }
    public virtual string ReadOuterXml() { return default(string); }
    public virtual System.Threading.Tasks.Task<string> ReadOuterXmlAsync() { return default(System.Threading.Tasks.Task<string>); }
    public virtual void ReadStartElement() { }
    public virtual void ReadStartElement(string name) { }
    public virtual void ReadStartElement(string localname, string ns) { }
    public virtual System.Xml.XmlReader ReadSubtree() { return default(System.Xml.XmlReader); }
    public virtual bool ReadToDescendant(string name) { return default(bool); }
    public virtual bool ReadToDescendant(string localName, string namespaceURI) { return default(bool); }
    public virtual bool ReadToFollowing(string name) { return default(bool); }
    public virtual bool ReadToFollowing(string localName, string namespaceURI) { return default(bool); }
    public virtual bool ReadToNextSibling(string name) { return default(bool); }
    public virtual bool ReadToNextSibling(string localName, string namespaceURI) { return default(bool); }
    public virtual int ReadValueChunk(char[] buffer, int index, int count) { return default(int); }
    public virtual System.Threading.Tasks.Task<int> ReadValueChunkAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task<int>); }
    public abstract void ResolveEntity();
    public virtual void Skip() { }
    public virtual System.Threading.Tasks.Task SkipAsync() { return default(System.Threading.Tasks.Task); }
  }
  public sealed partial class XmlReaderSettings {
    public XmlReaderSettings() { }
    public bool Async { get { return default(bool); } set { } }
    public bool CheckCharacters { get { return default(bool); } set { } }
    public bool CloseInput { get { return default(bool); } set { } }
    public System.Xml.ConformanceLevel ConformanceLevel { get { return default(System.Xml.ConformanceLevel); } set { } }
    public System.Xml.DtdProcessing DtdProcessing { get { return default(System.Xml.DtdProcessing); } set { } }
    public bool IgnoreComments { get { return default(bool); } set { } }
    public bool IgnoreProcessingInstructions { get { return default(bool); } set { } }
    public bool IgnoreWhitespace { get { return default(bool); } set { } }
    public int LineNumberOffset { get { return default(int); } set { } }
    public int LinePositionOffset { get { return default(int); } set { } }
    public long MaxCharactersFromEntities { get { return default(long); } set { } }
    public long MaxCharactersInDocument { get { return default(long); } set { } }
    public System.Xml.XmlNameTable NameTable { get { return default(System.Xml.XmlNameTable); } set { } }
    public System.Xml.XmlReaderSettings Clone() { return default(System.Xml.XmlReaderSettings); }
    public void Reset() { }
  }
  public enum XmlSpace {
    Default = 1,
    None = 0,
    Preserve = 2,
  }
  public abstract partial class XmlWriter : System.IDisposable {
    protected XmlWriter() { }
    public virtual System.Xml.XmlWriterSettings Settings { get { return default(System.Xml.XmlWriterSettings); } }
    public abstract System.Xml.WriteState WriteState { get; }
    public virtual string XmlLang { get { return default(string); } }
    public virtual System.Xml.XmlSpace XmlSpace { get { return default(System.Xml.XmlSpace); } }
    public static System.Xml.XmlWriter Create(System.IO.Stream output) { return default(System.Xml.XmlWriter); }
    public static System.Xml.XmlWriter Create(System.IO.Stream output, System.Xml.XmlWriterSettings settings) { return default(System.Xml.XmlWriter); }
    public static System.Xml.XmlWriter Create(System.IO.TextWriter output) { return default(System.Xml.XmlWriter); }
    public static System.Xml.XmlWriter Create(System.IO.TextWriter output, System.Xml.XmlWriterSettings settings) { return default(System.Xml.XmlWriter); }
    public static System.Xml.XmlWriter Create(System.Text.StringBuilder output) { return default(System.Xml.XmlWriter); }
    public static System.Xml.XmlWriter Create(System.Text.StringBuilder output, System.Xml.XmlWriterSettings settings) { return default(System.Xml.XmlWriter); }
    public static System.Xml.XmlWriter Create(System.Xml.XmlWriter output) { return default(System.Xml.XmlWriter); }
    public static System.Xml.XmlWriter Create(System.Xml.XmlWriter output, System.Xml.XmlWriterSettings settings) { return default(System.Xml.XmlWriter); }
    public void Dispose() { }
    protected virtual void Dispose(bool disposing) { }
    public abstract void Flush();
    public virtual System.Threading.Tasks.Task FlushAsync() { return default(System.Threading.Tasks.Task); }
    public abstract string LookupPrefix(string ns);
    public virtual void WriteAttributes(System.Xml.XmlReader reader, bool defattr) { }
    public virtual System.Threading.Tasks.Task WriteAttributesAsync(System.Xml.XmlReader reader, bool defattr) { return default(System.Threading.Tasks.Task); }
    public void WriteAttributeString(string localName, string value) { }
    public void WriteAttributeString(string localName, string ns, string value) { }
    public void WriteAttributeString(string prefix, string localName, string ns, string value) { }
    public System.Threading.Tasks.Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value) { return default(System.Threading.Tasks.Task); }
    public abstract void WriteBase64(byte[] buffer, int index, int count);
    public virtual System.Threading.Tasks.Task WriteBase64Async(byte[] buffer, int index, int count) { return default(System.Threading.Tasks.Task); }
    public virtual void WriteBinHex(byte[] buffer, int index, int count) { }
    public virtual System.Threading.Tasks.Task WriteBinHexAsync(byte[] buffer, int index, int count) { return default(System.Threading.Tasks.Task); }
    public abstract void WriteCData(string text);
    public virtual System.Threading.Tasks.Task WriteCDataAsync(string text) { return default(System.Threading.Tasks.Task); }
    public abstract void WriteCharEntity(char ch);
    public virtual System.Threading.Tasks.Task WriteCharEntityAsync(char ch) { return default(System.Threading.Tasks.Task); }
    public abstract void WriteChars(char[] buffer, int index, int count);
    public virtual System.Threading.Tasks.Task WriteCharsAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task); }
    public abstract void WriteComment(string text);
    public virtual System.Threading.Tasks.Task WriteCommentAsync(string text) { return default(System.Threading.Tasks.Task); }
    public abstract void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual System.Threading.Tasks.Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset) { return default(System.Threading.Tasks.Task); }
    public void WriteElementString(string localName, string value) { }
    public void WriteElementString(string localName, string ns, string value) { }
    public void WriteElementString(string prefix, string localName, string ns, string value) { }
    public System.Threading.Tasks.Task WriteElementStringAsync(string prefix, string localName, string ns, string value) { return default(System.Threading.Tasks.Task); }
    public abstract void WriteEndAttribute();
    protected internal virtual System.Threading.Tasks.Task WriteEndAttributeAsync() { return default(System.Threading.Tasks.Task); }
    public abstract void WriteEndDocument();
    public virtual System.Threading.Tasks.Task WriteEndDocumentAsync() { return default(System.Threading.Tasks.Task); }
    public abstract void WriteEndElement();
    public virtual System.Threading.Tasks.Task WriteEndElementAsync() { return default(System.Threading.Tasks.Task); }
    public abstract void WriteEntityRef(string name);
    public virtual System.Threading.Tasks.Task WriteEntityRefAsync(string name) { return default(System.Threading.Tasks.Task); }
    public abstract void WriteFullEndElement();
    public virtual System.Threading.Tasks.Task WriteFullEndElementAsync() { return default(System.Threading.Tasks.Task); }
    public virtual void WriteName(string name) { }
    public virtual System.Threading.Tasks.Task WriteNameAsync(string name) { return default(System.Threading.Tasks.Task); }
    public virtual void WriteNmToken(string name) { }
    public virtual System.Threading.Tasks.Task WriteNmTokenAsync(string name) { return default(System.Threading.Tasks.Task); }
    public virtual void WriteNode(System.Xml.XmlReader reader, bool defattr) { }
    public virtual System.Threading.Tasks.Task WriteNodeAsync(System.Xml.XmlReader reader, bool defattr) { return default(System.Threading.Tasks.Task); }
    public abstract void WriteProcessingInstruction(string name, string text);
    public virtual System.Threading.Tasks.Task WriteProcessingInstructionAsync(string name, string text) { return default(System.Threading.Tasks.Task); }
    public virtual void WriteQualifiedName(string localName, string ns) { }
    public virtual System.Threading.Tasks.Task WriteQualifiedNameAsync(string localName, string ns) { return default(System.Threading.Tasks.Task); }
    public abstract void WriteRaw(char[] buffer, int index, int count);
    public abstract void WriteRaw(string data);
    public virtual System.Threading.Tasks.Task WriteRawAsync(char[] buffer, int index, int count) { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task WriteRawAsync(string data) { return default(System.Threading.Tasks.Task); }
    public void WriteStartAttribute(string localName) { }
    public void WriteStartAttribute(string localName, string ns) { }
    public abstract void WriteStartAttribute(string prefix, string localName, string ns);
    protected internal virtual System.Threading.Tasks.Task WriteStartAttributeAsync(string prefix, string localName, string ns) { return default(System.Threading.Tasks.Task); }
    public abstract void WriteStartDocument();
    public abstract void WriteStartDocument(bool standalone);
    public virtual System.Threading.Tasks.Task WriteStartDocumentAsync() { return default(System.Threading.Tasks.Task); }
    public virtual System.Threading.Tasks.Task WriteStartDocumentAsync(bool standalone) { return default(System.Threading.Tasks.Task); }
    public void WriteStartElement(string localName) { }
    public void WriteStartElement(string localName, string ns) { }
    public abstract void WriteStartElement(string prefix, string localName, string ns);
    public virtual System.Threading.Tasks.Task WriteStartElementAsync(string prefix, string localName, string ns) { return default(System.Threading.Tasks.Task); }
    public abstract void WriteString(string text);
    public virtual System.Threading.Tasks.Task WriteStringAsync(string text) { return default(System.Threading.Tasks.Task); }
    public abstract void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual System.Threading.Tasks.Task WriteSurrogateCharEntityAsync(char lowChar, char highChar) { return default(System.Threading.Tasks.Task); }
    public virtual void WriteValue(bool value) { }
    public virtual void WriteValue(System.DateTime value) { }
    public virtual void WriteValue(System.DateTimeOffset value) { }
    public virtual void WriteValue(decimal value) { }
    public virtual void WriteValue(double value) { }
    public virtual void WriteValue(int value) { }
    public virtual void WriteValue(long value) { }
    public virtual void WriteValue(object value) { }
    public virtual void WriteValue(float value) { }
    public virtual void WriteValue(string value) { }
    public abstract void WriteWhitespace(string ws);
    public virtual System.Threading.Tasks.Task WriteWhitespaceAsync(string ws) { return default(System.Threading.Tasks.Task); }
  }
  public sealed partial class XmlWriterSettings {
    public XmlWriterSettings() { }
    public bool Async { get { return default(bool); } set { } }
    public bool CheckCharacters { get { return default(bool); } set { } }
    public bool CloseOutput { get { return default(bool); } set { } }
    public System.Xml.ConformanceLevel ConformanceLevel { get { return default(System.Xml.ConformanceLevel); } set { } }
    public System.Text.Encoding Encoding { get { return default(System.Text.Encoding); } set { } }
    public bool Indent { get { return default(bool); } set { } }
    public string IndentChars { get { return default(string); } set { } }
    public System.Xml.NamespaceHandling NamespaceHandling { get { return default(System.Xml.NamespaceHandling); } set { } }
    public string NewLineChars { get { return default(string); } set { } }
    public System.Xml.NewLineHandling NewLineHandling { get { return default(System.Xml.NewLineHandling); } set { } }
    public bool NewLineOnAttributes { get { return default(bool); } set { } }
    public bool OmitXmlDeclaration { get { return default(bool); } set { } }
    public bool WriteEndDocumentOnClose { get { return default(bool); } set { } }
    public System.Xml.XmlWriterSettings Clone() { return default(System.Xml.XmlWriterSettings); }
    public void Reset() { }
  }
}
namespace System.Xml.Schema {
  [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
  public partial class XmlSchema {
    internal XmlSchema() { }
  }
  public enum XmlSchemaForm {
    None = 0,
    Qualified = 1,
    Unqualified = 2,
  }
}
namespace System.Xml.Serialization {
  public partial interface IXmlSerializable {
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    System.Xml.Schema.XmlSchema GetSchema();
    void ReadXml(System.Xml.XmlReader reader);
    void WriteXml(System.Xml.XmlWriter writer);
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1036))]
  public sealed partial class XmlSchemaProviderAttribute : System.Attribute {
    public XmlSchemaProviderAttribute(string methodName) { }
    public bool IsAny { get { return default(bool); } set { } }
    public string MethodName { get { return default(string); } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Xml.XDocument")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Xml.XDocument")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Xml.XDocument")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Xml.Linq {
  public static partial class Extensions {
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors<T>(this System.Collections.Generic.IEnumerable<T> source) where T : System.Xml.Linq.XNode { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors<T>(this System.Collections.Generic.IEnumerable<T> source, System.Xml.Linq.XName name) where T : System.Xml.Linq.XNode { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf(this System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> source) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf(this System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> source, System.Xml.Linq.XName name) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes(this System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> source) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes(this System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> source, System.Xml.Linq.XName name) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodes<T>(this System.Collections.Generic.IEnumerable<T> source) where T : System.Xml.Linq.XContainer { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodesAndSelf(this System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> source) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants<T>(this System.Collections.Generic.IEnumerable<T> source) where T : System.Xml.Linq.XContainer { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants<T>(this System.Collections.Generic.IEnumerable<T> source, System.Xml.Linq.XName name) where T : System.Xml.Linq.XContainer { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf(this System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> source) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf(this System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> source, System.Xml.Linq.XName name) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements<T>(this System.Collections.Generic.IEnumerable<T> source) where T : System.Xml.Linq.XContainer { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements<T>(this System.Collections.Generic.IEnumerable<T> source, System.Xml.Linq.XName name) where T : System.Xml.Linq.XContainer { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public static System.Collections.Generic.IEnumerable<T> InDocumentOrder<T>(this System.Collections.Generic.IEnumerable<T> source) where T : System.Xml.Linq.XNode { return default(System.Collections.Generic.IEnumerable<T>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> Nodes<T>(this System.Collections.Generic.IEnumerable<T> source) where T : System.Xml.Linq.XContainer { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>); }
    public static void Remove(this System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> source) { }
    public static void Remove<T>(this System.Collections.Generic.IEnumerable<T> source) where T : System.Xml.Linq.XNode { }
  }
  [System.FlagsAttribute]
  public enum LoadOptions {
    None = 0,
    PreserveWhitespace = 1,
    SetBaseUri = 2,
    SetLineInfo = 4,
  }
  [System.FlagsAttribute]
  public enum ReaderOptions {
    None = 0,
    OmitDuplicateNamespaces = 1,
  }
  [System.FlagsAttribute]
  public enum SaveOptions {
    DisableFormatting = 1,
    None = 0,
    OmitDuplicateNamespaces = 2,
  }
  public partial class XAttribute : System.Xml.Linq.XObject {
    public XAttribute(System.Xml.Linq.XAttribute other) { }
    public XAttribute(System.Xml.Linq.XName name, object value) { }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> EmptySequence { get { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>); } }
    public bool IsNamespaceDeclaration { get { return default(bool); } }
    public System.Xml.Linq.XName Name { get { return default(System.Xml.Linq.XName); } }
    public System.Xml.Linq.XAttribute NextAttribute { get { return default(System.Xml.Linq.XAttribute); } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public System.Xml.Linq.XAttribute PreviousAttribute { get { return default(System.Xml.Linq.XAttribute); } }
    public string Value { get { return default(string); } set { } }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator bool (System.Xml.Linq.XAttribute attribute) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.DateTime (System.Xml.Linq.XAttribute attribute) { return default(System.DateTime); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.DateTimeOffset (System.Xml.Linq.XAttribute attribute) { return default(System.DateTimeOffset); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator decimal (System.Xml.Linq.XAttribute attribute) { return default(decimal); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator double (System.Xml.Linq.XAttribute attribute) { return default(double); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Guid (System.Xml.Linq.XAttribute attribute) { return default(System.Guid); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator int (System.Xml.Linq.XAttribute attribute) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator long (System.Xml.Linq.XAttribute attribute) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<bool> (System.Xml.Linq.XAttribute attribute) { return default(System.Nullable<bool>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<System.DateTime> (System.Xml.Linq.XAttribute attribute) { return default(System.Nullable<System.DateTime>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<System.DateTimeOffset> (System.Xml.Linq.XAttribute attribute) { return default(System.Nullable<System.DateTimeOffset>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<decimal> (System.Xml.Linq.XAttribute attribute) { return default(System.Nullable<decimal>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<double> (System.Xml.Linq.XAttribute attribute) { return default(System.Nullable<double>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<System.Guid> (System.Xml.Linq.XAttribute attribute) { return default(System.Nullable<System.Guid>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<int> (System.Xml.Linq.XAttribute attribute) { return default(System.Nullable<int>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<long> (System.Xml.Linq.XAttribute attribute) { return default(System.Nullable<long>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<float> (System.Xml.Linq.XAttribute attribute) { return default(System.Nullable<float>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<System.TimeSpan> (System.Xml.Linq.XAttribute attribute) { return default(System.Nullable<System.TimeSpan>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<uint> (System.Xml.Linq.XAttribute attribute) { return default(System.Nullable<uint>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<ulong> (System.Xml.Linq.XAttribute attribute) { return default(System.Nullable<ulong>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator float (System.Xml.Linq.XAttribute attribute) { return default(float); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator string (System.Xml.Linq.XAttribute attribute) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.TimeSpan (System.Xml.Linq.XAttribute attribute) { return default(System.TimeSpan); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator uint (System.Xml.Linq.XAttribute attribute) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator ulong (System.Xml.Linq.XAttribute attribute) { return default(ulong); }
    public void Remove() { }
    public void SetValue(object value) { }
    public override string ToString() { return default(string); }
  }
  public partial class XCData : System.Xml.Linq.XText {
    public XCData(string value) : base (default(string)) { }
    public XCData(System.Xml.Linq.XCData other) : base (default(string)) { }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public override void WriteTo(System.Xml.XmlWriter writer) { }
  }
  public partial class XComment : System.Xml.Linq.XNode {
    public XComment(string value) { }
    public XComment(System.Xml.Linq.XComment other) { }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public string Value { get { return default(string); } set { } }
    public override void WriteTo(System.Xml.XmlWriter writer) { }
  }
  public abstract partial class XContainer : System.Xml.Linq.XNode {
    internal XContainer() { }
    public System.Xml.Linq.XNode FirstNode { get { return default(System.Xml.Linq.XNode); } }
    public System.Xml.Linq.XNode LastNode { get { return default(System.Xml.Linq.XNode); } }
    public void Add(object content) { }
    public void Add(params object[] content) { }
    public void AddFirst(object content) { }
    public void AddFirst(params object[] content) { }
    public System.Xml.XmlWriter CreateWriter() { return default(System.Xml.XmlWriter); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodes() { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants() { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Descendants(System.Xml.Linq.XName name) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public System.Xml.Linq.XElement Element(System.Xml.Linq.XName name) { return default(System.Xml.Linq.XElement); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements() { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Elements(System.Xml.Linq.XName name) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> Nodes() { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>); }
    public void RemoveNodes() { }
    public void ReplaceNodes(object content) { }
    public void ReplaceNodes(params object[] content) { }
  }
  public partial class XDeclaration {
    public XDeclaration(string version, string encoding, string standalone) { }
    public XDeclaration(System.Xml.Linq.XDeclaration other) { }
    public string Encoding { get { return default(string); } set { } }
    public string Standalone { get { return default(string); } set { } }
    public string Version { get { return default(string); } set { } }
    public override string ToString() { return default(string); }
  }
  public partial class XDocument : System.Xml.Linq.XContainer {
    public XDocument() { }
    public XDocument(params object[] content) { }
    public XDocument(System.Xml.Linq.XDeclaration declaration, params object[] content) { }
    public XDocument(System.Xml.Linq.XDocument other) { }
    public System.Xml.Linq.XDeclaration Declaration { get { return default(System.Xml.Linq.XDeclaration); } set { } }
    public System.Xml.Linq.XDocumentType DocumentType { get { return default(System.Xml.Linq.XDocumentType); } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public System.Xml.Linq.XElement Root { get { return default(System.Xml.Linq.XElement); } }
    public static System.Xml.Linq.XDocument Load(System.IO.Stream stream) { return default(System.Xml.Linq.XDocument); }
    public static System.Xml.Linq.XDocument Load(System.IO.Stream stream, System.Xml.Linq.LoadOptions options) { return default(System.Xml.Linq.XDocument); }
    public static System.Xml.Linq.XDocument Load(System.IO.TextReader textReader) { return default(System.Xml.Linq.XDocument); }
    public static System.Xml.Linq.XDocument Load(System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options) { return default(System.Xml.Linq.XDocument); }
    public static System.Xml.Linq.XDocument Load(string uri) { return default(System.Xml.Linq.XDocument); }
    public static System.Xml.Linq.XDocument Load(string uri, System.Xml.Linq.LoadOptions options) { return default(System.Xml.Linq.XDocument); }
    public static System.Xml.Linq.XDocument Load(System.Xml.XmlReader reader) { return default(System.Xml.Linq.XDocument); }
    public static System.Xml.Linq.XDocument Load(System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options) { return default(System.Xml.Linq.XDocument); }
    public static System.Xml.Linq.XDocument Parse(string text) { return default(System.Xml.Linq.XDocument); }
    public static System.Xml.Linq.XDocument Parse(string text, System.Xml.Linq.LoadOptions options) { return default(System.Xml.Linq.XDocument); }
    public void Save(System.IO.Stream stream) { }
    public void Save(System.IO.Stream stream, System.Xml.Linq.SaveOptions options) { }
    public void Save(System.IO.TextWriter textWriter) { }
    public void Save(System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options) { }
    public void Save(System.Xml.XmlWriter writer) { }
    public override void WriteTo(System.Xml.XmlWriter writer) { }
  }
  public partial class XDocumentType : System.Xml.Linq.XNode {
    public XDocumentType(string name, string publicId, string systemId, string internalSubset) { }
    public XDocumentType(System.Xml.Linq.XDocumentType other) { }
    public string InternalSubset { get { return default(string); } set { } }
    public string Name { get { return default(string); } set { } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public string PublicId { get { return default(string); } set { } }
    public string SystemId { get { return default(string); } set { } }
    public override void WriteTo(System.Xml.XmlWriter writer) { }
  }
  public partial class XElement : System.Xml.Linq.XContainer, System.Xml.Serialization.IXmlSerializable {
    public XElement(System.Xml.Linq.XElement other) { }
    public XElement(System.Xml.Linq.XName name) { }
    public XElement(System.Xml.Linq.XName name, object content) { }
    public XElement(System.Xml.Linq.XName name, params object[] content) { }
    public XElement(System.Xml.Linq.XStreamingElement other) { }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> EmptySequence { get { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); } }
    public System.Xml.Linq.XAttribute FirstAttribute { get { return default(System.Xml.Linq.XAttribute); } }
    public bool HasAttributes { get { return default(bool); } }
    public bool HasElements { get { return default(bool); } }
    public bool IsEmpty { get { return default(bool); } }
    public System.Xml.Linq.XAttribute LastAttribute { get { return default(System.Xml.Linq.XAttribute); } }
    public System.Xml.Linq.XName Name { get { return default(System.Xml.Linq.XName); } set { } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public string Value { get { return default(string); } set { } }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf() { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> AncestorsAndSelf(System.Xml.Linq.XName name) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public System.Xml.Linq.XAttribute Attribute(System.Xml.Linq.XName name) { return default(System.Xml.Linq.XAttribute); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes() { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute> Attributes(System.Xml.Linq.XName name) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> DescendantNodesAndSelf() { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf() { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> DescendantsAndSelf(System.Xml.Linq.XName name) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public System.Xml.Linq.XNamespace GetDefaultNamespace() { return default(System.Xml.Linq.XNamespace); }
    public System.Xml.Linq.XNamespace GetNamespaceOfPrefix(string prefix) { return default(System.Xml.Linq.XNamespace); }
    public string GetPrefixOfNamespace(System.Xml.Linq.XNamespace ns) { return default(string); }
    public static System.Xml.Linq.XElement Load(System.IO.Stream stream) { return default(System.Xml.Linq.XElement); }
    public static System.Xml.Linq.XElement Load(System.IO.Stream stream, System.Xml.Linq.LoadOptions options) { return default(System.Xml.Linq.XElement); }
    public static System.Xml.Linq.XElement Load(System.IO.TextReader textReader) { return default(System.Xml.Linq.XElement); }
    public static System.Xml.Linq.XElement Load(System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options) { return default(System.Xml.Linq.XElement); }
    public static System.Xml.Linq.XElement Load(string uri) { return default(System.Xml.Linq.XElement); }
    public static System.Xml.Linq.XElement Load(string uri, System.Xml.Linq.LoadOptions options) { return default(System.Xml.Linq.XElement); }
    public static System.Xml.Linq.XElement Load(System.Xml.XmlReader reader) { return default(System.Xml.Linq.XElement); }
    public static System.Xml.Linq.XElement Load(System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options) { return default(System.Xml.Linq.XElement); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator bool (System.Xml.Linq.XElement element) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.DateTime (System.Xml.Linq.XElement element) { return default(System.DateTime); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.DateTimeOffset (System.Xml.Linq.XElement element) { return default(System.DateTimeOffset); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator decimal (System.Xml.Linq.XElement element) { return default(decimal); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator double (System.Xml.Linq.XElement element) { return default(double); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Guid (System.Xml.Linq.XElement element) { return default(System.Guid); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator int (System.Xml.Linq.XElement element) { return default(int); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator long (System.Xml.Linq.XElement element) { return default(long); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<bool> (System.Xml.Linq.XElement element) { return default(System.Nullable<bool>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<System.DateTime> (System.Xml.Linq.XElement element) { return default(System.Nullable<System.DateTime>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<System.DateTimeOffset> (System.Xml.Linq.XElement element) { return default(System.Nullable<System.DateTimeOffset>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<decimal> (System.Xml.Linq.XElement element) { return default(System.Nullable<decimal>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<double> (System.Xml.Linq.XElement element) { return default(System.Nullable<double>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<System.Guid> (System.Xml.Linq.XElement element) { return default(System.Nullable<System.Guid>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<int> (System.Xml.Linq.XElement element) { return default(System.Nullable<int>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<long> (System.Xml.Linq.XElement element) { return default(System.Nullable<long>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<float> (System.Xml.Linq.XElement element) { return default(System.Nullable<float>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<System.TimeSpan> (System.Xml.Linq.XElement element) { return default(System.Nullable<System.TimeSpan>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<uint> (System.Xml.Linq.XElement element) { return default(System.Nullable<uint>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.Nullable<ulong> (System.Xml.Linq.XElement element) { return default(System.Nullable<ulong>); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator float (System.Xml.Linq.XElement element) { return default(float); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator string (System.Xml.Linq.XElement element) { return default(string); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator System.TimeSpan (System.Xml.Linq.XElement element) { return default(System.TimeSpan); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator uint (System.Xml.Linq.XElement element) { return default(uint); }
    [System.CLSCompliantAttribute(false)]
    public static explicit operator ulong (System.Xml.Linq.XElement element) { return default(ulong); }
    public static System.Xml.Linq.XElement Parse(string text) { return default(System.Xml.Linq.XElement); }
    public static System.Xml.Linq.XElement Parse(string text, System.Xml.Linq.LoadOptions options) { return default(System.Xml.Linq.XElement); }
    public void RemoveAll() { }
    public void RemoveAttributes() { }
    public void ReplaceAll(object content) { }
    public void ReplaceAll(params object[] content) { }
    public void ReplaceAttributes(object content) { }
    public void ReplaceAttributes(params object[] content) { }
    public void Save(System.IO.Stream stream) { }
    public void Save(System.IO.Stream stream, System.Xml.Linq.SaveOptions options) { }
    public void Save(System.IO.TextWriter textWriter) { }
    public void Save(System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options) { }
    public void Save(System.Xml.XmlWriter writer) { }
    public void SetAttributeValue(System.Xml.Linq.XName name, object value) { }
    public void SetElementValue(System.Xml.Linq.XName name, object value) { }
    public void SetValue(object value) { }
    System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() { return default(System.Xml.Schema.XmlSchema); }
    void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader) { }
    void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer) { }
    public override void WriteTo(System.Xml.XmlWriter writer) { }
  }
  public sealed partial class XName : System.IEquatable<System.Xml.Linq.XName> {
    internal XName() { }
    public string LocalName { get { return default(string); } }
    public System.Xml.Linq.XNamespace Namespace { get { return default(System.Xml.Linq.XNamespace); } }
    public string NamespaceName { get { return default(string); } }
    public override bool Equals(object obj) { return default(bool); }
    public static System.Xml.Linq.XName Get(string expandedName) { return default(System.Xml.Linq.XName); }
    public static System.Xml.Linq.XName Get(string localName, string namespaceName) { return default(System.Xml.Linq.XName); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Xml.Linq.XName left, System.Xml.Linq.XName right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator System.Xml.Linq.XName (string expandedName) { return default(System.Xml.Linq.XName); }
    public static bool operator !=(System.Xml.Linq.XName left, System.Xml.Linq.XName right) { return default(bool); }
    bool System.IEquatable<System.Xml.Linq.XName>.Equals(System.Xml.Linq.XName other) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  public sealed partial class XNamespace {
    internal XNamespace() { }
    public string NamespaceName { get { return default(string); } }
    public static System.Xml.Linq.XNamespace None { get { return default(System.Xml.Linq.XNamespace); } }
    public static System.Xml.Linq.XNamespace Xml { get { return default(System.Xml.Linq.XNamespace); } }
    public static System.Xml.Linq.XNamespace Xmlns { get { return default(System.Xml.Linq.XNamespace); } }
    public override bool Equals(object obj) { return default(bool); }
    public static System.Xml.Linq.XNamespace Get(string namespaceName) { return default(System.Xml.Linq.XNamespace); }
    public override int GetHashCode() { return default(int); }
    public System.Xml.Linq.XName GetName(string localName) { return default(System.Xml.Linq.XName); }
    public static System.Xml.Linq.XName operator +(System.Xml.Linq.XNamespace ns, string localName) { return default(System.Xml.Linq.XName); }
    public static bool operator ==(System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public static implicit operator System.Xml.Linq.XNamespace (string namespaceName) { return default(System.Xml.Linq.XNamespace); }
    public static bool operator !=(System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  public abstract partial class XNode : System.Xml.Linq.XObject {
    internal XNode() { }
    public static System.Xml.Linq.XNodeDocumentOrderComparer DocumentOrderComparer { get { return default(System.Xml.Linq.XNodeDocumentOrderComparer); } }
    public static System.Xml.Linq.XNodeEqualityComparer EqualityComparer { get { return default(System.Xml.Linq.XNodeEqualityComparer); } }
    public System.Xml.Linq.XNode NextNode { get { return default(System.Xml.Linq.XNode); } }
    public System.Xml.Linq.XNode PreviousNode { get { return default(System.Xml.Linq.XNode); } }
    public void AddAfterSelf(object content) { }
    public void AddAfterSelf(params object[] content) { }
    public void AddBeforeSelf(object content) { }
    public void AddBeforeSelf(params object[] content) { }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors() { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> Ancestors(System.Xml.Linq.XName name) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public static int CompareDocumentOrder(System.Xml.Linq.XNode n1, System.Xml.Linq.XNode n2) { return default(int); }
    public System.Xml.XmlReader CreateReader() { return default(System.Xml.XmlReader); }
    public System.Xml.XmlReader CreateReader(System.Xml.Linq.ReaderOptions readerOptions) { return default(System.Xml.XmlReader); }
    public static bool DeepEquals(System.Xml.Linq.XNode n1, System.Xml.Linq.XNode n2) { return default(bool); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsAfterSelf() { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsAfterSelf(System.Xml.Linq.XName name) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsBeforeSelf() { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> ElementsBeforeSelf(System.Xml.Linq.XName name) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public bool IsAfter(System.Xml.Linq.XNode node) { return default(bool); }
    public bool IsBefore(System.Xml.Linq.XNode node) { return default(bool); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> NodesAfterSelf() { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>); }
    public System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode> NodesBeforeSelf() { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>); }
    public static System.Xml.Linq.XNode ReadFrom(System.Xml.XmlReader reader) { return default(System.Xml.Linq.XNode); }
    public void Remove() { }
    public void ReplaceWith(object content) { }
    public void ReplaceWith(params object[] content) { }
    public override string ToString() { return default(string); }
    public string ToString(System.Xml.Linq.SaveOptions options) { return default(string); }
    public abstract void WriteTo(System.Xml.XmlWriter writer);
  }
  public sealed partial class XNodeDocumentOrderComparer : System.Collections.Generic.IComparer<System.Xml.Linq.XNode>, System.Collections.IComparer {
    public XNodeDocumentOrderComparer() { }
    public int Compare(System.Xml.Linq.XNode x, System.Xml.Linq.XNode y) { return default(int); }
    int System.Collections.IComparer.Compare(object x, object y) { return default(int); }
  }
  public sealed partial class XNodeEqualityComparer : System.Collections.Generic.IEqualityComparer<System.Xml.Linq.XNode>, System.Collections.IEqualityComparer {
    public XNodeEqualityComparer() { }
    public bool Equals(System.Xml.Linq.XNode x, System.Xml.Linq.XNode y) { return default(bool); }
    public int GetHashCode(System.Xml.Linq.XNode obj) { return default(int); }
    bool System.Collections.IEqualityComparer.Equals(object x, object y) { return default(bool); }
    int System.Collections.IEqualityComparer.GetHashCode(object obj) { return default(int); }
  }
  public abstract partial class XObject : System.Xml.IXmlLineInfo {
    internal XObject() { }
    public string BaseUri { get { return default(string); } }
    public System.Xml.Linq.XDocument Document { get { return default(System.Xml.Linq.XDocument); } }
    public abstract System.Xml.XmlNodeType NodeType { get; }
    public System.Xml.Linq.XElement Parent { get { return default(System.Xml.Linq.XElement); } }
    int System.Xml.IXmlLineInfo.LineNumber { get { return default(int); } }
    int System.Xml.IXmlLineInfo.LinePosition { get { return default(int); } }
    public event System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs> Changed { add { } remove { } }
    public event System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs> Changing { add { } remove { } }
    public void AddAnnotation(object annotation) { }
    public object Annotation(System.Type type) { return default(object); }
    public T Annotation<T>() where T : class { return default(T); }
    public System.Collections.Generic.IEnumerable<object> Annotations(System.Type type) { return default(System.Collections.Generic.IEnumerable<object>); }
    public System.Collections.Generic.IEnumerable<T> Annotations<T>() where T : class { return default(System.Collections.Generic.IEnumerable<T>); }
    public void RemoveAnnotations(System.Type type) { }
    public void RemoveAnnotations<T>() where T : class { }
    bool System.Xml.IXmlLineInfo.HasLineInfo() { return default(bool); }
  }
  public enum XObjectChange {
    Add = 0,
    Name = 2,
    Remove = 1,
    Value = 3,
  }
  public partial class XObjectChangeEventArgs : System.EventArgs {
    public static readonly System.Xml.Linq.XObjectChangeEventArgs Add;
    public static readonly System.Xml.Linq.XObjectChangeEventArgs Name;
    public static readonly System.Xml.Linq.XObjectChangeEventArgs Remove;
    public static readonly System.Xml.Linq.XObjectChangeEventArgs Value;
    public XObjectChangeEventArgs(System.Xml.Linq.XObjectChange objectChange) { }
    public System.Xml.Linq.XObjectChange ObjectChange { get { return default(System.Xml.Linq.XObjectChange); } }
  }
  public partial class XProcessingInstruction : System.Xml.Linq.XNode {
    public XProcessingInstruction(string target, string data) { }
    public XProcessingInstruction(System.Xml.Linq.XProcessingInstruction other) { }
    public string Data { get { return default(string); } set { } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public string Target { get { return default(string); } set { } }
    public override void WriteTo(System.Xml.XmlWriter writer) { }
  }
  public partial class XStreamingElement {
    public XStreamingElement(System.Xml.Linq.XName name) { }
    public XStreamingElement(System.Xml.Linq.XName name, object content) { }
    public XStreamingElement(System.Xml.Linq.XName name, params object[] content) { }
    public System.Xml.Linq.XName Name { get { return default(System.Xml.Linq.XName); } set { } }
    public void Add(object content) { }
    public void Add(params object[] content) { }
    public void Save(System.IO.Stream stream) { }
    public void Save(System.IO.Stream stream, System.Xml.Linq.SaveOptions options) { }
    public void Save(System.IO.TextWriter textWriter) { }
    public void Save(System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options) { }
    public void Save(System.Xml.XmlWriter writer) { }
    public override string ToString() { return default(string); }
    public string ToString(System.Xml.Linq.SaveOptions options) { return default(string); }
    public void WriteTo(System.Xml.XmlWriter writer) { }
  }
  public partial class XText : System.Xml.Linq.XNode {
    public XText(string value) { }
    public XText(System.Xml.Linq.XText other) { }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public string Value { get { return default(string); } set { } }
    public override void WriteTo(System.Xml.XmlWriter writer) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Xml.XmlDocument")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Xml.XmlDocument")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Xml.XmlDocument")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Xml {
  public partial class XmlAttribute : System.Xml.XmlNode {
    protected internal XmlAttribute(string prefix, string localName, string namespaceURI, System.Xml.XmlDocument doc) { }
    public override string BaseURI { get { return default(string); } }
    public override string InnerText { set { } }
    public override string InnerXml { set { } }
    public override string LocalName { get { return default(string); } }
    public override string Name { get { return default(string); } }
    public override string NamespaceURI { get { return default(string); } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public override System.Xml.XmlDocument OwnerDocument { get { return default(System.Xml.XmlDocument); } }
    public virtual System.Xml.XmlElement OwnerElement { get { return default(System.Xml.XmlElement); } }
    public override System.Xml.XmlNode ParentNode { get { return default(System.Xml.XmlNode); } }
    public override string Prefix { get { return default(string); } set { } }
    public virtual bool Specified { get { return default(bool); } }
    public override string Value { get { return default(string); } set { } }
    public override System.Xml.XmlNode AppendChild(System.Xml.XmlNode newChild) { return default(System.Xml.XmlNode); }
    public override System.Xml.XmlNode CloneNode(bool deep) { return default(System.Xml.XmlNode); }
    public override System.Xml.XmlNode InsertAfter(System.Xml.XmlNode newChild, System.Xml.XmlNode refChild) { return default(System.Xml.XmlNode); }
    public override System.Xml.XmlNode InsertBefore(System.Xml.XmlNode newChild, System.Xml.XmlNode refChild) { return default(System.Xml.XmlNode); }
    public override System.Xml.XmlNode PrependChild(System.Xml.XmlNode newChild) { return default(System.Xml.XmlNode); }
    public override System.Xml.XmlNode RemoveChild(System.Xml.XmlNode oldChild) { return default(System.Xml.XmlNode); }
    public override System.Xml.XmlNode ReplaceChild(System.Xml.XmlNode newChild, System.Xml.XmlNode oldChild) { return default(System.Xml.XmlNode); }
    public override void WriteContentTo(System.Xml.XmlWriter w) { }
    public override void WriteTo(System.Xml.XmlWriter w) { }
  }
  public sealed partial class XmlAttributeCollection : System.Xml.XmlNamedNodeMap, System.Collections.ICollection, System.Collections.IEnumerable {
    internal XmlAttributeCollection() { }
    [System.Runtime.CompilerServices.IndexerName("ItemOf")]
    public System.Xml.XmlAttribute this[int i] { get { return default(System.Xml.XmlAttribute); } }
    [System.Runtime.CompilerServices.IndexerName("ItemOf")]
    public System.Xml.XmlAttribute this[string name] { get { return default(System.Xml.XmlAttribute); } }
    [System.Runtime.CompilerServices.IndexerName("ItemOf")]
    public System.Xml.XmlAttribute this[string localName, string namespaceURI] { get { return default(System.Xml.XmlAttribute); } }
    int System.Collections.ICollection.Count { get { return default(int); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    public System.Xml.XmlAttribute Append(System.Xml.XmlAttribute node) { return default(System.Xml.XmlAttribute); }
    public void CopyTo(System.Xml.XmlAttribute[] array, int index) { }
    public System.Xml.XmlAttribute InsertAfter(System.Xml.XmlAttribute newNode, System.Xml.XmlAttribute refNode) { return default(System.Xml.XmlAttribute); }
    public System.Xml.XmlAttribute InsertBefore(System.Xml.XmlAttribute newNode, System.Xml.XmlAttribute refNode) { return default(System.Xml.XmlAttribute); }
    public System.Xml.XmlAttribute Prepend(System.Xml.XmlAttribute node) { return default(System.Xml.XmlAttribute); }
    public System.Xml.XmlAttribute Remove(System.Xml.XmlAttribute node) { return default(System.Xml.XmlAttribute); }
    public void RemoveAll() { }
    public System.Xml.XmlAttribute RemoveAt(int i) { return default(System.Xml.XmlAttribute); }
    public override System.Xml.XmlNode SetNamedItem(System.Xml.XmlNode node) { return default(System.Xml.XmlNode); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
  }
  public partial class XmlCDataSection : System.Xml.XmlCharacterData {
    protected internal XmlCDataSection(string data, System.Xml.XmlDocument doc) : base (default(string), default(System.Xml.XmlDocument)) { }
    public override string LocalName { get { return default(string); } }
    public override string Name { get { return default(string); } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public override System.Xml.XmlNode ParentNode { get { return default(System.Xml.XmlNode); } }
    public override System.Xml.XmlNode PreviousText { get { return default(System.Xml.XmlNode); } }
    public override System.Xml.XmlNode CloneNode(bool deep) { return default(System.Xml.XmlNode); }
    public override void WriteContentTo(System.Xml.XmlWriter w) { }
    public override void WriteTo(System.Xml.XmlWriter w) { }
  }
  public abstract partial class XmlCharacterData : System.Xml.XmlLinkedNode {
    protected internal XmlCharacterData(string data, System.Xml.XmlDocument doc) { }
    public virtual string Data { get { return default(string); } set { } }
    public virtual int Length { get { return default(int); } }
    public override string Value { get { return default(string); } set { } }
    public virtual void AppendData(string strData) { }
    public virtual void DeleteData(int offset, int count) { }
    public virtual void InsertData(int offset, string strData) { }
    public virtual void ReplaceData(int offset, int count, string strData) { }
    public virtual string Substring(int offset, int count) { return default(string); }
  }
  public partial class XmlComment : System.Xml.XmlCharacterData {
    protected internal XmlComment(string comment, System.Xml.XmlDocument doc) : base (default(string), default(System.Xml.XmlDocument)) { }
    public override string LocalName { get { return default(string); } }
    public override string Name { get { return default(string); } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public override System.Xml.XmlNode CloneNode(bool deep) { return default(System.Xml.XmlNode); }
    public override void WriteContentTo(System.Xml.XmlWriter w) { }
    public override void WriteTo(System.Xml.XmlWriter w) { }
  }
  public partial class XmlDeclaration : System.Xml.XmlLinkedNode {
    protected internal XmlDeclaration(string version, string encoding, string standalone, System.Xml.XmlDocument doc) { }
    public string Encoding { get { return default(string); } set { } }
    public override string InnerText { get { return default(string); } set { } }
    public override string LocalName { get { return default(string); } }
    public override string Name { get { return default(string); } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public string Standalone { get { return default(string); } set { } }
    public override string Value { get { return default(string); } set { } }
    public string Version { get { return default(string); } }
    public override System.Xml.XmlNode CloneNode(bool deep) { return default(System.Xml.XmlNode); }
    public override void WriteContentTo(System.Xml.XmlWriter w) { }
    public override void WriteTo(System.Xml.XmlWriter w) { }
  }
  public partial class XmlDocument : System.Xml.XmlNode {
    public XmlDocument() { }
    protected internal XmlDocument(System.Xml.XmlImplementation imp) { }
    public XmlDocument(System.Xml.XmlNameTable nt) { }
    public override string BaseURI { get { return default(string); } }
    public System.Xml.XmlElement DocumentElement { get { return default(System.Xml.XmlElement); } }
    public System.Xml.XmlImplementation Implementation { get { return default(System.Xml.XmlImplementation); } }
    public override string InnerText { set { } }
    public override string InnerXml { get { return default(string); } set { } }
    public override bool IsReadOnly { get { return default(bool); } }
    public override string LocalName { get { return default(string); } }
    public override string Name { get { return default(string); } }
    public System.Xml.XmlNameTable NameTable { get { return default(System.Xml.XmlNameTable); } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public override System.Xml.XmlDocument OwnerDocument { get { return default(System.Xml.XmlDocument); } }
    public override System.Xml.XmlNode ParentNode { get { return default(System.Xml.XmlNode); } }
    public bool PreserveWhitespace { get { return default(bool); } set { } }
    public event System.Xml.XmlNodeChangedEventHandler NodeChanged { add { } remove { } }
    public event System.Xml.XmlNodeChangedEventHandler NodeChanging { add { } remove { } }
    public event System.Xml.XmlNodeChangedEventHandler NodeInserted { add { } remove { } }
    public event System.Xml.XmlNodeChangedEventHandler NodeInserting { add { } remove { } }
    public event System.Xml.XmlNodeChangedEventHandler NodeRemoved { add { } remove { } }
    public event System.Xml.XmlNodeChangedEventHandler NodeRemoving { add { } remove { } }
    public override System.Xml.XmlNode CloneNode(bool deep) { return default(System.Xml.XmlNode); }
    public System.Xml.XmlAttribute CreateAttribute(string name) { return default(System.Xml.XmlAttribute); }
    public System.Xml.XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI) { return default(System.Xml.XmlAttribute); }
    public virtual System.Xml.XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI) { return default(System.Xml.XmlAttribute); }
    public virtual System.Xml.XmlCDataSection CreateCDataSection(string data) { return default(System.Xml.XmlCDataSection); }
    public virtual System.Xml.XmlComment CreateComment(string data) { return default(System.Xml.XmlComment); }
    public virtual System.Xml.XmlDocumentFragment CreateDocumentFragment() { return default(System.Xml.XmlDocumentFragment); }
    public System.Xml.XmlElement CreateElement(string name) { return default(System.Xml.XmlElement); }
    public System.Xml.XmlElement CreateElement(string qualifiedName, string namespaceURI) { return default(System.Xml.XmlElement); }
    public virtual System.Xml.XmlElement CreateElement(string prefix, string localName, string namespaceURI) { return default(System.Xml.XmlElement); }
    public virtual System.Xml.XmlNode CreateNode(string nodeTypeString, string name, string namespaceURI) { return default(System.Xml.XmlNode); }
    public virtual System.Xml.XmlNode CreateNode(System.Xml.XmlNodeType type, string name, string namespaceURI) { return default(System.Xml.XmlNode); }
    public virtual System.Xml.XmlNode CreateNode(System.Xml.XmlNodeType type, string prefix, string name, string namespaceURI) { return default(System.Xml.XmlNode); }
    public virtual System.Xml.XmlProcessingInstruction CreateProcessingInstruction(string target, string data) { return default(System.Xml.XmlProcessingInstruction); }
    public virtual System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace(string text) { return default(System.Xml.XmlSignificantWhitespace); }
    public virtual System.Xml.XmlText CreateTextNode(string text) { return default(System.Xml.XmlText); }
    public virtual System.Xml.XmlWhitespace CreateWhitespace(string text) { return default(System.Xml.XmlWhitespace); }
    public virtual System.Xml.XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone) { return default(System.Xml.XmlDeclaration); }
    public virtual System.Xml.XmlNodeList GetElementsByTagName(string name) { return default(System.Xml.XmlNodeList); }
    public virtual System.Xml.XmlNodeList GetElementsByTagName(string localName, string namespaceURI) { return default(System.Xml.XmlNodeList); }
    public virtual System.Xml.XmlNode ImportNode(System.Xml.XmlNode node, bool deep) { return default(System.Xml.XmlNode); }
    public virtual void Load(System.IO.Stream inStream) { }
    public virtual void Load(System.IO.TextReader txtReader) { }
    public virtual void Load(System.Xml.XmlReader reader) { }
    public virtual void LoadXml(string xml) { }
    public virtual System.Xml.XmlNode ReadNode(System.Xml.XmlReader reader) { return default(System.Xml.XmlNode); }
    public virtual void Save(System.IO.Stream outStream) { }
    public virtual void Save(System.IO.TextWriter writer) { }
    public virtual void Save(System.Xml.XmlWriter w) { }
    public override void WriteContentTo(System.Xml.XmlWriter xw) { }
    public override void WriteTo(System.Xml.XmlWriter w) { }
  }
  public partial class XmlDocumentFragment : System.Xml.XmlNode {
    protected internal XmlDocumentFragment(System.Xml.XmlDocument ownerDocument) { }
    public override string InnerXml { get { return default(string); } set { } }
    public override string LocalName { get { return default(string); } }
    public override string Name { get { return default(string); } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public override System.Xml.XmlDocument OwnerDocument { get { return default(System.Xml.XmlDocument); } }
    public override System.Xml.XmlNode ParentNode { get { return default(System.Xml.XmlNode); } }
    public override System.Xml.XmlNode CloneNode(bool deep) { return default(System.Xml.XmlNode); }
    public override void WriteContentTo(System.Xml.XmlWriter w) { }
    public override void WriteTo(System.Xml.XmlWriter w) { }
  }
  public partial class XmlElement : System.Xml.XmlLinkedNode {
    protected internal XmlElement(string prefix, string localName, string namespaceURI, System.Xml.XmlDocument doc) { }
    public override System.Xml.XmlAttributeCollection Attributes { get { return default(System.Xml.XmlAttributeCollection); } }
    public virtual bool HasAttributes { get { return default(bool); } }
    public override string InnerText { get { return default(string); } set { } }
    public override string InnerXml { get { return default(string); } set { } }
    public bool IsEmpty { get { return default(bool); } set { } }
    public override string LocalName { get { return default(string); } }
    public override string Name { get { return default(string); } }
    public override string NamespaceURI { get { return default(string); } }
    public override System.Xml.XmlNode NextSibling { get { return default(System.Xml.XmlNode); } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public override System.Xml.XmlDocument OwnerDocument { get { return default(System.Xml.XmlDocument); } }
    public override System.Xml.XmlNode ParentNode { get { return default(System.Xml.XmlNode); } }
    public override string Prefix { get { return default(string); } set { } }
    public override System.Xml.XmlNode CloneNode(bool deep) { return default(System.Xml.XmlNode); }
    public virtual string GetAttribute(string name) { return default(string); }
    public virtual string GetAttribute(string localName, string namespaceURI) { return default(string); }
    public virtual System.Xml.XmlAttribute GetAttributeNode(string name) { return default(System.Xml.XmlAttribute); }
    public virtual System.Xml.XmlAttribute GetAttributeNode(string localName, string namespaceURI) { return default(System.Xml.XmlAttribute); }
    public virtual System.Xml.XmlNodeList GetElementsByTagName(string name) { return default(System.Xml.XmlNodeList); }
    public virtual System.Xml.XmlNodeList GetElementsByTagName(string localName, string namespaceURI) { return default(System.Xml.XmlNodeList); }
    public virtual bool HasAttribute(string name) { return default(bool); }
    public virtual bool HasAttribute(string localName, string namespaceURI) { return default(bool); }
    public override void RemoveAll() { }
    public virtual void RemoveAllAttributes() { }
    public virtual void RemoveAttribute(string name) { }
    public virtual void RemoveAttribute(string localName, string namespaceURI) { }
    public virtual System.Xml.XmlNode RemoveAttributeAt(int i) { return default(System.Xml.XmlNode); }
    public virtual System.Xml.XmlAttribute RemoveAttributeNode(string localName, string namespaceURI) { return default(System.Xml.XmlAttribute); }
    public virtual System.Xml.XmlAttribute RemoveAttributeNode(System.Xml.XmlAttribute oldAttr) { return default(System.Xml.XmlAttribute); }
    public virtual void SetAttribute(string name, string value) { }
    public virtual string SetAttribute(string localName, string namespaceURI, string value) { return default(string); }
    public virtual System.Xml.XmlAttribute SetAttributeNode(string localName, string namespaceURI) { return default(System.Xml.XmlAttribute); }
    public virtual System.Xml.XmlAttribute SetAttributeNode(System.Xml.XmlAttribute newAttr) { return default(System.Xml.XmlAttribute); }
    public override void WriteContentTo(System.Xml.XmlWriter w) { }
    public override void WriteTo(System.Xml.XmlWriter w) { }
  }
  public partial class XmlImplementation {
    public XmlImplementation() { }
    public XmlImplementation(System.Xml.XmlNameTable nt) { }
    public virtual System.Xml.XmlDocument CreateDocument() { return default(System.Xml.XmlDocument); }
    public bool HasFeature(string strFeature, string strVersion) { return default(bool); }
  }
  public abstract partial class XmlLinkedNode : System.Xml.XmlNode {
    internal XmlLinkedNode() { }
    public override System.Xml.XmlNode NextSibling { get { return default(System.Xml.XmlNode); } }
    public override System.Xml.XmlNode PreviousSibling { get { return default(System.Xml.XmlNode); } }
  }
  public partial class XmlNamedNodeMap : System.Collections.IEnumerable {
    internal XmlNamedNodeMap() { }
    public virtual int Count { get { return default(int); } }
    public virtual System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public virtual System.Xml.XmlNode GetNamedItem(string name) { return default(System.Xml.XmlNode); }
    public virtual System.Xml.XmlNode GetNamedItem(string localName, string namespaceURI) { return default(System.Xml.XmlNode); }
    public virtual System.Xml.XmlNode Item(int index) { return default(System.Xml.XmlNode); }
    public virtual System.Xml.XmlNode RemoveNamedItem(string name) { return default(System.Xml.XmlNode); }
    public virtual System.Xml.XmlNode RemoveNamedItem(string localName, string namespaceURI) { return default(System.Xml.XmlNode); }
    public virtual System.Xml.XmlNode SetNamedItem(System.Xml.XmlNode node) { return default(System.Xml.XmlNode); }
  }
  public abstract partial class XmlNode : System.Collections.IEnumerable {
    internal XmlNode() { }
    public virtual System.Xml.XmlAttributeCollection Attributes { get { return default(System.Xml.XmlAttributeCollection); } }
    public virtual string BaseURI { get { return default(string); } }
    public virtual System.Xml.XmlNodeList ChildNodes { get { return default(System.Xml.XmlNodeList); } }
    public virtual System.Xml.XmlNode FirstChild { get { return default(System.Xml.XmlNode); } }
    public virtual bool HasChildNodes { get { return default(bool); } }
    public virtual string InnerText { get { return default(string); } set { } }
    public virtual string InnerXml { get { return default(string); } set { } }
    public virtual bool IsReadOnly { get { return default(bool); } }
    public virtual System.Xml.XmlElement this[string name] { get { return default(System.Xml.XmlElement); } }
    public virtual System.Xml.XmlElement this[string localname, string ns] { get { return default(System.Xml.XmlElement); } }
    public virtual System.Xml.XmlNode LastChild { get { return default(System.Xml.XmlNode); } }
    public abstract string LocalName { get; }
    public abstract string Name { get; }
    public virtual string NamespaceURI { get { return default(string); } }
    public virtual System.Xml.XmlNode NextSibling { get { return default(System.Xml.XmlNode); } }
    public abstract System.Xml.XmlNodeType NodeType { get; }
    public virtual string OuterXml { get { return default(string); } }
    public virtual System.Xml.XmlDocument OwnerDocument { get { return default(System.Xml.XmlDocument); } }
    public virtual System.Xml.XmlNode ParentNode { get { return default(System.Xml.XmlNode); } }
    public virtual string Prefix { get { return default(string); } set { } }
    public virtual System.Xml.XmlNode PreviousSibling { get { return default(System.Xml.XmlNode); } }
    public virtual System.Xml.XmlNode PreviousText { get { return default(System.Xml.XmlNode); } }
    public virtual string Value { get { return default(string); } set { } }
    public virtual System.Xml.XmlNode AppendChild(System.Xml.XmlNode newChild) { return default(System.Xml.XmlNode); }
    public abstract System.Xml.XmlNode CloneNode(bool deep);
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public virtual string GetNamespaceOfPrefix(string prefix) { return default(string); }
    public virtual string GetPrefixOfNamespace(string namespaceURI) { return default(string); }
    public virtual System.Xml.XmlNode InsertAfter(System.Xml.XmlNode newChild, System.Xml.XmlNode refChild) { return default(System.Xml.XmlNode); }
    public virtual System.Xml.XmlNode InsertBefore(System.Xml.XmlNode newChild, System.Xml.XmlNode refChild) { return default(System.Xml.XmlNode); }
    public virtual void Normalize() { }
    public virtual System.Xml.XmlNode PrependChild(System.Xml.XmlNode newChild) { return default(System.Xml.XmlNode); }
    public virtual void RemoveAll() { }
    public virtual System.Xml.XmlNode RemoveChild(System.Xml.XmlNode oldChild) { return default(System.Xml.XmlNode); }
    public virtual System.Xml.XmlNode ReplaceChild(System.Xml.XmlNode newChild, System.Xml.XmlNode oldChild) { return default(System.Xml.XmlNode); }
    public virtual bool Supports(string feature, string version) { return default(bool); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public abstract void WriteContentTo(System.Xml.XmlWriter w);
    public abstract void WriteTo(System.Xml.XmlWriter w);
  }
  public enum XmlNodeChangedAction {
    Change = 2,
    Insert = 0,
    Remove = 1,
  }
  public partial class XmlNodeChangedEventArgs : System.EventArgs {
    public XmlNodeChangedEventArgs(System.Xml.XmlNode node, System.Xml.XmlNode oldParent, System.Xml.XmlNode newParent, string oldValue, string newValue, System.Xml.XmlNodeChangedAction action) { }
    public System.Xml.XmlNodeChangedAction Action { get { return default(System.Xml.XmlNodeChangedAction); } }
    public System.Xml.XmlNode NewParent { get { return default(System.Xml.XmlNode); } }
    public string NewValue { get { return default(string); } }
    public System.Xml.XmlNode Node { get { return default(System.Xml.XmlNode); } }
    public System.Xml.XmlNode OldParent { get { return default(System.Xml.XmlNode); } }
    public string OldValue { get { return default(string); } }
  }
  public delegate void XmlNodeChangedEventHandler(object sender, System.Xml.XmlNodeChangedEventArgs e);
  public abstract partial class XmlNodeList : System.Collections.IEnumerable, System.IDisposable {
    protected XmlNodeList() { }
    public abstract int Count { get; }
    [System.Runtime.CompilerServices.IndexerName("ItemOf")]
    public virtual System.Xml.XmlNode this[int i] { get { return default(System.Xml.XmlNode); } }
    public abstract System.Collections.IEnumerator GetEnumerator();
    public abstract System.Xml.XmlNode Item(int index);
    protected virtual void PrivateDisposeNodeList() { }
    void System.IDisposable.Dispose() { }
  }
  public partial class XmlProcessingInstruction : System.Xml.XmlLinkedNode {
    protected internal XmlProcessingInstruction(string target, string data, System.Xml.XmlDocument doc) { }
    public string Data { get { return default(string); } set { } }
    public override string InnerText { get { return default(string); } set { } }
    public override string LocalName { get { return default(string); } }
    public override string Name { get { return default(string); } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public string Target { get { return default(string); } }
    public override string Value { get { return default(string); } set { } }
    public override System.Xml.XmlNode CloneNode(bool deep) { return default(System.Xml.XmlNode); }
    public override void WriteContentTo(System.Xml.XmlWriter w) { }
    public override void WriteTo(System.Xml.XmlWriter w) { }
  }
  public partial class XmlSignificantWhitespace : System.Xml.XmlCharacterData {
    protected internal XmlSignificantWhitespace(string strData, System.Xml.XmlDocument doc) : base (default(string), default(System.Xml.XmlDocument)) { }
    public override string LocalName { get { return default(string); } }
    public override string Name { get { return default(string); } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public override System.Xml.XmlNode ParentNode { get { return default(System.Xml.XmlNode); } }
    public override System.Xml.XmlNode PreviousText { get { return default(System.Xml.XmlNode); } }
    public override string Value { get { return default(string); } set { } }
    public override System.Xml.XmlNode CloneNode(bool deep) { return default(System.Xml.XmlNode); }
    public override void WriteContentTo(System.Xml.XmlWriter w) { }
    public override void WriteTo(System.Xml.XmlWriter w) { }
  }
  public partial class XmlText : System.Xml.XmlCharacterData {
    protected internal XmlText(string strData, System.Xml.XmlDocument doc) : base (default(string), default(System.Xml.XmlDocument)) { }
    public override string LocalName { get { return default(string); } }
    public override string Name { get { return default(string); } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public override System.Xml.XmlNode ParentNode { get { return default(System.Xml.XmlNode); } }
    public override System.Xml.XmlNode PreviousText { get { return default(System.Xml.XmlNode); } }
    public override string Value { get { return default(string); } set { } }
    public override System.Xml.XmlNode CloneNode(bool deep) { return default(System.Xml.XmlNode); }
    public virtual System.Xml.XmlText SplitText(int offset) { return default(System.Xml.XmlText); }
    public override void WriteContentTo(System.Xml.XmlWriter w) { }
    public override void WriteTo(System.Xml.XmlWriter w) { }
  }
  public partial class XmlWhitespace : System.Xml.XmlCharacterData {
    protected internal XmlWhitespace(string strData, System.Xml.XmlDocument doc) : base (default(string), default(System.Xml.XmlDocument)) { }
    public override string LocalName { get { return default(string); } }
    public override string Name { get { return default(string); } }
    public override System.Xml.XmlNodeType NodeType { get { return default(System.Xml.XmlNodeType); } }
    public override System.Xml.XmlNode ParentNode { get { return default(System.Xml.XmlNode); } }
    public override System.Xml.XmlNode PreviousText { get { return default(System.Xml.XmlNode); } }
    public override string Value { get { return default(string); } set { } }
    public override System.Xml.XmlNode CloneNode(bool deep) { return default(System.Xml.XmlNode); }
    public override void WriteContentTo(System.Xml.XmlWriter w) { }
    public override void WriteTo(System.Xml.XmlWriter w) { }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Xml.XmlSerializer")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Xml.XmlSerializer")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Xml.XmlSerializer")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Xml.Serialization {
  [System.AttributeUsageAttribute((System.AttributeTargets)(10624), AllowMultiple=false)]
  public partial class XmlAnyAttributeAttribute : System.Attribute {
    public XmlAnyAttributeAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(10624), AllowMultiple=true)]
  public partial class XmlAnyElementAttribute : System.Attribute {
    public XmlAnyElementAttribute() { }
    public XmlAnyElementAttribute(string name) { }
    public XmlAnyElementAttribute(string name, string ns) { }
    public string Name { get { return default(string); } set { } }
    public string Namespace { get { return default(string); } set { } }
    public int Order { get { return default(int); } set { } }
  }
  public partial class XmlAnyElementAttributes : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public XmlAnyElementAttributes() { }
    public int Count { get { return default(int); } }
    public System.Xml.Serialization.XmlAnyElementAttribute this[int index] { get { return default(System.Xml.Serialization.XmlAnyElementAttribute); } set { } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Xml.Serialization.XmlAnyElementAttribute attribute) { return default(int); }
    public void Clear() { }
    public bool Contains(System.Xml.Serialization.XmlAnyElementAttribute attribute) { return default(bool); }
    public void CopyTo(System.Xml.Serialization.XmlAnyElementAttribute[] array, int index) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Xml.Serialization.XmlAnyElementAttribute attribute) { return default(int); }
    public void Insert(int index, System.Xml.Serialization.XmlAnyElementAttribute attribute) { }
    public void Remove(System.Xml.Serialization.XmlAnyElementAttribute attribute) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(10624), AllowMultiple=false)]
  public partial class XmlArrayAttribute : System.Attribute {
    public XmlArrayAttribute() { }
    public XmlArrayAttribute(string elementName) { }
    public string ElementName { get { return default(string); } set { } }
    public System.Xml.Schema.XmlSchemaForm Form { get { return default(System.Xml.Schema.XmlSchemaForm); } set { } }
    public bool IsNullable { get { return default(bool); } set { } }
    public string Namespace { get { return default(string); } set { } }
    public int Order { get { return default(int); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(10624), AllowMultiple=true)]
  public partial class XmlArrayItemAttribute : System.Attribute {
    public XmlArrayItemAttribute() { }
    public XmlArrayItemAttribute(string elementName) { }
    public XmlArrayItemAttribute(string elementName, System.Type type) { }
    public XmlArrayItemAttribute(System.Type type) { }
    public string DataType { get { return default(string); } set { } }
    public string ElementName { get { return default(string); } set { } }
    public System.Xml.Schema.XmlSchemaForm Form { get { return default(System.Xml.Schema.XmlSchemaForm); } set { } }
    public bool IsNullable { get { return default(bool); } set { } }
    public string Namespace { get { return default(string); } set { } }
    public int NestingLevel { get { return default(int); } set { } }
    public System.Type Type { get { return default(System.Type); } set { } }
  }
  public partial class XmlArrayItemAttributes : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public XmlArrayItemAttributes() { }
    public int Count { get { return default(int); } }
    public System.Xml.Serialization.XmlArrayItemAttribute this[int index] { get { return default(System.Xml.Serialization.XmlArrayItemAttribute); } set { } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Xml.Serialization.XmlArrayItemAttribute attribute) { return default(int); }
    public void Clear() { }
    public bool Contains(System.Xml.Serialization.XmlArrayItemAttribute attribute) { return default(bool); }
    public void CopyTo(System.Xml.Serialization.XmlArrayItemAttribute[] array, int index) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Xml.Serialization.XmlArrayItemAttribute attribute) { return default(int); }
    public void Insert(int index, System.Xml.Serialization.XmlArrayItemAttribute attribute) { }
    public void Remove(System.Xml.Serialization.XmlArrayItemAttribute attribute) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(10624))]
  public partial class XmlAttributeAttribute : System.Attribute {
    public XmlAttributeAttribute() { }
    public XmlAttributeAttribute(string attributeName) { }
    public XmlAttributeAttribute(string attributeName, System.Type type) { }
    public XmlAttributeAttribute(System.Type type) { }
    public string AttributeName { get { return default(string); } set { } }
    public string DataType { get { return default(string); } set { } }
    public System.Xml.Schema.XmlSchemaForm Form { get { return default(System.Xml.Schema.XmlSchemaForm); } set { } }
    public string Namespace { get { return default(string); } set { } }
    public System.Type Type { get { return default(System.Type); } set { } }
  }
  public partial class XmlAttributeOverrides {
    public XmlAttributeOverrides() { }
    public System.Xml.Serialization.XmlAttributes this[System.Type type] { get { return default(System.Xml.Serialization.XmlAttributes); } }
    public System.Xml.Serialization.XmlAttributes this[System.Type type, string member] { get { return default(System.Xml.Serialization.XmlAttributes); } }
    public void Add(System.Type type, string member, System.Xml.Serialization.XmlAttributes attributes) { }
    public void Add(System.Type type, System.Xml.Serialization.XmlAttributes attributes) { }
  }
  public partial class XmlAttributes {
    public XmlAttributes() { }
    public System.Xml.Serialization.XmlAnyAttributeAttribute XmlAnyAttribute { get { return default(System.Xml.Serialization.XmlAnyAttributeAttribute); } set { } }
    public System.Xml.Serialization.XmlAnyElementAttributes XmlAnyElements { get { return default(System.Xml.Serialization.XmlAnyElementAttributes); } }
    public System.Xml.Serialization.XmlArrayAttribute XmlArray { get { return default(System.Xml.Serialization.XmlArrayAttribute); } set { } }
    public System.Xml.Serialization.XmlArrayItemAttributes XmlArrayItems { get { return default(System.Xml.Serialization.XmlArrayItemAttributes); } }
    public System.Xml.Serialization.XmlAttributeAttribute XmlAttribute { get { return default(System.Xml.Serialization.XmlAttributeAttribute); } set { } }
    public System.Xml.Serialization.XmlChoiceIdentifierAttribute XmlChoiceIdentifier { get { return default(System.Xml.Serialization.XmlChoiceIdentifierAttribute); } }
    public object XmlDefaultValue { get { return default(object); } set { } }
    public System.Xml.Serialization.XmlElementAttributes XmlElements { get { return default(System.Xml.Serialization.XmlElementAttributes); } }
    public System.Xml.Serialization.XmlEnumAttribute XmlEnum { get { return default(System.Xml.Serialization.XmlEnumAttribute); } set { } }
    public bool XmlIgnore { get { return default(bool); } set { } }
    public bool Xmlns { get { return default(bool); } set { } }
    public System.Xml.Serialization.XmlRootAttribute XmlRoot { get { return default(System.Xml.Serialization.XmlRootAttribute); } set { } }
    public System.Xml.Serialization.XmlTextAttribute XmlText { get { return default(System.Xml.Serialization.XmlTextAttribute); } set { } }
    public System.Xml.Serialization.XmlTypeAttribute XmlType { get { return default(System.Xml.Serialization.XmlTypeAttribute); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(10624), AllowMultiple=false)]
  public partial class XmlChoiceIdentifierAttribute : System.Attribute {
    public XmlChoiceIdentifierAttribute() { }
    public XmlChoiceIdentifierAttribute(string name) { }
    public string MemberName { get { return default(string); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(10624), AllowMultiple=true)]
  public partial class XmlElementAttribute : System.Attribute {
    public XmlElementAttribute() { }
    public XmlElementAttribute(string elementName) { }
    public XmlElementAttribute(string elementName, System.Type type) { }
    public XmlElementAttribute(System.Type type) { }
    public string DataType { get { return default(string); } set { } }
    public string ElementName { get { return default(string); } set { } }
    public System.Xml.Schema.XmlSchemaForm Form { get { return default(System.Xml.Schema.XmlSchemaForm); } set { } }
    public bool IsNullable { get { return default(bool); } set { } }
    public string Namespace { get { return default(string); } set { } }
    public int Order { get { return default(int); } set { } }
    public System.Type Type { get { return default(System.Type); } set { } }
  }
  public partial class XmlElementAttributes : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public XmlElementAttributes() { }
    public int Count { get { return default(int); } }
    public System.Xml.Serialization.XmlElementAttribute this[int index] { get { return default(System.Xml.Serialization.XmlElementAttribute); } set { } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Xml.Serialization.XmlElementAttribute attribute) { return default(int); }
    public void Clear() { }
    public bool Contains(System.Xml.Serialization.XmlElementAttribute attribute) { return default(bool); }
    public void CopyTo(System.Xml.Serialization.XmlElementAttribute[] array, int index) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Xml.Serialization.XmlElementAttribute attribute) { return default(int); }
    public void Insert(int index, System.Xml.Serialization.XmlElementAttribute attribute) { }
    public void Remove(System.Xml.Serialization.XmlElementAttribute attribute) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(256))]
  public partial class XmlEnumAttribute : System.Attribute {
    public XmlEnumAttribute() { }
    public XmlEnumAttribute(string name) { }
    public string Name { get { return default(string); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(10624))]
  public partial class XmlIgnoreAttribute : System.Attribute {
    public XmlIgnoreAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1100), AllowMultiple=true)]
  public partial class XmlIncludeAttribute : System.Attribute {
    public XmlIncludeAttribute(System.Type type) { }
    public System.Type Type { get { return default(System.Type); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(10624), AllowMultiple=false)]
  public partial class XmlNamespaceDeclarationsAttribute : System.Attribute {
    public XmlNamespaceDeclarationsAttribute() { }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(9244))]
  public partial class XmlRootAttribute : System.Attribute {
    public XmlRootAttribute() { }
    public XmlRootAttribute(string elementName) { }
    public string DataType { get { return default(string); } set { } }
    public string ElementName { get { return default(string); } set { } }
    public bool IsNullable { get { return default(bool); } set { } }
    public string Namespace { get { return default(string); } set { } }
  }
  public partial class XmlSerializer {
    protected XmlSerializer() { }
    public XmlSerializer(System.Type type) { }
    public XmlSerializer(System.Type type, string defaultNamespace) { }
    public XmlSerializer(System.Type type, System.Type[] extraTypes) { }
    public XmlSerializer(System.Type type, System.Xml.Serialization.XmlAttributeOverrides overrides) { }
    public XmlSerializer(System.Type type, System.Xml.Serialization.XmlAttributeOverrides overrides, System.Type[] extraTypes, System.Xml.Serialization.XmlRootAttribute root, string defaultNamespace) { }
    public XmlSerializer(System.Type type, System.Xml.Serialization.XmlRootAttribute root) { }
    public virtual bool CanDeserialize(System.Xml.XmlReader xmlReader) { return default(bool); }
    public object Deserialize(System.IO.Stream stream) { return default(object); }
    public object Deserialize(System.IO.TextReader textReader) { return default(object); }
    public object Deserialize(System.Xml.XmlReader xmlReader) { return default(object); }
    public static System.Xml.Serialization.XmlSerializer[] FromTypes(System.Type[] types) { return default(System.Xml.Serialization.XmlSerializer[]); }
    public void Serialize(System.IO.Stream stream, object o) { }
    public void Serialize(System.IO.Stream stream, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces) { }
    public void Serialize(System.IO.TextWriter textWriter, object o) { }
    public void Serialize(System.IO.TextWriter textWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces) { }
    public void Serialize(System.Xml.XmlWriter xmlWriter, object o) { }
    public void Serialize(System.Xml.XmlWriter xmlWriter, object o, System.Xml.Serialization.XmlSerializerNamespaces namespaces) { }
  }
  public partial class XmlSerializerNamespaces {
    public XmlSerializerNamespaces() { }
    public XmlSerializerNamespaces(System.Xml.Serialization.XmlSerializerNamespaces namespaces) { }
    public XmlSerializerNamespaces(System.Xml.XmlQualifiedName[] namespaces) { }
    public int Count { get { return default(int); } }
    public void Add(string prefix, string ns) { }
    public System.Xml.XmlQualifiedName[] ToArray() { return default(System.Xml.XmlQualifiedName[]); }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(10624))]
  public partial class XmlTextAttribute : System.Attribute {
    public XmlTextAttribute() { }
    public XmlTextAttribute(System.Type type) { }
    public string DataType { get { return default(string); } set { } }
    public System.Type Type { get { return default(System.Type); } set { } }
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(1052))]
  public partial class XmlTypeAttribute : System.Attribute {
    public XmlTypeAttribute() { }
    public XmlTypeAttribute(string typeName) { }
    public bool AnonymousType { get { return default(bool); } set { } }
    public bool IncludeInSchema { get { return default(bool); } set { } }
    public string Namespace { get { return default(string); } set { } }
    public string TypeName { get { return default(string); } set { } }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Xml.XPath")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Xml.XPath")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Xml.XPath")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Xml {
  public enum XmlNodeOrder {
    After = 1,
    Before = 0,
    Same = 2,
    Unknown = 3,
  }
}
namespace System.Xml.XPath {
  public partial interface IXPathNavigable {
    System.Xml.XPath.XPathNavigator CreateNavigator();
  }
  public enum XmlCaseOrder {
    LowerFirst = 2,
    None = 0,
    UpperFirst = 1,
  }
  public enum XmlDataType {
    Number = 2,
    Text = 1,
  }
  public enum XmlSortOrder {
    Ascending = 1,
    Descending = 2,
  }
  public partial class XPathDocument : System.Xml.XPath.IXPathNavigable {
    public XPathDocument(System.IO.Stream stream) { }
    public XPathDocument(System.IO.TextReader textReader) { }
    public XPathDocument(string uri) { }
    public XPathDocument(string uri, System.Xml.XmlSpace space) { }
    public XPathDocument(System.Xml.XmlReader reader) { }
    public XPathDocument(System.Xml.XmlReader reader, System.Xml.XmlSpace space) { }
    public System.Xml.XPath.XPathNavigator CreateNavigator() { return default(System.Xml.XPath.XPathNavigator); }
  }
  public partial class XPathException : System.Exception {
    public XPathException() { }
    public XPathException(string message) { }
    public XPathException(string message, System.Exception innerException) { }
  }
  public abstract partial class XPathExpression {
    internal XPathExpression() { }
    public abstract string Expression { get; }
    public abstract System.Xml.XPath.XPathResultType ReturnType { get; }
    public abstract void AddSort(object expr, System.Collections.IComparer comparer);
    public abstract void AddSort(object expr, System.Xml.XPath.XmlSortOrder order, System.Xml.XPath.XmlCaseOrder caseOrder, string lang, System.Xml.XPath.XmlDataType dataType);
    public abstract System.Xml.XPath.XPathExpression Clone();
    public static System.Xml.XPath.XPathExpression Compile(string xpath) { return default(System.Xml.XPath.XPathExpression); }
    public static System.Xml.XPath.XPathExpression Compile(string xpath, System.Xml.IXmlNamespaceResolver nsResolver) { return default(System.Xml.XPath.XPathExpression); }
    public abstract void SetContext(System.Xml.IXmlNamespaceResolver nsResolver);
    public abstract void SetContext(System.Xml.XmlNamespaceManager nsManager);
  }
  public abstract partial class XPathItem {
    internal XPathItem() { }
    public abstract bool IsNode { get; }
    public abstract object TypedValue { get; }
    public abstract string Value { get; }
    public abstract bool ValueAsBoolean { get; }
    public abstract System.DateTime ValueAsDateTime { get; }
    public abstract double ValueAsDouble { get; }
    public abstract int ValueAsInt { get; }
    public abstract long ValueAsLong { get; }
    public abstract System.Type ValueType { get; }
    public virtual object ValueAs(System.Type returnType) { return default(object); }
    public abstract object ValueAs(System.Type returnType, System.Xml.IXmlNamespaceResolver nsResolver);
  }
  public enum XPathNamespaceScope {
    All = 0,
    ExcludeXml = 1,
    Local = 2,
  }
  public abstract partial class XPathNavigator : System.Xml.XPath.XPathItem, System.Xml.IXmlNamespaceResolver, System.Xml.XPath.IXPathNavigable {
    protected XPathNavigator() { }
    public abstract string BaseURI { get; }
    public virtual bool CanEdit { get { return default(bool); } }
    public virtual bool HasAttributes { get { return default(bool); } }
    public virtual bool HasChildren { get { return default(bool); } }
    public virtual string InnerXml { get { return default(string); } set { } }
    public abstract bool IsEmptyElement { get; }
    public sealed override bool IsNode { get { return default(bool); } }
    public abstract string LocalName { get; }
    public abstract string Name { get; }
    public abstract string NamespaceURI { get; }
    public abstract System.Xml.XmlNameTable NameTable { get; }
    public static System.Collections.IEqualityComparer NavigatorComparer { get { return default(System.Collections.IEqualityComparer); } }
    public abstract System.Xml.XPath.XPathNodeType NodeType { get; }
    public virtual string OuterXml { get { return default(string); } set { } }
    public abstract string Prefix { get; }
    public override object TypedValue { get { return default(object); } }
    public virtual object UnderlyingObject { get { return default(object); } }
    public override bool ValueAsBoolean { get { return default(bool); } }
    public override System.DateTime ValueAsDateTime { get { return default(System.DateTime); } }
    public override double ValueAsDouble { get { return default(double); } }
    public override int ValueAsInt { get { return default(int); } }
    public override long ValueAsLong { get { return default(long); } }
    public override System.Type ValueType { get { return default(System.Type); } }
    public virtual string XmlLang { get { return default(string); } }
    public virtual System.Xml.XmlWriter AppendChild() { return default(System.Xml.XmlWriter); }
    public virtual void AppendChild(string newChild) { }
    public virtual void AppendChild(System.Xml.XmlReader newChild) { }
    public virtual void AppendChild(System.Xml.XPath.XPathNavigator newChild) { }
    public virtual void AppendChildElement(string prefix, string localName, string namespaceURI, string value) { }
    public abstract System.Xml.XPath.XPathNavigator Clone();
    public virtual System.Xml.XmlNodeOrder ComparePosition(System.Xml.XPath.XPathNavigator nav) { return default(System.Xml.XmlNodeOrder); }
    public virtual System.Xml.XPath.XPathExpression Compile(string xpath) { return default(System.Xml.XPath.XPathExpression); }
    public virtual void CreateAttribute(string prefix, string localName, string namespaceURI, string value) { }
    public virtual System.Xml.XmlWriter CreateAttributes() { return default(System.Xml.XmlWriter); }
    public virtual System.Xml.XPath.XPathNavigator CreateNavigator() { return default(System.Xml.XPath.XPathNavigator); }
    public virtual void DeleteRange(System.Xml.XPath.XPathNavigator lastSiblingToDelete) { }
    public virtual void DeleteSelf() { }
    public virtual object Evaluate(string xpath) { return default(object); }
    public virtual object Evaluate(string xpath, System.Xml.IXmlNamespaceResolver resolver) { return default(object); }
    public virtual object Evaluate(System.Xml.XPath.XPathExpression expr) { return default(object); }
    public virtual object Evaluate(System.Xml.XPath.XPathExpression expr, System.Xml.XPath.XPathNodeIterator context) { return default(object); }
    public virtual string GetAttribute(string localName, string namespaceURI) { return default(string); }
    public virtual string GetNamespace(string name) { return default(string); }
    public virtual System.Collections.Generic.IDictionary<string, string> GetNamespacesInScope(System.Xml.XmlNamespaceScope scope) { return default(System.Collections.Generic.IDictionary<string, string>); }
    public virtual System.Xml.XmlWriter InsertAfter() { return default(System.Xml.XmlWriter); }
    public virtual void InsertAfter(string newSibling) { }
    public virtual void InsertAfter(System.Xml.XmlReader newSibling) { }
    public virtual void InsertAfter(System.Xml.XPath.XPathNavigator newSibling) { }
    public virtual System.Xml.XmlWriter InsertBefore() { return default(System.Xml.XmlWriter); }
    public virtual void InsertBefore(string newSibling) { }
    public virtual void InsertBefore(System.Xml.XmlReader newSibling) { }
    public virtual void InsertBefore(System.Xml.XPath.XPathNavigator newSibling) { }
    public virtual void InsertElementAfter(string prefix, string localName, string namespaceURI, string value) { }
    public virtual void InsertElementBefore(string prefix, string localName, string namespaceURI, string value) { }
    public virtual bool IsDescendant(System.Xml.XPath.XPathNavigator nav) { return default(bool); }
    public abstract bool IsSamePosition(System.Xml.XPath.XPathNavigator other);
    public virtual string LookupNamespace(string prefix) { return default(string); }
    public virtual string LookupPrefix(string namespaceURI) { return default(string); }
    public virtual bool Matches(string xpath) { return default(bool); }
    public virtual bool Matches(System.Xml.XPath.XPathExpression expr) { return default(bool); }
    public abstract bool MoveTo(System.Xml.XPath.XPathNavigator other);
    public virtual bool MoveToAttribute(string localName, string namespaceURI) { return default(bool); }
    public virtual bool MoveToChild(string localName, string namespaceURI) { return default(bool); }
    public virtual bool MoveToChild(System.Xml.XPath.XPathNodeType type) { return default(bool); }
    public virtual bool MoveToFirst() { return default(bool); }
    public abstract bool MoveToFirstAttribute();
    public abstract bool MoveToFirstChild();
    public bool MoveToFirstNamespace() { return default(bool); }
    public abstract bool MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope namespaceScope);
    public virtual bool MoveToFollowing(string localName, string namespaceURI) { return default(bool); }
    public virtual bool MoveToFollowing(string localName, string namespaceURI, System.Xml.XPath.XPathNavigator end) { return default(bool); }
    public virtual bool MoveToFollowing(System.Xml.XPath.XPathNodeType type) { return default(bool); }
    public virtual bool MoveToFollowing(System.Xml.XPath.XPathNodeType type, System.Xml.XPath.XPathNavigator end) { return default(bool); }
    public abstract bool MoveToId(string id);
    public virtual bool MoveToNamespace(string name) { return default(bool); }
    public abstract bool MoveToNext();
    public virtual bool MoveToNext(string localName, string namespaceURI) { return default(bool); }
    public virtual bool MoveToNext(System.Xml.XPath.XPathNodeType type) { return default(bool); }
    public abstract bool MoveToNextAttribute();
    public bool MoveToNextNamespace() { return default(bool); }
    public abstract bool MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope namespaceScope);
    public abstract bool MoveToParent();
    public abstract bool MoveToPrevious();
    public virtual void MoveToRoot() { }
    public virtual System.Xml.XmlWriter PrependChild() { return default(System.Xml.XmlWriter); }
    public virtual void PrependChild(string newChild) { }
    public virtual void PrependChild(System.Xml.XmlReader newChild) { }
    public virtual void PrependChild(System.Xml.XPath.XPathNavigator newChild) { }
    public virtual void PrependChildElement(string prefix, string localName, string namespaceURI, string value) { }
    public virtual System.Xml.XmlReader ReadSubtree() { return default(System.Xml.XmlReader); }
    public virtual System.Xml.XmlWriter ReplaceRange(System.Xml.XPath.XPathNavigator lastSiblingToReplace) { return default(System.Xml.XmlWriter); }
    public virtual void ReplaceSelf(string newNode) { }
    public virtual void ReplaceSelf(System.Xml.XmlReader newNode) { }
    public virtual void ReplaceSelf(System.Xml.XPath.XPathNavigator newNode) { }
    public virtual System.Xml.XPath.XPathNodeIterator Select(string xpath) { return default(System.Xml.XPath.XPathNodeIterator); }
    public virtual System.Xml.XPath.XPathNodeIterator Select(string xpath, System.Xml.IXmlNamespaceResolver resolver) { return default(System.Xml.XPath.XPathNodeIterator); }
    public virtual System.Xml.XPath.XPathNodeIterator Select(System.Xml.XPath.XPathExpression expr) { return default(System.Xml.XPath.XPathNodeIterator); }
    public virtual System.Xml.XPath.XPathNodeIterator SelectAncestors(string name, string namespaceURI, bool matchSelf) { return default(System.Xml.XPath.XPathNodeIterator); }
    public virtual System.Xml.XPath.XPathNodeIterator SelectAncestors(System.Xml.XPath.XPathNodeType type, bool matchSelf) { return default(System.Xml.XPath.XPathNodeIterator); }
    public virtual System.Xml.XPath.XPathNodeIterator SelectChildren(string name, string namespaceURI) { return default(System.Xml.XPath.XPathNodeIterator); }
    public virtual System.Xml.XPath.XPathNodeIterator SelectChildren(System.Xml.XPath.XPathNodeType type) { return default(System.Xml.XPath.XPathNodeIterator); }
    public virtual System.Xml.XPath.XPathNodeIterator SelectDescendants(string name, string namespaceURI, bool matchSelf) { return default(System.Xml.XPath.XPathNodeIterator); }
    public virtual System.Xml.XPath.XPathNodeIterator SelectDescendants(System.Xml.XPath.XPathNodeType type, bool matchSelf) { return default(System.Xml.XPath.XPathNodeIterator); }
    public virtual System.Xml.XPath.XPathNavigator SelectSingleNode(string xpath) { return default(System.Xml.XPath.XPathNavigator); }
    public virtual System.Xml.XPath.XPathNavigator SelectSingleNode(string xpath, System.Xml.IXmlNamespaceResolver resolver) { return default(System.Xml.XPath.XPathNavigator); }
    public virtual System.Xml.XPath.XPathNavigator SelectSingleNode(System.Xml.XPath.XPathExpression expression) { return default(System.Xml.XPath.XPathNavigator); }
    public virtual void SetTypedValue(object typedValue) { }
    public virtual void SetValue(string value) { }
    public override string ToString() { return default(string); }
    public override object ValueAs(System.Type returnType, System.Xml.IXmlNamespaceResolver nsResolver) { return default(object); }
    public virtual void WriteSubtree(System.Xml.XmlWriter writer) { }
  }
  public abstract partial class XPathNodeIterator : System.Collections.IEnumerable {
    protected XPathNodeIterator() { }
    public virtual int Count { get { return default(int); } }
    public abstract System.Xml.XPath.XPathNavigator Current { get; }
    public abstract int CurrentPosition { get; }
    public abstract System.Xml.XPath.XPathNodeIterator Clone();
    public virtual System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public abstract bool MoveNext();
  }
  public enum XPathNodeType {
    All = 9,
    Attribute = 2,
    Comment = 8,
    Element = 1,
    Namespace = 3,
    ProcessingInstruction = 7,
    Root = 0,
    SignificantWhitespace = 5,
    Text = 4,
    Whitespace = 6,
  }
  public enum XPathResultType {
    Any = 5,
    Boolean = 2,
    Error = 6,
    Navigator = 1,
    NodeSet = 3,
    Number = 0,
    String = 1,
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Xml.XPath.XDocument")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Xml.XPath.XDocument")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Xml.XPath.XDocument")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Xml.XPath {
  public static partial class Extensions {
    public static System.Xml.XPath.XPathNavigator CreateNavigator(this System.Xml.Linq.XNode node) { return default(System.Xml.XPath.XPathNavigator); }
    public static System.Xml.XPath.XPathNavigator CreateNavigator(this System.Xml.Linq.XNode node, System.Xml.XmlNameTable nameTable) { return default(System.Xml.XPath.XPathNavigator); }
    public static object XPathEvaluate(this System.Xml.Linq.XNode node, string expression) { return default(object); }
    public static object XPathEvaluate(this System.Xml.Linq.XNode node, string expression, System.Xml.IXmlNamespaceResolver resolver) { return default(object); }
    public static System.Xml.Linq.XElement XPathSelectElement(this System.Xml.Linq.XNode node, string expression) { return default(System.Xml.Linq.XElement); }
    public static System.Xml.Linq.XElement XPathSelectElement(this System.Xml.Linq.XNode node, string expression, System.Xml.IXmlNamespaceResolver resolver) { return default(System.Xml.Linq.XElement); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> XPathSelectElements(this System.Xml.Linq.XNode node, string expression) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> XPathSelectElements(this System.Xml.Linq.XNode node, string expression, System.Xml.IXmlNamespaceResolver resolver) { return default(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>); }
  }
  public static partial class XDocumentExtensions {
    public static System.Xml.XPath.IXPathNavigable ToXPathNavigable(this System.Xml.Linq.XNode node) { return default(System.Xml.XPath.IXPathNavigable); }
  }
}
[assembly:System.CLSCompliantAttribute(true)]
[assembly:System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute.DebuggingModes)(2))]
[assembly:System.Reflection.AssemblyCompanyAttribute("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyCopyrightAttribute("© Microsoft Corporation.  All rights reserved.")]
[assembly:System.Reflection.AssemblyDefaultAliasAttribute("System.Xml.XPath.XmlDocument")]
[assembly:System.Reflection.AssemblyDescriptionAttribute("System.Xml.XPath.XmlDocument")]
[assembly:System.Reflection.AssemblyFileVersionAttribute("4.6.24207.00")]
[assembly:System.Reflection.AssemblyInformationalVersionAttribute("4.6.24207.00. Commit Hash: N/A")]
[assembly:System.Reflection.AssemblyMetadataAttribute(".NETFrameworkAssembly", "")]
[assembly:System.Reflection.AssemblyMetadataAttribute("Serviceable", "True")]
[assembly:System.Reflection.AssemblyProductAttribute("Microsoft® .NET Framework")]
[assembly:System.Reflection.AssemblyTitleAttribute("System.Xml.XPath.XmlDocument")]
[assembly:System.Runtime.CompilerServices.CompilationRelaxationsAttribute(8)]
[assembly:System.Runtime.CompilerServices.ReferenceAssemblyAttribute]
[assembly:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows=true)]
[assembly:System.Security.AllowPartiallyTrustedCallersAttribute]
namespace System.Xml {
  public static partial class XmlDocumentXPathExtensions {
    public static System.Xml.XPath.XPathNavigator CreateNavigator(this System.Xml.XmlDocument document) { return default(System.Xml.XPath.XPathNavigator); }
    public static System.Xml.XPath.XPathNavigator CreateNavigator(this System.Xml.XmlDocument document, System.Xml.XmlNode node) { return default(System.Xml.XPath.XPathNavigator); }
    public static System.Xml.XPath.XPathNavigator CreateNavigator(this System.Xml.XmlNode node) { return default(System.Xml.XPath.XPathNavigator); }
    public static System.Xml.XmlNodeList SelectNodes(this System.Xml.XmlNode node, string xpath) { return default(System.Xml.XmlNodeList); }
    public static System.Xml.XmlNodeList SelectNodes(this System.Xml.XmlNode node, string xpath, System.Xml.XmlNamespaceManager nsmgr) { return default(System.Xml.XmlNodeList); }
    public static System.Xml.XmlNode SelectSingleNode(this System.Xml.XmlNode node, string xpath) { return default(System.Xml.XmlNode); }
    public static System.Xml.XmlNode SelectSingleNode(this System.Xml.XmlNode node, string xpath, System.Xml.XmlNamespaceManager nsmgr) { return default(System.Xml.XmlNode); }
    public static System.Xml.XPath.IXPathNavigable ToXPathNavigable(this System.Xml.XmlNode node) { return default(System.Xml.XPath.IXPathNavigable); }
  }
}
