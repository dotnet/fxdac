<report>
  <REMOVED>
    <item text="Removed Activator.GetIDsOfNames(System.Guid, System.IntPtr, uint, uint, System.IntPtr)"/>
    <item text="Removed Activator.GetTypeInfo(uint, uint, System.IntPtr)"/>
    <item text="Removed Activator.GetTypeInfoCount(uint)"/>
    <item text="Removed Activator.Invoke(uint, System.Guid, uint, short, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr)"/>
    <item text="Removed Activator.CreateInstance(System.AppDomain, string, string)"/>
    <item text="Removed Activator.CreateInstance(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstance(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string)"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstance(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstance(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string)"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstance(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string)"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string)"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(System.AppDomain, string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateComInstanceFrom(string, string)"/>
    <item text="Removed Activator.CreateComInstanceFrom(string, string, byte[], System.Configuration.Assemblies.AssemblyHashAlgorithm)"/>
    <item text="Removed Activator.CreateInstance(System.ActivationContext)"/>
    <item text="Removed Activator.CreateInstance(System.ActivationContext, string[])"/>
    <item text="Removed Activator.CreateInstance(string, string)"/>
    <item text="Removed Activator.CreateInstance(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstance(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstance(string, string, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, object[])"/>
    <item text="Removed Activator.CreateComInstanceFrom(string, string, byte[], System.Configuration.Assemblies.AssemblyHashAlgorithm)"/>
    <item text="Removed Activator.CreateInstance(System.ActivationContext)"/>
    <item text="Removed Activator.CreateInstance(System.ActivationContext, string[])"/>
    <item text="Removed Activator.CreateInstance(string, string)"/>
    <item text="Removed Activator.CreateInstance(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstance(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstance(string, string, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, object[])"/>
    <item text="Removed Activator.CreateInstance(System.ActivationContext)"/>
    <item text="Removed Activator.CreateInstance(System.ActivationContext, string[])"/>
    <item text="Removed Activator.CreateInstance(string, string)"/>
    <item text="Removed Activator.CreateInstance(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstance(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstance(string, string, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, object[])"/>
    <item text="Removed Activator.CreateInstance(System.ActivationContext, string[])"/>
    <item text="Removed Activator.CreateInstance(string, string)"/>
    <item text="Removed Activator.CreateInstance(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstance(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstance(string, string, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, object[])"/>
    <item text="Removed Activator.CreateInstance(string, string)"/>
    <item text="Removed Activator.CreateInstance(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstance(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstance(string, string, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, object[])"/>
    <item text="Removed Activator.CreateInstance(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstance(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstance(string, string, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, object[])"/>
    <item text="Removed Activator.CreateInstance(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstance(string, string, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, object[])"/>
    <item text="Removed Activator.CreateInstance(string, string, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, bool, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo, object[], System.Security.Policy.Evidence)"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, object[])"/>
    <item text="Removed Activator.CreateInstanceFrom(string, string, object[])"/>
    <item text="Removed Type.GetIDsOfNames(System.Guid, System.IntPtr, uint, uint, System.IntPtr)"/>
    <item text="Removed Type.GetTypeInfo(uint, uint, System.IntPtr)"/>
    <item text="Removed Type.GetTypeInfoCount(uint)"/>
    <item text="Removed Type.Invoke(uint, System.Guid, uint, short, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr)"/>
    <item text="Removed Assembly.Load(byte[], byte[], System.Security.SecurityContextSource)"/>
    <item text="Removed MemberInfo.GetIDsOfNames(System.Guid, System.IntPtr, uint, uint, System.IntPtr)"/>
    <item text="Removed MemberInfo.GetType()"/>
    <item text="Removed MemberInfo.GetTypeInfo(uint, uint, System.IntPtr)"/>
    <item text="Removed MemberInfo.GetTypeInfoCount(uint)"/>
    <item text="Removed MemberInfo.Invoke(uint, System.Guid, uint, short, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr)"/>
    <item text="Removed MethodBase.IsAbstract"/>
    <item text="Removed MethodBase.IsAssembly"/>
    <item text="Removed MethodBase.IsConstructor"/>
    <item text="Removed MethodBase.IsFamily"/>
    <item text="Removed MethodBase.IsFamilyAndAssembly"/>
    <item text="Removed MethodBase.IsFamilyOrAssembly"/>
    <item text="Removed MethodBase.IsFinal"/>
    <item text="Removed MethodBase.IsHideBySig"/>
    <item text="Removed MethodBase.IsPrivate"/>
    <item text="Removed MethodBase.IsPublic"/>
    <item text="Removed MethodBase.IsSpecialName"/>
    <item text="Removed MethodBase.IsStatic"/>
    <item text="Removed MethodBase.IsVirtual"/>
    <item text="Removed MethodBase.GetIDsOfNames(System.Guid, System.IntPtr, uint, uint, System.IntPtr)"/>
    <item text="Removed MethodBase.GetType()"/>
    <item text="Removed MethodBase.GetTypeInfo(uint, uint, System.IntPtr)"/>
    <item text="Removed MethodBase.GetTypeInfoCount(uint)"/>
    <item text="Removed MethodBase.Invoke(uint, System.Guid, uint, short, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr)"/>
    <item text="Removed Module.GetSignerCertificate()"/>
    <item text="Removed SecurityException.ctor(string, object, object, System.Reflection.MethodInfo, object, System.Security.IPermission)"/>
    <item text="Removed SecurityException.FirstPermissionThatFailed"/>
    <item text="Removed SecurityException.FirstPermissionThatFailed"/>
    <item text="Removed SecurityException.Action"/>
    <item text="Removed SecurityException.Zone"/>
    <item text="Removed Thread.GetDomain()"/>
    <item text="Removed Thread.CurrentContext"/>
  </REMOVED>
  <TYPES_NOT_IN_ANY_ASSEMBLY total="15" description="types that are not in specification files">
    <item text="Mono.Runtime"/>
    <item text="System.ArgIterator"/>
    <item text="System.Runtime.InteropServices._Assembly"/>
    <item text="System.Runtime.InteropServices._AssemblyName"/>
    <item text="System.Runtime.InteropServices._ConstructorInfo"/>
    <item text="System.Runtime.InteropServices._EventInfo"/>
    <item text="System.Runtime.InteropServices._Exception"/>
    <item text="System.Runtime.InteropServices._FieldInfo"/>
    <item text="System.Runtime.InteropServices._MemberInfo"/>
    <item text="System.Runtime.InteropServices._MethodBase"/>
    <item text="System.Runtime.InteropServices._MethodInfo"/>
    <item text="System.Runtime.InteropServices._Module"/>
    <item text="System.Runtime.InteropServices._ParameterInfo"/>
    <item text="System.Runtime.InteropServices._PropertyInfo"/>
    <item text="System.Runtime.InteropServices._Type"/>
  </TYPES_NOT_IN_ANY_ASSEMBLY>
  <ORPHANED_TYPES description="Orphaned types are types in the specifications that don't exist in master source.">
    <item text="T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable"/>
    <item text="T:System.Runtime.Remoting.System.Runtime.Remoting.Activation"/>
    <item text="T:System.Runtime.Remoting.IActivator"/>
    <item text="T:System.Runtime.Remoting.IConstructionCallMessage"/>
    <item text="T:System.Runtime.Remoting.IConstructionReturnMessage"/>
    <item text="T:System.Runtime.Remoting.UrlAttribute"/>
    <item text="T:System.IEquatable"/>
    <item text="T:System.Func"/>
    <item text="T:System.Runtime.ConstrainedExecution"/>
    <item text="T:System.ISerializable"/>
    <item text="T:System.Runtime.CompilerServices.TypeDependencyAttribute"/>
    <item text="T:System.Runtime.ForceTokenStabilizationAttribute"/>
    <item text="T:System.FormattableString"/>
    <item text="T:System.Lazy`2"/>
    <item text="T:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute"/>
    <item text="T:System.Runtime.CompilerServices.FormattableStringFactory"/>
    <item text="T:System.Security.Policy"/>
    <item text="T:System.Security.Principal"/>
    <item text="T:System.Security.DynamicSecurityMethodAttribute"/>
    <item text="T:System.Xml.Serialization.XmlIgnoreAttribute"/>
  </ORPHANED_TYPES>
</report>
